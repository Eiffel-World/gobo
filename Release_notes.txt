HACT 2.0 (Halstenbach)

    . Make sure that sure that you have the CL1 patch release
      installed.

ISE 4.2F (ISE Eiffel)

    . Input routines such as `read_character' from class CONSOLE do not
      work as expected under Windows. When one writes something like:

            from
                    !! a_string.make
                    io.input.read_character
            until
                    io.input.last_character = 'a'
            loop
                    a_string.append_character (io.input.last_character)
                    io.input.read_character
            end

      and then enters the following input on the keyboard:

            hello
            world
            letter a
            skipped
            a

      one gets the following characters in `a_string':

            "hwls"

      instead of:

            "hello%Nworld%Nletter "

      This is because of a bug in `read_character' which reads only the first
      character and discards the rest of the line.

      This bug prevents some of the examples using IO input (such as the
      calculator examples) from working.

SE -0.80 (SmallEiffel)

    . Although this is perfectly correct Eiffel, SmallEiffel complains about
      Eiffel identifiers containing upper-case letters. There is a lot of
      these identifiers automatically generated by `gelex' and `geyacc'. In
      order to avoid being overwhelmed by zillions of unjustified warning
      messages, please use the option -no_warning.

VE 2.5 (Visual Eiffel)

    . Redirection of standard input doesn't work properly: characters are
      echoed on the screen instead of consuming them silently and the end-
      of-file is not detected by `read_stream'. This may cause some troube
      when redirecting standard input to programs generated by `gelex'.
      To work around this problem, make these programs read directly from
      physical files instead of standard input.

      Following is a report demonstrating the standard input redirection
      problems described above. Here is a small program:

        class TOTO

        creation

            make

        feature

            make is
                local
                    f: FILE
                do
                    f := io.input
                    f.read_stream (20)
                    print ('#')
                    print (f.last_string)
                    print ('#')
                end

        end -- class TOTO

      When executed as follows:

      c:\> toto.exe < test.txt

      I would expect to see on the screen 20 or less characters
      within '#' signs. (Let's consider that test.txt has no
      newlines in it to simplify, since `read_stream' seems
      to read only one line at a time.) If test.txt has more
      than 20 characters (say: abcdefghijklmnopqrstuvwxyz'EOF'),
      here is what I get:

      abcdefghijklmnopqrst
      #abcdefghijklmnopqrst#

      Since the standard input is redirected, the first line
      which has been echoed when reading the file should not
      appear in the screen. Characters should be echoed only
      when the text is entered from the keyboard.

      Now, if test.txt has less than 20 characters (say:
      abcdef'EOF'), here is what I get:

      abcdef
      #abcdef              #

      We still have the same problem as above, but you can also
      notice that the EOF has not been detected: `last_string'
      has been padded with space characters upto 20 characters.

