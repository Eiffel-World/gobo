<?xml version="1.0"?>

<!--
	description:

		"Description of the scientific format"

	library: "Gobo Eiffel Formatter"
	copyright: "Copyright (c) 2004, Berend de Boer and others"
	license: "Eiffel Forum License v2 (see forum.txt)"
	date: "$Date$"
	revision: "$Revision$"

-->

<chapter id="scientific_format">
	<title>Scientific Format</title>

  <para>
    This format specification, which consists of optional and required
    fields, has the following form:

  </para>

    <synopsis>
      ?[flags] [minimum width] [.precision] typechar
    </synopsis>

    <para>
      Each field of the format specification is a single character or
      a number signifying a particular format option. The simplest
      format specification contains only the default escape character
      and a typechar (for example, "?s"). To print a default escape
      character, write it twice (e.g. "??").
    </para>

    <para>
      The optional fields, which appear before the type character,
      control other aspects of the formatting, as follows.
    </para>

    <sect1 id="typechar">
      <title>Type character</title>
      <para>
        Required character that determines whether the associated
        argument is interpreted as a character, a string, or a number.
      </para>

      <para>
        Available in class <classname>SCIENTIFIC_FORMAT</classname>
        typechars are the following:
      </para>

      <table>
        <title>Recognized typechar overview</title>
        <tgroup cols="3">
          <thead>
            <row>
              <entry>Typechar</entry>
              <entry>Class</entry>
              <entry>Description</entry>
            </row>
          </thead>
          <tbody>
            <row>
              <entry>c</entry>
              <entry>CHARACTER</entry>
              <entry>Single character.</entry>
            </row>
            <row>
              <entry>b</entry>
              <entry>BOOLEAN</entry>
              <entry>"true" or "false" strings.</entry>
            </row>
            <row>
              <entry>B</entry>
              <entry>BOOLEAN</entry>
              <entry>"True" or "False" strings.</entry>
            </row>
            <row>
              <entry>d</entry>
              <entry>INTEGER</entry>
              <entry>Signed decimal integer.</entry>
            </row>
            <row>
              <entry>e</entry>
              <entry>DOUBLE</entry>
              <entry>Signed value having the form "[-]d.dddd e
              [sign]ddd" where d is a single decimal digit, dddd is
              one or more decimal digits, ddd is exactly three decimal
              digits, and sign is '+' or '-'.</entry>
            </row>
            <row>
              <entry>E</entry>
              <entry>DOUBLE</entry>
              <entry>As 'e', but using the uppercase character 'E'.</entry>
            </row>
            <row>
              <entry>f</entry>
              <entry>DOUBLE</entry>
              <entry>Signed value having the form "[-]dddd.dddd", where
              "dddd" is one or more decimal digits. The number of digits
              before the decimal point depends on the magnitude of the
              number, and the number of digits after the decimal point
              depends on the requested precision.</entry>
            </row>
            <row>
              <entry>g</entry>
              <entry>DOUBLE</entry>
              <entry>Signed value printed in 'f' or 'e' format, whichever
              is more compact for the given value and precision. The e
              format is used only when the exponent of the value is
              less than -4 or greater than or equal to the precision
              argument. Trailing zeros are truncated, and the decimal
              point appears only if one or more digits follow
              it.</entry>
            </row>
            <row>
              <entry>G</entry>
              <entry>DOUBLE</entry>
              <entry>As 'g', but using the 'E' typechar instead of 'e'.</entry>
            </row>
            <row>
              <entry>i</entry>
              <entry>INTEGER</entry>
              <entry>Signed decimal integer.</entry>
            </row>
            <row>
              <entry>o</entry>
              <entry>INTEGER</entry>
              <entry>Unsigned octal integer.</entry>
            </row>
            <row>
              <entry>p</entry>
              <entry>POINTER</entry>
              <entry>Hexadecimal pointer output.</entry>
            </row>
            <row>
              <entry>s</entry>
              <entry>STRING</entry>
              <entry>Character string; Characters are printed up to
              the end of string or until the precision value is
              reached.</entry>
            </row>
            <row>
              <entry>u</entry>
              <entry>INTEGER</entry>
              <entry>Unsigned decimal integer.</entry>
            </row>
            <row>
              <entry>x</entry>
              <entry>INTEGER</entry>
              <entry>Unsigned hexadecimal integer, using "abcdef".</entry>
            </row>
            <row>
              <entry>X</entry>
              <entry>INTEGER</entry>
              <entry>Unsigned hexadecimal integer, using "ABCDEF".</entry>
            </row>
          </tbody>
        </tgroup>
      </table>

      <para>
        Note that this list can be extended.  Note also that here only
        letters between a..z and A..Z are legal. Other symbols are
        used for picture formats (see below).
      </para>

    </sect1>


    <sect1 id="flags">
      <title>Flags</title>
      <para>
        Optional character or characters that control justification of
        output and printing of signs, blanks. More than one flag can
        appear in a format specification, but they must be compatible
        to each other.
      </para>

      <table>
        <title>flags overview</title>
        <tgroup cols="3">
          <thead>
            <row>
              <entry>Flag</entry>
              <entry>Meaning</entry>
              <entry>Default</entry>
            </row>
          </thead>
          <tbody>
            <row>
              <entry>^&#x2003;&#x2003;</entry> <!-- set with of col -->
              <entry>Center result within the given field width</entry>
              <entry>Right align</entry>
            </row>
            <row>
              <entry>- </entry>
              <entry>Left align the result within the given field width.</entry>
              <entry>Right align</entry>
            </row>
            <row>
              <entry>+</entry>
              <entry>Prefix the output value with a sign (+ or -) if
              the out- put value is of a signed type.Prefix the output
              value with a sign (+ or -) if the out- put value is of a
              signed type.</entry>
              <entry>Sign appears only for negative signed values
              (-).</entry>
            </row>
            <row>
              <entry>0 </entry>
              <entry>Zeros are added until the minimum width is reached.</entry>
              <entry>No padding.</entry>
            </row>
            <row>
              <entry>'_&#x2003;</entry>
              <entry>Prefix the output value with a blank (the
              underscore left) if the output value is signed and
              positive.</entry>
              <entry>No blank appears.</entry>
            </row>

          </tbody>
        </tgroup>
      </table>

      <para>
        Note: flags combination ('&#x2003;' after '+') and ('0' with
        '-', '0' with '^', and '-' with '^') are incorrect.
      </para>

    </sect1>


    <sect1 id="precision">
      <title>Minimum width</title>

      <para>
        The width is an optional number that specifies the minimum
        number of characters output.
      </para>

      <para>
        The width argument is a nonnegative decimal integer
        controlling the minimum number of characters printed. If the
        number of characters in the output value is less than the
        specified width, blanks are added to the left or the right of
        the values - depending on whether the - flag (for left
        alignment) is specified - until the minimum width is
        reached. If width is prefixed with 0, zeros are added until
        the minimum width is reached (not useful for left-aligned
        numbers).
      </para>

      <para>
        The width specification never causes a value to be
        truncated. If the number of characters in the output value is
        greater than the specified width, or if width is not given,
        all characters of the value are printed (subject to the
        precision specification).
      </para>

      <para>
        If the width specification is an asterisk (*), an int argument
        from the argument list supplies the value. The width argument
        must precede the value being formatted in the argument list. A
        nonexistent or small field width does not cause the truncation
        of a field; if the result of a conversion is wider than the
        field width, the field expands to contain the conversion
        result.
      </para>

    </sect1>


    <sect1 id="precision">
      <title>Precision</title>
      <para>
        The third optional field of the format specification is the
        precision specification. It specifies a nonnegative decimal
        integer, preceded by a period '.', which specifies the number
        of characters to be printed, the number of decimal places, or
        the number of significant digits (see table below). Unlike the
        width specification, the precision specification can cause
        either truncation of the output value or rounding of a
        floating-point value. If precision is specified as 0 and the
        value to be converted is 0, the result is no characters
        output, as shown below:
      </para>

      <programlisting>
        print (format ("!.0d", &lt;&lt;0>>))	-- No characters output
      </programlisting>

      <para>
        If the precision specification is an asterisk (*), an int
        argument from the argument list supplies the value. The
        precision argument must precede the value being formatted in
        the argument list.
      </para>

      <para>
        The table below details how precision affects type:
      </para>

      <table>
        <title>How precision affects type</title>
        <tgroup cols="3">
          <thead>
            <row>
              <entry>Type</entry>
              <entry>Meaning</entry>
              <entry>Default</entry>
            </row>
          </thead>
          <tbody>
            <row>
              <entry>c</entry>
              <entry>The precision has no effect.</entry>
              <entry>Character is printed.</entry>
            </row>
            <row>
              <entry>b, B</entry>
              <entry>The precision has no effect.</entry>
              <entry>"[tT]rue"/"[fF]alse" is printed.</entry>
            </row>
            <row>
              <entry>d, i, u, o, x</entry>
              <entry>The precision specifies the minimum number of
              digits to be printed. If the number of digits in the
              argument is less than precision, the output value is
              padded on the left with zeros.</entry>
              <entry>The value is not truncated when the number of
              digits exceeds precision. Default precision is
              1.</entry>
            </row>
            <row>
              <entry>e</entry>
              <entry>The precision specifies the number of digits to
              be printed after the decimal point. The last printed
              digit is rounded.</entry>
              <entry>Default precision is 6; if precision is 0 or the
              period '.' appears without a number following it, no
              decimal point is printed.</entry>
            </row>
            <row>
              <entry>f</entry>
              <entry>The precision value specifies the number of
              digits after the decimal point. If a decimal point
              appears, at least one digit appears before it. The value
              is rounded to the appropriate number of digits.</entry>
              <entry>Default precision is 6; if precision is 0 or the
              period '.' appears without a number following it, no
              decimal point is printed.</entry>
            </row>
            <row>
              <entry>g</entry>
              <entry>The precision specifies the maximum number of
              significant digits printed.</entry>
              <entry>Six significant digits are printed, with any
              trailing zeros truncated.</entry>
            </row>
            <row>
              <entry>s</entry>
              <entry>The precision specifies the maximum number of
              characters to be printed. Characters in excess of
              precision are not printed.</entry>
              <entry>Characters are printed until end of
              string.</entry>
            </row>
<!--             <row> -->
<!--               <entry>a, t</entry> -->
<!--               <entry>The precision specifies how many characters of -->
<!--               time/date printed. e.g. -->
<!--               <programlisting> -->
<!-- "!.0a", "!.1a"            print "" -->
<!-- "!.2a", "!.3a","!.4a" print "13" -->
<!-- "!.5a", "!.6a","!.7a" print "13/01" -->
<!-- "!.8a", "!.9a",..        print "13/01/95" -->
<!--               </programlisting> -->
<!--               </entry> -->
<!--               <entry>Full 8-character string. (e.g. "13/01/95")</entry> -->
<!--             </row> -->
          </tbody>
        </tgroup>
      </table>

    </sect1>

</chapter>

<!-- LocalWords: typechar tgroup thead tbody abcdef
-->
