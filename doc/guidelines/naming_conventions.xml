<?xml version="1.0"?>

<!--
	description:

		"Gobo Eiffel Developer Guidelines Naming Conventions"

	library: "Gobo Eiffel Developer Guidelines"
	copyright: "Copyright (c) 2004, Eric Bezault and others"
	license: "Eiffel Forum License v2 (see forum.txt)"
	date: "$Date$"
	revision: "$Revision$"

-->

<chapter id="naming_conventions">
	<title>Naming Conventions</title>

  <para>
    All names appearing in the software, comments, directory names,
    documentations, etc. should be written in American English.
  </para>

  <sect1>
    <title>Class Names</title>

    <para>
      In order to avoid class name clashes between different
      libraries, some Eiffel compilers support class renaming in the
      Ace file or equivalent. But some don't. Therefore the name of
      the classes should systematically be prefixed with a two-letter
      library code followed by an underscore. For example the classes
      from the Gobo Eiffel Structure Library have been prefixed by DS
      (which stands for Data Structures), as in
      <classname>DS_CONTAINER</classname>, whereas classes from the
      Gobo Eiffel Lexical Library have been prefixed by LX, as in
      <classname>LX_SCANNER</classname>.  Some libraries may use
      several prefixes, provided that they are not already used by
      other libraries. The list of already used prefixes per library
      will be available on-line.
    </para>

    <para>
      Class names should usually be singular nouns, such as
      <classname>DS_STACK</classname>.  If the noun is qualified,
      words should be separated by underscores, as in
      <classname>DS_LINKED_LIST</classname>. Class names in Eiffel are
      written in upper-case letters and it is considered bad style to
      use letter-case difference to concatenate words such as
      LinkedList for example. The name of deferred classes can also be
      adjective when they describe a property, such as
      <classname>DS_SORTABLE</classname>. It is suspicious to have
      verbs as class names since classes should describe objects
      rather that actions.
    </para>

    <para>
      Classes containing only constants can have the suffix _CONSTANTS
      and those containing only facility routines can have the suffix
      _ROUTINES. Some classes are used as a means to share objects
      using once functions. These classes can have the word SHARED
      just after the prefix of the class. For example the class used
      to share a singleton object of type
      <classname>KL_ARGUMENTS</classname> is called
      <classname>KL_SHARED_ARGUMENTS</classname>.  An alternative is
      to use IMPORTED instead of SHARED when the purpose of the class
      is not to give access to an object but rather to routines or
      constants without the inconvenience of polluting the feature
      name space with mixin classes. Have a look at
      <classname>KL_IMPORTED_STRING_ROUTINES</classname> as an
      example.
    </para>

    <para>
      In Eiffel it is considered bad practice to use abbreviations in
      class and feature names. However this can be accepted when the
      abbreviation is commonly used in the domain of expertise such as
      <classname>LX_DFA</classname> for example, which stands for
      Deterministic Finite state Automaton and is used for compiling
      regular expressions.
    </para>

  </sect1>

  <sect1>
    <title>Filenames</title>

    <para>
      Visual Eiffel allows to have several classes in the same file,
      but the other Eiffel compilers don't. So each file should
      contain only one class.
    </para>

    <para>
      Likewise, SmartEiffel expects by default to have a one-to-one
      relation between the name of the class and the name of the
      enclosing file. Therefore the name of the file should be the
      name of the class followed by the extension
      <filename>.e</filename>, all in lower case. For example file
      <filename>ds_list.e</filename> contains class
      <classname>DS_LIST</classname>.
    </para>

  </sect1>

  <sect1>
    <title>Cluster Names</title>

    <para>
      Library classes should be organized in clusters in
      <filename>$GOBO/ library/[library-name]</filename>. Likewise the
      source code of tools should be put in
      <filename>$GOBO/src/[tool-name]</filename>.
    </para>

    <para>
      Cluster names should be in lower-case and words should be
      separated by underscores. Abbreviations should be avoided unless
      well accepted and understood in the domain of expertise of the
      underlying library. Exceptions to this rule are
      <filename>spec</filename> for Eiffel compiler dependent clusters
      and <filename>impl</filename> which stands for
      "implementation". For the cluster <filename>spec</filename>,
      compiler-dependent classes should have the same name and put
      into the four following clusters:
    </para>

    <itemizedlist>
      <listitem>
        <para><filename>spec/ise</filename>: Implementation for ISE
        Eiffel</para>
      </listitem>
      <listitem>
        <para><filename>spec/se</filename>: Implementation for
        SmartEiffel</para>
      </listitem>
      <listitem>
        <para><filename>spec/ve</filename>: Implementation for Visual Eiffel</para>
        </listitem>
    </itemizedlist>

    <para>
      Only one of these clusters will be included in the Ace file,
      loadpath file or ESD file of the application depending on the
      Eiffel compiler used. These clusters can be automatically
      generated with the tool <command>gepp</command> if the different
      implementations are put in a single file whose extension is
      <filename>.ge</filename> instead of the Eiffel extension
      <filename>.e.</filename> I usually find it easier for
      development and maintenance to have these
      <filename>.ge</filename> files.
    </para>

    <para>
      For <filename>impl</filename> cluster, it can be used to provide
      several implementations of a common interface. For example:
    </para>

    <itemizedlist>
      <listitem><para>interface</para></listitem>
      <listitem><para>impl/c</para></listitem>
      <listitem><para>impl/dotnet</para></listitem>
      <listitem><para>impl/eiffel</para></listitem>
      <listitem><para>impl/jvm</para></listitem>
      <listitem><para>impl/posix</para></listitem>
    </itemizedlist>

    <para>
      Here again the names of the classes in the different subclusters
      of <filename>impl</filename> will be the same, and only one of
      these subclusters will be included in the Ace file or equivalent
      in order to provide a concrete implementation of the deferred
      classes in cluster <filename>interface</filename>.
    </para>

    <para>
      Cluster <filename>impl</filename> can also be used with the
      bridge pattern.  In that case the cluster structure will look
      like this:
    </para>

<programlisting>
  foo
  bar
  impl/interface/foo
  impl/interface/bar
  impl/gtk/foo
  impl/gtk/bar
  impl/motif/foo
  impl/motif/bar
</programlisting>

    <para>
      The classes in <filename>gtk</filename> and
      <filename>motif</filename> implement the deferred classes in
      <filename>interface</filename>, and in the Ace file or
      equivalent the clusters with <filename>tk</filename> or with
      <filename>motif</filename> will be included depending on the
      fact that GTK+ or Motif has been chosen to build the graphical
      interface for example.
    </para>

  </sect1>

  <sect1>
    <title>Feature Names</title>

    <para>
      Feature names should be in lower-case and words should be
      separated by underscores. Abbreviations should be avoided unless
      well accepted and understood in the domain of expertise of the
      class. Names of constants can possibly have upper-case letters,
      but in that case please make sure that all calls to this
      constant use the same letter-case in order to be compilable by
      SmartEiffel without requiring the -no_case_sensitive
      command-line option.
    </para>

    <para>
      Names of procedures should be verbs as they describe actions or
      commands. On the other hand names of functions or attributes
      should be nouns, possibly qualified, as they describe entities.
      The names of boolean queries should have an interrogative form
      as in <featurename>is_empty</featurename>,
      <featurename>is_closed</featurename> or
      <featurename>has_error</featurename>. They can also be simple
      adjectives such as <featurename>closable</featurename>, or past
      participles as in <featurename>found</featurename>.
    </para>

    <para>
      Names of creation procedures usually start with
      <featurename>make</featurename> in Eiffel, for example
      <featurename>make</featurename> or
      <featurename>make_from_string</featurename>.
    </para>

    <para>
      Names of factory functions can have the prefix `new_*', as
      in the following example:
    </para>

<programlisting>
_   new_foo (a_string: STRING): FOO is
_   _   _   -- Foo made up fo characters of `a_string'
_   _   _   -- (Create a new objet at each call.)
_   _   require
_   _   _   a_string_not_void: a_string /= Void
_   _   do
_   _   _   !! Result.make_from_string (a_string)
_   _   ensure
_   _   _   new_foo_not_void: Result /= Void
_   _   end
</programlisting>

  </sect1>

  <sect1>
    <title>Feature Category Names</title>

    <para>
      All feature clauses should be equipped with a comment, as in the
      following example:
    </para>

    <programlisting>
feature -- Access
feature {NONE} -- Initialization
    </programlisting>

    <para>
      Here are some examples of feature category names, taken from the
      Gobo Eiffel Structure Library documentation:
    </para>

    <programlisting>
  -- Initialization
       Creation procedures.
  -- Access
       Queries used to get elements or properties
       about the container.
  -- Measurement
       Queries concerning the number of elements
       and size of the container.
  -- Status report
       Queries used to determine general boolean
       properties of the container.
  -- Comparison
       Equality tests between containers.
  -- Duplication
       Features which produce copies of the container.
  -- Setting
       Procedures which change the general properties
       of the container.
  -- Cursor movement
       Procedures that change the cursor position.
  -- Element change
       Commands which add or change items in the
       container.
  -- Removal
       Commands which remove items from the container.
  -- Resizing
       Commands which change the size of the container.
  -- Implementation
       Secret features used for implementation purposes.
    </programlisting>

  </sect1>

</chapter>
