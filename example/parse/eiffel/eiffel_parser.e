indexing

	description:

		"Eiffel parsers"

	author:     "Eric Bezault <ericb@gobosoft.com>"
	copyright:  "Copyright (c) 1999, Eric Bezault and others"
	license:    "Eiffel Forum Freeware License v1 (see forum.txt)"
	date:       "$Date$"
	revision:   "$Revision$"

class EIFFEL_PARSER

inherit

	YY_PARSER_SKELETON [ANY]
		rename
			make as make_parser_skeleton
		redefine
			report_error
		end

	EIFFEL_SCANNER
		rename
			make as make_eiffel_scanner
		end

	KL_SHARED_EXCEPTIONS
	KL_SHARED_ARGUMENTS

creation

	make, execute, benchmark


feature {NONE} -- Implementation

	yy_build_parser_tables is
			-- Build parser tables.
		do
			yytranslate ?= yytranslate_template
			yyr1 ?= yyr1_template
			yyr2 ?= yyr2_template
			yydefact ?= yydefact_template
			yydefgoto ?= yydefgoto_template
			yypact ?= yypact_template
			yypgoto ?= yypgoto_template
			yytable ?= yytable_template
			yycheck ?= yycheck_template
		end

feature {NONE} -- Semantic actions

	yy_do_action (yy_act: INTEGER) is
			-- Execute semantic action.
		do
			inspect yy_act
			else
					-- No action
				yyval := yyval_default
			end
		end

feature {NONE} -- Table templates

	yytranslate_template: ANY is
			-- This is supposed to be "like FIXED_INTEGER_ARRAY_TYPE",
			-- but once functions cannot be declared with anchored types.
		once
			Result := yyfixed_array (<<
			    0,    2,    2,    2,    2,    2,    2,    2,    2,    2,
			    2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
			    2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
			    2,    2,    2,  123,    2,    2,  125,    2,    2,    2,
			  121,  122,  106,  104,  116,  105,  124,  107,    2,    2,
			    2,    2,    2,    2,    2,    2,    2,    2,  115,  114,
			  100,   98,  101,  126,    2,    2,    2,    2,    2,    2,
			    2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
			    2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
			    2,  117,    2,  118,  110,    2,    2,    2,    2,    2,

			    2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
			    2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
			    2,    2,    2,  119,    2,  120,  127,    2,    2,    2,
			    2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
			    2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
			    2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
			    2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
			    2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
			    2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
			    2,    2,    2,    2,    2,    2,    2,    2,    2,    2,

			    2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
			    2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
			    2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
			    2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
			    2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
			    2,    2,    2,    2,    2,    2,    1,    2,    3,    4,
			    5,    6,    7,    8,    9,   10,   11,   12,   13,   14,
			   15,   16,   17,   18,   19,   20,   21,   22,   23,   24,
			   25,   26,   27,   28,   29,   30,   31,   32,   33,   34,
			   35,   36,   37,   38,   39,   40,   41,   42,   43,   44,

			   45,   46,   47,   48,   49,   50,   51,   52,   53,   54,
			   55,   56,   57,   58,   59,   60,   61,   62,   63,   64,
			   65,   66,   67,   68,   69,   70,   71,   72,   73,   74,
			   75,   76,   77,   78,   79,   80,   81,   82,   83,   84,
			   85,   86,   87,   88,   89,   90,   91,   92,   93,   94,
			   95,   96,   97,   99,  102,  103,  108,  109,  111,  112,
			  113>>)
		end

	yyr1_template: ANY is
			-- This is supposed to be "like FIXED_INTEGER_ARRAY_TYPE",
			-- but once functions cannot be declared with anchored types.
		once
			Result := yyfixed_array (<<
			    0,  128,  128,  129,  129,  138,  130,  130,  139,  139,
			  139,  140,  140,  140,  140,  142,  142,  142,  143,  143,
			  145,  145,  141,  141,  131,  147,  147,  147,  147,  132,
			  132,  148,  148,  148,  149,  149,  149,  151,  133,  133,
			  137,  153,  153,  153,  153,  153,  153,  154,  154,  154,
			  154,  154,  155,  155,  156,  156,  156,  156,  156,  157,
			  158,  159,  160,  161,  162,  171,  171,  171,  167,  163,
			  163,  173,  173,  173,  174,  174,  174,  175,  177,  177,
			  178,  178,  178,  176,  180,  180,  179,  179,  179,  169,
			  165,  165,  168,  164,  164,  170,  166,  166,  134,  134,

			  134,  181,  181,  152,  152,  152,  135,  135,  135,  182,
			  183,  183,  183,  184,  184,  184,  185,  187,  190,  190,
			  191,  191,  191,  186,  186,  193,  193,  172,  172,  172,
			  194,  194,  194,  194,  195,  195,  195,  195,  195,  195,
			  195,  195,  195,  195,  195,  195,  195,  195,  195,  195,
			  195,  195,  188,  188,  196,  196,  196,  197,  197,  197,
			  198,  199,  199,  189,  189,  192,  203,  203,  203,  203,
			  207,  207,  202,  202,  201,  201,  201,  204,  204,  204,
			  136,  136,  208,  208,  208,  209,  209,  209,  210,  210,
			  205,  205,  200,  200,  200,  200,  200,  200,  200,  150,

			  213,  214,  214,  215,  215,  215,  206,  206,  206,  216,
			  216,  216,  216,  216,  216,  216,  216,  216,  216,  216,
			  217,  217,  227,  227,  218,  218,  229,  220,  230,  230,
			  221,  232,  232,  231,  231,  231,  222,  233,  233,  233,
			  234,  234,  234,  235,  235,  236,  236,  236,  223,  237,
			  237,  237,  237,  224,  238,  238,  239,  239,  239,  225,
			  219,  219,  219,  219,  219,  219,  219,  219,  219,  219,
			  240,  240,  228,  228,  241,  241,  241,  242,  242,  243,
			  243,  243,  243,  226,  226,  211,  211,  211,  211,  211,
			  211,  211,  211,  211,  211,  211,  211,  211,  211,  211,

			  211,  211,  211,  211,  211,  211,  211,  211,  211,  211,
			  211,  211,  211,  211,  211,  211,  211,  211,  211,  211,
			  211,  211,  211,  211,  211,  244,  244,  244,  244,  244,
			  244,  244,  248,  249,  249,  250,  250,  250,  251,  251,
			  251,  247,  247,  247,  246,  246,  246,  146,  146,  146,
			  146,  146,  146,  245,  245,  212,  212,  212,  252,  252,
			  252,  144,  144>>)
		end

	yyr2_template: ANY is
			-- This is supposed to be "like FIXED_INTEGER_ARRAY_TYPE",
			-- but once functions cannot be declared with anchored types.
		once
			Result := yyfixed_array (<<
			    0,    1,    2,    8,    5,    3,    0,    2,    0,    1,
			    2,    1,    2,    3,    4,    1,    3,    2,    1,    3,
			    1,    1,    1,    2,    3,    0,    1,    1,    1,    0,
			    3,    0,    2,    4,    0,    2,    3,    3,    0,    2,
			    2,    2,    4,    4,    2,    5,    5,    1,    3,    4,
			    3,    4,    0,    1,    1,    1,    1,    1,    1,    6,
			    5,    4,    3,    2,    2,    0,    3,    5,    2,    0,
			    1,    0,    1,    2,    1,    2,    3,    2,    1,    1,
			    0,    1,    3,    3,    0,    1,    0,    1,    3,    2,
			    0,    1,    2,    0,    1,    2,    0,    1,    0,    1,

			    2,    3,    3,    0,    1,    3,    0,    1,    2,    3,
			    0,    1,    2,    1,    2,    3,    2,    3,    0,    2,
			    1,    1,    1,    1,    3,    1,    2,    1,    2,    2,
			    1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
			    1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
			    1,    1,    0,    3,    0,    1,    2,    1,    2,    3,
			    3,    1,    3,    0,    2,    7,    1,    2,    2,    3,
			    0,    2,    0,    2,    0,    2,    3,    0,    2,    3,
			    0,    2,    0,    1,    2,    1,    2,    3,    1,    2,
			    0,    2,    1,    2,    2,    2,    2,    2,    2,    2,

			    1,    0,    3,    0,    1,    3,    0,    1,    2,    1,
			    1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
			    5,    3,    0,    3,    6,    3,    5,    3,    1,    1,
			    7,    0,    2,    0,    4,    5,    5,    0,    4,    5,
			    0,    1,    3,    1,    3,    1,    1,    1,    9,    0,
			    1,    2,    4,    4,    0,    3,    0,    1,    3,    3,
			    1,    3,    3,    5,    2,    4,    5,    7,    5,    7,
			    2,    4,    0,    3,    0,    1,    3,    1,    2,    1,
			    1,    1,    3,    1,    1,    1,    1,    1,    1,    1,
			    3,    1,    1,    1,    1,    1,    1,    3,    3,    2,

			    2,    2,    2,    3,    3,    3,    3,    3,    3,    3,
			    3,    3,    3,    3,    3,    3,    3,    3,    3,    3,
			    4,    4,    3,    2,    4,    2,    2,    2,    4,    4,
			    2,    1,    3,    0,    3,    0,    1,    3,    1,    3,
			    1,    0,    1,    3,    0,    1,    3,    1,    1,    1,
			    1,    1,    1,    1,    1,    1,    2,    2,    1,    2,
			    2,    1,    1>>)
		end

	yydefact_template: ANY is
			-- This is supposed to be "like FIXED_INTEGER_ARRAY_TYPE",
			-- but once functions cannot be declared with anchored types.
		once
			Result := yyfixed_array (<<
			    6,    8,    6,    1,   25,    0,    0,  353,  354,  362,
			  352,  351,  361,  358,  355,  348,    7,    9,   11,   15,
			   20,   18,   21,  349,  347,  350,    2,   28,   27,   26,
			   29,    0,  359,  356,  360,  357,   22,   10,   12,    0,
			   17,   31,   38,    0,   22,    0,   13,   23,   20,   19,
			   16,   34,    0,    0,   98,   24,   14,    0,   32,   30,
			    0,   39,   84,   98,   84,  106,    4,   99,  200,   35,
			  201,   34,   86,   85,  103,  106,    0,   47,   40,   52,
			  103,   84,  180,  100,  107,  103,   36,  203,  199,   33,
			   87,    0,  104,  102,  180,   41,   80,   80,   65,   80,

			   71,   98,   98,   53,   54,   55,   56,   57,   58,   69,
			   93,   90,   96,    0,  101,  110,  182,    0,  108,    0,
			    0,    0,    0,    0,  192,  204,    0,   83,    0,    0,
			    5,    0,    0,  127,   81,   92,   95,   64,    0,   89,
			   68,   72,   74,   80,   98,    0,   50,   98,    0,   48,
			   93,   70,   90,   94,   96,   91,    0,   97,   63,    0,
			  125,  109,  111,  113,  152,  123,    0,    0,    0,    0,
			  344,    0,    0,    0,    0,    0,    0,  272,  288,  289,
			    0,  344,  296,  295,  294,  293,  292,  272,  181,  183,
			  185,  188,  285,  286,  260,  287,  291,  331,    3,   37,

			  194,  195,  196,  193,    0,    0,  198,  197,  202,    0,
			   88,  105,  130,  133,  132,  131,  128,  151,  149,  148,
			  146,  150,  147,  145,  144,  143,  142,  141,  140,  139,
			  138,  137,  136,  135,  134,  129,    0,    0,    0,   73,
			   75,   79,   77,   78,    0,   51,   43,    0,   49,   42,
			   90,   96,    0,   62,  126,  112,  114,  154,    0,  116,
			  163,  333,  330,  272,    0,    0,  345,    0,  323,  301,
			  302,  300,  299,    0,  274,    0,  264,    0,  327,    0,
			  326,  341,    0,  189,  270,  325,  184,  186,    0,    0,
			    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,

			    0,    0,    0,    0,    0,    0,    0,  205,   82,    0,
			   66,   76,   46,   45,   96,    0,   61,  115,  161,    0,
			  155,  157,    0,  124,    0,  118,  335,  332,  290,    0,
			  298,    0,    0,    0,  277,    0,  275,    0,    0,  272,
			  261,  262,  342,    0,  297,  187,  303,  308,  310,  309,
			  307,  306,  305,  304,  316,  315,  314,  313,  312,  311,
			    0,  317,  319,    0,  318,  322,  272,    0,    0,   60,
			  153,  156,  158,    0,    0,  164,   38,  117,  340,    0,
			  338,    0,  336,    0,  328,  272,  329,  346,  222,    0,
			  281,  280,  279,  278,  273,    0,  272,  265,  324,    0,

			  320,  321,  271,   67,   59,  159,  162,  160,  121,  174,
			  120,  119,  122,    0,  334,    0,  263,  266,    0,  226,
			    0,  276,  268,  343,  182,  172,  339,  337,    0,  272,
			  282,    0,  182,  175,  154,    0,  267,  223,  269,  176,
			  173,  206,    0,  206,  166,  177,    0,    0,    0,  219,
			    0,  284,    0,  218,    0,    0,  206,  254,  182,    0,
			  283,  168,  207,  209,  210,  211,  212,  213,  214,  215,
			  216,  217,    0,  170,  167,  182,  190,    0,    0,    0,
			    0,  284,  283,  222,  237,    0,  180,  256,  206,    0,
			  222,  208,  229,  228,    0,    0,  169,  182,  178,  206,

			    0,    0,    0,    0,    0,  225,  240,  231,  206,  249,
			  257,    0,    0,  259,  221,  227,  171,  179,  191,  165,
			  222,    0,    0,  246,  245,  247,    0,  241,  243,  240,
			  206,    0,  233,  250,    0,  255,    0,  253,  220,  222,
			    0,  206,    0,    0,  232,  236,    0,  231,  272,  251,
			    0,  258,  224,  242,  238,  244,  206,    0,    0,    0,
			    0,    0,  239,  206,    0,  230,  252,  206,  234,  206,
			    0,  235,  248,    0,    0>>)
		end

	yydefgoto_template: ANY is
			-- This is supposed to be "like FIXED_INTEGER_ARRAY_TYPE",
			-- but once functions cannot be declared with anchored types.
		once
			Result := yyfixed_array (<<
			    2,    3,    4,   30,   42,   54,   75,   82,  117,   66,
			   76,   16,   17,   37,   18,   19,  263,   21,   22,   31,
			   52,   58,  124,   86,   93,   78,   79,  102,  103,  104,
			  105,  106,  107,  108,  109,  150,  152,  154,  156,  110,
			  153,  155,  157,  137,  134,  140,  141,  142,   73,  242,
			  135,   91,   74,   67,   84,  161,  162,  163,  164,  259,
			  260,  325,  377,  411,  412,  165,  216,  235,  319,  320,
			  321,  322,  125,  425,  435,  445,  476,  500,  461,  496,
			  188,  189,  190,  191,   23,   70,   88,  126,  462,  463,
			  464,  192,  466,  467,  468,  469,  470,  471,  472,  419,

			  284,  193,  494,  547,  531,  507,  526,  527,  528,  534,
			  488,  511,  194,  335,  380,  393,  195,  196,  267,  343,
			  197,  327,  381,  382,   25>>)
		end

	yypact_template: ANY is
			-- This is supposed to be "like FIXED_INTEGER_ARRAY_TYPE",
			-- but once functions cannot be declared with anchored types.
		once
			Result := yyfixed_array (<<
			  477,  764,   24, -32768,  167,  409,  404, -32768, -32768, -32768,
			 -32768, -32768, -32768, -32768, -32768, -32768, -32768, 1354, -32768,  387,
			  399, -32768, -32768, -32768, -32768, -32768, -32768, -32768, -32768, -32768,
			  396,  491, -32768, -32768, -32768, -32768, 1208,  395, -32768,  764,
			  764,  193,  461,  193, -32768, 1096, -32768, -32768, -32768, -32768,
			  387,  484,  275,  495,   36, -32768, -32768,  480, -32768, -32768,
			  193, -32768,  350,    9,  350,   23, -32768, -32768, -32768,  423,
			  384,  484,  193, -32768,  193,   23,  471, -32768, -32768,  280,
			  193,  350,   22, -32768, -32768,  193, -32768,  157, -32768, -32768,
			 -32768,  171, -32768,  377,   22, -32768,  232,  232,  232,  232,

			  350,  347,   15, -32768, -32768, -32768, -32768, -32768, -32768,  463,
			  420,  418,  389,  462,  377,  261, 1053,  460, -32768,    5,
			  480,   83,  480,    8, -32768, -32768,  271, -32768,  193,  193,
			 -32768,  249, 1567, -32768, -32768,  340,  340,  368,  464,  340,
			 -32768,   25, -32768,  372,    9,  454, -32768,    9,  453, -32768,
			  420, -32768,  418, -32768,  389, -32768,  449, -32768, -32768,  232,
			 -32768, -32768,  253, -32768,  -89, -32768,  232,  301, 1053,  157,
			 1053, 1053, 1053, 1053, 1053, 1053,  353,  177,  212,  166,
			  355, 1053, -32768, -32768, -32768, -32768, -32768,  200, -32768,  970,
			 -32768, 1530, -32768, -32768,  282, -32768, -32768, -32768, -32768, -32768,

			 -32768, -32768, -32768, -32768,  467,  466, -32768, -32768, -32768,  157,
			 -32768, -32768, -32768, -32768, -32768, -32768, -32768, -32768, -32768, -32768,
			 -32768, -32768, -32768, -32768, -32768, -32768, -32768, -32768, -32768, -32768,
			 -32768, -32768, -32768, -32768, -32768, -32768,  232,  232,  232,  350,
			 -32768, -32768, -32768,  340,  431, -32768, -32768,  426, -32768, -32768,
			  418,  389,  425, -32768, -32768,  261, -32768,  193,  261, -32768,
			  336,  331, -32768,    3, 1501,  330, 1530,  -82, -32768, -32768,
			 -32768, -32768, -32768,  157,  772,  157,  324,  193, -32768,  193,
			 -32768,  193,   -8, -32768, -32768, -32768, 1053, -32768, 1053, 1053,
			 1053, 1053, 1053, 1053, 1053, 1053, 1053, 1053, 1053, 1053,

			 1053, 1053,  928, 1053,  897, 1053,  193, -32768, -32768,  428,
			 -32768, -32768, -32768, -32768,  389,  415, -32768, -32768, -32768,  319,
			    2, -32768,  281, -32768,  157,  392,  753, -32768,  145,  -41,
			 -32768, 1053,  318,   94, 1530,  161, -32768,  312,  193,  289,
			  282,  282, -32768,  102, -32768, -32768, -32768,  269,  269,  269,
			  269,  269,  356,  356,  254,  254,  254,  254,  254,  254,
			 1053, 1579,  744, 1053,  744, 1565,  289,  232,  406, -32768,
			 -32768,  193, -32768,  193,  157, -32768,  341, -32768,  301,  157,
			 -32768,   87, -32768,  193, -32768,  289, -32768, 1530,  -31, 1053,
			 -32768, -32768, -32768, -32768, -32768,  772,  289,  282, -32768,  193,

			 1579,  744, -32768, -32768, -32768, -32768, -32768, -32768, -32768,  374,
			 -32768, -32768, -32768,  304, -32768,  753,  282,  298,  193, -32768,
			 1472, -32768,  295, -32768,  687,  371,  -41, -32768,  193,  289,
			 -32768,  193, 1053, -32768,  193,  351,  282, -32768,  282, -32768,
			 -32768, 1283,  394, 1283, -32768,  375,  157, 1053,  157, -32768,
			    4,   80,  268, -32768, 1053, 1053, 1283,  274, 1053,   19,
			 1167, 1283, -32768, -32768, -32768, -32768, -32768, -32768, -32768, -32768,
			 -32768, -32768,  288,  369, 1283,  621,  302,  228, 1425,  209,
			  157, -32768, -32768,  -31, 1454, 1406, 1011,  315, 1283,  260,
			  -31, -32768, -32768, -32768, 1053,  305, -32768, 1053, -32768, 1283,

			  251,   19,  137,  185,  109, -32768,  128,   -3, 1283,  181,
			 -32768,   84, 1233, -32768, -32768, 1530, -32768, -32768, 1283, -32768,
			  -31,   19,   80, -32768, -32768, -32768,  -29, -32768,  150,  128,
			 1283,  126, 1217, 1053,   48, -32768,   95, -32768, -32768,  -31,
			  128, 1283,  128,  -38, 1283, -32768, 1053,  194,  186, 1530,
			 1053, -32768, -32768, -32768, 1283, -32768, 1283, 1388, 1053,   44,
			 1053, 1042, 1283, 1283, 1334, -32768, 1530, 1283, 1283, 1283,
			  469, 1283, -32768,   63, -32768>>)
		end

	yypgoto_template: ANY is
			-- This is supposed to be "like FIXED_INTEGER_ARRAY_TYPE",
			-- but once functions cannot be declared with anchored types.
		once
			Result := yyfixed_array (<<
			 -32768,  554, -32768, -32768, -32768,  178,  498,  476,  -92, -32768,
			  106, -32768, -32768,  514,   73,  509,   -1,  503,  172, -32768,
			 -32768,  474,  162, -32768,  105, -32768, -32768, -32768, -32768, -32768,
			 -32768, -32768, -32768, -32768, -32768, -32768,  397, -133, -150,  424,
			  459,  448,  447, -32768,  -10, -32768, -32768, -132,  -93, -32768,
			  115, -32768,   76,   60,   56, -32768, -32768, -144, -32768, -32768,
			 -32768, -32768, -32768, -32768, -32768,  272, -32768, -32768,   90, -32768,
			 -277, -32768, -128, -32768, -32768, -32768, -32768, -32768, -213, -32768,
			 -159, -32768, -167, -121, -122, -32768, -32768, -32768,  856, -32768,
			 -32768,  103, -32768, -32768, -32768, -32768, -32768, -32768, -261, -384,

			 -174, -32768, -32768, -32768,  -22, -32768,   -7,  -19,  -23, -32768,
			 -32768, -32768, -197, -32768, -269, -32768, -32768,   29,  337, -32768,
			 -112, -32768, -32768,  101, -32768>>)
		end

	yytable_template: ANY is
			-- This is supposed to be "like FIXED_INTEGER_ARRAY_TYPE",
			-- but once functions cannot be declared with anchored types.
		once
			Result := yyfixed_array (<<
			   20,  207,  130,  276,  252,  336,  344,  143,   12,  240,
			   12,    9,   14,    9,   12,   68,   20,    9,  256,  251,
			  556,   68,  287,  530,  573,   12,  385,  258,    9,  541,
			   24,   64,  257,  199,  331,   20,  330,   64,   48,   48,
			   51,  265,   55,  372,   20,   64,   24,  264,  143,  266,
			  268,  269,  270,  271,  272,  262,   81,   81,   64,   71,
			  266,  529,    1,  574,  116,   24,  278,  280,   24,   24,
			  481,   90,  565,   92,   24,  285,   63,   62,  540,   92,
			  340,  307,  341,   62,   92,  481,  166,  540,  138,   12,
			   38,   62,    9,  418,  405,  133,  133,  133,  133,  505,

			   12,  315,  551,    9,   62,  160,  514,  311,  331,   46,
			  550,  317,  205,  204,  133,  187,  371,  314,   56,  345,
			  202,  129,  206,  480,  274,   83,  421,  210,  211,  147,
			  166,  523,   14,  132,   12,   83,  538,    9,  118,  239,
			   80,  397,  133,  131,   72,  332,  143,  337,  201,  254,
			  118,  285,  160,  334,  545,  552,  261,  115,  133,  391,
			  390,  133,  542,   68,  368,  133,  123,  346,  347,  348,
			  349,  350,  351,  352,  353,  354,  355,  356,  357,  358,
			  359,  361,  362,  364,  365,  114,  416,  122,  187,  483,
			  119,   29,  402,  452,  522,  177,  375,   28,  490,   12,

			  536,  121,    9,  415,  277,  334,  535,  145,  148,  414,
			  387,  417,  136,  120,  139,  389,  384,  386,  399,   69,
			  530,  558,  422,   27,  398,   77,  308,  309,  310,  521,
			  474,  436,  205,  204,  438,  133,  133,  133,   12,  400,
			  520,    9,  401,  486,  533,  160,  407,  448,  160,  447,
			  244,  413,  385,  247,  133,  437,  318,  133,  243,   12,
			  539,  383,    9,  146,  149,  433,  262,   12,  420,  383,
			    9,  132,  166,  439,  334,  512,  339,  395,  339,  519,
			  342,  131,  200,  394,  203,  187,  518,  128,  513,  159,
			  279,  127,  132,  166,  334,  532,  275,  159,  274,  489,

			  132,  560,  131,  493,  492,  366,  245,  274,  101,  248,
			  131,  100,  516,  166,  386,  283,  498,  544,  477,  318,
			  479,  274,  510,  392,  215,  214,  478,  166,  554,  503,
			   99,   98,  133,  484,  485,   97,  277,  339,  517,  166,
			   96,  213,  212,  562,   15,   14,   13,  -44,   11,   10,
			  568,  501,  504,   68,  570,  499,  571,  403,  295,  294,
			  293,  292,  291,  290,  289,  288,  133,  255,  -44,   64,
			  318,  -44,  406,  515,    8,  444,  443,  -44,   12,  289,
			  288,    9,  339,  442,  524,  -44,  495,  209,   53,  208,
			  241,   60,  279,   59,  509,  487,  374,  373,  423,  441,

			    7,  473,  408,  -44,  475,   24,  306,  524,   35,   34,
			  274,  132,  549,   33,   32,   62,  434,  429,  524,  431,
			  524,  131,  428,  187,  426,  557,  424,  339,  166,  561,
			  339,  187,  396,  318,  404,  376,  285,  564,  388,  566,
			  460,  370,  460,  369,   97,    6,    5,  367,  338,  482,
			  329,  324,  326,  316,  313,  460,  236,  187,  482,  312,
			  460,  144,  293,  292,  291,  290,  289,  288,   99,   72,
			   35,   33,  273,  460,  187,   12,  281,  253,    9,  459,
			   96,  249,  246,  238,  237,  460,   68,  460,  198,  458,
			  158,   85,  457,  129,  100,   57,  187,  572,  460,   95,

			  482,   87,   61,   39,  456,  339,  455,  460,   53,   47,
			  454,  460,   43,   41,   40,    1,  427,  460,  282,  555,
			  482,  553,  543,  453,  440,  559,  113,  112,  339,  460,
			  323,  460,  548,  151,  452,  451,  177,  450,  111,  339,
			  460,  339,   49,  460,  465,   89,  465,  250,  410,   50,
			   45,   94,   65,  460,  409,  460,   26,    0,    0,  465,
			    0,  460,  460,    0,  465,    0,  460,  460,  460,  460,
			  460,    0,    0,    0,    0,    0,    0,  465,    0,    0,
			    0,    0,    0,  449,    0,    0,    0,    0,  448,  465,
			  447,  465,  446,    0,    0,    0,    0,    0,    0,    0,

			    0,    0,  465,    0,    0,    0,    0,    0,    0,  525,
			    0,  465,    0,    0,    0,  465,    0,    0,    0,    0,
			    0,  465,    0,    0,  186,  185,  184,   12,  183,  182,
			    9,    0,  525,  465,  181,  465,    0,    0,    0,    0,
			    0,    0,    0,  525,  465,  525,    0,  465,    0,    0,
			    0,    0,    0,    0,    8,    0,    0,  465,    0,  465,
			    0,    0,    0,    0,    0,  465,  465,    0,    0,    0,
			  465,  465,  465,  465,  465,    0,    0,    0,  180,  497,
			    7,    0,    0,    0,    0,    0,  179,  178,  177,  176,
			  186,  185,  184,   12,  183,  182,    9,    0,    0,    0,

			  181,    0,    0,    0,    0,    0,    0,    0,    0,    0,
			    0,    0,    0,  432,    0,    0,    0,    0,    0,    0,
			    8,    0,    0,    0,    0,  175,  174,    0,    0,    0,
			    0,    0,  173,  172,  171,    0,    0,    0,  170,    0,
			  169,    0,  168,    0,  180,    0,    7,  167,  166,    0,
			    0,    0,  179,  178,  177,  176,  186,  185,  184,   12,
			  183,  182,    9,    0,    0,    0,  181,   15,   14,   13,
			   12,   11,   10,    9,    0,  186,  185,  184,   12,  183,
			  182,    9,    0,    0,    0,  181,    8,    0,    0,    0,
			    0,  175,  174,    0,    0,    0,    0,    8,  173,  172,

			  171,    0,    0,    0,  170,    8,  169,    0,  168,    0,
			  180,    0,    7,  167,  166,    0,    0,    0,  179,  178,
			  177,  176,    0,    7,    0,    0,    0,    0,    0,  180,
			    0,    7,    0,    0,    0,    0,    0,  179,  178,  177,
			  176,  302,  301,  300,  299,  298,  297,  296,  295,  294,
			  293,  292,  291,  290,  289,  288,    0,  175,  174,    0,
			    0,    0,    0,    0,  173,  172,  171,    0,    6,    5,
			  170,    0,  379,    0,  168,    0,  175,  174,  333,  378,
			  166,    0,    0,  173,  172,  171,    0,    0,    0,  170,
			    0,  169,    0,  168,    0,    0,    0,  333,  167,  166,

			  186,  185,  184,   12,  183,  182,    9,    0,    0,    0,
			  181,    0,    0,    0,    0,    0,    0,    0,    0,    0,
			    0,    0,    0,  363,    0,    0,    0,    0,    0,    0,
			    8,  186,  185,  184,   12,  183,  182,    9,    0,    0,
			    0,  181,    0,    0,    0,    0,    0,    0,    0,    0,
			    0,    0,    0,    0,  180,    0,    7,    0,    0,    0,
			    0,    8,  179,  178,  177,  176,    0,    0,    0,    0,
			    0,    0,    0,  186,  185,  184,   12,  183,  182,    9,
			    0,    0,    0,  181,    0,  180,  360,    7,    0,    0,
			    0,    0,    0,  179,  178,  177,  176,    0,    0,    0,

			    0,  175,  174,    8,    0,    0,    0,    0,  173,  172,
			  171,    0,    0,    0,  170,    0,  169,   12,  168,    0,
			    9,  459,    0,  167,  166,    0,    0,  180,    0,    7,
			    0,  458,  175,  174,  457,  179,  178,  177,  176,  173,
			  172,  171,    0,    0,    0,  170,  456,  169,  455,  168,
			    0,    0,  454,  116,  167,  166,  186,  185,  184,   12,
			  183,  182,    9,    0,    0,  453,  181,    0,    0,    0,
			    0,    0,    0,    0,  175,  174,  452,  451,  177,  450,
			    0,  173,  172,  171,  286,    0,    8,  170,  567,  169,
			    0,  168,    0,    0,    0,    0,  167,  166,    0,   15,

			   14,   13,   12,   11,   10,    9,    0,    0,    0,    0,
			  180,    0,    7,    0,    0,    0,    0,    0,  179,  178,
			  177,  176,    0,    0,    0,  449,    0,    0,    0,    8,
			  448,    0,  447,    0,  446,    0,  305,  304,  303,  302,
			  301,  300,  299,  298,  297,  296,  295,  294,  293,  292,
			  291,  290,  289,  288,    0,    7,    0,  175,  174,    0,
			    0,    0,    0,    0,  173,  172,  171,    0,    0,    0,
			  170,    0,  169, -272,  168,    0, -272, -272,    0,  167,
			  166,    0,    0,    0,    0,    0,    0, -272,    0,    0,
			 -272,    0,    0, -272, -272, -272, -272,    0,    0,    0,

			    6,    5, -272,    0, -272,    0,    0,    0, -272, -272,
			   47,   15,   14,   13,   12,   11,   10,    9,    0,    0,
			 -272, -272,    0,   12,    0,    0,    9,  459,    0, -272,
			 -272, -272, -272, -272, -272, -272,    0,  458,    0,   12,
			  457,    8,    9,  459,  546,    0,    0,    0,    0,    0,
			    0,    0,  456,  458,  455,    0,  457,    0,  454,    0,
			    0,  537,    0,    0,    0,    0,    0,    7,  456,    0,
			  455,  453,    0,    0,  454,    0,    0,    0,    0,    0,
			    0, -272,  452,  451,  177,  450, -272,  453,  274,   12,
			 -272, -272,    9,  459,    0,    0,    0,    0,  452,  451,

			  177,  450,    0,  458,    0,    0,  457,    0,    0,    0,
			    0,    0,    6,    5,    0,    0,    0,  491,  456,    0,
			  455,    0,   44,    0,  454,    0,    0,    0,    0,    0,
			  491,  449,    0,    0,    0,    0,  448,  453,  447,    0,
			  446,    0,  491,    0,    0,    0,    0,  449,  452,  451,
			  177,  450,  448,    0,  447,    0,  446,   15,   14,   13,
			   12,   11,   10,    9,    0,    0,    0,    0,  491,    0,
			    0,    0,    0,    0,  491,    0,    0,    0,    0,    0,
			    0,    0,    0,    0,    0,    0,    0,    8,  491,    0,
			    0,    0,  569,    0,    0,    0,    0,  449,    0,    0,

			  491,    0,  448,    0,  447,    0,  446,    0,    0,    0,
			  491,    0,    0,    7,    0,    0,    0,    0,  491,    0,
			    0,    0,    0,    0,  491,    0,  491,  491,  305,  304,
			  303,  302,  301,  300,  299,  298,  297,  296,  295,  294,
			  293,  292,  291,  290,  289,  288,  563,    0,    0,    0,
			    0,    0,    0,    0,    0,    0,    0,    0,    6,    5,
			    0,    0,    0,    0,  508,    0,    0,    0,   36,    0,
			    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
			    0,    0,  305,  304,  303,  302,  301,  300,  299,  298,
			  297,  296,  295,  294,  293,  292,  291,  290,  289,  288,

			  305,  304,  303,  302,  301,  300,  299,  298,  297,  296,
			  295,  294,  293,  292,  291,  290,  289,  288,  506,  305,
			  304,  303,  302,  301,  300,  299,  298,  297,  296,  295,
			  294,  293,  292,  291,  290,  289,  288,    0,    0,    0,
			    0,    0,    0,    0,    0,    0,    0,  502,  305,  304,
			  303,  302,  301,  300,  299,  298,  297,  296,  295,  294,
			  293,  292,  291,  290,  289,  288,  305,  304,  303,  302,
			  301,  300,  299,  298,  297,  296,  295,  294,  293,  292,
			  291,  290,  289,  288,    0,    0,    0,    0,    0,    0,
			    0,    0,    0,    0,  430,  305,  304,  303,  302,  301,

			  300,  299,  298,  297,  296,  295,  294,  293,  292,  291,
			  290,  289,  288,    0,    0,    0,    0,    0,    0,    0,
			    0,    0,    0,  328,  305,  304,  303,  302,  301,  300,
			  299,  298,  297,  296,  295,  294,  293,  292,  291,  290,
			  289,  288,  234,  233,  232,  231,  230,  229,  228,  227,
			  226,  225,  224,  223,  222,  221,  220,  219,  218,  217,
			  304,  303,  302,  301,  300,  299,  298,  297,  296,  295,
			  294,  293,  292,  291,  290,  289,  288,  301,  300,  299,
			  298,  297,  296,  295,  294,  293,  292,  291,  290,  289,
			  288>>)
		end

	yycheck_template: ANY is
			-- This is supposed to be "like FIXED_INTEGER_ARRAY_TYPE",
			-- but once functions cannot be declared with anchored types.
		once
			Result := yyfixed_array (<<
			    1,  123,   94,  177,  154,  274,   14,  100,    6,  141,
			    6,    9,    4,    9,    6,    6,   17,    9,  162,  152,
			   58,    6,  189,   26,    0,    6,   67,  116,    9,   58,
			    1,   22,  121,   28,  116,   36,  118,   22,   39,   40,
			   41,  169,   43,  320,   45,   22,   17,  168,  141,  170,
			  171,  172,  173,  174,  175,  167,   34,   34,   22,   60,
			  181,   64,   38,    0,   42,   36,  178,  179,   39,   40,
			   66,   72,   28,   74,   45,  187,   40,   68,  116,   80,
			  277,  209,  279,   68,   85,   66,  127,  116,   98,    6,
			   17,   68,    9,  124,  371,   96,   97,   98,   99,  483,

			    6,  251,    7,    9,   68,  115,  490,  239,  116,   36,
			   62,  255,  104,  105,  115,  116,  114,  250,   45,  286,
			  121,  116,  123,  119,  121,   65,  395,  128,  129,  114,
			  127,    3,    4,   39,    6,   75,  520,    9,   82,  114,
			   64,  338,  143,   49,  119,  273,  239,  275,   65,  159,
			   94,  263,  162,  274,   28,  539,  166,   81,  159,   65,
			   66,  162,   12,    6,  314,  166,    9,  288,  289,  290,
			  291,  292,  293,  294,  295,  296,  297,  298,  299,  300,
			  301,  302,  303,  304,  305,   80,  383,   30,  189,  450,
			   85,   24,  366,   65,   66,   67,  324,   30,  459,    6,

			  116,   44,    9,  116,  124,  326,  122,  101,  102,  122,
			  331,  385,   97,   56,   99,  121,  328,  329,  116,   57,
			   26,   27,  396,   56,  122,   63,  236,  237,  238,  120,
			  443,  428,  104,  105,  431,  236,  237,  238,    6,  360,
			  501,    9,  363,  456,   63,  255,  374,  119,  258,  121,
			  144,  379,   67,  147,  255,  429,  257,  258,  143,    6,
			  521,  124,    9,  101,  102,  424,  378,    6,  389,  124,
			    9,   39,  127,  432,  395,  488,  277,  116,  279,   28,
			  281,   49,  120,  122,  122,  286,  499,  116,   28,   36,
			  124,  120,   39,  127,  415,  508,  119,   36,  121,  458,

			   39,  115,   49,   15,   16,  306,  144,  121,   28,  147,
			   49,   31,    7,  127,  426,  115,  475,  530,  446,  320,
			  448,  121,    7,  333,   75,   76,  447,  127,  541,  120,
			   50,   51,  333,  454,  455,   55,  124,  338,  497,  127,
			   60,   92,   93,  556,    3,    4,    5,    0,    7,    8,
			  563,  123,  480,    6,  567,   53,  569,  367,  104,  105,
			  106,  107,  108,  109,  110,  111,  367,  114,   21,   22,
			  371,   24,  373,  494,   33,   24,   25,   30,    6,  110,
			  111,    9,  383,   32,  506,   38,   17,  116,   47,  118,
			   18,  116,  124,  118,  486,  121,  115,  116,  399,   48,

			   59,    7,   61,   56,   29,  376,  124,  529,    4,    5,
			  121,   39,  533,    4,    5,   68,   45,  418,  540,  124,
			  542,   49,  124,  424,  120,  546,   52,  428,  127,  550,
			  431,  432,  120,  434,   28,   43,  548,  558,  120,  560,
			  441,  122,  443,   28,   55,  104,  105,   19,  124,  450,
			  120,  115,  121,   28,   28,  456,  116,  458,  459,   28,
			  461,  114,  106,  107,  108,  109,  110,  111,   50,  119,
			    4,    4,  119,  474,  475,    6,  121,   28,    9,   10,
			   60,   28,   28,   19,  116,  486,    6,  488,   28,   20,
			   28,   68,   23,  116,   31,   11,  497,   28,  499,   28,

			  501,  117,    7,  116,   35,  506,   37,  508,   47,  114,
			   41,  512,   21,  117,  115,   38,  415,  518,  181,  542,
			  521,  540,  529,   54,  434,  547,   79,   79,  529,  530,
			  258,  532,  533,  109,   65,   66,   67,   68,   79,  540,
			  541,  542,   39,  544,  441,   71,  443,  150,  376,   40,
			   36,   75,   54,  554,  376,  556,    2,   -1,   -1,  456,
			   -1,  562,  563,   -1,  461,   -1,  567,  568,  569,  570,
			  571,   -1,   -1,   -1,   -1,   -1,   -1,  474,   -1,   -1,
			   -1,   -1,   -1,  114,   -1,   -1,   -1,   -1,  119,  486,
			  121,  488,  123,   -1,   -1,   -1,   -1,   -1,   -1,   -1,

			   -1,   -1,  499,   -1,   -1,   -1,   -1,   -1,   -1,  506,
			   -1,  508,   -1,   -1,   -1,  512,   -1,   -1,   -1,   -1,
			   -1,  518,   -1,   -1,    3,    4,    5,    6,    7,    8,
			    9,   -1,  529,  530,   13,  532,   -1,   -1,   -1,   -1,
			   -1,   -1,   -1,  540,  541,  542,   -1,  544,   -1,   -1,
			   -1,   -1,   -1,   -1,   33,   -1,   -1,  554,   -1,  556,
			   -1,   -1,   -1,   -1,   -1,  562,  563,   -1,   -1,   -1,
			  567,  568,  569,  570,  571,   -1,   -1,   -1,   57,   58,
			   59,   -1,   -1,   -1,   -1,   -1,   65,   66,   67,   68,
			    3,    4,    5,    6,    7,    8,    9,   -1,   -1,   -1,

			   13,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
			   -1,   -1,   -1,   26,   -1,   -1,   -1,   -1,   -1,   -1,
			   33,   -1,   -1,   -1,   -1,  104,  105,   -1,   -1,   -1,
			   -1,   -1,  111,  112,  113,   -1,   -1,   -1,  117,   -1,
			  119,   -1,  121,   -1,   57,   -1,   59,  126,  127,   -1,
			   -1,   -1,   65,   66,   67,   68,    3,    4,    5,    6,
			    7,    8,    9,   -1,   -1,   -1,   13,    3,    4,    5,
			    6,    7,    8,    9,   -1,    3,    4,    5,    6,    7,
			    8,    9,   -1,   -1,   -1,   13,   33,   -1,   -1,   -1,
			   -1,  104,  105,   -1,   -1,   -1,   -1,   33,  111,  112,

			  113,   -1,   -1,   -1,  117,   33,  119,   -1,  121,   -1,
			   57,   -1,   59,  126,  127,   -1,   -1,   -1,   65,   66,
			   67,   68,   -1,   59,   -1,   -1,   -1,   -1,   -1,   57,
			   -1,   59,   -1,   -1,   -1,   -1,   -1,   65,   66,   67,
			   68,   97,   98,   99,  100,  101,  102,  103,  104,  105,
			  106,  107,  108,  109,  110,  111,   -1,  104,  105,   -1,
			   -1,   -1,   -1,   -1,  111,  112,  113,   -1,  104,  105,
			  117,   -1,  119,   -1,  121,   -1,  104,  105,  125,  126,
			  127,   -1,   -1,  111,  112,  113,   -1,   -1,   -1,  117,
			   -1,  119,   -1,  121,   -1,   -1,   -1,  125,  126,  127,

			    3,    4,    5,    6,    7,    8,    9,   -1,   -1,   -1,
			   13,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
			   -1,   -1,   -1,   26,   -1,   -1,   -1,   -1,   -1,   -1,
			   33,    3,    4,    5,    6,    7,    8,    9,   -1,   -1,
			   -1,   13,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
			   -1,   -1,   -1,   -1,   57,   -1,   59,   -1,   -1,   -1,
			   -1,   33,   65,   66,   67,   68,   -1,   -1,   -1,   -1,
			   -1,   -1,   -1,    3,    4,    5,    6,    7,    8,    9,
			   -1,   -1,   -1,   13,   -1,   57,   58,   59,   -1,   -1,
			   -1,   -1,   -1,   65,   66,   67,   68,   -1,   -1,   -1,

			   -1,  104,  105,   33,   -1,   -1,   -1,   -1,  111,  112,
			  113,   -1,   -1,   -1,  117,   -1,  119,    6,  121,   -1,
			    9,   10,   -1,  126,  127,   -1,   -1,   57,   -1,   59,
			   -1,   20,  104,  105,   23,   65,   66,   67,   68,  111,
			  112,  113,   -1,   -1,   -1,  117,   35,  119,   37,  121,
			   -1,   -1,   41,   42,  126,  127,    3,    4,    5,    6,
			    7,    8,    9,   -1,   -1,   54,   13,   -1,   -1,   -1,
			   -1,   -1,   -1,   -1,  104,  105,   65,   66,   67,   68,
			   -1,  111,  112,  113,  114,   -1,   33,  117,   46,  119,
			   -1,  121,   -1,   -1,   -1,   -1,  126,  127,   -1,    3,

			    4,    5,    6,    7,    8,    9,   -1,   -1,   -1,   -1,
			   57,   -1,   59,   -1,   -1,   -1,   -1,   -1,   65,   66,
			   67,   68,   -1,   -1,   -1,  114,   -1,   -1,   -1,   33,
			  119,   -1,  121,   -1,  123,   -1,   94,   95,   96,   97,
			   98,   99,  100,  101,  102,  103,  104,  105,  106,  107,
			  108,  109,  110,  111,   -1,   59,   -1,  104,  105,   -1,
			   -1,   -1,   -1,   -1,  111,  112,  113,   -1,   -1,   -1,
			  117,   -1,  119,    6,  121,   -1,    9,   10,   -1,  126,
			  127,   -1,   -1,   -1,   -1,   -1,   -1,   20,   -1,   -1,
			   23,   -1,   -1,   26,   27,   28,   29,   -1,   -1,   -1,

			  104,  105,   35,   -1,   37,   -1,   -1,   -1,   41,   42,
			  114,    3,    4,    5,    6,    7,    8,    9,   -1,   -1,
			   53,   54,   -1,    6,   -1,   -1,    9,   10,   -1,   62,
			   63,   64,   65,   66,   67,   68,   -1,   20,   -1,    6,
			   23,   33,    9,   10,   27,   -1,   -1,   -1,   -1,   -1,
			   -1,   -1,   35,   20,   37,   -1,   23,   -1,   41,   -1,
			   -1,   28,   -1,   -1,   -1,   -1,   -1,   59,   35,   -1,
			   37,   54,   -1,   -1,   41,   -1,   -1,   -1,   -1,   -1,
			   -1,  114,   65,   66,   67,   68,  119,   54,  121,    6,
			  123,  124,    9,   10,   -1,   -1,   -1,   -1,   65,   66,

			   67,   68,   -1,   20,   -1,   -1,   23,   -1,   -1,   -1,
			   -1,   -1,  104,  105,   -1,   -1,   -1,  461,   35,   -1,
			   37,   -1,  114,   -1,   41,   -1,   -1,   -1,   -1,   -1,
			  474,  114,   -1,   -1,   -1,   -1,  119,   54,  121,   -1,
			  123,   -1,  486,   -1,   -1,   -1,   -1,  114,   65,   66,
			   67,   68,  119,   -1,  121,   -1,  123,    3,    4,    5,
			    6,    7,    8,    9,   -1,   -1,   -1,   -1,  512,   -1,
			   -1,   -1,   -1,   -1,  518,   -1,   -1,   -1,   -1,   -1,
			   -1,   -1,   -1,   -1,   -1,   -1,   -1,   33,  532,   -1,
			   -1,   -1,   58,   -1,   -1,   -1,   -1,  114,   -1,   -1,

			  544,   -1,  119,   -1,  121,   -1,  123,   -1,   -1,   -1,
			  554,   -1,   -1,   59,   -1,   -1,   -1,   -1,  562,   -1,
			   -1,   -1,   -1,   -1,  568,   -1,  570,  571,   94,   95,
			   96,   97,   98,   99,  100,  101,  102,  103,  104,  105,
			  106,  107,  108,  109,  110,  111,   58,   -1,   -1,   -1,
			   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,  104,  105,
			   -1,   -1,   -1,   -1,   58,   -1,   -1,   -1,  114,   -1,
			   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
			   -1,   -1,   94,   95,   96,   97,   98,   99,  100,  101,
			  102,  103,  104,  105,  106,  107,  108,  109,  110,  111,

			   94,   95,   96,   97,   98,   99,  100,  101,  102,  103,
			  104,  105,  106,  107,  108,  109,  110,  111,   64,   94,
			   95,   96,   97,   98,   99,  100,  101,  102,  103,  104,
			  105,  106,  107,  108,  109,  110,  111,   -1,   -1,   -1,
			   -1,   -1,   -1,   -1,   -1,   -1,   -1,  122,   94,   95,
			   96,   97,   98,   99,  100,  101,  102,  103,  104,  105,
			  106,  107,  108,  109,  110,  111,   94,   95,   96,   97,
			   98,   99,  100,  101,  102,  103,  104,  105,  106,  107,
			  108,  109,  110,  111,   -1,   -1,   -1,   -1,   -1,   -1,
			   -1,   -1,   -1,   -1,  122,   94,   95,   96,   97,   98,

			   99,  100,  101,  102,  103,  104,  105,  106,  107,  108,
			  109,  110,  111,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
			   -1,   -1,   -1,  122,   94,   95,   96,   97,   98,   99,
			  100,  101,  102,  103,  104,  105,  106,  107,  108,  109,
			  110,  111,   75,   76,   77,   78,   79,   80,   81,   82,
			   83,   84,   85,   86,   87,   88,   89,   90,   91,   92,
			   95,   96,   97,   98,   99,  100,  101,  102,  103,  104,
			  105,  106,  107,  108,  109,  110,  111,   98,   99,  100,
			  101,  102,  103,  104,  105,  106,  107,  108,  109,  110,
			  111>>)
		end

feature {NONE} -- Constants

	yyFinal: INTEGER is 574
			-- Termination state id

	yyFlag: INTEGER is -32768
			-- Most negative INTEGER

	yyNtbase: INTEGER is 128
			-- Number of tokens

	yyLast: INTEGER is 1690
			-- Upper bound of `yytable' and `yycheck'

	yyMax_token: INTEGER is 360
			-- Maximum token id
			-- (upper bound of `yytranslate'.)

	yyNsyms: INTEGER is 253
			-- Number of symbols
			-- (terminal and nonterminal)

feature -- User-defined features



feature {NONE} -- Initialization

	make is
			-- Create a new Eiffel parser.
		do
			make_eiffel_scanner
			make_parser_skeleton
		end

	execute is
			-- Parse Eiffel files `arguments (1..argument_count)'.
		local
			j, n: INTEGER
			a_filename: STRING
			a_file: like INPUT_STREAM_TYPE
		do
			make
			n := Arguments.argument_count
			if n = 0 then
				std.error.put_string ("usage: eiffel_parser filename ...%N")
				Exceptions.die (1)
			else
				from j := 1 until j > n loop
					a_filename := Arguments.argument (j)
					a_file := INPUT_STREAM_.make_file_open_read (a_filename)
					if INPUT_STREAM_.is_open_read (a_file) then
						reset
						set_input_buffer (new_file_buffer (a_file))
						parse
						INPUT_STREAM_.close (a_file)
					else
						std.error.put_string ("eiffel_parser: cannot read %'")
						std.error.put_string (a_filename)
						std.error.put_string ("%'%N")
					end
					j := j + 1
				end
			end
		end

	benchmark is
			-- Parse Eiffel file `argument (2)' `argument (1)' times.
		local
			j, n: INTEGER
			a_filename: STRING
			a_file: like INPUT_STREAM_TYPE
		do
			make
			if
				Arguments.argument_count < 2 or else
				not STRING_.is_integer (Arguments.argument (1))
			then
				std.error.put_string ("usage: eiffel_parser nb filename%N")
				Exceptions.die (1)
			else
				n := Arguments.argument (1).to_integer
				a_filename := Arguments.argument (2)
				from j := 1 until j > n loop
					a_file := INPUT_STREAM_.make_file_open_read (a_filename)
					if INPUT_STREAM_.is_open_read (a_file) then
						reset
						set_input_buffer (new_file_buffer (a_file))
						parse
						INPUT_STREAM_.close (a_file)
					else
						std.error.put_string ("eiffel_parser: cannot read %'")
						std.error.put_string (a_filename)
						std.error.put_string ("%'%N")
						Exceptions.die (1)
					end
					j := j + 1
				end
			end
		end

feature -- Error handling

	report_error (a_message: STRING) is
			-- Print error message.
		local
			f_buffer: YY_FILE_BUFFER
		do
			f_buffer ?= input_buffer
			if f_buffer /= Void then
				std.error.put_string (INPUT_STREAM_.name (f_buffer.file))
				std.error.put_string (", line ")
			else
				std.error.put_string ("line ")
			end
			std.error.put_integer (eif_lineno)
			std.error.put_string (": ")
			std.error.put_string (a_message)
			std.error.put_character ('%N')
		end

end -- class EIFFEL_PARSER
