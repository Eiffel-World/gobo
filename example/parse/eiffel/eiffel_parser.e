indexing

	description:

		"Eiffel parsers"

	author:     "Eric Bezault <ericb@gobosoft.com>"
	copyright:  "Copyright (c) 1999, Eric Bezault and others"
	license:    "Eiffel Forum Freeware License v1 (see forum.txt)"
	date:       "$Date$"
	revision:   "$Revision$"

class EIFFEL_PARSER

inherit

	YY_PARSER_SKELETON [ANY]
		rename
			make as make_parser_skeleton
		redefine
			report_error
		end

	EIFFEL_SCANNER
		rename
			make as make_eiffel_scanner
		end

	KL_SHARED_EXCEPTIONS
	KL_SHARED_ARGUMENTS

creation

	make, execute, benchmark


feature {NONE} -- Implementation

	yy_build_parser_tables is
			-- Build parser tables.
		do
			yytranslate ?= yytranslate_template
			yyr1 ?= yyr1_template
			yyr2 ?= yyr2_template
			yydefact ?= yydefact_template
			yydefgoto ?= yydefgoto_template
			yypact ?= yypact_template
			yypgoto ?= yypgoto_template
			yytable ?= yytable_template
			yycheck ?= yycheck_template
		end

feature {NONE} -- Semantic actions

	yy_do_action (yy_act: INTEGER) is
			-- Execute semantic action.
		do
			inspect yy_act
			else
					-- No action
				yyval := yyval_default
			end
		end

feature {NONE} -- Table templates

	yytranslate_template: ANY is
			-- This is supposed to be "like FIXED_INTEGER_ARRAY_TYPE",
			-- but once functions cannot be declared with anchored types.
		once
			Result := yyfixed_array (<<
			    0,    2,    2,    2,    2,    2,    2,    2,    2,    2,
			    2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
			    2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
			    2,    2,    2,  123,    2,    2,  125,    2,    2,    2,
			  121,  122,  106,  104,  116,  105,  124,  107,    2,    2,
			    2,    2,    2,    2,    2,    2,    2,    2,  115,  114,
			  100,   98,  101,  126,    2,    2,    2,    2,    2,    2,
			    2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
			    2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
			    2,  117,    2,  118,  110,    2,    2,    2,    2,    2,

			    2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
			    2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
			    2,    2,    2,  119,    2,  120,  127,    2,    2,    2,
			    2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
			    2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
			    2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
			    2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
			    2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
			    2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
			    2,    2,    2,    2,    2,    2,    2,    2,    2,    2,

			    2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
			    2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
			    2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
			    2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
			    2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
			    2,    2,    2,    2,    2,    2,    1,    2,    3,    4,
			    5,    6,    7,    8,    9,   10,   11,   12,   13,   14,
			   15,   16,   17,   18,   19,   20,   21,   22,   23,   24,
			   25,   26,   27,   28,   29,   30,   31,   32,   33,   34,
			   35,   36,   37,   38,   39,   40,   41,   42,   43,   44,

			   45,   46,   47,   48,   49,   50,   51,   52,   53,   54,
			   55,   56,   57,   58,   59,   60,   61,   62,   63,   64,
			   65,   66,   67,   68,   69,   70,   71,   72,   73,   74,
			   75,   76,   77,   78,   79,   80,   81,   82,   83,   84,
			   85,   86,   87,   88,   89,   90,   91,   92,   93,   94,
			   95,   96,   97,   99,  102,  103,  108,  109,  111,  112,
			  113>>)
		end

	yyr1_template: ANY is
			-- This is supposed to be "like FIXED_INTEGER_ARRAY_TYPE",
			-- but once functions cannot be declared with anchored types.
		once
			Result := yyfixed_array (<<
			    0,  128,  128,  129,  129,  138,  130,  130,  139,  139,
			  139,  140,  140,  140,  140,  142,  142,  143,  143,  145,
			  145,  141,  141,  131,  147,  147,  147,  147,  132,  132,
			  148,  148,  148,  149,  149,  149,  151,  133,  133,  137,
			  153,  153,  153,  153,  153,  153,  154,  154,  154,  154,
			  154,  155,  155,  156,  156,  156,  156,  156,  157,  158,
			  159,  160,  161,  162,  162,  171,  171,  167,  163,  163,
			  173,  173,  173,  174,  174,  174,  175,  177,  177,  178,
			  178,  178,  176,  180,  180,  179,  179,  179,  169,  165,
			  165,  168,  164,  164,  170,  166,  166,  134,  134,  181,

			  181,  182,  182,  152,  152,  152,  135,  135,  183,  183,
			  184,  185,  185,  185,  186,  186,  186,  187,  189,  192,
			  192,  193,  193,  193,  188,  188,  195,  195,  172,  172,
			  172,  196,  196,  196,  196,  197,  197,  197,  197,  197,
			  197,  197,  197,  197,  197,  197,  197,  197,  197,  197,
			  197,  197,  197,  190,  190,  198,  198,  198,  199,  199,
			  199,  200,  201,  201,  191,  191,  194,  205,  205,  205,
			  205,  209,  209,  204,  204,  203,  203,  203,  206,  206,
			  206,  136,  136,  210,  210,  210,  211,  211,  211,  212,
			  212,  207,  207,  202,  202,  202,  202,  202,  202,  202,

			  150,  215,  216,  216,  217,  217,  217,  208,  208,  218,
			  218,  219,  219,  219,  219,  219,  219,  219,  219,  219,
			  219,  219,  220,  220,  230,  230,  228,  228,  232,  222,
			  233,  233,  223,  235,  235,  234,  234,  234,  224,  236,
			  236,  236,  237,  237,  237,  238,  238,  239,  239,  239,
			  225,  240,  240,  240,  240,  226,  241,  241,  242,  242,
			  242,  227,  221,  221,  221,  221,  221,  221,  221,  221,
			  221,  221,  243,  243,  231,  231,  244,  244,  244,  245,
			  245,  246,  246,  246,  246,  229,  229,  213,  213,  213,
			  213,  213,  213,  213,  213,  213,  213,  213,  213,  213,

			  213,  213,  213,  213,  213,  213,  213,  213,  213,  213,
			  213,  213,  213,  213,  213,  213,  213,  213,  213,  213,
			  213,  213,  213,  213,  213,  213,  213,  250,  250,  250,
			  250,  250,  250,  250,  251,  252,  252,  253,  253,  253,
			  254,  254,  254,  249,  249,  249,  248,  248,  248,  146,
			  146,  146,  146,  146,  146,  247,  247,  214,  214,  214,
			  255,  255,  255,  144,  144>>)
		end

	yyr2_template: ANY is
			-- This is supposed to be "like FIXED_INTEGER_ARRAY_TYPE",
			-- but once functions cannot be declared with anchored types.
		once
			Result := yyfixed_array (<<
			    0,    1,    2,    8,    5,    3,    0,    2,    0,    1,
			    2,    1,    2,    3,    4,    1,    3,    1,    3,    1,
			    1,    1,    2,    3,    0,    1,    1,    1,    0,    3,
			    0,    2,    4,    0,    2,    3,    3,    0,    2,    2,
			    2,    4,    4,    2,    5,    5,    1,    3,    4,    3,
			    4,    0,    1,    1,    1,    1,    1,    1,    6,    5,
			    4,    3,    2,    2,    1,    3,    5,    2,    0,    1,
			    0,    1,    2,    1,    2,    3,    2,    1,    1,    0,
			    1,    3,    3,    0,    1,    0,    1,    3,    2,    0,
			    1,    2,    0,    1,    2,    0,    1,    0,    1,    1,

			    2,    3,    3,    0,    1,    3,    0,    1,    1,    2,
			    3,    0,    1,    2,    1,    2,    3,    2,    3,    0,
			    2,    1,    1,    1,    1,    3,    1,    2,    1,    2,
			    2,    1,    1,    1,    1,    1,    1,    1,    1,    1,
			    1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
			    1,    1,    1,    0,    3,    0,    1,    2,    1,    2,
			    3,    3,    1,    3,    0,    2,    7,    1,    2,    2,
			    3,    0,    2,    0,    2,    0,    2,    3,    0,    2,
			    3,    0,    2,    0,    1,    2,    1,    2,    3,    1,
			    2,    0,    2,    1,    2,    2,    2,    2,    2,    2,

			    2,    1,    0,    3,    0,    1,    3,    0,    1,    1,
			    2,    1,    1,    1,    1,    1,    1,    1,    1,    1,
			    1,    1,    5,    3,    0,    3,    6,    3,    5,    3,
			    1,    1,    7,    0,    2,    0,    4,    5,    5,    0,
			    4,    5,    0,    1,    3,    1,    3,    1,    1,    1,
			    9,    0,    1,    2,    4,    4,    0,    3,    0,    1,
			    3,    3,    1,    3,    3,    5,    2,    4,    5,    7,
			    5,    7,    2,    4,    0,    3,    0,    1,    3,    1,
			    2,    1,    1,    1,    3,    1,    1,    1,    1,    1,
			    3,    1,    1,    1,    1,    1,    1,    3,    2,    2,

			    2,    2,    3,    3,    3,    3,    3,    3,    3,    3,
			    3,    3,    3,    3,    3,    3,    3,    3,    3,    4,
			    4,    3,    2,    4,    1,    1,    3,    2,    2,    2,
			    4,    4,    2,    1,    3,    0,    3,    0,    1,    3,
			    1,    3,    1,    0,    1,    3,    0,    1,    3,    1,
			    1,    1,    1,    1,    1,    1,    1,    1,    2,    2,
			    1,    2,    2,    1,    1>>)
		end

	yydefact_template: ANY is
			-- This is supposed to be "like FIXED_INTEGER_ARRAY_TYPE",
			-- but once functions cannot be declared with anchored types.
		once
			Result := yyfixed_array (<<
			    6,    8,    6,    1,   24,    0,    0,  355,  356,  364,
			  354,  353,  363,  360,  357,  350,    7,    9,   11,   15,
			   19,   17,   20,  351,  349,  352,    2,   27,   26,   25,
			   28,    0,  361,  358,  362,  359,   21,   10,   12,    0,
			    0,   30,   37,    0,   21,    0,   13,   22,   19,   18,
			   16,   33,    0,    0,   97,   23,   14,    0,   31,   29,
			    0,   38,   83,   97,   83,  106,    4,   98,   99,  201,
			   34,  202,   33,   85,   84,  103,  106,    0,   46,   39,
			   51,  103,   83,  181,  107,  108,  100,  103,   35,  204,
			  200,   32,   86,    0,  104,  102,  181,   40,   79,   79,

			   64,   79,   70,   97,   97,   52,   53,   54,   55,   56,
			   57,   68,   92,   89,   95,    0,  101,  111,  183,    0,
			  109,    0,    0,    0,    0,    0,  193,  205,    0,   82,
			    0,    0,    5,    0,    0,  128,   80,   91,   94,   63,
			    0,   88,   67,   71,   73,   79,   97,    0,   49,   97,
			    0,   47,   92,   69,   89,   93,   95,   90,    0,   96,
			   62,    0,  126,  110,  112,  114,  153,  124,    0,    0,
			    0,    0,  346,    0,    0,    0,    0,    0,    0,  274,
			  288,  289,    0,  346,  296,  295,  294,  293,  292,  274,
			  182,  184,  186,  189,  287,  324,  262,  291,  325,  333,

			    3,   36,  195,  196,  197,  194,    0,    0,  199,  198,
			  203,    0,   87,  105,  131,  134,  133,  132,  129,  152,
			  150,  149,  147,  151,  148,  146,  145,  144,  143,  142,
			  141,  140,  139,  138,  137,  136,  135,  130,    0,    0,
			    0,   72,   74,   78,   76,   77,    0,   50,   42,    0,
			   48,   41,   89,   95,    0,   61,  127,  113,  115,  155,
			    0,  117,  164,  335,  332,  274,    0,    0,  347,    0,
			  322,  300,  301,  299,  298,    0,  276,    0,  266,    0,
			  329,    0,  328,  343,    0,  190,  272,  327,  185,  187,
			    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,

			    0,    0,    0,    0,    0,    0,    0,    0,    0,  206,
			   81,    0,   65,   75,   45,   44,   95,    0,   60,  116,
			  162,    0,  156,  158,    0,  125,    0,  119,  337,  334,
			  290,    0,  326,    0,    0,    0,  279,    0,  277,    0,
			    0,  274,  263,  264,  344,    0,  297,  188,  302,  307,
			  309,  308,  306,  305,  304,  303,  315,  314,  313,  312,
			  311,  310,    0,  316,  318,    0,  317,  321,  274,    0,
			    0,   59,  154,  157,  159,    0,    0,  165,   37,  118,
			  342,    0,  340,    0,  338,    0,  330,  274,  331,  348,
			  224,    0,  283,  282,  281,  280,  275,    0,  274,  267,

			  323,    0,  319,  320,  273,   66,   58,  160,  163,  161,
			  122,  175,  121,  120,  123,    0,  336,    0,  265,  268,
			    0,  228,    0,  278,  270,  345,  183,  173,  341,  339,
			    0,  274,  284,    0,  183,  176,  155,    0,  269,  225,
			  271,  177,  174,  207,    0,  207,  167,  178,    0,    0,
			    0,  220,    0,  286,    0,  219,    0,    0,  207,  256,
			  183,    0,  285,  169,  208,  209,  211,  212,  213,  214,
			  215,  216,  217,  218,  221,    0,  171,  168,  183,  191,
			    0,    0,    0,    0,  286,  285,  224,  239,    0,  181,
			  258,  207,    0,  224,  210,  231,  230,    0,    0,  170,

			  183,  179,  207,    0,    0,    0,    0,    0,  227,  242,
			  233,  207,  251,  259,    0,    0,  261,  223,  229,  172,
			  180,  192,  166,  224,    0,    0,  248,  247,  249,    0,
			  243,  245,  242,  207,    0,  235,  252,    0,  257,    0,
			  255,  222,  224,    0,  207,    0,    0,  234,  238,    0,
			  233,  274,  253,    0,  260,  226,  244,  240,  246,  207,
			    0,    0,    0,    0,    0,  241,  207,    0,  232,  254,
			  207,  236,  207,    0,  237,  250,    0,    0>>)
		end

	yydefgoto_template: ANY is
			-- This is supposed to be "like FIXED_INTEGER_ARRAY_TYPE",
			-- but once functions cannot be declared with anchored types.
		once
			Result := yyfixed_array (<<
			    2,    3,    4,   30,   42,   54,   76,   83,  119,   66,
			   77,   16,   17,   37,   18,   19,  265,   21,   22,   31,
			   52,   58,  126,   88,   95,   79,   80,  104,  105,  106,
			  107,  108,  109,  110,  111,  152,  154,  156,  158,  112,
			  155,  157,  159,  139,  136,  142,  143,  144,   74,  244,
			  137,   93,   75,   67,   68,   84,   85,  163,  164,  165,
			  166,  261,  262,  327,  379,  413,  414,  167,  218,  237,
			  321,  322,  323,  324,  127,  427,  437,  447,  479,  503,
			  463,  499,  190,  191,  192,  193,   23,   71,   90,  128,
			  464,  465,  466,  194,  468,  469,  470,  471,  472,  473,

			  474,  475,  421,  286,  195,  497,  550,  534,  510,  529,
			  530,  531,  537,  491,  514,  196,  337,  382,  395,  197,
			  269,  345,  198,  199,  329,  383,  384,   25>>)
		end

	yypact_template: ANY is
			-- This is supposed to be "like FIXED_INTEGER_ARRAY_TYPE",
			-- but once functions cannot be declared with anchored types.
		once
			Result := yyfixed_array (<<
			  469,  714,   67, -32768,  128,  357,  348, -32768, -32768, -32768,
			 -32768, -32768, -32768, -32768, -32768, -32768, -32768, 1046, -32768,  375,
			  390, -32768, -32768, -32768, -32768, -32768, -32768, -32768, -32768, -32768,
			  387,  468, -32768, -32768, -32768, -32768,  889,  379, -32768,  714,
			  714,  300,  450,  300, -32768,  210, -32768, -32768, -32768, -32768,
			  375,  464,  222,  481,  142, -32768, -32768,  456, -32768, -32768,
			  300, -32768,  317,   59,  317,  446, -32768,   70, -32768, -32768,
			  411,  367,  464,  300, -32768,  300,  446,  448, -32768, -32768,
			  320,  300,  317,  313,  446, -32768, -32768,  300, -32768,  196,
			 -32768, -32768, -32768,  163, -32768,  358,  313, -32768,  223,  223,

			  223,  223,  317,  335,   28, -32768, -32768, -32768, -32768, -32768,
			 -32768,  447,  392,  380,  362,  445,  358,  221, 1003,  444,
			 -32768,   25,  456,   82,  456,    5, -32768, -32768,  211, -32768,
			  300,  300, -32768,  171, 1310, -32768, -32768,  321,  321,  342,
			  442,  321, -32768,   84, -32768,  327,   59,  428, -32768,   59,
			  425, -32768,  392, -32768,  380, -32768,  362, -32768,  422, -32768,
			 -32768,  223, -32768, -32768,   12, -32768,  -52, -32768,  223,  278,
			 1003,  196, 1003, 1003, 1003, 1003, 1003, 1003,  329,  165,
			  201,  189,  325, 1003, -32768, -32768, -32768, -32768, -32768,  146,
			 -32768,  920, -32768, 1273, -32768, -32768,  266, -32768, -32768, -32768,

			 -32768, -32768, -32768, -32768, -32768, -32768,  441,  439, -32768, -32768,
			 -32768,  196, -32768, -32768, -32768, -32768, -32768, -32768, -32768, -32768,
			 -32768, -32768, -32768, -32768, -32768, -32768, -32768, -32768, -32768, -32768,
			 -32768, -32768, -32768, -32768, -32768, -32768, -32768, -32768,  223,  223,
			  223,  317, -32768, -32768, -32768,  321,  406, -32768, -32768,  403,
			 -32768, -32768,  380,  362,  400, -32768, -32768,  221, -32768,  300,
			  221, -32768,  309,  305, -32768,  -45, 1244,  303, 1273,  150,
			 -32768, -32768, -32768, -32768, -32768,  196,  722,  196,  297,  300,
			 -32768,  300, -32768,  300,    9, -32768, -32768, -32768, 1003, -32768,
			 1003, 1003, 1003, 1003, 1003, 1003, 1003, 1003, 1003, 1003,

			 1003, 1003, 1003, 1003,  878, 1003,  847, 1003,  300, -32768,
			 -32768,  399, -32768, -32768, -32768, -32768,  362,  385, -32768, -32768,
			 -32768,  294,    6, -32768,  234, -32768,  196,  369,  703, -32768,
			   53,  -40, -32768, 1003,  291,   24, 1273,  149, -32768,  287,
			  300,  271,  266,  266, -32768,  132, -32768, -32768, -32768,  207,
			  207,  207,  207,  207,  483,  483,  360,  360,  360,  360,
			  360,  360, 1003, 1322,  694, 1003,  694, 1308,  271,  223,
			  376, -32768, -32768,  300, -32768,  300,  196, -32768,  478, -32768,
			  278,  196, -32768,   90, -32768,  300, -32768,  271, -32768, 1273,
			  -41, 1003, -32768, -32768, -32768, -32768, -32768,  722,  271,  266,

			 -32768,  300, 1322,  694, -32768, -32768, -32768, -32768, -32768, -32768,
			 -32768,  354, -32768, -32768, -32768,  282, -32768,  703,  266,  277,
			  300, -32768, 1215, -32768,  273, -32768,  637,  353,  -40, -32768,
			  300,  271, -32768,  300, 1003, -32768,  300,  298,  266, -32768,
			  266, -32768, -32768,  373,  381,  373, -32768,  352,  196, 1003,
			  196, -32768,   13,  109,  263, -32768, 1003, 1003,  373,  257,
			 1003,   49, 1117, -32768,  373, -32768, -32768, -32768, -32768, -32768,
			 -32768, -32768, -32768, -32768, -32768,  205,  350, -32768,  571,  324,
			  246, 1186,  244,  196, -32768, -32768,  -41, 1168, 1149,  313,
			  351,  373,  319,  -41, -32768, -32768, -32768, 1003,  337, -32768,

			 1003, -32768,  373,  314,   49,  213,  218,  212, -32768,  130,
			   31,  373,  256, -32768,   77,  249, -32768, -32768, 1273, -32768,
			 -32768, -32768, -32768,  -41,   49,  109, -32768, -32768, -32768,   -9,
			 -32768,  232,  130,  373,  141,  174, 1003,  100, -32768,   94,
			 -32768, -32768,  -41,  130,  373,  130,  -22, -32768, -32768, 1003,
			  285,   73, 1273, 1003, -32768, -32768, -32768, -32768, -32768,  373,
			 1114, 1003,  126, 1003,  989, -32768,  373, 1095, -32768, 1273,
			  373, -32768,  373,  112, -32768, -32768,   56, -32768>>)
		end

	yypgoto_template: ANY is
			-- This is supposed to be "like FIXED_INTEGER_ARRAY_TYPE",
			-- but once functions cannot be declared with anchored types.
		once
			Result := yyfixed_array (<<
			 -32768,  546, -32768, -32768, -32768,  167,  486,  465,  -95, -32768,
			  104, -32768, -32768,  500,   76,  490,   -1,  489,  148, -32768,
			 -32768,  455,  754, -32768,  194, -32768, -32768, -32768, -32768, -32768,
			 -32768, -32768, -32768, -32768, -32768, -32768,  370, -134, -150,  413,
			  458,  453,  449, -32768,  -15, -32768, -32768, -118,  -98, -32768,
			  -31, -32768,   -4, -32768,  454, -32768,  436, -32768, -32768, -151,
			 -32768, -32768, -32768, -32768, -32768, -32768, -32768,  258, -32768, -32768,
			   81, -32768, -296, -32768, -140, -32768, -32768, -32768, -32768, -32768,
			 -383, -32768, -269, -32768, -137,   -2, -123, -32768, -32768, -32768,
			 -32768,   52, -32768,   55, -32768, -32768, -32768, -32768, -32768, -32768,

			 -32768, -420, -338, -176, -32768, -32768, -32768,  -35, -32768,  -20,
			  -29,  -36, -32768, -32768, -32768, -274, -32768, -266, -32768,    7,
			  323, -32768, -32768, -152, -32768, -32768,   85, -32768>>)
		end

	yytable_template: ANY is
			-- This is supposed to be "like FIXED_INTEGER_ARRAY_TYPE",
			-- but once functions cannot be declared with anchored types.
		once
			Result := yyfixed_array (<<
			   20,  132,  209,  278,  145,  342,  254,  343,   24,   14,
			  338,   12,   12,  258,    9,    9,   20,  264,   12,   12,
			  253,    9,    9,  346,   24,  242,  374,  387,  280,  282,
			   12,  267,  486,    9,   69,   20,  559,  287,   48,   48,
			   51,  493,   55,   24,   20,  145,   24,   24,  161,  544,
			   64,  134,   24,  201,  289,   12,  577,  533,    9,   72,
			   81,  133,  477,  134,  260,   69,  399,  576,  138,  259,
			  141,  309,   92,  133,   94,  489,  276,  407,  117,  484,
			   94,   64,  168,  420,  523,  140,   94,  168,   12,  393,
			  392,    9,   64,   38,  543,  532,   62,  135,  135,  135,

			  135,  554,  162,  317,  542,    1,  319,  543,  515,  207,
			  206,  418,   46,  287,  245,  484,  135,  189,  316,  521,
			  373,   56,  204,  313,  208,  333,  257,   62,  535,  212,
			  213,  423,  483,  526,   14,  334,   12,  339,   62,    9,
			  575,  131,  149,  145,  135,  391,  256,  203,  508,  162,
			  547,  347,   29,  263,  568,  517,  438,  435,   28,  440,
			  135,  557,  553,  135,   64,  441,  370,  135,  266,  548,
			  268,  270,  271,  272,  273,  274,  565,  385,  386,  388,
			  168,  268,   63,  571,   27,  541,  377,  573,  563,  574,
			  189,  492,  404,  539,  276,  454,  525,  179,  241,  538,

			  168,  549,   69,   73,  555,  125,  417,  147,  150,  501,
			   62,  419,  416,   15,   14,   13,   12,   11,   10,    9,
			  496,  495,  424,  310,  311,  312,  124,   12,  264,   12,
			    9,  520,    9,  279,  207,  206,  409,  135,  135,  135,
			  123,  415,  162,    8,  545,  162,  217,  216,  401,  450,
			  246,  449,  122,  249,  400,  439,  135,  161,  320,  135,
			  134,  285,  134,  215,  214,  397,  333,  276,  332,    7,
			  133,  396,  133,  168,  336,  116,  388,  540,  341,  130,
			  341,  121,  344,  129,  277,  387,  276,  189,  348,  349,
			  350,  351,  352,  353,  354,  355,  356,  357,  358,  359,

			  360,  361,  363,  364,  366,  367,   12,  368,  480,    9,
			  482,  533,  561,  281,    6,    5,  168,  291,  290,  536,
			  394,  320,  446,  445,   47,  279,  336,  211,  168,  210,
			  444,  389,  524,   12,  135,  -43,    9,  385,   60,  341,
			   59,   69,  522,  507,  519,  243,  443,  516,  103,  376,
			  375,  102,   35,   34,  405,  118,  -43,   64,  513,  -43,
			  402,   33,   32,  403,  506,  -43,  134,  498,  135,  504,
			  101,  100,  320,  -43,  408,   99,  133,  502,  490,   12,
			   98,  478,    9,  461,  341,   24,  527,  281,  476,  422,
			  308,  -43,  276,  460,  512,  336,  459,  433,  436,  287,

			  425,  430,  428,   62,  406,  168,  426,  398,  458,  527,
			  457,  390,  378,  371,  456,  336,  372,   99,  369,  431,
			  527,  340,  527,  331,  326,  189,  328,  455,  318,  341,
			  101,  315,  341,  189,  314,  320,   73,  238,  454,  453,
			  179,  452,  462,   35,  462,   33,  283,  481,  275,  146,
			  255,  485,   98,  251,  487,  488,  248,  462,  239,  189,
			  485,  240,   69,  462,  297,  296,  295,  294,  293,  292,
			  291,  290,  200,  160,  131,   57,   97,  189,  102,   87,
			   82,   15,   14,   13,   89,   11,   10,  451,   61,   43,
			  462,   39,  450,   47,  449,  518,  448,   53,  467,  189,

			  467,  462,  429,  485,   41,   40,  284,    1,  341,  558,
			  462,    8,  546,  467,  556,  562,  494,  442,  325,  467,
			  120,   86,  252,  485,  153,   53,  412,   91,   49,  115,
			   50,  341,  462,  114,  552,  551,   45,    7,  113,  410,
			   65,   96,  341,  462,  341,  411,  467,  560,   26,    0,
			    0,  564,    0,    0,    0,    0,    0,  467,  462,  567,
			    0,  569,    0,    0,  528,  462,  467,    0,    0,  462,
			    0,  462,    0,    0,  188,  187,  186,   12,  185,  184,
			    9,    0,    6,    5,  183,    0,    0,  528,  467,  295,
			  294,  293,  292,  291,  290,    0,    0,    0,  528,  467,

			  528,    0,    0,    0,    8,    0,    0,    0,    0,    0,
			    0,    0,    0,    0,  467,    0,    0,    0,    0,    0,
			    0,  467,    0,    0,    0,  467,    0,  467,  182,  500,
			    7,    0,    0,    0,    0,    0,  181,  180,  179,  178,
			  188,  187,  186,   12,  185,  184,    9,    0,    0,    0,
			  183,    0,    0,    0,    0,    0,    0,    0,    0,    0,
			    0,    0,    0,  434,    0,    0,    0,    0,    0,    0,
			    8,    0,    0,    0,    0,  177,  176,    0,    0,    0,
			    0,    0,  175,  174,  173,    0,    0,    0,  172,    0,
			  171,    0,  170,    0,  182,    0,    7,  169,  168,    0,

			    0,    0,  181,  180,  179,  178,  188,  187,  186,   12,
			  185,  184,    9,    0,    0,    0,  183,   15,   14,   13,
			   12,   11,   10,    9,    0,  188,  187,  186,   12,  185,
			  184,    9,    0,    0,    0,  183,    8,    0,    0,    0,
			    0,  177,  176,    0,    0,    0,    0,    8,  175,  174,
			  173,    0,    0,    0,  172,    8,  171,    0,  170,    0,
			  182,    0,    7,  169,  168,    0,    0,    0,  181,  180,
			  179,  178,    0,    7,    0,    0,    0,    0,    0,  182,
			    0,    7,    0,    0,    0,    0,    0,  181,  180,  179,
			  178,  304,  303,  302,  301,  300,  299,  298,  297,  296,

			  295,  294,  293,  292,  291,  290,    0,  177,  176,    0,
			    0,   70,    0,    0,  175,  174,  173,   78,    6,    5,
			  172,    0,  381,    0,  170,    0,  177,  176,  335,  380,
			  168,    0,    0,  175,  174,  173,    0,    0,    0,  172,
			    0,  171,    0,  170,    0,    0,    0,  335,  169,  168,
			  188,  187,  186,   12,  185,  184,    9,  148,  151,    0,
			  183,    0,    0,    0,    0,    0,    0,    0,    0,    0,
			    0,    0,    0,  365,    0,    0,  202,    0,  205,    0,
			    8,  188,  187,  186,   12,  185,  184,    9,    0,    0,
			    0,  183,   15,   14,   13,   12,   11,   10,    9,    0,

			  247,    0,    0,  250,  182,    0,    7,    0,    0,    0,
			    0,    8,  181,  180,  179,  178,    0,    0,    0,    0,
			    0,    0,    8,  188,  187,  186,   12,  185,  184,    9,
			    0,    0,    0,  183,    0,  182,  362,    7,    0,    0,
			    0,    0,    0,  181,  180,  179,  178,    0,    7,    0,
			    0,  177,  176,    8,    0,    0,    0,    0,  175,  174,
			  173,    0,    0,    0,  172,    0,  171,    0,  170,    0,
			    0,    0,    0,  169,  168,    0,    0,  182,    0,    7,
			    0,    0,  177,  176,    0,  181,  180,  179,  178,  175,
			  174,  173,    0,    6,    5,  172,    0,  171,    0,  170,

			    0,    0,    0,   44,  169,  168,  188,  187,  186,   12,
			  185,  184,    9,    0,    0,    0,  183,    0,    0,    0,
			    0,    0,    0,    0,  177,  176,    0,    0,    0,    0,
			    0,  175,  174,  173,  288,  570,    8,  172,    0,  171,
			    0,  170,    0,    0,    0,    0,  169,  168,    0,   15,
			   14,   13,   12,   11,   10,    9,    0,    0,    0,    0,
			  182,    0,    7,    0,    0,    0,    0,    0,  181,  180,
			  179,  178,    0,    0,    0,    0,    0,    0,    0,    8,
			    0,    0,    0,  307,  306,  305,  304,  303,  302,  301,
			  300,  299,  298,  297,  296,  295,  294,  293,  292,  291,

			  290,    0,    0,    0,    0,    7,    0,  177,  176,    0,
			    0,    0,    0,    0,  175,  174,  173,    0,    0,    0,
			  172,    0,  171, -274,  170,    0, -274, -274,    0,  169,
			  168,    0,    0,    0,    0,    0,    0, -274,    0,    0,
			 -274,    0,    0, -274, -274, -274, -274,    0,    0,    0,
			    6,    5, -274,  572, -274,    0,    0,    0, -274, -274,
			   36,    0,    0,    0,    0,    0,    0,    0,    0,    0,
			 -274, -274,  566,    0,    0,    0,    0,    0,    0, -274,
			 -274, -274, -274, -274, -274, -274,    0,    0,    0,  307,
			  306,  305,  304,  303,  302,  301,  300,  299,  298,  297,

			  296,  295,  294,  293,  292,  291,  290,  511,  307,  306,
			  305,  304,  303,  302,  301,  300,  299,  298,  297,  296,
			  295,  294,  293,  292,  291,  290,    0,    0,    0,    0,
			    0, -274,  509,    0,    0,    0, -274,    0,  276,    0,
			 -274, -274,    0,  307,  306,  305,  304,  303,  302,  301,
			  300,  299,  298,  297,  296,  295,  294,  293,  292,  291,
			  290,    0,  307,  306,  305,  304,  303,  302,  301,  300,
			  299,  298,  297,  296,  295,  294,  293,  292,  291,  290,
			  307,  306,  305,  304,  303,  302,  301,  300,  299,  298,
			  297,  296,  295,  294,  293,  292,  291,  290,    0,    0,

			    0,    0,    0,    0,    0,    0,    0,    0,  505,  307,
			  306,  305,  304,  303,  302,  301,  300,  299,  298,  297,
			  296,  295,  294,  293,  292,  291,  290,    0,    0,    0,
			    0,    0,    0,    0,    0,    0,    0,  432,  307,  306,
			  305,  304,  303,  302,  301,  300,  299,  298,  297,  296,
			  295,  294,  293,  292,  291,  290,    0,    0,    0,    0,
			    0,    0,    0,    0,    0,    0,  330,  307,  306,  305,
			  304,  303,  302,  301,  300,  299,  298,  297,  296,  295,
			  294,  293,  292,  291,  290,  236,  235,  234,  233,  232,
			  231,  230,  229,  228,  227,  226,  225,  224,  223,  222,

			  221,  220,  219,  306,  305,  304,  303,  302,  301,  300,
			  299,  298,  297,  296,  295,  294,  293,  292,  291,  290,
			  303,  302,  301,  300,  299,  298,  297,  296,  295,  294,
			  293,  292,  291,  290>>)
		end

	yycheck_template: ANY is
			-- This is supposed to be "like FIXED_INTEGER_ARRAY_TYPE",
			-- but once functions cannot be declared with anchored types.
		once
			Result := yyfixed_array (<<
			    1,   96,  125,  179,  102,  279,  156,  281,    1,    4,
			  276,    6,    6,  164,    9,    9,   17,  169,    6,    6,
			  154,    9,    9,   14,   17,  143,  322,   67,  180,  181,
			    6,  171,  452,    9,    6,   36,   58,  189,   39,   40,
			   41,  461,   43,   36,   45,  143,   39,   40,   36,   58,
			   22,   39,   45,   28,  191,    6,    0,   26,    9,   60,
			   64,   49,  445,   39,  116,    6,  340,    0,   99,  121,
			  101,  211,   73,   49,   75,  458,  121,  373,   82,   66,
			   81,   22,  127,  124,  504,  100,   87,  127,    6,   65,
			   66,    9,   22,   17,  116,   64,   68,   98,   99,  100,

			  101,    7,  117,  253,  524,   38,  257,  116,  491,  104,
			  105,  385,   36,  265,  145,   66,  117,  118,  252,  502,
			  114,   45,  123,  241,  125,  116,  114,   68,  511,  130,
			  131,  397,  119,    3,    4,  275,    6,  277,   68,    9,
			   28,  116,  114,  241,  145,  121,  161,   65,  486,  164,
			  533,  288,   24,  168,   28,  493,  430,  426,   30,  433,
			  161,  544,   62,  164,   22,  434,  316,  168,  170,   28,
			  172,  173,  174,  175,  176,  177,  559,  124,  330,  331,
			  127,  183,   40,  566,   56,  523,  326,  570,  115,  572,
			  191,  460,  368,  116,  121,   65,   66,   67,  114,  122,

			  127,   27,    6,  119,  542,    9,  116,  103,  104,  478,
			   68,  387,  122,    3,    4,    5,    6,    7,    8,    9,
			   15,   16,  398,  238,  239,  240,   30,    6,  380,    6,
			    9,  500,    9,  124,  104,  105,  376,  238,  239,  240,
			   44,  381,  257,   33,   12,  260,   75,   76,  116,  119,
			  146,  121,   56,  149,  122,  431,  257,   36,  259,  260,
			   39,  115,   39,   92,   93,  116,  116,  121,  118,   59,
			   49,  122,   49,  127,  276,   81,  428,   28,  279,  116,
			  281,   87,  283,  120,  119,   67,  121,  288,  290,  291,
			  292,  293,  294,  295,  296,  297,  298,  299,  300,  301,

			  302,  303,  304,  305,  306,  307,    6,  308,  448,    9,
			  450,   26,   27,  124,  104,  105,  127,  110,  111,   63,
			  335,  322,   24,   25,  114,  124,  328,  116,  127,  118,
			   32,  333,  120,    6,  335,    0,    9,  124,  116,  340,
			  118,    6,   28,  483,    7,   18,   48,   28,   28,  115,
			  116,   31,    4,    5,  369,   42,   21,   22,    7,   24,
			  362,    4,    5,  365,  120,   30,   39,   17,  369,  123,
			   50,   51,  373,   38,  375,   55,   49,   53,  121,    6,
			   60,   29,    9,   10,  385,  378,  509,  124,    7,  391,
			  124,   56,  121,   20,  489,  397,   23,  124,   45,  551,

			  401,  124,  120,   68,   28,  127,   52,  120,   35,  532,
			   37,  120,   43,   28,   41,  417,  122,   55,   19,  420,
			  543,  124,  545,  120,  115,  426,  121,   54,   28,  430,
			   50,   28,  433,  434,   28,  436,  119,  116,   65,   66,
			   67,   68,  443,    4,  445,    4,  121,  449,  119,  114,
			   28,  452,   60,   28,  456,  457,   28,  458,  116,  460,
			  461,   19,    6,  464,  104,  105,  106,  107,  108,  109,
			  110,  111,   28,   28,  116,   11,   28,  478,   31,   68,
			   34,    3,    4,    5,  117,    7,    8,  114,    7,   21,
			  491,  116,  119,  114,  121,  497,  123,   47,  443,  500,

			  445,  502,  417,  504,  117,  115,  183,   38,  509,  545,
			  511,   33,  532,  458,  543,  550,  464,  436,  260,  464,
			   84,   67,  152,  524,  111,   47,  378,   72,   39,   80,
			   40,  532,  533,   80,  536,  536,   36,   59,   80,   61,
			   54,   76,  543,  544,  545,  378,  491,  549,    2,   -1,
			   -1,  553,   -1,   -1,   -1,   -1,   -1,  502,  559,  561,
			   -1,  563,   -1,   -1,  509,  566,  511,   -1,   -1,  570,
			   -1,  572,   -1,   -1,    3,    4,    5,    6,    7,    8,
			    9,   -1,  104,  105,   13,   -1,   -1,  532,  533,  106,
			  107,  108,  109,  110,  111,   -1,   -1,   -1,  543,  544,

			  545,   -1,   -1,   -1,   33,   -1,   -1,   -1,   -1,   -1,
			   -1,   -1,   -1,   -1,  559,   -1,   -1,   -1,   -1,   -1,
			   -1,  566,   -1,   -1,   -1,  570,   -1,  572,   57,   58,
			   59,   -1,   -1,   -1,   -1,   -1,   65,   66,   67,   68,
			    3,    4,    5,    6,    7,    8,    9,   -1,   -1,   -1,
			   13,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
			   -1,   -1,   -1,   26,   -1,   -1,   -1,   -1,   -1,   -1,
			   33,   -1,   -1,   -1,   -1,  104,  105,   -1,   -1,   -1,
			   -1,   -1,  111,  112,  113,   -1,   -1,   -1,  117,   -1,
			  119,   -1,  121,   -1,   57,   -1,   59,  126,  127,   -1,

			   -1,   -1,   65,   66,   67,   68,    3,    4,    5,    6,
			    7,    8,    9,   -1,   -1,   -1,   13,    3,    4,    5,
			    6,    7,    8,    9,   -1,    3,    4,    5,    6,    7,
			    8,    9,   -1,   -1,   -1,   13,   33,   -1,   -1,   -1,
			   -1,  104,  105,   -1,   -1,   -1,   -1,   33,  111,  112,
			  113,   -1,   -1,   -1,  117,   33,  119,   -1,  121,   -1,
			   57,   -1,   59,  126,  127,   -1,   -1,   -1,   65,   66,
			   67,   68,   -1,   59,   -1,   -1,   -1,   -1,   -1,   57,
			   -1,   59,   -1,   -1,   -1,   -1,   -1,   65,   66,   67,
			   68,   97,   98,   99,  100,  101,  102,  103,  104,  105,

			  106,  107,  108,  109,  110,  111,   -1,  104,  105,   -1,
			   -1,   57,   -1,   -1,  111,  112,  113,   63,  104,  105,
			  117,   -1,  119,   -1,  121,   -1,  104,  105,  125,  126,
			  127,   -1,   -1,  111,  112,  113,   -1,   -1,   -1,  117,
			   -1,  119,   -1,  121,   -1,   -1,   -1,  125,  126,  127,
			    3,    4,    5,    6,    7,    8,    9,  103,  104,   -1,
			   13,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
			   -1,   -1,   -1,   26,   -1,   -1,  122,   -1,  124,   -1,
			   33,    3,    4,    5,    6,    7,    8,    9,   -1,   -1,
			   -1,   13,    3,    4,    5,    6,    7,    8,    9,   -1,

			  146,   -1,   -1,  149,   57,   -1,   59,   -1,   -1,   -1,
			   -1,   33,   65,   66,   67,   68,   -1,   -1,   -1,   -1,
			   -1,   -1,   33,    3,    4,    5,    6,    7,    8,    9,
			   -1,   -1,   -1,   13,   -1,   57,   58,   59,   -1,   -1,
			   -1,   -1,   -1,   65,   66,   67,   68,   -1,   59,   -1,
			   -1,  104,  105,   33,   -1,   -1,   -1,   -1,  111,  112,
			  113,   -1,   -1,   -1,  117,   -1,  119,   -1,  121,   -1,
			   -1,   -1,   -1,  126,  127,   -1,   -1,   57,   -1,   59,
			   -1,   -1,  104,  105,   -1,   65,   66,   67,   68,  111,
			  112,  113,   -1,  104,  105,  117,   -1,  119,   -1,  121,

			   -1,   -1,   -1,  114,  126,  127,    3,    4,    5,    6,
			    7,    8,    9,   -1,   -1,   -1,   13,   -1,   -1,   -1,
			   -1,   -1,   -1,   -1,  104,  105,   -1,   -1,   -1,   -1,
			   -1,  111,  112,  113,  114,   46,   33,  117,   -1,  119,
			   -1,  121,   -1,   -1,   -1,   -1,  126,  127,   -1,    3,
			    4,    5,    6,    7,    8,    9,   -1,   -1,   -1,   -1,
			   57,   -1,   59,   -1,   -1,   -1,   -1,   -1,   65,   66,
			   67,   68,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   33,
			   -1,   -1,   -1,   94,   95,   96,   97,   98,   99,  100,
			  101,  102,  103,  104,  105,  106,  107,  108,  109,  110,

			  111,   -1,   -1,   -1,   -1,   59,   -1,  104,  105,   -1,
			   -1,   -1,   -1,   -1,  111,  112,  113,   -1,   -1,   -1,
			  117,   -1,  119,    6,  121,   -1,    9,   10,   -1,  126,
			  127,   -1,   -1,   -1,   -1,   -1,   -1,   20,   -1,   -1,
			   23,   -1,   -1,   26,   27,   28,   29,   -1,   -1,   -1,
			  104,  105,   35,   58,   37,   -1,   -1,   -1,   41,   42,
			  114,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
			   53,   54,   58,   -1,   -1,   -1,   -1,   -1,   -1,   62,
			   63,   64,   65,   66,   67,   68,   -1,   -1,   -1,   94,
			   95,   96,   97,   98,   99,  100,  101,  102,  103,  104,

			  105,  106,  107,  108,  109,  110,  111,   58,   94,   95,
			   96,   97,   98,   99,  100,  101,  102,  103,  104,  105,
			  106,  107,  108,  109,  110,  111,   -1,   -1,   -1,   -1,
			   -1,  114,   64,   -1,   -1,   -1,  119,   -1,  121,   -1,
			  123,  124,   -1,   94,   95,   96,   97,   98,   99,  100,
			  101,  102,  103,  104,  105,  106,  107,  108,  109,  110,
			  111,   -1,   94,   95,   96,   97,   98,   99,  100,  101,
			  102,  103,  104,  105,  106,  107,  108,  109,  110,  111,
			   94,   95,   96,   97,   98,   99,  100,  101,  102,  103,
			  104,  105,  106,  107,  108,  109,  110,  111,   -1,   -1,

			   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,  122,   94,
			   95,   96,   97,   98,   99,  100,  101,  102,  103,  104,
			  105,  106,  107,  108,  109,  110,  111,   -1,   -1,   -1,
			   -1,   -1,   -1,   -1,   -1,   -1,   -1,  122,   94,   95,
			   96,   97,   98,   99,  100,  101,  102,  103,  104,  105,
			  106,  107,  108,  109,  110,  111,   -1,   -1,   -1,   -1,
			   -1,   -1,   -1,   -1,   -1,   -1,  122,   94,   95,   96,
			   97,   98,   99,  100,  101,  102,  103,  104,  105,  106,
			  107,  108,  109,  110,  111,   75,   76,   77,   78,   79,
			   80,   81,   82,   83,   84,   85,   86,   87,   88,   89,

			   90,   91,   92,   95,   96,   97,   98,   99,  100,  101,
			  102,  103,  104,  105,  106,  107,  108,  109,  110,  111,
			   98,   99,  100,  101,  102,  103,  104,  105,  106,  107,
			  108,  109,  110,  111>>)
		end

feature {NONE} -- Constants

	yyFinal: INTEGER is 577
			-- Termination state id

	yyFlag: INTEGER is -32768
			-- Most negative INTEGER

	yyNtbase: INTEGER is 128
			-- Number of tokens

	yyLast: INTEGER is 1433
			-- Upper bound of `yytable' and `yycheck'

	yyMax_token: INTEGER is 360
			-- Maximum token id
			-- (upper bound of `yytranslate'.)

	yyNsyms: INTEGER is 256
			-- Number of symbols
			-- (terminal and nonterminal)

feature -- User-defined features



feature {NONE} -- Initialization

	make is
			-- Create a new Eiffel parser.
		do
			make_eiffel_scanner
			make_parser_skeleton
		end

	execute is
			-- Parse Eiffel files `arguments (1..argument_count)'.
		local
			j, n: INTEGER
			a_filename: STRING
			a_file: like INPUT_STREAM_TYPE
		do
			make
			n := Arguments.argument_count
			if n = 0 then
				std.error.put_string ("usage: eiffel_parser filename ...%N")
				Exceptions.die (1)
			else
				from j := 1 until j > n loop
					a_filename := Arguments.argument (j)
					a_file := INPUT_STREAM_.make_file_open_read (a_filename)
					if INPUT_STREAM_.is_open_read (a_file) then
						reset
						set_input_buffer (new_file_buffer (a_file))
						parse
						INPUT_STREAM_.close (a_file)
					else
						std.error.put_string ("eiffel_parser: cannot read %'")
						std.error.put_string (a_filename)
						std.error.put_string ("%'%N")
					end
					j := j + 1
				end
			end
		end

	benchmark is
			-- Parse Eiffel file `argument (2)' `argument (1)' times.
		local
			j, n: INTEGER
			a_filename: STRING
			a_file: like INPUT_STREAM_TYPE
		do
			make
			if
				Arguments.argument_count < 2 or else
				not STRING_.is_integer (Arguments.argument (1))
			then
				std.error.put_string ("usage: eiffel_parser nb filename%N")
				Exceptions.die (1)
			else
				n := Arguments.argument (1).to_integer
				a_filename := Arguments.argument (2)
				from j := 1 until j > n loop
					a_file := INPUT_STREAM_.make_file_open_read (a_filename)
					if INPUT_STREAM_.is_open_read (a_file) then
						reset
						set_input_buffer (new_file_buffer (a_file))
						parse
						INPUT_STREAM_.close (a_file)
					else
						std.error.put_string ("eiffel_parser: cannot read %'")
						std.error.put_string (a_filename)
						std.error.put_string ("%'%N")
						Exceptions.die (1)
					end
					j := j + 1
				end
			end
		end

feature -- Error handling

	report_error (a_message: STRING) is
			-- Print error message.
		local
			f_buffer: YY_FILE_BUFFER
		do
			f_buffer ?= input_buffer
			if f_buffer /= Void then
				std.error.put_string (INPUT_STREAM_.name (f_buffer.file))
				std.error.put_string (", line ")
			else
				std.error.put_string ("line ")
			end
			std.error.put_integer (eif_lineno)
			std.error.put_string (": ")
			std.error.put_string (a_message)
			std.error.put_character ('%N')
		end

end -- class EIFFEL_PARSER
