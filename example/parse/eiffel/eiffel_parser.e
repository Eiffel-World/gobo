indexing

	description:

		"Eiffel parsers"

	author:     "Eric Bezault <ericb@gobo.demon.co.uk>"
	copyright:  "Copyright (c) 1998, Eric Bezault"
	date:       "$Date$"
	revision:   "$Revision$"

class EIFFEL_PARSER

inherit

	YY_PARSER_SKELETON [ANY]
		rename
			make as make_parser_skeleton
		redefine
			report_error
		end

	EIFFEL_SCANNER
		rename
			make as make_eiffel_scanner
		end

	KL_SHARED_EXCEPTIONS

	KL_SHARED_ARGUMENTS

creation

	make, execute, benchmark


feature {NONE} -- Tables

	yy_build_parser_tables is
			-- Build parser tables.
		do
			yytranslate := yytranslate_
			yyr1 := yyr1_
			yyr2 := yyr2_
			yydefact := yydefact_
			yydefgoto := yydefgoto_
			yypact := yypact_
			yypgoto := yypgoto_
			yytable := yytable_
			yycheck := yycheck_
		end

	yyFinal: INTEGER is 498

	yyFlag: INTEGER is -32768

	yyNtbase: INTEGER is 125

	yyMax_token: INTEGER is 359
	yyNsyms: INTEGER is 243

	yytranslate_: ARRAY [INTEGER] is
		once
			Result := INTEGER_ARRAY_.make_from_array (<<0,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,   122,     2,     2,   124,     2,     2,     2,   120,
   121,   105,   103,   115,   104,   123,   106,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,   114,   113,    99,
    97,   100,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
   116,     2,   117,   109,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,   118,     2,   119,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     1,     2,     3,     4,     5,
     6,     7,     8,     9,    10,    11,    12,    13,    14,    15,
    16,    17,    18,    19,    20,    21,    22,    23,    24,    25,
    26,    27,    28,    29,    30,    31,    32,    33,    34,    35,
    36,    37,    38,    39,    40,    41,    42,    43,    44,    45,
    46,    47,    48,    49,    50,    51,    52,    53,    54,    55,
    56,    57,    58,    59,    60,    61,    62,    63,    64,    65,
    66,    67,    68,    69,    70,    71,    72,    73,    74,    75,
    76,    77,    78,    79,    80,    81,    82,    83,    84,    85,
    86,    87,    88,    89,    90,    91,    92,    93,    94,    95,
    96,    98,   101,   102,   107,   108,   110,   111,   112>>, 0)
		end

	yyr1_: ARRAY [INTEGER] is
		once
			Result := INTEGER_ARRAY_.make_from_array (<<0,
   125,   125,   126,   126,   127,   128,   128,   129,   129,   129,
   130,   130,   130,   130,   131,   131,   131,   132,   132,   133,
   133,   134,   134,   135,   136,   136,   136,   136,   137,   137,
   138,   138,   138,   139,   139,   140,   140,   141,   142,   142,
   142,   142,   142,   142,   143,   143,   143,   143,   143,   144,
   144,   145,   145,   145,   145,   145,   146,   147,   148,   149,
   150,   151,   152,   152,   152,   153,   154,   154,   155,   155,
   155,   156,   156,   156,   157,   158,   158,   159,   159,   159,
   160,   161,   161,   162,   162,   162,   163,   164,   164,   165,
   166,   166,   167,   168,   168,   169,   169,   169,   170,   171,
   171,   171,   172,   172,   172,   173,   174,   174,   174,   175,
   175,   175,   176,   177,   178,   178,   179,   179,   179,   180,
   180,   181,   181,   182,   182,   182,   183,   183,   183,   183,
   184,   184,   184,   184,   184,   184,   184,   184,   184,   184,
   184,   184,   184,   184,   184,   184,   184,   184,   185,   185,
   186,   186,   186,   187,   187,   187,   188,   189,   189,   190,
   190,   191,   192,   192,   192,   192,   193,   193,   194,   194,
   195,   195,   195,   196,   196,   196,   197,   197,   198,   198,
   198,   199,   199,   199,   200,   200,   201,   201,   202,   202,
   202,   202,   202,   202,   202,   203,   204,   205,   205,   206,
   206,   206,   207,   207,   207,   208,   208,   208,   208,   208,
   208,   208,   208,   208,   208,   209,   209,   210,   210,   211,
   212,   212,   213,   214,   214,   215,   215,   215,   216,   217,
   217,   217,   218,   218,   218,   219,   219,   220,   220,   220,
   221,   222,   222,   222,   222,   223,   224,   224,   225,   225,
   225,   226,   227,   227,   227,   227,   227,   227,   227,   227,
   228,   228,   229,   229,   230,   230,   230,   231,   231,   232,
   232,   232,   232,   233,   233,   234,   234,   234,   234,   234,
   234,   234,   234,   234,   234,   234,   234,   234,   234,   234,
   234,   234,   234,   235,   235,   235,   236,   236,   236,   237,
   237,   237,   237,   237,   237,   237,   237,   237,   237,   237,
   237,   237,   237,   237,   237,   237,   237,   237,   237,   238,
   238,   238,   238,   238,   238,   239,   239,   240,   240,   240,
   241,   241,   241,   242,   242>>, 0)
		end

	yyr2_: ARRAY [INTEGER] is
		once
			Result := INTEGER_ARRAY_.make_from_array (<<0,
     1,     2,     8,     5,     3,     0,     2,     0,     1,     2,
     1,     2,     3,     4,     1,     3,     2,     1,     3,     1,
     1,     1,     2,     3,     0,     1,     1,     1,     0,     3,
     0,     2,     4,     0,     2,     0,     2,     2,     2,     4,
     4,     2,     5,     5,     1,     3,     4,     3,     4,     0,
     1,     1,     1,     1,     1,     1,     6,     5,     4,     3,
     2,     2,     0,     3,     5,     2,     0,     1,     0,     1,
     2,     1,     2,     3,     2,     1,     1,     0,     1,     3,
     3,     0,     1,     0,     1,     3,     2,     0,     1,     2,
     0,     1,     2,     0,     1,     0,     1,     2,     3,     0,
     1,     3,     0,     1,     2,     3,     0,     1,     2,     1,
     2,     3,     2,     3,     0,     2,     1,     1,     1,     1,
     3,     1,     2,     1,     2,     2,     1,     1,     1,     1,
     1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
     1,     1,     1,     1,     1,     1,     1,     1,     0,     3,
     0,     1,     2,     1,     2,     3,     3,     1,     3,     0,
     2,     7,     1,     2,     2,     3,     0,     2,     0,     2,
     0,     2,     3,     0,     2,     3,     0,     2,     0,     1,
     2,     1,     2,     3,     1,     2,     0,     2,     1,     2,
     2,     2,     2,     2,     2,     2,     1,     0,     3,     0,
     1,     3,     0,     1,     2,     1,     1,     1,     1,     1,
     1,     1,     1,     1,     1,     5,     3,     0,     3,     3,
     1,     1,     7,     0,     2,     0,     4,     5,     5,     0,
     4,     5,     0,     1,     3,     1,     3,     1,     1,     1,
     9,     0,     1,     2,     4,     4,     0,     3,     0,     1,
     3,     3,     1,     3,     3,     5,     2,     4,     5,     7,
     2,     4,     0,     3,     0,     1,     3,     1,     2,     1,
     1,     1,     3,     1,     1,     1,     1,     1,     3,     1,
     1,     1,     1,     1,     1,     3,     2,     2,     2,     2,
     3,     2,     4,     0,     1,     3,     0,     1,     3,     1,
     1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
     1,     1,     1,     1,     1,     1,     2,     2,     1,     1,
     1,     1,     1,     1,     1,     1,     1,     1,     2,     2,
     1,     2,     2,     1,     1>>, 0)
		end

	yydefact_: ARRAY [INTEGER] is
		once
			Result := INTEGER_ARRAY_.make_from_array (<<     6,
     8,     6,     1,    25,   321,   328,   331,   334,   324,   325,
   335,   327,   326,     0,     0,     7,     9,    11,    15,    18,
    21,   320,   322,   323,    20,     2,    26,    27,    28,    29,
     0,   330,   333,   329,   332,    22,    12,    10,     0,    17,
    31,    36,     0,    22,    13,     0,    23,    19,    20,    16,
     0,    34,     0,    96,    24,    14,     0,    30,     0,    32,
    37,    82,    96,     4,   103,    97,    34,   197,    35,   198,
    84,    83,   100,     0,    38,    50,   103,    45,    82,    98,
   177,   104,    33,   200,   196,     0,    85,    99,   101,    39,
    42,    69,    78,    63,    78,    78,    96,    51,    52,    53,
    54,    55,    56,    67,    91,    94,    88,     0,   177,   107,
   179,   105,     0,     0,     0,     0,     0,   201,   189,     0,
     0,    81,     0,    96,     0,    48,    66,    70,    72,    78,
     0,     0,    87,    79,   124,    62,     0,    93,    90,    96,
     0,    46,    68,    91,    92,    88,    95,     0,    89,    94,
    61,     5,     0,   106,   108,   110,   149,   120,   122,   281,
   282,   283,   284,   285,   297,     0,   278,   277,   263,     0,
     0,     0,     0,     0,     0,     0,   178,   180,   182,   276,
   253,   185,   280,   263,     3,     0,     0,   194,   195,   190,
   192,   193,   191,     0,   199,    86,   102,     0,    49,    41,
    71,    73,    77,    75,    76,   131,   132,   133,   134,   135,
   136,   137,   138,   139,   140,   141,   142,   144,   147,   143,
   145,   146,   148,   126,   128,   129,   130,   127,   125,     0,
     0,     0,     0,    47,    40,    88,    94,    60,     0,   123,
   109,   111,     0,   151,   113,   160,   298,     0,   263,   294,
     0,     0,   265,   257,   287,   288,   290,   289,   292,     0,
     0,   181,   183,     0,   319,   315,   316,   314,   308,   309,
   310,   311,   312,   313,   301,   302,   303,   304,   306,   307,
   305,   300,     0,   186,   261,   202,    44,    74,    80,     0,
    64,    43,    94,     0,    59,   112,   121,     0,   152,   154,
     0,   158,     0,   115,   286,     0,     0,   295,   255,   254,
     0,     0,   266,   268,     0,     0,   279,   184,   263,   318,
   317,   291,     0,     0,    58,   150,   153,   155,     0,     0,
   161,    36,   114,   299,     0,   293,   271,   272,     0,   270,
   269,     0,   264,   258,   263,     0,   262,    65,    57,   156,
   157,   159,   118,   171,   116,   119,   117,   296,     0,   267,
   259,   256,   179,   169,   273,     0,   179,   172,   151,     0,
   260,   173,   170,   163,   203,     0,   203,   174,     0,   179,
   247,   203,     0,     0,   214,     0,   275,   215,     0,     0,
   164,   204,   206,   208,   209,   210,   211,   212,   213,   207,
     0,   263,   167,   165,   179,   187,   275,   218,   274,     0,
   249,   203,   177,     0,   230,     0,     0,   205,   221,   222,
     0,     0,   166,   179,   175,   203,     0,     0,   217,   252,
   250,     0,     0,   242,   203,   233,   224,     0,     0,   220,
   168,   176,   188,   162,   263,     0,   248,   246,   243,     0,
   226,   239,     0,     0,   234,   236,   240,   238,   203,   233,
     0,   218,   219,   251,   244,   263,     0,     0,   224,   203,
     0,     0,   225,     0,   229,   216,     0,     0,     0,     0,
     0,   231,   235,   237,   203,   245,   203,   203,     0,   223,
   232,     0,   227,   203,   241,   228,     0,     0>>, 0)
		end

	yydefgoto_: ARRAY [INTEGER] is
		once
			Result := INTEGER_ARRAY_.make_from_array (<<     2,
     3,    74,     4,    16,    17,    18,    19,    20,    38,    30,
    31,    42,    51,    60,    54,    64,    75,    76,    97,    98,
    99,   100,   101,   102,   103,   104,   136,   105,   144,   127,
   128,   129,   204,   133,   130,    73,    86,   149,   150,   145,
   146,   147,   148,    77,    66,    88,    81,    82,   154,   155,
   156,   245,   333,   355,   157,   158,   134,   229,   224,   246,
   298,   299,   300,   301,   304,   356,   378,   423,   370,   364,
   406,   113,   177,   178,   179,   427,   118,   119,    70,    85,
   120,   391,   392,   393,   429,   394,   421,   395,   461,   469,
   396,   437,   454,   455,   456,   397,   450,   398,   412,   432,
   399,   180,   181,   285,   312,   313,   341,   401,   182,   307,
   248,   283,    21,   183,    23,    24,   249>>, 0)
		end

	yypact_: ARRAY [INTEGER] is
		once
			Result := INTEGER_ARRAY_.make_from_array (<<    23,
   889,    59,-32768,    25,-32768,-32768,-32768,-32768,-32768,-32768,
-32768,-32768,-32768,   186,   249,-32768,   180,-32768,    28,-32768,
-32768,-32768,-32768,-32768,    61,-32768,-32768,-32768,-32768,    55,
   191,-32768,-32768,-32768,-32768,   282,-32768,   104,   889,   889,
   210,   194,   210,-32768,-32768,   858,-32768,-32768,-32768,    28,
   -85,   235,   244,    12,-32768,-32768,   210,-32768,   272,-32768,
-32768,   188,   142,-32768,   158,-32768,   235,-32768,-32768,   192,
   210,-32768,   210,   288,-32768,   197,   158,-32768,   188,-32768,
   107,-32768,-32768,   215,-32768,   118,-32768,   202,-32768,-32768,
    56,   188,    96,    96,    96,    96,     1,-32768,-32768,-32768,
-32768,-32768,-32768,   287,   260,   269,   283,   304,   107,   187,
   652,-32768,   307,    97,   272,    62,   272,-32768,-32768,   177,
   210,-32768,   210,   142,   308,-32768,-32768,   -39,-32768,   291,
  1028,   253,   223,-32768,-32768,   228,   327,   223,   223,   142,
   320,-32768,-32768,   260,-32768,   283,-32768,   321,-32768,   269,
-32768,-32768,    96,-32768,     5,-32768,    36,-32768,-32768,-32768,
-32768,-32768,-32768,-32768,   652,   230,   229,   231,   233,   652,
   652,   652,   652,   652,   210,   652,-32768,   511,-32768,-32768,
   242,  1142,-32768,    14,-32768,   347,   352,-32768,-32768,-32768,
-32768,-32768,-32768,   215,-32768,-32768,-32768,   335,-32768,-32768,
   188,-32768,-32768,-32768,   223,-32768,-32768,-32768,-32768,-32768,
-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,
-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,    96,
    96,    96,   339,-32768,-32768,   283,   269,-32768,   341,-32768,
   187,-32768,   187,   210,-32768,   257,  1142,    -8,   233,   210,
   210,   210,   201,   252,-32768,-32768,-32768,-32768,-32768,   258,
  1055,   652,-32768,   210,-32768,   346,-32768,   324,-32768,-32768,
-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,
-32768,-32768,   652,-32768,-32768,-32768,-32768,-32768,-32768,   364,
-32768,-32768,   269,   356,-32768,-32768,-32768,   266,     6,-32768,
   181,-32768,   215,   345,-32768,   652,    45,-32768,   242,   242,
    11,   141,-32768,  1142,   210,   322,   268,-32768,   233,-32768,
-32768,  1142,    96,   365,-32768,-32768,   210,-32768,   215,   210,
-32768,   871,-32768,  1142,   210,-32768,-32768,-32768,   652,-32768,
-32768,   201,-32768,   242,   233,   210,-32768,-32768,-32768,-32768,
-32768,-32768,-32768,   340,-32768,-32768,-32768,-32768,  1084,-32768,
   271,   242,   576,   351,-32768,   210,   652,-32768,   210,   170,
   242,-32768,-32768,-32768,   836,   390,   836,   369,    42,   652,
   279,   836,   652,   652,-32768,   229,   231,-32768,   652,   215,
   836,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,
   286,     3,   383,   836,   587,   348,-32768,   285,-32768,   374,
   398,   836,   717,   919,  1037,  1113,   284,-32768,-32768,-32768,
   652,   402,-32768,   652,-32768,   836,   382,   210,-32768,-32768,
-32768,   154,   767,   350,   836,    22,    57,   268,    42,  1142,
-32768,-32768,   836,-32768,   233,   407,-32768,-32768,   652,   353,
   787,-32768,   231,   -29,-32768,   404,-32768,-32768,   836,    22,
   389,   285,-32768,-32768,  1142,   160,   652,   652,   238,   836,
    22,    22,   836,    17,-32768,-32768,   652,   901,   972,   652,
   391,   836,-32768,-32768,   836,  1142,   836,   836,   990,-32768,
   836,   803,   836,   836,-32768,   836,   418,-32768>>, 0)
		end

	yypgoto_: ARRAY [INTEGER] is
		once
			Result := INTEGER_ARRAY_.make_from_array (<<-32768,
   419,    39,-32768,-32768,-32768,   136,   384,   387,   386,-32768,
-32768,-32768,-32768,   361,    98,-32768,-32768,-32768,-32768,-32768,
-32768,-32768,-32768,-32768,-32768,-32768,-32768,   329,-32768,-32768,
-32768,  -101,-32768,    43,    71,   357,-32768,   355,  -124,   359,
   293,   363,  -146,   392,   150,-32768,   366,   -24,-32768,-32768,
  -142,-32768,-32768,-32768,-32768,   198,   -73,-32768,-32768,-32768,
    75,-32768,  -183,-32768,-32768,-32768,-32768,-32768,-32768,-32768,
-32768,  -106,  -202,-32768,  -145,-32768,  -192,   240,-32768,-32768,
-32768,  -215,    16,-32768,   -22,-32768,-32768,-32768,   -18,-32768,
-32768,-32768,    -7,   -17,   -16,-32768,-32768,-32768,-32768,-32768,
-32768,    70,  -242,  -164,-32768,   113,-32768,  -343,  -107,-32768,
-32768,-32768,   125,     7,  -113,-32768,    -1>>, 0)
		end

	yyLast: INTEGER is 1252

	yytable_: ARRAY [INTEGER] is
		once
			Result := INTEGER_ARRAY_.make_from_array (<<    25,
   188,   286,   152,   239,   254,   305,    68,    22,   309,   310,
     8,     8,   242,    11,    11,    25,     8,  -274,  -274,    11,
   137,   237,    62,    22,   452,     6,   202,     8,   470,    57,
    11,    58,   263,    62,    25,   408,   159,    49,    49,    52,
   153,    55,    22,   131,    25,    22,    22,     8,    27,   131,
    11,    63,    22,   132,    28,    67,   112,   247,   497,   132,
     1,    68,   255,   256,   257,   258,   259,     8,   261,    87,
    11,    89,   344,   201,   485,   337,   338,    62,    71,   240,
    29,   159,   459,   -96,   112,   471,   386,   453,   169,   -96,
   294,   135,   135,   135,   135,   462,     1,   -96,   296,   288,
     6,     8,     8,   362,    11,    11,   306,   407,   135,   184,
   331,   293,   189,   140,   192,   328,   318,   241,   327,   196,
   460,   197,   253,   371,   186,   187,   191,   284,   135,   125,
   339,   471,    72,   253,   131,   141,   351,   138,   139,   175,
    79,   389,    39,   350,   132,   314,   324,    68,   111,    72,
   243,   135,    37,   135,   347,   244,   289,   290,   291,   335,
   368,   404,   198,    62,   372,   336,   413,   159,   124,   159,
    41,    45,   205,   260,    40,   322,   184,   410,   233,    62,
   361,    56,     5,     6,     7,     8,     9,    10,    11,    32,
    33,    79,     8,   374,   375,    11,   433,   417,   334,   186,
   187,   376,   425,   160,   161,   162,     8,   163,   164,    11,
   443,    43,    12,   165,    80,     8,    47,   377,    11,   451,
    68,   442,   153,   114,    91,   131,    80,    92,   135,   135,
   135,   359,   121,    12,   314,   132,   122,   340,    13,   135,
    53,   135,   302,   473,   115,    59,    93,    94,   308,   348,
    61,    95,    34,    35,   482,   342,    96,   166,   116,    13,
   184,   343,   319,   459,   480,   167,   168,   169,   446,   491,
   117,   492,   493,   477,   447,   414,   415,    68,   496,   253,
   463,   416,    14,    15,     5,     6,     7,     8,     9,    10,
    11,   194,    36,   195,   329,   330,     8,   302,    69,    11,
   419,   420,    78,   170,   171,    71,   434,    84,   203,   135,
   172,   173,   174,   440,    12,    90,   123,    92,   175,    96,
   176,   135,   458,    95,   311,   302,   225,   226,   352,   131,
   126,   151,    93,   358,   185,   200,   142,   230,    22,   132,
    13,   465,   231,   227,   228,   232,   458,   235,   238,   250,
    32,   251,   253,   252,   190,    34,   193,   458,   458,   478,
   479,   184,   287,   199,   264,   184,   292,   302,   295,   486,
   303,   320,   489,   402,   315,   402,   316,   409,   184,   234,
   402,   321,   323,   325,    14,    15,   326,   332,   345,   402,
   346,   363,   349,   366,    44,   369,   403,   405,   411,   422,
   426,   430,   402,   184,   431,   439,   418,   428,   441,   444,
   402,   402,   449,   464,   467,   472,   475,   498,   490,   418,
    26,    46,   184,    50,   402,    48,   445,    83,   418,   354,
   106,   402,   143,   402,   107,   110,   236,   409,   108,   476,
   297,   402,   109,   373,   400,    65,   400,   466,   418,   402,
   481,   400,   474,   483,   360,   484,   357,   402,   418,     0,
   400,     0,     0,     0,     0,     0,   418,     0,   402,     0,
     0,   402,     0,   400,     0,     0,     0,     0,     0,     0,
   402,   400,   400,   402,     0,   402,   402,     0,   418,   402,
   402,   402,   402,     0,   402,   400,     0,   418,     0,     0,
     0,     0,   400,     0,   400,   457,   418,   418,   418,     0,
     0,   418,   400,   160,   161,   162,     8,   163,   164,    11,
   400,     0,     0,   165,     0,     0,     0,     0,   400,   457,
     0,     0,     0,     0,     0,     0,     0,     0,     0,   400,
   457,   457,   400,    12,     0,     0,     0,     0,     0,     0,
     0,   400,     0,     0,   400,     0,   400,   400,     0,     0,
   400,   400,   400,   400,     0,   400,     0,   166,     0,    13,
     0,     0,     0,     0,     0,   167,   168,   169,   160,   161,
   162,     8,   163,   164,    11,     0,     0,     0,   165,   160,
   161,   162,     8,   163,   164,    11,     0,     0,     0,   165,
     0,   367,     0,     0,     0,     0,     0,     0,    12,     0,
     0,     0,     0,   170,   171,     0,     0,     0,     0,    12,
   172,   173,   174,   262,     0,     0,     0,     0,   175,     0,
   176,     0,   166,     0,    13,     0,     0,     0,     0,     0,
   167,   168,   169,   166,   424,    13,     0,     0,     0,     0,
     0,   167,   168,   169,   160,   161,   162,     8,   163,   164,
    11,     0,     0,     0,   165,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,   170,   171,
     0,     0,     0,     0,    12,   172,   173,   174,     0,   170,
   171,     0,     0,   175,     0,   176,   172,   173,   174,     0,
     0,     0,     0,     0,   175,     0,   176,     0,   166,     0,
    13,     0,     0,     0,     0,     0,   167,   168,   169,     0,
     0,     0,     8,     0,     0,    11,   379,     0,     0,     0,
     0,     0,     0,     0,     0,     0,   380,     0,     0,   381,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,   382,     0,   383,   170,   171,     0,   384,   111,     0,
     0,   172,   173,   174,     0,     0,     0,     0,     0,   175,
   385,   176,     8,     0,     0,    11,   379,     0,     0,     0,
     0,   386,   387,   169,     0,     0,   380,     0,     0,   381,
     0,     0,     8,     0,   448,    11,   379,     0,     0,     0,
     0,   382,     0,   383,     0,     0,   380,   384,     8,   381,
     0,    11,   379,   468,     0,     0,     0,     0,     0,     0,
   385,   382,   380,   383,     0,   381,     0,   384,     0,   388,
   495,   386,   387,   169,   175,     0,   389,   382,   390,   383,
   385,     8,     0,   384,    11,   379,     0,     0,     0,     0,
     0,   386,   387,   169,     0,   380,   385,     0,   381,     0,
     5,     6,     7,     8,     9,    10,    11,   386,   387,   169,
   382,     0,   383,     5,     6,     7,   384,     9,    10,   388,
     0,     0,     0,     0,   175,     0,   389,     0,   390,   385,
    12,     5,     6,     7,     8,     9,    10,    11,     0,   388,
   386,   387,   169,    12,   175,     0,   389,     0,   390,     0,
     0,     0,     0,     0,     0,   388,    13,    53,     0,     0,
   175,    12,   389,     0,   390,     0,     0,     0,     0,    13,
     0,   353,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,   487,    13,   388,     0,
     0,     0,     0,   175,     0,   389,     0,   390,     0,     0,
    14,    15,     0,     0,     0,     0,     0,     0,     0,     0,
    47,     0,     0,    14,    15,     0,   435,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,    14,    15,   265,   266,   267,   268,   269,   270,   271,
   272,   273,   274,   275,   276,   277,   278,   279,   280,   281,
   282,   265,   266,   267,   268,   269,   270,   271,   272,   273,
   274,   275,   276,   277,   278,   279,   280,   281,   282,   488,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,   494,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,   265,   266,   267,   268,   269,   270,
   271,   272,   273,   274,   275,   276,   277,   278,   279,   280,
   281,   282,   265,   266,   267,   268,   269,   270,   271,   272,
   273,   274,   275,   276,   277,   278,   279,   280,   281,   282,
   436,   206,   207,   208,   209,   210,   211,   212,   213,   214,
   215,   216,   217,   218,   219,   220,   221,   222,   223,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,   265,
   266,   267,   268,   269,   270,   271,   272,   273,   274,   275,
   276,   277,   278,   279,   280,   281,   282,   265,   266,   267,
   268,   269,   270,   271,   272,   273,   274,   275,   276,   277,
   278,   279,   280,   281,   282,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,   317,   265,   266,   267,   268,
   269,   270,   271,   272,   273,   274,   275,   276,   277,   278,
   279,   280,   281,   282,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,   365,   265,   266,   267,   268,   269,
   270,   271,   272,   273,   274,   275,   276,   277,   278,   279,
   280,   281,   282,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,   438,   265,   266,   267,   268,   269,   270,
   271,   272,   273,   274,   275,   276,   277,   278,   279,   280,
   281,   282>>, 0)
		end

	yycheck_: ARRAY [INTEGER] is
		once
			Result := INTEGER_ARRAY_.make_from_array (<<     1,
   114,   194,   109,   150,   169,    14,     6,     1,   251,   252,
     6,     6,   155,     9,     9,    17,     6,    15,    16,     9,
    94,   146,    22,    17,     3,     4,   128,     6,    58,   115,
     9,   117,   178,    22,    36,   379,   110,    39,    40,    41,
    36,    43,    36,    39,    46,    39,    40,     6,    24,    39,
     9,    40,    46,    49,    30,    57,    81,   165,     0,    49,
    38,     6,   170,   171,   172,   173,   174,     6,   176,    71,
     9,    73,   315,   113,    58,    65,    66,    22,   118,   153,
    56,   155,    26,    28,   109,   115,    65,    66,    67,    34,
   237,    93,    94,    95,    96,   439,    38,    42,   241,   201,
     4,     6,     6,   346,     9,     9,   115,    66,   110,   111,
   303,   236,   114,   113,   116,   299,   262,   113,   113,   121,
    64,   123,   120,   366,   103,   104,    65,   114,   130,    91,
   120,   115,    62,   120,    39,    97,   329,    95,    96,   118,
    34,   120,   115,   327,    49,   253,   293,     6,    42,    79,
   115,   153,    17,   155,   319,   120,   230,   231,   232,   115,
   363,   377,   124,    22,   367,   121,   382,   241,   113,   243,
   116,    36,   130,   175,   114,   283,   178,   380,   140,    22,
   345,    46,     3,     4,     5,     6,     7,     8,     9,     4,
     5,    34,     6,    24,    25,     9,   412,   390,   306,   103,
   104,    32,   405,     3,     4,     5,     6,     7,     8,     9,
   426,    21,    33,    13,    65,     6,   113,    48,     9,   435,
     6,   424,    36,     9,    28,    39,    77,    31,   230,   231,
   232,   339,   115,    33,   342,    49,   119,   311,    59,   241,
    47,   243,   244,   459,    30,    11,    50,    51,   250,   323,
     7,    55,     4,     5,   470,   115,    60,    57,    44,    59,
   262,   121,   264,    26,    27,    65,    66,    67,   115,   485,
    56,   487,   488,   114,   121,   383,   384,     6,   494,   120,
   445,   389,   103,   104,     3,     4,     5,     6,     7,     8,
     9,   115,   113,   117,   114,   115,     6,   299,    59,     9,
    15,    16,    63,   103,   104,   118,   413,   116,    18,   311,
   110,   111,   112,   421,    33,    28,   115,    31,   118,    60,
   120,   323,   436,    55,   124,   327,    74,    75,   330,    39,
    91,    28,    50,   335,    28,    28,    97,   115,   332,    49,
    59,   449,   115,    91,    92,    19,   460,    28,    28,   120,
     4,   123,   120,   123,   115,     4,   117,   471,   472,   467,
   468,   363,    28,   124,   123,   367,    28,   369,    28,   477,
   114,    26,   480,   375,   123,   377,   119,   379,   380,   140,
   382,    58,    19,    28,   103,   104,   121,    43,    67,   391,
   123,    52,    28,   123,   113,    45,     7,    29,   120,    17,
    53,    28,   404,   405,     7,   122,   391,   123,     7,    28,
   412,   413,    63,     7,    62,    12,    28,     0,    28,   404,
     2,    36,   424,    40,   426,    39,   428,    67,   413,   332,
    76,   433,   104,   435,    76,    79,   144,   439,    76,   462,
   243,   443,    77,   369,   375,    54,   377,   449,   433,   451,
   469,   382,   460,   471,   342,   472,   332,   459,   443,    -1,
   391,    -1,    -1,    -1,    -1,    -1,   451,    -1,   470,    -1,
    -1,   473,    -1,   404,    -1,    -1,    -1,    -1,    -1,    -1,
   482,   412,   413,   485,    -1,   487,   488,    -1,   473,   491,
   492,   493,   494,    -1,   496,   426,    -1,   482,    -1,    -1,
    -1,    -1,   433,    -1,   435,   436,   491,   492,   493,    -1,
    -1,   496,   443,     3,     4,     5,     6,     7,     8,     9,
   451,    -1,    -1,    13,    -1,    -1,    -1,    -1,   459,   460,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   470,
   471,   472,   473,    33,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,   482,    -1,    -1,   485,    -1,   487,   488,    -1,    -1,
   491,   492,   493,   494,    -1,   496,    -1,    57,    -1,    59,
    -1,    -1,    -1,    -1,    -1,    65,    66,    67,     3,     4,
     5,     6,     7,     8,     9,    -1,    -1,    -1,    13,     3,
     4,     5,     6,     7,     8,     9,    -1,    -1,    -1,    13,
    -1,    26,    -1,    -1,    -1,    -1,    -1,    -1,    33,    -1,
    -1,    -1,    -1,   103,   104,    -1,    -1,    -1,    -1,    33,
   110,   111,   112,   113,    -1,    -1,    -1,    -1,   118,    -1,
   120,    -1,    57,    -1,    59,    -1,    -1,    -1,    -1,    -1,
    65,    66,    67,    57,    58,    59,    -1,    -1,    -1,    -1,
    -1,    65,    66,    67,     3,     4,     5,     6,     7,     8,
     9,    -1,    -1,    -1,    13,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   103,   104,
    -1,    -1,    -1,    -1,    33,   110,   111,   112,    -1,   103,
   104,    -1,    -1,   118,    -1,   120,   110,   111,   112,    -1,
    -1,    -1,    -1,    -1,   118,    -1,   120,    -1,    57,    -1,
    59,    -1,    -1,    -1,    -1,    -1,    65,    66,    67,    -1,
    -1,    -1,     6,    -1,    -1,     9,    10,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    20,    -1,    -1,    23,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    35,    -1,    37,   103,   104,    -1,    41,    42,    -1,
    -1,   110,   111,   112,    -1,    -1,    -1,    -1,    -1,   118,
    54,   120,     6,    -1,    -1,     9,    10,    -1,    -1,    -1,
    -1,    65,    66,    67,    -1,    -1,    20,    -1,    -1,    23,
    -1,    -1,     6,    -1,    28,     9,    10,    -1,    -1,    -1,
    -1,    35,    -1,    37,    -1,    -1,    20,    41,     6,    23,
    -1,     9,    10,    27,    -1,    -1,    -1,    -1,    -1,    -1,
    54,    35,    20,    37,    -1,    23,    -1,    41,    -1,   113,
    28,    65,    66,    67,   118,    -1,   120,    35,   122,    37,
    54,     6,    -1,    41,     9,    10,    -1,    -1,    -1,    -1,
    -1,    65,    66,    67,    -1,    20,    54,    -1,    23,    -1,
     3,     4,     5,     6,     7,     8,     9,    65,    66,    67,
    35,    -1,    37,     3,     4,     5,    41,     7,     8,   113,
    -1,    -1,    -1,    -1,   118,    -1,   120,    -1,   122,    54,
    33,     3,     4,     5,     6,     7,     8,     9,    -1,   113,
    65,    66,    67,    33,   118,    -1,   120,    -1,   122,    -1,
    -1,    -1,    -1,    -1,    -1,   113,    59,    47,    -1,    -1,
   118,    33,   120,    -1,   122,    -1,    -1,    -1,    -1,    59,
    -1,    61,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    46,    59,   113,    -1,
    -1,    -1,    -1,   118,    -1,   120,    -1,   122,    -1,    -1,
   103,   104,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
   113,    -1,    -1,   103,   104,    -1,    58,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,   103,   104,    93,    94,    95,    96,    97,    98,    99,
   100,   101,   102,   103,   104,   105,   106,   107,   108,   109,
   110,    93,    94,    95,    96,    97,    98,    99,   100,   101,
   102,   103,   104,   105,   106,   107,   108,   109,   110,    58,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    58,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    93,    94,    95,    96,    97,    98,
    99,   100,   101,   102,   103,   104,   105,   106,   107,   108,
   109,   110,    93,    94,    95,    96,    97,    98,    99,   100,
   101,   102,   103,   104,   105,   106,   107,   108,   109,   110,
    64,    74,    75,    76,    77,    78,    79,    80,    81,    82,
    83,    84,    85,    86,    87,    88,    89,    90,    91,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    93,
    94,    95,    96,    97,    98,    99,   100,   101,   102,   103,
   104,   105,   106,   107,   108,   109,   110,    93,    94,    95,
    96,    97,    98,    99,   100,   101,   102,   103,   104,   105,
   106,   107,   108,   109,   110,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,   121,    93,    94,    95,    96,
    97,    98,    99,   100,   101,   102,   103,   104,   105,   106,
   107,   108,   109,   110,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,   121,    93,    94,    95,    96,    97,
    98,    99,   100,   101,   102,   103,   104,   105,   106,   107,
   108,   109,   110,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,   121,    93,    94,    95,    96,    97,    98,
    99,   100,   101,   102,   103,   104,   105,   106,   107,   108,
   109,   110>>, 0)
		end

feature {NONE} -- Semantic actions

	yy_do_action (yy_act: INTEGER) is
		do
			inspect yy_act

			else
				-- No action
			end
		end



feature {NONE} -- Initialization

	make is
			-- Create a new Eiffel parser.
		do
			make_eiffel_scanner
			make_parser_skeleton
		end

	execute is
			-- Parse Eiffel files `arguments (1..argument_count)'.
		local
			j, n: INTEGER
			a_filename: STRING
			a_file: like INPUT_STREAM_TYPE
		do
			make
			n := Arguments.argument_count
			if n = 0 then
				std.error.put_string ("usage: eiffel_parser filename ...%N")
				Exceptions.die (1)
			else
				from j := 1 until j > n loop
					a_filename := Arguments.argument (j)
					a_file := INPUT_STREAM_.make_file_open_read (a_filename)
					if INPUT_STREAM_.is_open_read (a_file) then
						reset
						set_input_buffer (new_file_buffer (a_file))
						parse
						INPUT_STREAM_.close (a_file)
					else
						std.error.put_string ("eiffel_parser: cannot read %'")
						std.error.put_string (a_filename)
						std.error.put_string ("%'%N")
					end
					j := j + 1
				end
			end
		end

	benchmark is
			-- Parse Eiffel file `argument (2)' `argument (1)' times.
		local
			j, n: INTEGER
			a_filename: STRING
			a_file: like INPUT_STREAM_TYPE
		do
			make
			if
				Arguments.argument_count < 2 or else
				not STRING_.is_integer (Arguments.argument (1))
			then
				std.error.put_string ("usage: eiffel_parser nb filename%N")
				Exceptions.die (1)
			else
				n := Arguments.argument (1).to_integer
				a_filename := Arguments.argument (2)
				from j := 1 until j > n loop
					a_file := INPUT_STREAM_.make_file_open_read (a_filename)
					if INPUT_STREAM_.is_open_read (a_file) then
						reset
						set_input_buffer (new_file_buffer (a_file))
						parse
						INPUT_STREAM_.close (a_file)
					else
						std.error.put_string ("eiffel_parser: cannot read %'")
						std.error.put_string (a_filename)
						std.error.put_string ("%'%N")
						Exceptions.die (1)
					end
					j := j + 1
				end
			end
		end

feature -- Error handling

	report_error (a_message: STRING) is
			-- Print error message.
		local
			f_buffer: YY_FILE_BUFFER
		do
			f_buffer ?= input_buffer
			if f_buffer /= Void then
				std.error.put_string (INPUT_STREAM_.name (f_buffer.file))
				std.error.put_string (", line ")
			else
				std.error.put_string ("line ")
			end
			std.error.put_integer (eif_lineno)
			std.error.put_string (": ")
			std.error.put_string (a_message)
			std.error.put_character ('%N')
		end

end -- class EIFFEL_PARSER
