indexing

	description:

		"Eiffel parsers"

	author:     "Eric Bezault <ericb@gobo.demon.co.uk>"
	copyright:  "Copyright (c) 1997, Eric Bezault"
	date:       "$Date$"
	revision:   "$Revision$"

class EIFFEL_PARSER

inherit

	YY_PARSER_SKELETON [ANY]
		rename
			make as make_parser_skeleton
		end

	EIFFEL_SCANNER
		rename
			make as make_eiffel_scanner
		end

creation

	make, execute, benchmark


feature {NONE} -- Tables

	yy_build_parser_tables is
			-- Build parser tables.
		do
			yytranslate := yytranslate_
			yyr1 := yyr1_
			yyr2 := yyr2_
			yydefact := yydefact_
			yydefgoto := yydefgoto_
			yypact := yypact_
			yypgoto := yypgoto_
			yytable := yytable_
			yycheck := yycheck_
		end

	yyFinal: INTEGER is 469

	yyFlag: INTEGER is -32768

	yyNtbase: INTEGER is 124

	yyMax_token: INTEGER is 358
	yyNsyms: INTEGER is 235

	yytranslate_: ARRAY [INTEGER] is
		once
			Result := integer_array_.make_from_array (<<0,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,   121,     2,     2,   123,     2,     2,     2,   119,
   120,   104,   102,   114,   103,   122,   105,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,   112,   113,    98,
    96,    99,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
   115,     2,   116,   108,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,   117,     2,   118,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     1,     2,     3,     4,     5,
     6,     7,     8,     9,    10,    11,    12,    13,    14,    15,
    16,    17,    18,    19,    20,    21,    22,    23,    24,    25,
    26,    27,    28,    29,    30,    31,    32,    33,    34,    35,
    36,    37,    38,    39,    40,    41,    42,    43,    44,    45,
    46,    47,    48,    49,    50,    51,    52,    53,    54,    55,
    56,    57,    58,    59,    60,    61,    62,    63,    64,    65,
    66,    67,    68,    69,    70,    71,    72,    73,    74,    75,
    76,    77,    78,    79,    80,    81,    82,    83,    84,    85,
    86,    87,    88,    89,    90,    91,    92,    93,    94,    95,
    97,   100,   101,   106,   107,   109,   110,   111>>, 0)
		end

	yyr1_: ARRAY [INTEGER] is
		once
			Result := integer_array_.make_from_array (<<0,
   124,   125,   125,   125,   126,   126,   127,   127,   127,   128,
   128,   128,   129,   129,   130,   130,   131,   131,   131,   132,
   132,   133,   133,   134,   134,   135,   135,   136,   136,   136,
   137,   137,   138,   138,   138,   138,   138,   138,   139,   140,
   141,   142,   143,   144,   144,   145,   145,   146,   147,   147,
   148,   148,   148,   149,   149,   150,   150,   150,   151,   151,
   152,   152,   153,   153,   154,   154,   155,   155,   156,   156,
   157,   157,   158,   158,   159,   159,   160,   160,   160,   161,
   162,   162,   163,   163,   164,   164,   164,   165,   166,   166,
   166,   167,   167,   168,   168,   169,   169,   170,   171,   171,
   172,   172,   172,   173,   173,   174,   174,   175,   175,   175,
   176,   176,   177,   177,   177,   178,   179,   179,   179,   179,
   180,   181,   181,   181,   181,   181,   181,   181,   181,   181,
   181,   181,   181,   181,   181,   181,   181,   181,   181,   182,
   183,   183,   184,   184,   184,   184,   185,   185,   186,   186,
   186,   186,   186,   187,   188,   188,   188,   189,   189,   190,
   190,   190,   190,   190,   190,   190,   190,   190,   190,   191,
   191,   191,   192,   192,   193,   193,   194,   194,   194,   195,
   195,   195,   196,   196,   197,   197,   197,   197,   198,   199,
   199,   200,   200,   201,   202,   202,   203,   203,   203,   204,
   205,   205,   206,   206,   207,   207,   208,   208,   208,   208,
   208,   208,   208,   208,   208,   208,   209,   210,   210,   210,
   210,   211,   212,   212,   212,   213,   213,   214,   214,   215,
   216,   216,   216,   217,   217,   217,   218,   218,   219,   219,
   219,   220,   220,   220,   221,   221,   221,   221,   221,   221,
   221,   221,   221,   221,   221,   221,   221,   221,   221,   221,
   221,   222,   222,   223,   223,   224,   224,   224,   224,   224,
   225,   225,   225,   225,   225,   225,   225,   225,   225,   225,
   225,   225,   225,   225,   225,   225,   225,   225,   225,   225,
   226,   226,   226,   226,   226,   226,   227,   227,   228,   228,
   229,   229,   230,   231,   231,   231,   231,   232,   232,   232,
   232,   233,   234,   234,   234,   234>>, 0)
		end

	yyr2_: ARRAY [INTEGER] is
		once
			Result := integer_array_.make_from_array (<<0,
     9,     2,     3,     3,     0,     2,     0,     1,     2,     1,
     3,     1,     1,     3,     1,     1,     0,     2,     3,     2,
     4,     0,     2,     0,     2,     0,     2,     0,     1,     2,
     2,     1,     0,     1,     1,     1,     1,     1,     6,     5,
     4,     3,     2,     1,     2,     3,     5,     2,     0,     1,
     0,     1,     2,     2,     1,     0,     1,     1,     1,     3,
     2,     3,     1,     3,     1,     2,     0,     1,     1,     2,
     0,     1,     1,     2,     0,     1,     0,     1,     2,     3,
     0,     1,     0,     1,     0,     1,     2,     3,     0,     1,
     2,     2,     1,     1,     3,     1,     2,     3,     0,     2,
     1,     1,     1,     0,     2,     0,     3,     0,     1,     2,
     3,     1,     1,     2,     2,     1,     1,     1,     1,     1,
     1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
     1,     1,     1,     1,     1,     1,     1,     1,     1,     7,
     0,     2,     1,     2,     2,     3,     0,     2,     1,     2,
     2,     2,     1,     2,     0,     2,     3,     1,     3,     1,
     1,     1,     1,     1,     1,     1,     1,     1,     1,     0,
     1,     2,     5,     3,     0,     3,     2,     4,     6,     0,
     2,     3,     1,     3,     1,     2,     2,     2,     3,     1,
     1,     1,     1,     7,     0,     2,     0,     4,     5,     5,
     4,     5,     0,     1,     1,     3,     1,     1,     3,     3,
     3,     1,     3,     3,     3,     3,     9,     0,     1,     2,
     4,     4,     0,     2,     3,     1,     3,     0,     2,     3,
     0,     2,     3,     0,     2,     3,     0,     2,     0,     1,
     2,     1,     3,     1,     1,     3,     1,     1,     1,     1,
     1,     3,     2,     2,     2,     2,     2,     2,     3,     4,
     3,     1,     3,     1,     3,     2,     1,     1,     4,     6,
     1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
     1,     1,     1,     1,     1,     1,     1,     2,     2,     1,
     1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
     1,     1,     1,     1,     3,     2,     1,     1,     3,     2,
     1,     0,     1,     1,     1,     1>>, 0)
		end

	yydefact_: ARRAY [INTEGER] is
		once
			Result := integer_array_.make_from_array (<<     5,
     7,     0,   299,   304,   308,    15,   301,   303,   300,   307,
   311,   302,   298,   297,     0,   312,    12,     6,     8,    10,
    13,    16,   291,   292,   295,   296,   293,   294,     0,     0,
     0,    17,     0,   306,   310,     0,     9,     0,     2,     0,
     0,     0,    24,    15,    11,   305,   309,    14,     3,     4,
    22,    18,     0,     0,    26,     0,    20,     0,    19,    25,
    28,    77,   155,    23,    22,    32,    27,    29,    33,    81,
    85,    78,     0,   154,    21,    30,    51,    65,    44,    73,
    69,    31,    34,    35,    36,    37,    38,    49,    71,    75,
    67,     0,     0,    82,    83,    81,    79,   237,    86,   153,
     0,     0,   156,   158,   149,     0,    55,    48,    52,    56,
   113,   121,   116,    66,    59,     0,     0,    45,     0,    74,
    70,    50,    71,    72,    67,    76,     0,    68,    75,    43,
    63,    61,     0,    84,    80,    89,   239,    87,     0,   150,
   152,   151,     0,   157,    53,    58,    54,    57,     0,   118,
   119,   120,   117,   114,   122,   123,   124,   125,   126,   127,
   128,   129,   130,   131,   132,   133,   135,   138,   134,   136,
   137,   139,   115,     0,     0,    67,    75,    42,     0,     0,
    62,     0,    93,    88,    90,   106,    94,    96,   313,   315,
   180,   314,   316,     0,     0,   268,   267,     0,     0,     0,
     0,     0,   244,     0,   238,   240,   242,   245,   247,   248,
   250,   251,   249,     1,   159,    60,     0,    46,    75,     0,
    41,    64,    97,    91,     0,   108,    92,   104,     0,     0,
   266,   180,   253,   264,     0,     0,   254,   255,   257,   256,
   258,     0,   241,   290,   286,   287,   285,   279,   280,   281,
   282,   283,   284,   272,   273,   274,   275,   277,   278,   276,
   271,     0,     0,     0,     0,    40,    95,   262,   112,     0,
   109,     0,     0,    99,   243,   181,     0,     0,   183,   185,
   252,     0,   261,     0,   246,   289,   288,   259,   180,    47,
    39,   107,   110,     0,     0,   105,    24,    98,   187,   188,
   186,     0,   182,   265,   260,     0,   269,   111,   263,   102,
   231,   100,   103,   101,   184,   180,   239,   141,   270,   239,
   232,   108,     0,   233,   142,   143,   170,     0,   170,   234,
   180,     0,   239,   223,   170,     0,     0,   168,   193,   169,
     0,     0,   171,   144,   160,   161,   162,     0,   163,   164,
   165,   166,   167,     0,   147,   145,   239,   228,   177,   192,
   193,   175,     0,     0,   170,   237,     0,     0,     0,     0,
   172,   190,   191,     0,     0,     0,   146,   239,   235,   170,
     0,     0,   174,   230,   224,     0,   226,     0,   218,   170,
   203,   195,     0,     0,   189,   180,   148,   236,   229,   140,
   180,     0,   225,   222,   219,     0,   197,   207,     0,   312,
     0,   204,   205,   212,   208,   170,   203,     0,     0,   175,
   178,   176,   227,   180,   220,     0,     0,   195,     0,     0,
   170,     0,     0,     0,   196,     0,   200,   180,   173,     0,
     0,     0,     0,     0,   216,   215,   211,   201,   206,   214,
   213,   210,   209,   170,   179,   221,   170,   170,     0,   194,
   202,     0,   198,   170,   217,   199,     0,     0,     0>>, 0)
		end

	yydefgoto_: ARRAY [INTEGER] is
		once
			Result := integer_array_.make_from_array (<<   467,
    32,     2,    18,    19,    20,    21,    43,    53,    57,    55,
    62,    67,    68,    82,    83,    84,    85,    86,    87,    88,
   118,    89,   123,   108,   109,   147,   114,    94,   133,   128,
   129,   124,   125,   126,   127,    71,    72,    95,   135,    98,
    99,   184,   185,   186,   187,   227,   298,   312,   274,   228,
   270,   271,   115,   116,   154,   117,   173,   313,   323,   330,
   377,   104,   105,    74,   106,   343,   344,   345,   383,   346,
   231,   278,   279,   347,   374,   348,   349,   418,   428,   350,
   392,   411,   412,   413,   351,   406,   352,   365,   386,   381,
   353,   318,   358,   139,   205,   206,   207,   272,   235,   208,
   262,    22,   209,   210,   211,   212,    27,    28,    36,   213>>, 0)
		end

	yypact_: ARRAY [INTEGER] is
		once
			Result := integer_array_.make_from_array (<<    75,
   305,   265,-32768,-32768,-32768,   -52,-32768,-32768,-32768,-32768,
-32768,-32768,-32768,-32768,    66,-32768,-32768,   305,-32768,    -7,
-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,   177,   184,
   193,    72,   503,-32768,-32768,   168,-32768,   503,-32768,   189,
   218,    16,   181,-32768,    -7,-32768,-32768,-32768,-32768,-32768,
   241,-32768,     6,   234,   205,   256,-32768,   261,-32768,-32768,
    46,   244,   169,-32768,   241,-32768,    46,-32768,   188,   158,
    28,-32768,    55,-32768,-32768,-32768,   -66,   159,   159,   159,
   159,-32768,-32768,-32768,-32768,-32768,-32768,   268,   257,   263,
   269,   293,     9,-32768,   159,   158,-32768,    18,-32768,-32768,
   256,    38,-32768,-32768,-32768,    31,-32768,   -66,-32768,    63,
-32768,-32768,-32768,   216,-32768,   200,   994,   219,   307,   216,
   216,-32768,   257,-32768,   269,-32768,   301,-32768,   263,-32768,
-32768,-32768,    26,   216,-32768,    17,   559,-32768,   303,-32768,
-32768,-32768,   185,-32768,-32768,-32768,-32768,   216,   159,-32768,
-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,
-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,
-32768,-32768,-32768,   159,   159,   269,   263,-32768,   308,   333,
-32768,   159,-32768,    17,-32768,   -26,-32768,-32768,-32768,-32768,
   -39,-32768,-32768,   634,   222,-32768,-32768,   676,   676,   676,
   676,   676,-32768,   676,   559,-32768,  1096,   226,-32768,-32768,
-32768,-32768,-32768,-32768,-32768,-32768,   318,-32768,   263,   315,
-32768,-32768,-32768,-32768,   160,    47,-32768,   238,   676,   275,
-32768,   243,-32768,  1096,   -13,    19,-32768,-32768,-32768,-32768,
-32768,  1038,-32768,-32768,   325,-32768,   299,-32768,-32768,-32768,
-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,
-32768,   676,   359,   159,   332,-32768,-32768,-32768,-32768,     3,
-32768,    50,   185,   319,  1096,-32768,   155,   157,-32768,  1096,
-32768,   676,-32768,   186,   247,-32768,-32768,  1096,   243,-32768,
-32768,-32768,-32768,   185,   365,-32768,   916,-32768,-32768,-32768,
-32768,   348,-32768,  1096,-32768,   366,-32768,-32768,-32768,-32768,
   316,-32768,-32768,-32768,-32768,   243,   430,   322,-32768,   559,
   559,    47,   291,   559,    47,-32768,   846,   234,   846,   340,
     7,    40,   559,   260,   846,   676,   676,-32768,   258,-32768,
   676,   185,-32768,   846,-32768,-32768,-32768,   221,-32768,-32768,
-32768,-32768,-32768,   259,   360,   846,   473,   323,   266,-32768,
-32768,   267,   516,    23,   846,   109,   938,  1020,  1067,   270,
-32768,-32768,-32768,   676,   386,   234,-32768,   559,   559,   846,
   362,   387,-32768,-32768,-32768,   206,-32768,   734,   328,   846,
    73,    25,   277,    40,  1096,   243,-32768,   559,   846,-32768,
   243,   234,-32768,-32768,   719,   335,   794,   382,   397,-32768,
   341,   290,-32768,   388,   391,   846,    73,   376,   406,   267,
   292,-32768,-32768,   104,  1096,   676,   676,   237,    86,   411,
   846,    73,    96,    39,   846,   353,-32768,   243,-32768,   676,
   892,   956,   676,   389,-32768,-32768,-32768,   846,-32768,-32768,
-32768,-32768,-32768,   846,   300,  1096,   846,   846,  1002,-32768,
   846,   830,   846,   846,-32768,   846,   421,   424,-32768>>, 0)
		end

	yypgoto_: ARRAY [INTEGER] is
		once
			Result := integer_array_.make_from_array (<<-32768,
-32768,-32768,-32768,   407,   393,   392,-32768,-32768,   364,   130,
-32768,-32768,   372,-32768,-32768,-32768,-32768,-32768,-32768,-32768,
-32768,   356,-32768,-32768,   337,-32768,   151,   -10,-32768,   377,
   -94,   378,   329,   379,  -102,-32768,   383,   357,-32768,-32768,
   358,-32768,   271,-32768,   235,-32768,-32768,-32768,-32768,-32768,
   139,  -244,   -71,-32768,-32768,-32768,-32768,-32768,-32768,-32768,
-32768,  -139,   152,-32768,-32768,  -159,  -280,-32768,    43,-32768,
  -268,-32768,   162,-32768,-32768,  -308,-32768,    37,-32768,-32768,
-32768,    49,-32768,    36,-32768,-32768,-32768,-32768,-32768,-32768,
-32768,-32768,-32768,   106,  -121,  -200,  -188,   239,-32768,  -198,
-32768,   173,     1,    -1,     0,     2,   -98,-32768,    64,-32768>>, 0)
		end

	yyLast: INTEGER is 1205

	yytable_: ARRAY [INTEGER] is
		once
			Result := integer_array_.make_from_array (<<    24,
    25,    23,    26,   215,   243,   234,   281,   119,   268,   237,
   238,   239,   240,   241,   131,   242,    24,    25,    23,    26,
   307,    51,   111,   362,   268,   293,   179,  -192,  -192,     7,
   177,    24,    25,    23,    26,    12,    24,    25,    23,    26,
   275,   280,     4,   141,   452,   360,   107,   319,   356,    10,
    93,    63,   268,    60,   366,    70,   416,    96,   182,    33,
    63,   112,   359,   100,   188,   137,   110,    96,   111,    34,
    35,   113,   229,   288,   220,     3,     4,   216,   408,   230,
   293,   219,     9,    10,   388,   420,   146,   225,     3,     4,
   101,   445,   226,   304,   417,     9,    10,   110,     3,   399,
   282,   450,   217,   218,   102,     9,    38,   112,   142,   407,
   223,   361,   188,   280,   331,   269,   265,   113,     1,    58,
   243,    59,   292,   243,   332,   230,   132,   421,   354,   183,
   354,    52,   422,   296,   333,   435,   354,   334,   283,   180,
   409,   410,   385,   181,   143,   354,   144,   367,   368,   335,
   448,   336,   369,   188,   308,   337,   137,   354,    66,   269,
   111,   294,   243,   295,   111,   111,   354,   354,   338,   455,
   103,    46,    47,   461,   409,   410,   462,   463,   243,   196,
   339,   354,    39,   466,   371,   395,    42,   409,   410,   354,
    63,   354,   290,   100,    49,   321,   371,   243,   324,   112,
   354,   182,   370,   112,   112,   301,   371,    64,   354,   113,
    40,   363,    69,   113,   113,   440,   425,   354,    69,    41,
   101,   340,   230,    50,    77,   299,   300,   341,   371,   342,
   120,   121,   354,    54,   102,   379,   354,   441,   442,   371,
     7,   372,   373,    78,    79,   134,    12,   371,    80,   354,
    61,   456,   140,    81,   459,   354,   398,    56,   354,   354,
   148,    63,   354,   354,   354,   354,    65,   354,   416,   443,
   302,    70,   150,   151,    93,   371,   303,     3,   189,   190,
   232,     7,     8,    73,     9,   192,   193,    12,   371,   152,
   153,    29,   415,   194,    30,    24,    25,    23,    26,   295,
    31,   371,   371,   371,    77,   305,   371,     3,     4,     5,
     6,     7,     8,    13,     9,    10,    11,    12,   415,   402,
   326,   327,    81,    80,    78,   403,   130,   355,   328,   149,
   447,   175,   174,   415,   178,   453,   214,   195,   222,    14,
   236,   221,   264,    13,   329,   196,   197,   263,   266,   273,
     3,   189,   190,   232,     7,     8,   286,     9,   192,   193,
    12,   230,   287,   387,   289,   291,   194,   297,   306,    14,
   309,   316,   322,   317,   357,   397,   198,   199,   364,  -267,
   375,   380,   376,   200,   201,   202,    13,  -266,   382,   414,
   394,   396,   401,   204,   276,   400,   405,   277,   419,   429,
    34,   423,   426,   432,   431,   433,    15,    16,   434,   437,
   195,   438,    14,  -269,    46,   414,   454,    17,   196,   197,
   468,  -270,   460,   469,    37,    45,   311,   446,    75,    48,
   414,   451,     3,   189,   190,   191,     7,     8,    76,     9,
   192,   193,    12,   122,   145,    90,    91,    92,   194,   198,
   199,   176,   136,    97,   224,   138,   200,   201,   202,   267,
   325,   320,   439,   315,   444,   436,   204,   449,    13,   314,
   277,   389,     0,   430,   284,     3,   189,   190,   191,     7,
     8,     0,     9,   192,   193,    12,     0,     0,     0,     0,
     0,   194,   195,     0,    14,     0,     0,     0,     0,     0,
   196,   197,     0,     0,     0,     3,     4,     5,    44,     7,
     8,    13,     9,    10,    11,    12,     0,     0,     3,   189,
   190,   191,     7,     8,     0,     9,   192,   193,    12,     0,
     0,   198,   199,     0,   194,   195,   378,    14,   200,   201,
   202,    13,   203,   196,   197,     0,     0,     0,   204,   384,
     0,     0,     0,     0,    13,     0,     0,     0,     0,     0,
     0,     3,   189,   190,   191,     7,     8,    14,     9,   192,
   193,    12,     0,     0,   198,   199,     0,   194,   195,     0,
    14,   200,   201,   202,     0,   203,   196,   197,     0,     0,
     0,   204,     0,     0,     0,     0,     0,    13,     0,     0,
     0,     0,     0,     0,    15,    16,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,   198,   199,     0,
     0,   195,     0,    14,   200,   201,   202,     0,   203,   196,
   197,     0,     0,     0,   204,     0,     3,   189,   190,   232,
     7,     8,     0,     9,   192,   193,    12,     0,     0,     0,
     0,     0,   194,   233,     0,     0,     0,     0,     0,     0,
   198,   199,     0,     0,     0,     0,     0,   200,   201,   202,
     0,   203,    13,     0,     0,     0,     0,   204,     3,   189,
   190,   232,     7,     8,     0,     9,   192,   193,    12,     0,
     0,     0,     0,     0,   194,     0,   195,     0,    14,     0,
     0,     0,     0,     0,   196,   197,     0,     0,     0,     0,
     0,     0,     0,     0,    13,     0,     0,     0,     0,     0,
     0,     3,   189,   190,   424,     7,     8,     0,     9,   192,
   193,    12,     0,     0,     0,   198,   199,   194,   195,   331,
    14,     0,   200,   201,   202,     0,   196,   197,     0,   332,
     0,     0,   204,     0,     0,     0,     0,    13,     0,   333,
     0,     0,   334,     0,     0,     0,     0,   404,     0,     0,
     0,     0,     0,     0,   335,     0,   336,   198,   199,     0,
   337,   195,     0,    14,   200,   201,   202,     0,     0,   196,
   197,     0,     0,   338,   204,     0,     0,     0,     0,   331,
     0,     0,     0,     0,   196,   339,     0,     0,     0,   332,
     0,     0,     0,     0,     0,     0,     0,     0,     0,   333,
   198,   199,   334,     0,     0,     0,   427,   200,   201,   202,
     0,     0,     0,     0,   335,   331,   336,   204,     0,     0,
   337,     0,     0,     0,     0,   332,   340,     0,     0,     0,
     0,   331,   341,   338,   342,   333,     0,     0,   334,     0,
     0,   332,     0,   465,   196,   339,     0,     0,     0,     0,
   335,   333,   336,     0,   334,     0,   337,     0,     0,     0,
     0,     0,     0,     0,     0,     0,   335,     0,   336,   338,
     0,     0,   337,     0,     0,     0,     0,     0,     0,     0,
   196,   339,     0,     0,     0,   338,   340,     0,     0,     0,
     0,     0,   341,     0,   342,     0,   196,   339,     3,     4,
     5,     0,     7,     8,     0,     9,    10,    11,    12,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,   340,   457,     0,     0,     0,     0,   341,     0,
   342,     0,     0,     0,    13,     0,     0,     0,   340,     0,
     0,     0,     0,     0,   341,     0,   342,     0,    54,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
    14,     0,   310,   244,   245,   246,   247,   248,   249,   250,
   251,   252,   253,   254,   255,   256,   257,   258,   259,   260,
   261,   390,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,    15,    16,   458,
     0,     0,     0,     0,     0,     0,     0,     0,     0,   244,
   245,   246,   247,   248,   249,   250,   251,   252,   253,   254,
   255,   256,   257,   258,   259,   260,   261,   244,   245,   246,
   247,   248,   249,   250,   251,   252,   253,   254,   255,   256,
   257,   258,   259,   260,   261,   464,   155,   156,   157,   158,
   159,   160,   161,   162,   163,   164,   165,   166,   167,   168,
   169,   170,   171,   172,     0,     0,     0,     0,     0,   391,
     0,     0,     0,   244,   245,   246,   247,   248,   249,   250,
   251,   252,   253,   254,   255,   256,   257,   258,   259,   260,
   261,   244,   245,   246,   247,   248,   249,   250,   251,   252,
   253,   254,   255,   256,   257,   258,   259,   260,   261,   244,
   245,   246,   247,   248,   249,   250,   251,   252,   253,   254,
   255,   256,   257,   258,   259,   260,   261,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,   285,   244,   245,
   246,   247,   248,   249,   250,   251,   252,   253,   254,   255,
   256,   257,   258,   259,   260,   261,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,   393,   244,   245,   246,
   247,   248,   249,   250,   251,   252,   253,   254,   255,   256,
   257,   258,   259,   260,   261>>, 0)
		end

	yycheck_: ARRAY [INTEGER] is
		once
			Result := integer_array_.make_from_array (<<     1,
     1,     1,     1,   143,   205,   194,    20,    79,     6,   198,
   199,   200,   201,   202,     6,   204,    18,    18,    18,    18,
   289,     6,     6,   332,     6,   270,   129,    21,    22,     7,
   125,    33,    33,    33,    33,    13,    38,    38,    38,    38,
   229,   230,     4,     6,     6,     6,   113,   316,   329,    11,
   117,     6,     6,    54,   335,    28,    32,    40,    42,   112,
     6,    45,   331,     9,   136,    48,    77,    40,     6,     4,
     5,    55,   112,   262,   177,     3,     4,   149,     6,   119,
   325,   176,    10,    11,   365,   394,    24,   114,     3,     4,
    36,     6,   119,   282,    70,    10,    11,   108,     3,   380,
   114,     6,   174,   175,    50,    10,   114,    45,    71,   390,
   182,    72,   184,   302,     6,   113,   219,    55,    44,   114,
   321,   116,   120,   324,    16,   119,   118,   396,   327,   113,
   329,   116,   401,   273,    26,   416,   335,    29,   120,   114,
   102,   103,   120,   118,   114,   344,   116,   336,   337,    41,
   431,    43,   341,   225,   294,    47,    48,   356,   113,   113,
     6,   112,   363,   114,     6,     6,   365,   366,    60,   438,
   116,     4,     5,   454,   102,   103,   457,   458,   379,    71,
    72,   380,     6,   464,   344,   374,   115,   102,   103,   388,
     6,   390,   264,     9,     6,   317,   356,   398,   320,    45,
   399,    42,   342,    45,    45,   277,   366,    56,   407,    55,
    27,   333,    61,    55,    55,   112,   405,   416,    67,    27,
    36,   113,   119,     6,    37,    71,    72,   119,   388,   121,
    80,    81,   431,    53,    50,   357,   435,   426,   427,   399,
     7,    21,    22,    56,    57,    95,    13,   407,    61,   448,
    46,   440,   101,    66,   443,   454,   378,    17,   457,   458,
   110,     6,   461,   462,   463,   464,     6,   466,    32,    33,
   114,    28,    73,    74,   117,   435,   120,     3,     4,     5,
     6,     7,     8,   115,    10,    11,    12,    13,   448,    90,
    91,    27,   391,    19,    30,   297,   297,   297,   297,   114,
    36,   461,   462,   463,    37,   120,   466,     3,     4,     5,
     6,     7,     8,    39,    10,    11,    12,    13,   417,   114,
    30,    31,    66,    61,    56,   120,    34,   328,    38,   114,
   429,    25,   114,   432,    34,   434,    34,    63,     6,    65,
   119,    34,    25,    39,    54,    71,    72,   122,    34,   112,
     3,     4,     5,     6,     7,     8,    32,    10,    11,    12,
    13,   119,    64,   364,     6,    34,    19,    49,   122,    65,
     6,     6,    51,    58,    35,   376,   102,   103,   119,   122,
   122,    59,    23,   109,   110,   111,    39,   122,   122,   391,
   121,     6,     6,   119,   120,    34,    69,   123,   122,    18,
     4,   402,    68,   114,    64,    18,   102,   103,    18,    34,
    63,     6,    65,   122,     4,   417,    64,   113,    71,    72,
     0,   122,    34,     0,    18,    33,   297,   429,    65,    38,
   432,   433,     3,     4,     5,     6,     7,     8,    67,    10,
    11,    12,    13,    88,   108,    69,    69,    69,    19,   102,
   103,   123,    96,    71,   184,    98,   109,   110,   111,   225,
   322,    32,   420,   302,   428,   417,   119,   432,    39,   297,
   123,   366,    -1,   410,   236,     3,     4,     5,     6,     7,
     8,    -1,    10,    11,    12,    13,    -1,    -1,    -1,    -1,
    -1,    19,    63,    -1,    65,    -1,    -1,    -1,    -1,    -1,
    71,    72,    -1,    -1,    -1,     3,     4,     5,     6,     7,
     8,    39,    10,    11,    12,    13,    -1,    -1,     3,     4,
     5,     6,     7,     8,    -1,    10,    11,    12,    13,    -1,
    -1,   102,   103,    -1,    19,    63,    64,    65,   109,   110,
   111,    39,   113,    71,    72,    -1,    -1,    -1,   119,    34,
    -1,    -1,    -1,    -1,    39,    -1,    -1,    -1,    -1,    -1,
    -1,     3,     4,     5,     6,     7,     8,    65,    10,    11,
    12,    13,    -1,    -1,   102,   103,    -1,    19,    63,    -1,
    65,   109,   110,   111,    -1,   113,    71,    72,    -1,    -1,
    -1,   119,    -1,    -1,    -1,    -1,    -1,    39,    -1,    -1,
    -1,    -1,    -1,    -1,   102,   103,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,   102,   103,    -1,
    -1,    63,    -1,    65,   109,   110,   111,    -1,   113,    71,
    72,    -1,    -1,    -1,   119,    -1,     3,     4,     5,     6,
     7,     8,    -1,    10,    11,    12,    13,    -1,    -1,    -1,
    -1,    -1,    19,    20,    -1,    -1,    -1,    -1,    -1,    -1,
   102,   103,    -1,    -1,    -1,    -1,    -1,   109,   110,   111,
    -1,   113,    39,    -1,    -1,    -1,    -1,   119,     3,     4,
     5,     6,     7,     8,    -1,    10,    11,    12,    13,    -1,
    -1,    -1,    -1,    -1,    19,    -1,    63,    -1,    65,    -1,
    -1,    -1,    -1,    -1,    71,    72,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    39,    -1,    -1,    -1,    -1,    -1,
    -1,     3,     4,     5,     6,     7,     8,    -1,    10,    11,
    12,    13,    -1,    -1,    -1,   102,   103,    19,    63,     6,
    65,    -1,   109,   110,   111,    -1,    71,    72,    -1,    16,
    -1,    -1,   119,    -1,    -1,    -1,    -1,    39,    -1,    26,
    -1,    -1,    29,    -1,    -1,    -1,    -1,    34,    -1,    -1,
    -1,    -1,    -1,    -1,    41,    -1,    43,   102,   103,    -1,
    47,    63,    -1,    65,   109,   110,   111,    -1,    -1,    71,
    72,    -1,    -1,    60,   119,    -1,    -1,    -1,    -1,     6,
    -1,    -1,    -1,    -1,    71,    72,    -1,    -1,    -1,    16,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    26,
   102,   103,    29,    -1,    -1,    -1,    33,   109,   110,   111,
    -1,    -1,    -1,    -1,    41,     6,    43,   119,    -1,    -1,
    47,    -1,    -1,    -1,    -1,    16,   113,    -1,    -1,    -1,
    -1,     6,   119,    60,   121,    26,    -1,    -1,    29,    -1,
    -1,    16,    -1,    34,    71,    72,    -1,    -1,    -1,    -1,
    41,    26,    43,    -1,    29,    -1,    47,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    41,    -1,    43,    60,
    -1,    -1,    47,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    71,    72,    -1,    -1,    -1,    60,   113,    -1,    -1,    -1,
    -1,    -1,   119,    -1,   121,    -1,    71,    72,     3,     4,
     5,    -1,     7,     8,    -1,    10,    11,    12,    13,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,   113,    52,    -1,    -1,    -1,    -1,   119,    -1,
   121,    -1,    -1,    -1,    39,    -1,    -1,    -1,   113,    -1,
    -1,    -1,    -1,    -1,   119,    -1,   121,    -1,    53,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    65,    -1,    67,    92,    93,    94,    95,    96,    97,    98,
    99,   100,   101,   102,   103,   104,   105,   106,   107,   108,
   109,    64,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,   102,   103,    64,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    92,
    93,    94,    95,    96,    97,    98,    99,   100,   101,   102,
   103,   104,   105,   106,   107,   108,   109,    92,    93,    94,
    95,    96,    97,    98,    99,   100,   101,   102,   103,   104,
   105,   106,   107,   108,   109,    64,    73,    74,    75,    76,
    77,    78,    79,    80,    81,    82,    83,    84,    85,    86,
    87,    88,    89,    90,    -1,    -1,    -1,    -1,    -1,    70,
    -1,    -1,    -1,    92,    93,    94,    95,    96,    97,    98,
    99,   100,   101,   102,   103,   104,   105,   106,   107,   108,
   109,    92,    93,    94,    95,    96,    97,    98,    99,   100,
   101,   102,   103,   104,   105,   106,   107,   108,   109,    92,
    93,    94,    95,    96,    97,    98,    99,   100,   101,   102,
   103,   104,   105,   106,   107,   108,   109,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,   120,    92,    93,
    94,    95,    96,    97,    98,    99,   100,   101,   102,   103,
   104,   105,   106,   107,   108,   109,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,   120,    92,    93,    94,
    95,    96,    97,    98,    99,   100,   101,   102,   103,   104,
   105,   106,   107,   108,   109>>, 0)
		end

feature {NONE} -- Semantic actions

	yy_do_action (yy_act: INTEGER) is
		do
			inspect yy_act

			else
				-- No action
			end
		end



feature {NONE} -- Initialization

	make is
			-- Create a new Eiffel parser.
		do
			make_eiffel_scanner
			make_parser_skeleton
		end

	execute is
			-- Parse Eiffel files `arguments (1..argument_count)'.
		local
			j, n: INTEGER
			a_filename: STRING
			a_file: like INPUT_STREAM_TYPE
		do
			make
			n := argument_count
			if n = 0 then
				std.error.put_string ("usage: eiffel_parser filename ...%N")
				exceptions_.die (1)
			else
				from j := 1 until j > n loop
					a_filename := argument (j)
					a_file := input_stream_.make_file_open_read (a_filename)
					if input_stream_.is_open_read (a_file) then
						reset
						set_input_buffer (new_file_buffer (a_file))
						parse
						input_stream_.close (a_file)
					else
						std.error.put_string ("eiffel_parser: cannot read %'")
						std.error.put_string (a_filename)
						std.error.put_string ("%'%N")
					end
					j := j + 1
				end
			end
		end

	benchmark is
			-- Parse Eiffel file `argument (2)' `argument (1)' times.
		local
			j, n: INTEGER
			a_filename: STRING
			a_file: like INPUT_STREAM_TYPE
		do
			make
			if
				argument_count < 2 or else
				not string_.is_integer (argument (1))
			then
				std.error.put_string ("usage: eiffel_parser nb filename%N")
				exceptions_.die (1)
			else
				n := argument (1).to_integer
				a_filename := argument (2)
				from j := 1 until j > n loop
					a_file := input_stream_.make_file_open_read (a_filename)
					if input_stream_.is_open_read (a_file) then
						reset
						set_input_buffer (new_file_buffer (a_file))
						parse
						input_stream_.close (a_file)
					else
						std.error.put_string ("eiffel_parser: cannot read %'")
						std.error.put_string (a_filename)
						std.error.put_string ("%'%N")
						exceptions_.die (1)
					end
					j := j + 1
				end
			end
		end

end -- class EIFFEL_PARSER
