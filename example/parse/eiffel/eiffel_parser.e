indexing

	description:

		"Eiffel parsers"

	author:     "Eric Bezault <ericb@gobo.demon.co.uk>"
	copyright:  "Copyright (c) 1998, Eric Bezault"
	date:       "$Date$"
	revision:   "$Revision$"

class EIFFEL_PARSER

inherit

	YY_PARSER_SKELETON [ANY]
		rename
			make as make_parser_skeleton
		redefine
			report_error
		end

	EIFFEL_SCANNER
		rename
			make as make_eiffel_scanner
		end

	KL_SHARED_EXCEPTIONS

	KL_SHARED_ARGUMENTS

creation

	make, execute, benchmark


feature {NONE} -- Implementation

	yy_build_parser_tables is
			-- Build parser tables.
		do
			yytranslate := yytranslate_
			yyr1 := yyr1_
			yyr2 := yyr2_
			yydefact := yydefact_
			yydefgoto := yydefgoto_
			yypact := yypact_
			yypgoto := yypgoto_
			yytable := yytable_
			yycheck := yycheck_
		end

feature {NONE} -- Semantic actions

	yy_do_action (yy_act: INTEGER) is
			-- Execute semantic action.
		do
			inspect yy_act
			else
				-- No action
			end
		end

feature {NONE} -- Tables

	yytranslate_: ARRAY [INTEGER] is
		once
			Result := INTEGER_ARRAY_.make_from_array (<<
			    0,    2,    2,    2,    2,    2,    2,    2,    2,    2,
			    2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
			    2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
			    2,    2,    2,  122,    2,    2,  124,    2,    2,    2,
			  120,  121,  105,  103,  115,  104,  123,  106,    2,    2,
			    2,    2,    2,    2,    2,    2,    2,    2,  114,  113,
			   99,   97,  100,    2,    2,    2,    2,    2,    2,    2,
			    2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
			    2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
			    2,  116,    2,  117,  109,    2,    2,    2,    2,    2,

			    2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
			    2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
			    2,    2,    2,  118,    2,  119,    2,    2,    2,    2,
			    2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
			    2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
			    2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
			    2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
			    2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
			    2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
			    2,    2,    2,    2,    2,    2,    2,    2,    2,    2,

			    2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
			    2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
			    2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
			    2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
			    2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
			    2,    2,    2,    2,    2,    2,    1,    2,    3,    4,
			    5,    6,    7,    8,    9,   10,   11,   12,   13,   14,
			   15,   16,   17,   18,   19,   20,   21,   22,   23,   24,
			   25,   26,   27,   28,   29,   30,   31,   32,   33,   34,
			   35,   36,   37,   38,   39,   40,   41,   42,   43,   44,

			   45,   46,   47,   48,   49,   50,   51,   52,   53,   54,
			   55,   56,   57,   58,   59,   60,   61,   62,   63,   64,
			   65,   66,   67,   68,   69,   70,   71,   72,   73,   74,
			   75,   76,   77,   78,   79,   80,   81,   82,   83,   84,
			   85,   86,   87,   88,   89,   90,   91,   92,   93,   94,
			   95,   96,   98,  101,  102,  107,  108,  110,  111,  112>>, 0)
		end

	yyr1_: ARRAY [INTEGER] is
		once
			Result := INTEGER_ARRAY_.make_from_array (<<
			    0,  125,  125,  126,  126,  135,  127,  127,  136,  136,
			  136,  137,  137,  137,  137,  139,  139,  139,  140,  140,
			  142,  142,  138,  138,  128,  144,  144,  144,  144,  129,
			  129,  145,  145,  145,  146,  146,  130,  130,  134,  148,
			  148,  148,  148,  148,  148,  149,  149,  149,  149,  149,
			  150,  150,  151,  151,  151,  151,  151,  152,  153,  154,
			  155,  156,  157,  166,  166,  166,  162,  158,  158,  168,
			  168,  168,  169,  169,  169,  170,  172,  172,  173,  173,
			  173,  171,  175,  175,  174,  174,  174,  164,  160,  160,
			  163,  159,  159,  165,  161,  161,  131,  131,  131,  176,

			  177,  177,  177,  132,  132,  132,  178,  179,  179,  179,
			  180,  180,  180,  181,  183,  186,  186,  187,  187,  187,
			  182,  182,  189,  189,  167,  167,  167,  190,  190,  190,
			  190,  191,  191,  191,  191,  191,  191,  191,  191,  191,
			  191,  191,  191,  191,  191,  191,  191,  191,  191,  184,
			  184,  192,  192,  192,  193,  193,  193,  194,  195,  195,
			  185,  185,  188,  199,  199,  199,  199,  203,  203,  198,
			  198,  197,  197,  197,  200,  200,  200,  133,  133,  204,
			  204,  204,  205,  205,  205,  206,  206,  201,  201,  196,
			  196,  196,  196,  196,  196,  196,  147,  209,  210,  210,

			  211,  211,  211,  202,  202,  202,  212,  212,  212,  212,
			  212,  212,  212,  212,  212,  212,  213,  213,  222,  222,
			  215,  224,  224,  216,  226,  226,  225,  225,  225,  217,
			  227,  227,  227,  228,  228,  228,  229,  229,  230,  230,
			  230,  218,  231,  231,  231,  231,  219,  232,  232,  233,
			  233,  233,  220,  214,  214,  214,  214,  214,  214,  214,
			  214,  234,  234,  223,  223,  235,  235,  235,  236,  236,
			  237,  237,  237,  237,  221,  221,  207,  207,  207,  207,
			  207,  207,  207,  207,  207,  207,  207,  207,  207,  207,
			  207,  207,  207,  207,  241,  241,  241,  239,  239,  239,

			  240,  240,  240,  240,  240,  240,  240,  240,  240,  240,
			  240,  240,  240,  240,  240,  240,  240,  240,  240,  240,
			  143,  143,  143,  143,  143,  143,  238,  238,  208,  208,
			  208,  242,  242,  242,  141,  141>>, 0)
		end

	yyr2_: ARRAY [INTEGER] is
		once
			Result := INTEGER_ARRAY_.make_from_array (<<
			    0,    1,    2,    8,    5,    3,    0,    2,    0,    1,
			    2,    1,    2,    3,    4,    1,    3,    2,    1,    3,
			    1,    1,    1,    2,    3,    0,    1,    1,    1,    0,
			    3,    0,    2,    4,    0,    2,    0,    2,    2,    2,
			    4,    4,    2,    5,    5,    1,    3,    4,    3,    4,
			    0,    1,    1,    1,    1,    1,    1,    6,    5,    4,
			    3,    2,    2,    0,    3,    5,    2,    0,    1,    0,
			    1,    2,    1,    2,    3,    2,    1,    1,    0,    1,
			    3,    3,    0,    1,    0,    1,    3,    2,    0,    1,
			    2,    0,    1,    2,    0,    1,    0,    1,    2,    3,

			    0,    1,    3,    0,    1,    2,    3,    0,    1,    2,
			    1,    2,    3,    2,    3,    0,    2,    1,    1,    1,
			    1,    3,    1,    2,    1,    2,    2,    1,    1,    1,
			    1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
			    1,    1,    1,    1,    1,    1,    1,    1,    1,    0,
			    3,    0,    1,    2,    1,    2,    3,    3,    1,    3,
			    0,    2,    7,    1,    2,    2,    3,    0,    2,    0,
			    2,    0,    2,    3,    0,    2,    3,    0,    2,    0,
			    1,    2,    1,    2,    3,    1,    2,    0,    2,    1,
			    2,    2,    2,    2,    2,    2,    2,    1,    0,    3,

			    0,    1,    3,    0,    1,    2,    1,    1,    1,    1,
			    1,    1,    1,    1,    1,    1,    5,    3,    0,    3,
			    3,    1,    1,    7,    0,    2,    0,    4,    5,    5,
			    0,    4,    5,    0,    1,    3,    1,    3,    1,    1,
			    1,    9,    0,    1,    2,    4,    4,    0,    3,    0,
			    1,    3,    3,    1,    3,    3,    5,    2,    4,    5,
			    7,    2,    4,    0,    3,    0,    1,    3,    1,    2,
			    1,    1,    1,    3,    1,    1,    1,    1,    1,    3,
			    1,    1,    1,    1,    1,    1,    3,    2,    2,    2,
			    2,    3,    2,    4,    0,    1,    3,    0,    1,    3,

			    1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
			    1,    1,    1,    1,    1,    1,    1,    2,    2,    1,
			    1,    1,    1,    1,    1,    1,    1,    1,    1,    2,
			    2,    1,    2,    2,    1,    1>>, 0)
		end

	yydefact_: ARRAY [INTEGER] is
		once
			Result := INTEGER_ARRAY_.make_from_array (<<
			    6,    8,    6,    1,   25,    0,    0,  326,  327,  335,
			  325,  324,  334,  331,  328,  321,    7,    9,   11,   15,
			   20,   18,   21,  322,  320,  323,    2,   28,   27,   26,
			   29,    0,  332,  329,  333,  330,   22,   10,   12,    0,
			   17,   31,   36,    0,   22,    0,   13,   23,   20,   19,
			   16,   34,    0,    0,   96,   24,   14,    0,   32,   30,
			    0,   37,   96,   82,  103,    4,   97,  197,   35,  198,
			   34,  103,    0,   45,   38,   50,   84,   83,  100,   82,
			  177,   98,  104,  200,  196,   33,  177,   39,   78,   78,
			   63,   78,   69,   96,   96,   51,   52,   53,   54,   55,

			   56,   67,   91,   88,   94,    0,   85,    0,  101,   99,
			  107,  179,    0,  105,    0,    0,    0,    0,  189,  201,
			    0,    5,    0,    0,  124,   79,   90,   93,   62,    0,
			   87,   66,   70,   72,   78,   96,    0,   48,   96,    0,
			   46,   91,   68,   88,   92,   94,   89,    0,   95,   61,
			   81,    0,    0,    0,  122,  106,  108,  110,  149,  120,
			    0,    0,    0,    0,    0,    0,    0,  263,  277,  278,
			    0,  297,  285,  284,  283,  282,  281,  263,  178,  180,
			  182,  185,  276,  253,  280,    3,  191,  192,  193,  190,
			    0,    0,  195,  194,  199,    0,  127,  130,  129,  128,

			  125,  148,  146,  145,  143,  147,  144,  142,  141,  140,
			  139,  138,  137,  136,  135,  134,  133,  132,  131,  126,
			    0,    0,    0,   71,   73,   77,   75,   76,    0,   49,
			   41,    0,   47,   40,   88,   94,    0,   60,   86,  102,
			  123,  109,  111,  151,    0,  113,  160,  263,    0,    0,
			  292,  289,  290,  288,  287,  265,  257,    0,    0,  294,
			  298,    0,  186,  261,  181,  183,  300,  305,  307,  306,
			  304,  303,  302,  301,  313,  312,  311,  310,  309,  308,
			  314,  316,  315,  319,    0,    0,  202,   80,    0,   64,
			   74,   44,   43,   94,    0,   59,  112,  158,    0,  152,

			  154,    0,  121,    0,  115,  279,    0,    0,  268,    0,
			  266,    0,  254,  255,  295,    0,    0,  286,  184,  317,
			  318,  291,  263,    0,    0,   58,  150,  153,  155,    0,
			    0,  161,   36,  114,    0,  263,    0,  272,  271,  270,
			  269,  264,    0,  258,  293,    0,  299,  262,   65,   57,
			  156,  159,  157,  118,  171,  117,  116,  119,  256,  259,
			    0,  267,  296,  179,  169,    0,  273,  179,  172,  151,
			    0,  260,  173,  170,  203,    0,  203,  163,  174,    0,
			    0,  215,  275,    0,  214,    0,    0,  203,  247,  179,
			    0,  274,  165,  204,  206,  207,  208,  209,  210,  211,

			  212,  213,    0,  167,  164,  179,  187,    0,    0,  230,
			    0,  177,  249,  203,    0,  275,  274,  218,  205,  222,
			  221,    0,    0,  166,  179,  175,  203,    0,    0,    0,
			  233,  224,  203,  242,  250,    0,    0,  252,    0,  217,
			  220,  168,  176,  188,  162,  218,    0,  239,  238,  240,
			    0,  234,  236,  233,  203,    0,  226,  243,    0,  248,
			    0,  246,  263,  216,    0,  203,    0,    0,  225,  229,
			    0,  224,  263,  244,    0,  251,  219,  235,  231,  237,
			  203,    0,    0,    0,    0,    0,  232,  203,    0,  223,
			  245,  203,  227,  203,    0,  228,  241,    0,    0>>, 0)
		end

	yydefgoto_: ARRAY [INTEGER] is
		once
			Result := INTEGER_ARRAY_.make_from_array (<<
			    2,    3,    4,   30,   42,   54,   71,   80,  112,   65,
			   72,   16,   17,   37,   18,   19,  247,   21,   22,   31,
			   52,   58,  118,   74,   75,   94,   95,   96,   97,   98,
			   99,  100,  101,  141,  143,  145,  147,  102,  144,  146,
			  148,  128,  125,  131,  132,  133,  134,  226,  126,  107,
			   78,   66,  109,   82,  155,  156,  157,  158,  245,  246,
			  304,  333,  356,  357,  159,  200,  219,  298,  299,  300,
			  301,  119,  364,  370,  378,  406,  427,  392,  423,  178,
			  179,  180,  181,   23,   69,   84,  120,  393,  394,  182,
			  396,  397,  398,  399,  400,  401,  402,  439,  263,  421,

			  471,  455,  431,  450,  451,  452,  458,  413,  435,  183,
			  309,  310,  340,  184,  261,  284,  315,   25>>, 0)
		end

	yypact_: ARRAY [INTEGER] is
		once
			Result := INTEGER_ARRAY_.make_from_array (<<
			  356,  951,   26, -32768,  102,  286,  283, -32768, -32768, -32768,
			 -32768, -32768, -32768, -32768, -32768, -32768, -32768,  894, -32768,  272,
			  284, -32768, -32768, -32768, -32768, -32768, -32768, -32768, -32768, -32768,
			  279,  362, -32768, -32768, -32768, -32768,  883,  280, -32768,  951,
			  951,  136,  338,  136, -32768,  348, -32768, -32768, -32768, -32768,
			  272,  369,  159,  375,  184, -32768, -32768,  365, -32768, -32768,
			  136, -32768,   57,  229,   40, -32768, -32768, -32768, -32768,  268,
			  369,   40,  351, -32768, -32768,  154,  136, -32768,  136,  229,
			  122, -32768, -32768,  182, -32768, -32768,  122, -32768,  161,  161,
			  161,  161,  229,  259,   27, -32768, -32768, -32768, -32768, -32768,

			 -32768,  343,  301,  292,  270,  350, -32768,  110, -32768,  261,
			  137,  677,  349, -32768,  365,   52,  365,   62, -32768, -32768,
			  -12, -32768,  170, 1158, -32768, -32768,  231,  231,  252,  346,
			  231, -32768,   12, -32768,  264,   57,  336, -32768,   57,  335,
			 -32768,  301, -32768,  292, -32768,  270, -32768,  332, -32768, -32768,
			 -32768,  136,  136,  161, -32768, -32768,   21, -32768,  -70, -32768,
			  677,  136,  677,  677,  677,  677,  677,  -26,   58,  173,
			  239,  677, -32768, -32768, -32768, -32768, -32768,  155, -32768,  646,
			 -32768, 1121, -32768,  186, -32768, -32768, -32768, -32768, -32768, -32768,
			  354,  345, -32768, -32768, -32768,  182, -32768, -32768, -32768, -32768,

			 -32768, -32768, -32768, -32768, -32768, -32768, -32768, -32768, -32768, -32768,
			 -32768, -32768, -32768, -32768, -32768, -32768, -32768, -32768, -32768, -32768,
			  161,  161,  161,  229, -32768, -32768, -32768,  231,  317, -32768,
			 -32768,  315, -32768, -32768,  292,  270,  313, -32768, -32768, -32768,
			 -32768,  137, -32768,  136,  137, -32768,  222,  -26, 1092,  215,
			 -32768, -32768, -32768, -32768, -32768,  512,  212,  136,  136,  136,
			 1121,    0, -32768, -32768,  677, -32768, -32768, -32768, -32768, -32768,
			 -32768, -32768, -32768, -32768, -32768, -32768, -32768, -32768, -32768, -32768,
			  282, -32768,  306, -32768,  677,  136, -32768, -32768,  311, -32768,
			 -32768, -32768, -32768,  270,  296, -32768, -32768, -32768,  202,   23,

			 -32768,  171, -32768,  182,  277,   88,  251,   42, 1121,  151,
			 -32768,  136,  186,  186, -32768,  139,  677, -32768, -32768, -32768,
			 -32768, 1121,  -26,  161,  288, -32768, -32768,  136, -32768,  136,
			  182, -32768,  501, -32768,  136,  -26,  677, -32768, -32768, -32768,
			 -32768, -32768,  512,  186, -32768,  136, 1121, -32768, -32768, -32768,
			 -32768, -32768, -32768, -32768,  267, -32768, -32768, -32768,  186,  189,
			 1063, -32768, -32768,  635,  266,  136, -32768,  677, -32768,  136,
			  183,  186, -32768, -32768,  898,  298,  898, -32768,  278,  182,
			  677, -32768,   58,  173, -32768,  677,  677,  898,  175,  677,
			   47,  547,  898, -32768, -32768, -32768, -32768, -32768, -32768, -32768,

			 -32768, -32768,  263,  275,  898,  190,  214,  142, 1034,  623,
			 1016,  828,  246,  898,  209, -32768, -32768,   69, -32768, -32768,
			 -32768,  677,  211, -32768,  677, -32768,  898,  149,   47,   88,
			   19,   28,  898,  106, -32768,  101,  812, -32768,  136, -32768,
			 1121, -32768, -32768,  898, -32768,   69,   58, -32768, -32768, -32768,
			  -17, -32768,  145,   19,  898,  126,  792,  677,   66, -32768,
			  111, -32768,  -26, -32768,   19,  898,   19,  -37,  898, -32768,
			  677,  225,   70, 1121,  677, -32768, -32768, -32768,  898, -32768,
			  898,  992,  677,   54,  677,  939,  898,  898,  963, -32768,
			 1121,  898,  898,  898,  742,  898, -32768,   31, -32768>>, 0)
		end

	yypgoto_: ARRAY [INTEGER] is
		once
			Result := INTEGER_ARRAY_.make_from_array (<<
			 -32768,  430, -32768, -32768, -32768,   97,  376,  357,  -84, -32768,
			    6, -32768, -32768,  388,   84,  381,   -1,  380,   86, -32768,
			 -32768,  347,  276, -32768, -32768, -32768, -32768, -32768, -32768, -32768,
			 -32768, -32768, -32768, -32768,  285, -128, -140,  312,  341,  340,
			  334, -32768,  -73, -32768, -32768, -126,  167, -32768,  -22, -32768,
			  329,    1, -32768,  191, -32768, -32768, -120, -32768, -32768, -32768,
			 -32768, -32768, -32768, -32768,  162, -32768, -32768,   36, -32768, -223,
			 -32768, -192, -32768, -32768, -32768, -32768, -32768, -252, -32768, -188,
			 -32768, -145, -153, -116, -32768, -32768, -32768,  536, -32768,   46,
			 -32768, -32768, -32768, -32768, -32768, -32768, -335,  -44, -163, -32768,

			 -32768,  -69, -32768,  -53,  -68,  -67, -32768, -32768, -32768, -238,
			 -32768,   55, -32768,    7, -32768, -32768, -32768, -32768>>, 0)
		end

	yytable_: ARRAY [INTEGER] is
		once
			Result := INTEGER_ARRAY_.make_from_array (<<
			   20,  193,  121,  286,  256,  236,  224,  248,   24,  250,
			  251,  252,  253,  254,  317,  235,   20,  129,  260,  312,
			  313,  480,  447,   14,   24,   12,  497,   12,    9,   12,
			    9,  498,    9,   67,  265,   20,  242,  154,   48,   48,
			   51,  465,   55,   24,   20,  244,   24,   24,   12,   63,
			  243,    9,   24,   12,  454,  417,    9,  153,   12,   70,
			  123,    9,   63,   67,    1,   81,   14,  127,   12,  130,
			  122,    9,   81,  343,   79,  106,  328,  108,  464,   63,
			  240,  123,  489,  154,  383,  446,  167,  124,  124,  124,
			  124,  122,  453,  445,  255,  294,  358,  290,  464,  136,

			  139,   38,  308,  195,  350,  194,  293,  338,  337,  124,
			  177,  331,  227,  415,  188,  316,  192,  187,  475,  318,
			   46,  296,  191,  190,  404,  223,   29,  371,  474,   56,
			   76,  321,   28,  124,  241,  411,  327,  161,  352,  380,
			  138,  228,   12,   12,  231,    9,    9,  287,  288,  289,
			  238,  239,  124,  324,  469,  124,   79,  466,   27,  347,
			  249,  436,  336,  346,  111,  191,  190,   12,  154,  457,
			    9,  154,  359,  153,  443,  368,  123,  444,  177,  372,
			  456,  257,   93,  360,  484,   92,  122,  407,   67,  308,
			  255,  117,  438,  176,  175,  174,   12,  173,  172,    9,

			  123,  414,  468,  171,   91,   90,   63,  377,  376,   89,
			  122,  334,  116,  478,   88,  375,  460,  425,  441,  124,
			  124,  124,  459,    8,   62,  151,  115,  408,  486,  150,
			   77,  374,  409,  410,  339,  492,  442,  437,  114,  494,
			  124,  495,  297,  124,  199,  198,   77,  170,  424,    7,
			  348,  454,  482,  434,  345,  169,  168,  167,  314,  -42,
			  344,  197,  196,  177,  428,   67,  342,  426,  440,  262,
			   12,  113,  341,    9,   60,  255,   59,  113,  420,  419,
			  -42,   63,  225,  -42,  322,  330,  329,   35,   34,  -42,
			   33,   32,  422,  166,  165,  412,  258,  -42,  297,  476,

			  164,  163,  162,  123,  473,  403,  124,  405,  161,  285,
			  160,  369,  365,  122,  448,  -42,  349,  481,  335,  363,
			  332,  485,  124,  326,  325,   89,  297,  433,  351,  488,
			  323,  490,  320,   68,  306,  311,  303,  448,   73,   24,
			  319,  295,   91,  292,  362,  291,  220,   76,  448,   35,
			  448,   15,   14,   13,   12,   11,   10,    9,   33,  259,
			  237,   88,  177,  233,  230,  222,  177,  221,  297,  137,
			  140,   67,  135,  391,   92,  391,  152,  185,  149,   87,
			   57,    8,   61,   43,   83,   53,  391,   39,  177,  416,
			  186,  391,  189,   47,    1,   41,  477,  361,   40,  479,

			  467,  463,  483,  391,  177,  373,  302,    7,  110,  105,
			  391,  229,  391,  142,  232,  104,  103,   85,  355,   49,
			  395,   50,  395,  177,   45,  391,  234,  416,   86,  354,
			   64,  391,   26,  395,    0,  391,    0,  462,  395,    0,
			    0,    0,  391,    0,    0,    0,    0,    0,    0,    0,
			  395,    6,    5,  391,    0,  391,  472,  395,    0,  395,
			    0,   47,    0,    0,  391,    0,    0,  391,    0,    0,
			    0,    0,  395,    0,    0,    0,  449,  391,  395,  391,
			    0,    0,  395,    0,    0,  391,  391,    0,    0,  395,
			  391,  391,  391,  391,  391,    0,    0,    0,    0,  449,

			  395,    0,  395,    0,   15,   14,   13,    0,   11,   10,
			  449,  395,  449,    0,  395,  176,  175,  174,   12,  173,
			  172,    9,    0,    0,  395,  171,  395,    0,    0,    0,
			    0,    0,  395,  395,    8,    0,    0,  395,  395,  395,
			  395,  395,    0,    0,    0,    8,    0,    0,   53,    0,
			    0,    0,    0, -263,    0,    0, -263, -263,    0,    0,
			    7,    0,  353,    0,    0,    0,    0, -263,    0,  170,
			 -263,    7,    0, -263, -263, -263, -263,  169,  168,  167,
			    0,    0, -263,    0, -263,    0,    0,    0, -263, -263,
			    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,

			 -263, -263,    0,    0,    6,    5,    0,    0,    0, -263,
			 -263, -263, -263, -263, -263,  166,  165,    0,    0,    0,
			    0,    0,  164,  163,  162,    0,    0,    0,    0,    0,
			  161,    0,  160,    0,    0,    0,  307,    0,  176,  175,
			  174,   12,  173,  172,    9,    0,    0,    0,  171,  176,
			  175,  174,   12,  173,  172,    9,    0,    0,    0,  171,
			 -263,  367,    0,    0,    0, -263,    0,  255,    8, -263,
			 -263,    0,    0,    0,    0,    0,    0,    0,    0,    8,
			  176,  175,  174,   12,  173,  172,    9,  430,    0,    0,
			  171,    0,  170,    0,    7,    0,    0,    0,    0,    0,

			  169,  168,  167,  170,    0,    7,    0,    0,    0,    0,
			    8,  169,  168,  167,    0,    0,  283,  282,  281,  280,
			  279,  278,  277,  276,  275,  274,  273,  272,  271,  270,
			  269,  268,  267,  266,  170,    0,    7,    0,  166,  165,
			    0,    0,  169,  168,  167,  164,  163,  162,   12,  166,
			  165,    9,  390,  161,    0,  160,  164,  163,  162,  264,
			    0,    0,  389,    0,  161,  388,  160,    0,    0,    0,
			  496,    0,    0,    0,    0,    0,    0,  387,    0,  386,
			  166,  165,    0,  385,    0,    0,    0,  164,  163,  162,
			    0,    0,    0,    0,    0,  161,  384,  160,   12,    0,

			    0,    9,  390,    0,    0,    0,    0,  383,  382,  167,
			    0,    0,  389,    0,    0,  388,    0,    0,   12,  470,
			    0,    9,  390,    0,    0,    0,    0,  387,    0,  386,
			    0,    0,  389,  385,   12,  388,    0,    9,  390,    0,
			  461,    0,    0,    0,    0,    0,  384,  387,  389,  386,
			    0,  388,    0,  385,    0,  381,    0,  383,  382,  167,
			  161,    0,  380,  387,  379,  386,  384,    0,    0,  385,
			  111,    0,    0,    0,    0,    0,    0,  383,  382,  167,
			    0,    0,  384,    0,    0,    0,   15,   14,   13,   12,
			   11,   10,    9,  383,  382,  167,    0,   15,   14,   13,

			   12,   11,   10,    9,   12,  381,    0,    9,  390,    0,
			  161,    0,  380,    0,  379,    0,    8,    0,  389,    0,
			    0,  388,    0,    0,    0,  381,    0,    8,  418,    0,
			  161,    0,  380,  387,  379,  386,    0,    0,    0,  385,
			  418,  381,    7,    0,    0,    0,  161,  418,  380,    0,
			  379,    0,  384,    7,   15,   14,   13,   12,   11,   10,
			    9,    0,    0,  383,  382,  167,    0,    0,    0,    0,
			    0,    0,  418,    0,    0,    0,    0,    0,    0,  418,
			    0,    0,    0,    0,    8,  491,    6,    5,    0,    0,
			    0,    0,  418,    0,    0,    0,   44,    6,    5,    0,

			    0,    0,    0,    0,  418,    0,    0,   36,    0,    0,
			    7,  381,    0,    0,  418,    0,  161,    0,  380,    0,
			  379,  493,  418,    0,    0,    0,    0,    0,  418,    0,
			  418,  418,  283,  282,  281,  280,  279,  278,  277,  276,
			  275,  274,  273,  272,  271,  270,  269,  268,  267,  266,
			  487,    0,    0,    0,    6,    5,  283,  282,  281,  280,
			  279,  278,  277,  276,  275,  274,  273,  272,  271,  270,
			  269,  268,  267,  266,  432,    0,    0,    0,    0,    0,
			    0,    0,    0,    0,    0,  283,  282,  281,  280,  279,
			  278,  277,  276,  275,  274,  273,  272,  271,  270,  269,

			  268,  267,  266,    0,    0,    0,    0,    0,    0,  283,
			  282,  281,  280,  279,  278,  277,  276,  275,  274,  273,
			  272,  271,  270,  269,  268,  267,  266,  283,  282,  281,
			  280,  279,  278,  277,  276,  275,  274,  273,  272,  271,
			  270,  269,  268,  267,  266,    0,    0,    0,    0,    0,
			    0,    0,    0,    0,    0,  429,  283,  282,  281,  280,
			  279,  278,  277,  276,  275,  274,  273,  272,  271,  270,
			  269,  268,  267,  266,    0,    0,    0,    0,    0,    0,
			    0,    0,    0,    0,  366,  283,  282,  281,  280,  279,
			  278,  277,  276,  275,  274,  273,  272,  271,  270,  269,

			  268,  267,  266,    0,    0,    0,    0,    0,    0,    0,
			    0,    0,    0,  305,  283,  282,  281,  280,  279,  278,
			  277,  276,  275,  274,  273,  272,  271,  270,  269,  268,
			  267,  266,  218,  217,  216,  215,  214,  213,  212,  211,
			  210,  209,  208,  207,  206,  205,  204,  203,  202,  201>>, 0)
		end

	yycheck_: ARRAY [INTEGER] is
		once
			Result := INTEGER_ARRAY_.make_from_array (<<
			    1,  117,   86,  195,  167,  145,  132,  160,    1,  162,
			  163,  164,  165,  166,   14,  143,   17,   90,  171,  257,
			  258,   58,    3,    4,   17,    6,    0,    6,    9,    6,
			    9,    0,    9,    6,  179,   36,  156,  110,   39,   40,
			   41,   58,   43,   36,   45,  115,   39,   40,    6,   22,
			  120,    9,   45,    6,   26,  390,    9,   36,    6,   60,
			   39,    9,   22,    6,   38,   64,    4,   89,    6,   91,
			   49,    9,   71,  311,   34,   76,  299,   78,  115,   22,
			  153,   39,   28,  156,   65,   66,   67,   88,   89,   90,
			   91,   49,   64,  428,  120,  235,  334,  223,  115,   93,

			   94,   17,  255,  115,  327,  117,  234,   65,   66,  110,
			  111,  303,  134,   66,  115,  115,  117,   65,    7,  264,
			   36,  241,  103,  104,  376,  113,   24,  365,   62,   45,
			  118,  284,   30,  134,  113,  387,  113,  118,  330,  120,
			  113,  135,    6,    6,  138,    9,    9,  220,  221,  222,
			  151,  152,  153,  293,   28,  156,   34,   12,   56,  322,
			  161,  413,  120,  316,   42,  103,  104,    6,  241,   63,
			    9,  244,  335,   36,  426,  363,   39,   28,  179,  367,
			  432,  123,   28,  336,  114,   31,   49,  379,    6,  342,
			  120,    9,  123,    3,    4,    5,    6,    7,    8,    9,

			   39,  389,  454,   13,   50,   51,   22,   24,   25,   55,
			   49,  123,   30,  465,   60,   32,  115,  405,    7,  220,
			  221,  222,  121,   33,   40,  115,   44,  380,  480,  119,
			   63,   48,  385,  386,  307,  487,  424,   28,   56,  491,
			  241,  493,  243,  244,   74,   75,   79,   57,   58,   59,
			  323,   26,   27,    7,  115,   65,   66,   67,  259,    0,
			  121,   91,   92,  264,  122,    6,  115,   53,  421,  114,
			    6,   80,  121,    9,  115,  120,  117,   86,   15,   16,
			   21,   22,   18,   24,  285,  114,  115,    4,    5,   30,
			    4,    5,   17,  103,  104,  120,  123,   38,  299,  462,

			  110,  111,  112,   39,  457,    7,  307,   29,  118,  123,
			  120,   45,  123,   49,  430,   56,   28,  470,   67,   52,
			   43,  474,  323,  121,   28,   55,  327,  411,  329,  482,
			   19,  484,   26,   57,  119,  123,  114,  453,   62,  332,
			   58,   28,   50,   28,  345,   28,  115,  118,  464,    4,
			  466,    3,    4,    5,    6,    7,    8,    9,    4,  120,
			   28,   60,  363,   28,   28,   19,  367,  115,  369,   93,
			   94,    6,  113,  374,   31,  376,  115,   28,   28,   28,
			   11,   33,    7,   21,  116,   47,  387,  115,  389,  390,
			  114,  392,  116,  113,   38,  116,  464,  342,  114,  466,

			  453,  445,  471,  404,  405,  369,  244,   59,   79,   75,
			  411,  135,  413,  101,  138,   75,   75,   70,  332,   39,
			  374,   40,  376,  424,   36,  426,  141,  428,   71,  332,
			   54,  432,    2,  387,    0,  436,    0,  438,  392,    0,
			    0,    0,  443,    0,    0,    0,    0,    0,    0,    0,
			  404,  103,  104,  454,    0,  456,  457,  411,    0,  413,
			    0,  113,    0,    0,  465,    0,    0,  468,    0,    0,
			    0,    0,  426,    0,    0,    0,  430,  478,  432,  480,
			    0,    0,  436,    0,    0,  486,  487,    0,    0,  443,
			  491,  492,  493,  494,  495,    0,    0,    0,    0,  453,

			  454,    0,  456,    0,    3,    4,    5,    0,    7,    8,
			  464,  465,  466,    0,  468,    3,    4,    5,    6,    7,
			    8,    9,    0,    0,  478,   13,  480,    0,    0,    0,
			    0,    0,  486,  487,   33,    0,    0,  491,  492,  493,
			  494,  495,    0,    0,    0,   33,    0,    0,   47,    0,
			    0,    0,    0,    6,    0,    0,    9,   10,    0,    0,
			   59,    0,   61,    0,    0,    0,    0,   20,    0,   57,
			   23,   59,    0,   26,   27,   28,   29,   65,   66,   67,
			    0,    0,   35,    0,   37,    0,    0,    0,   41,   42,
			    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,

			   53,   54,    0,    0,  103,  104,    0,    0,    0,   62,
			   63,   64,   65,   66,   67,  103,  104,    0,    0,    0,
			    0,    0,  110,  111,  112,    0,    0,    0,    0,    0,
			  118,    0,  120,    0,    0,    0,  124,    0,    3,    4,
			    5,    6,    7,    8,    9,    0,    0,    0,   13,    3,
			    4,    5,    6,    7,    8,    9,    0,    0,    0,   13,
			  113,   26,    0,    0,    0,  118,    0,  120,   33,  122,
			  123,    0,    0,    0,    0,    0,    0,    0,    0,   33,
			    3,    4,    5,    6,    7,    8,    9,   64,    0,    0,
			   13,    0,   57,    0,   59,    0,    0,    0,    0,    0,

			   65,   66,   67,   57,    0,   59,    0,    0,    0,    0,
			   33,   65,   66,   67,    0,    0,   93,   94,   95,   96,
			   97,   98,   99,  100,  101,  102,  103,  104,  105,  106,
			  107,  108,  109,  110,   57,    0,   59,    0,  103,  104,
			    0,    0,   65,   66,   67,  110,  111,  112,    6,  103,
			  104,    9,   10,  118,    0,  120,  110,  111,  112,  113,
			    0,    0,   20,    0,  118,   23,  120,    0,    0,    0,
			   28,    0,    0,    0,    0,    0,    0,   35,    0,   37,
			  103,  104,    0,   41,    0,    0,    0,  110,  111,  112,
			    0,    0,    0,    0,    0,  118,   54,  120,    6,    0,

			    0,    9,   10,    0,    0,    0,    0,   65,   66,   67,
			    0,    0,   20,    0,    0,   23,    0,    0,    6,   27,
			    0,    9,   10,    0,    0,    0,    0,   35,    0,   37,
			    0,    0,   20,   41,    6,   23,    0,    9,   10,    0,
			   28,    0,    0,    0,    0,    0,   54,   35,   20,   37,
			    0,   23,    0,   41,    0,  113,    0,   65,   66,   67,
			  118,    0,  120,   35,  122,   37,   54,    0,    0,   41,
			   42,    0,    0,    0,    0,    0,    0,   65,   66,   67,
			    0,    0,   54,    0,    0,    0,    3,    4,    5,    6,
			    7,    8,    9,   65,   66,   67,    0,    3,    4,    5,

			    6,    7,    8,    9,    6,  113,    0,    9,   10,    0,
			  118,    0,  120,    0,  122,    0,   33,    0,   20,    0,
			    0,   23,    0,    0,    0,  113,    0,   33,  392,    0,
			  118,    0,  120,   35,  122,   37,    0,    0,    0,   41,
			  404,  113,   59,    0,    0,    0,  118,  411,  120,    0,
			  122,    0,   54,   59,    3,    4,    5,    6,    7,    8,
			    9,    0,    0,   65,   66,   67,    0,    0,    0,    0,
			    0,    0,  436,    0,    0,    0,    0,    0,    0,  443,
			    0,    0,    0,    0,   33,   46,  103,  104,    0,    0,
			    0,    0,  456,    0,    0,    0,  113,  103,  104,    0,

			    0,    0,    0,    0,  468,    0,    0,  113,    0,    0,
			   59,  113,    0,    0,  478,    0,  118,    0,  120,    0,
			  122,   58,  486,    0,    0,    0,    0,    0,  492,    0,
			  494,  495,   93,   94,   95,   96,   97,   98,   99,  100,
			  101,  102,  103,  104,  105,  106,  107,  108,  109,  110,
			   58,    0,    0,    0,  103,  104,   93,   94,   95,   96,
			   97,   98,   99,  100,  101,  102,  103,  104,  105,  106,
			  107,  108,  109,  110,   58,    0,    0,    0,    0,    0,
			    0,    0,    0,    0,    0,   93,   94,   95,   96,   97,
			   98,   99,  100,  101,  102,  103,  104,  105,  106,  107,

			  108,  109,  110,    0,    0,    0,    0,    0,    0,   93,
			   94,   95,   96,   97,   98,   99,  100,  101,  102,  103,
			  104,  105,  106,  107,  108,  109,  110,   93,   94,   95,
			   96,   97,   98,   99,  100,  101,  102,  103,  104,  105,
			  106,  107,  108,  109,  110,    0,    0,    0,    0,    0,
			    0,    0,    0,    0,    0,  121,   93,   94,   95,   96,
			   97,   98,   99,  100,  101,  102,  103,  104,  105,  106,
			  107,  108,  109,  110,    0,    0,    0,    0,    0,    0,
			    0,    0,    0,    0,  121,   93,   94,   95,   96,   97,
			   98,   99,  100,  101,  102,  103,  104,  105,  106,  107,

			  108,  109,  110,    0,    0,    0,    0,    0,    0,    0,
			    0,    0,    0,  121,   93,   94,   95,   96,   97,   98,
			   99,  100,  101,  102,  103,  104,  105,  106,  107,  108,
			  109,  110,   74,   75,   76,   77,   78,   79,   80,   81,
			   82,   83,   84,   85,   86,   87,   88,   89,   90,   91>>, 0)
		end

feature {NONE} -- Constants

	yyFinal: INTEGER is 498
			-- Termination state id

	yyFlag: INTEGER is -32768
			-- Most negative INTEGER

	yyNtbase: INTEGER is 125
			-- Number of tokens

	yyLast: INTEGER is 1249
			-- Upper bound of `yytable' and `yycheck'

	yyMax_token: INTEGER is 359
			-- Maximum token id
			-- (upper bound of `yytranslate'.)

	yyNsyms: INTEGER is 243
			-- Number of symbols
			-- (terminal and nonterminal)

feature -- User-defined features



feature {NONE} -- Initialization

	make is
			-- Create a new Eiffel parser.
		do
			make_eiffel_scanner
			make_parser_skeleton
		end

	execute is
			-- Parse Eiffel files `arguments (1..argument_count)'.
		local
			j, n: INTEGER
			a_filename: STRING
			a_file: like INPUT_STREAM_TYPE
		do
			make
			n := Arguments.argument_count
			if n = 0 then
				std.error.put_string ("usage: eiffel_parser filename ...%N")
				Exceptions.die (1)
			else
				from j := 1 until j > n loop
					a_filename := Arguments.argument (j)
					a_file := INPUT_STREAM_.make_file_open_read (a_filename)
					if INPUT_STREAM_.is_open_read (a_file) then
						reset
						set_input_buffer (new_file_buffer (a_file))
						parse
						INPUT_STREAM_.close (a_file)
					else
						std.error.put_string ("eiffel_parser: cannot read %'")
						std.error.put_string (a_filename)
						std.error.put_string ("%'%N")
					end
					j := j + 1
				end
			end
		end

	benchmark is
			-- Parse Eiffel file `argument (2)' `argument (1)' times.
		local
			j, n: INTEGER
			a_filename: STRING
			a_file: like INPUT_STREAM_TYPE
		do
			make
			if
				Arguments.argument_count < 2 or else
				not STRING_.is_integer (Arguments.argument (1))
			then
				std.error.put_string ("usage: eiffel_parser nb filename%N")
				Exceptions.die (1)
			else
				n := Arguments.argument (1).to_integer
				a_filename := Arguments.argument (2)
				from j := 1 until j > n loop
					a_file := INPUT_STREAM_.make_file_open_read (a_filename)
					if INPUT_STREAM_.is_open_read (a_file) then
						reset
						set_input_buffer (new_file_buffer (a_file))
						parse
						INPUT_STREAM_.close (a_file)
					else
						std.error.put_string ("eiffel_parser: cannot read %'")
						std.error.put_string (a_filename)
						std.error.put_string ("%'%N")
						Exceptions.die (1)
					end
					j := j + 1
				end
			end
		end

feature -- Error handling

	report_error (a_message: STRING) is
			-- Print error message.
		local
			f_buffer: YY_FILE_BUFFER
		do
			f_buffer ?= input_buffer
			if f_buffer /= Void then
				std.error.put_string (INPUT_STREAM_.name (f_buffer.file))
				std.error.put_string (", line ")
			else
				std.error.put_string ("line ")
			end
			std.error.put_integer (eif_lineno)
			std.error.put_string (": ")
			std.error.put_string (a_message)
			std.error.put_character ('%N')
		end

end -- class EIFFEL_PARSER
