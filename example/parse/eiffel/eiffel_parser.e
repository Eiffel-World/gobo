indexing

	description:

		"Eiffel parsers"

	author:     "Eric Bezault <ericb@gobo.demon.co.uk>"
	copyright:  "Copyright (c) 1997, Eric Bezault"
	date:       "$Date$"
	revision:   "$Revision$"

class EIFFEL_PARSER

inherit

	YY_PARSER_SKELETON [ANY]
		rename
			make as make_parser_skeleton
		end

	EIFFEL_SCANNER
		rename
			make as make_eiffel_scanner
		end

creation

	make, execute, benchmark


feature {NONE} -- Tables

	yy_build_parser_tables is
			-- Build parser tables.
		do
			yytranslate := yytranslate_
			yyr1 := yyr1_
			yyr2 := yyr2_
			yydefact := yydefact_
			yydefgoto := yydefgoto_
			yypact := yypact_
			yypgoto := yypgoto_
			yytable := yytable_
			yycheck := yycheck_
		end

	yyFinal: INTEGER is 467

	yyFlag: INTEGER is -32768

	yyNtbase: INTEGER is 124

	yyMax_token: INTEGER is 358
	yyNsyms: INTEGER is 235

	yytranslate_: ARRAY [INTEGER] is
		once
			Result := integer_array_.make_from_array (<<0,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,   121,     2,     2,   123,     2,     2,     2,   119,
   120,   104,   102,   114,   103,   122,   105,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,   112,   113,    98,
    96,    99,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
   115,     2,   116,   108,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,   117,     2,   118,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     1,     2,     3,     4,     5,
     6,     7,     8,     9,    10,    11,    12,    13,    14,    15,
    16,    17,    18,    19,    20,    21,    22,    23,    24,    25,
    26,    27,    28,    29,    30,    31,    32,    33,    34,    35,
    36,    37,    38,    39,    40,    41,    42,    43,    44,    45,
    46,    47,    48,    49,    50,    51,    52,    53,    54,    55,
    56,    57,    58,    59,    60,    61,    62,    63,    64,    65,
    66,    67,    68,    69,    70,    71,    72,    73,    74,    75,
    76,    77,    78,    79,    80,    81,    82,    83,    84,    85,
    86,    87,    88,    89,    90,    91,    92,    93,    94,    95,
    97,   100,   101,   106,   107,   109,   110,   111>>, 0)
		end

	yyr1_: ARRAY [INTEGER] is
		once
			Result := integer_array_.make_from_array (<<0,
   124,   125,   125,   125,   126,   126,   127,   127,   127,   128,
   128,   128,   129,   129,   130,   130,   131,   131,   131,   132,
   132,   133,   133,   134,   134,   135,   135,   136,   136,   136,
   137,   137,   138,   138,   138,   138,   138,   138,   139,   140,
   141,   142,   143,   144,   144,   145,   145,   146,   147,   147,
   148,   148,   148,   149,   149,   150,   150,   150,   151,   151,
   152,   152,   153,   153,   154,   154,   155,   155,   156,   156,
   157,   157,   158,   158,   159,   159,   160,   160,   160,   161,
   162,   162,   163,   163,   164,   164,   164,   165,   166,   166,
   166,   167,   167,   168,   168,   169,   169,   170,   171,   171,
   172,   172,   172,   173,   173,   174,   174,   175,   175,   175,
   176,   176,   177,   177,   177,   178,   179,   179,   179,   179,
   180,   181,   181,   181,   181,   181,   181,   181,   181,   181,
   181,   181,   181,   181,   181,   181,   181,   181,   181,   182,
   183,   183,   184,   184,   184,   184,   185,   185,   186,   186,
   186,   186,   186,   187,   188,   188,   188,   189,   189,   190,
   190,   190,   190,   190,   190,   190,   190,   190,   190,   191,
   191,   191,   192,   192,   193,   193,   194,   194,   194,   195,
   195,   195,   196,   196,   197,   197,   198,   199,   199,   200,
   200,   201,   202,   202,   203,   203,   203,   204,   205,   205,
   206,   206,   207,   207,   208,   208,   208,   208,   208,   208,
   208,   208,   208,   208,   209,   210,   210,   210,   210,   211,
   212,   212,   212,   213,   213,   214,   214,   215,   216,   216,
   216,   217,   217,   217,   218,   218,   219,   219,   219,   220,
   220,   220,   221,   221,   221,   221,   221,   221,   221,   221,
   221,   221,   221,   221,   221,   221,   221,   221,   221,   222,
   222,   223,   223,   224,   224,   224,   224,   224,   225,   225,
   225,   225,   225,   225,   225,   225,   225,   225,   225,   225,
   225,   225,   225,   225,   225,   225,   225,   225,   226,   226,
   226,   226,   226,   226,   227,   227,   228,   228,   229,   229,
   230,   231,   231,   231,   231,   232,   232,   232,   232,   233,
   234,   234,   234,   234>>, 0)
		end

	yyr2_: ARRAY [INTEGER] is
		once
			Result := integer_array_.make_from_array (<<0,
     9,     2,     3,     3,     0,     2,     0,     1,     2,     1,
     3,     1,     1,     3,     1,     1,     0,     2,     3,     2,
     4,     0,     2,     0,     2,     0,     2,     0,     1,     2,
     2,     1,     0,     1,     1,     1,     1,     1,     6,     5,
     4,     3,     2,     1,     2,     3,     5,     2,     0,     1,
     0,     1,     2,     2,     1,     0,     1,     1,     1,     3,
     2,     3,     1,     3,     1,     2,     0,     1,     1,     2,
     0,     1,     1,     2,     0,     1,     0,     1,     2,     3,
     0,     1,     0,     1,     0,     1,     2,     3,     0,     1,
     2,     2,     1,     1,     3,     1,     2,     3,     0,     2,
     1,     1,     1,     0,     2,     0,     3,     0,     1,     2,
     3,     1,     1,     2,     2,     1,     1,     1,     1,     1,
     1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
     1,     1,     1,     1,     1,     1,     1,     1,     1,     7,
     0,     2,     1,     2,     2,     3,     0,     2,     1,     2,
     2,     2,     1,     2,     0,     2,     3,     1,     3,     1,
     1,     1,     1,     1,     1,     1,     1,     1,     1,     0,
     1,     2,     5,     3,     0,     3,     2,     4,     6,     0,
     2,     3,     1,     3,     1,     2,     3,     1,     1,     1,
     1,     7,     0,     2,     0,     4,     5,     5,     4,     5,
     0,     1,     1,     3,     1,     1,     3,     3,     3,     1,
     3,     3,     3,     3,     9,     0,     1,     2,     4,     4,
     0,     2,     3,     1,     3,     0,     2,     3,     0,     2,
     3,     0,     2,     3,     0,     2,     0,     1,     2,     1,
     3,     1,     1,     3,     1,     1,     1,     1,     1,     3,
     2,     2,     2,     2,     2,     2,     3,     4,     3,     1,
     3,     1,     3,     2,     1,     1,     4,     6,     1,     1,
     1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
     1,     1,     1,     1,     1,     2,     2,     1,     1,     1,
     1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
     1,     1,     3,     2,     1,     1,     3,     2,     1,     0,
     1,     1,     1,     1>>, 0)
		end

	yydefact_: ARRAY [INTEGER] is
		once
			Result := integer_array_.make_from_array (<<     5,
     7,     0,   297,   302,   306,    15,   299,   301,   298,   305,
   309,   300,   296,   295,     0,   310,    12,     6,     8,    10,
    13,    16,   289,   290,   293,   294,   291,   292,     0,     0,
     0,    17,     0,   304,   308,     0,     9,     0,     2,     0,
     0,     0,    24,    15,    11,   303,   307,    14,     3,     4,
    22,    18,     0,     0,    26,     0,    20,     0,    19,    25,
    28,    77,   155,    23,    22,    32,    27,    29,    33,    81,
    85,    78,     0,   154,    21,    30,    51,    65,    44,    73,
    69,    31,    34,    35,    36,    37,    38,    49,    71,    75,
    67,     0,     0,    82,    83,    81,    79,   235,    86,   153,
     0,     0,   156,   158,   149,     0,    55,    48,    52,    56,
   113,   121,   116,    66,    59,     0,     0,    45,     0,    74,
    70,    50,    71,    72,    67,    76,     0,    68,    75,    43,
    63,    61,     0,    84,    80,    89,   237,    87,     0,   150,
   152,   151,     0,   157,    53,    58,    54,    57,     0,   118,
   119,   120,   117,   114,   122,   123,   124,   125,   126,   127,
   128,   129,   130,   131,   132,   133,   135,   138,   134,   136,
   137,   139,   115,     0,     0,    67,    75,    42,     0,     0,
    62,     0,    93,    88,    90,   106,    94,    96,   311,   313,
   180,   312,   314,     0,     0,   266,   265,     0,     0,     0,
     0,     0,   242,     0,   236,   238,   240,   243,   245,   246,
   248,   249,   247,     1,   159,    60,     0,    46,    75,     0,
    41,    64,    97,    91,     0,   108,    92,   104,     0,     0,
   264,   180,   251,   262,     0,     0,   252,   253,   255,   254,
   256,     0,   239,   288,   284,   285,   283,   277,   278,   279,
   280,   281,   282,   270,   271,   272,   273,   275,   276,   274,
   269,     0,     0,     0,     0,    40,    95,   260,   112,     0,
   109,     0,     0,    99,   241,   181,     0,     0,   183,   185,
   250,     0,   259,     0,   244,   287,   286,   257,   180,    47,
    39,   107,   110,     0,     0,   105,    24,    98,   186,     0,
   182,   263,   258,     0,   267,   111,   261,   102,   229,   100,
   103,   101,   184,   180,   237,   141,   268,   237,   230,   108,
     0,   231,   142,   143,   170,     0,   170,   232,   180,     0,
   237,   221,   170,     0,     0,   168,   191,   169,     0,     0,
   171,   144,   160,   161,   162,     0,   163,   164,   165,   166,
   167,     0,   147,   145,   237,   226,   177,   190,   191,   175,
     0,     0,   170,   235,     0,     0,     0,     0,   172,   188,
   189,     0,     0,     0,   146,   237,   233,   170,     0,     0,
   174,   228,   222,     0,   224,     0,   216,   170,   201,   193,
     0,     0,   187,   180,   148,   234,   227,   140,   180,     0,
   223,   220,   217,     0,   195,   205,     0,   310,     0,   202,
   203,   210,   206,   170,   201,     0,     0,   175,   178,   176,
   225,   180,   218,     0,     0,   193,     0,     0,   170,     0,
     0,     0,   194,     0,   198,   180,   173,     0,     0,     0,
     0,     0,   214,   213,   209,   199,   204,   212,   211,   208,
   207,   170,   179,   219,   170,   170,     0,   192,   200,     0,
   196,   170,   215,   197,     0,     0,     0>>, 0)
		end

	yydefgoto_: ARRAY [INTEGER] is
		once
			Result := integer_array_.make_from_array (<<   465,
    32,     2,    18,    19,    20,    21,    43,    53,    57,    55,
    62,    67,    68,    82,    83,    84,    85,    86,    87,    88,
   118,    89,   123,   108,   109,   147,   114,    94,   133,   128,
   129,   124,   125,   126,   127,    71,    72,    95,   135,    98,
    99,   184,   185,   186,   187,   227,   298,   310,   274,   228,
   270,   271,   115,   116,   154,   117,   173,   311,   321,   328,
   375,   104,   105,    74,   106,   341,   342,   343,   381,   344,
   231,   278,   279,   345,   372,   346,   347,   416,   426,   348,
   390,   409,   410,   411,   349,   404,   350,   363,   384,   379,
   351,   316,   356,   139,   205,   206,   207,   272,   235,   208,
   262,    22,   209,   210,   211,   212,    27,    28,    36,   213>>, 0)
		end

	yypact_: ARRAY [INTEGER] is
		once
			Result := integer_array_.make_from_array (<<     4,
   303,   137,-32768,-32768,-32768,   -20,-32768,-32768,-32768,-32768,
-32768,-32768,-32768,-32768,   110,-32768,-32768,   303,-32768,    35,
-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,   124,   216,
   218,   132,   501,-32768,-32768,   247,-32768,   501,-32768,   243,
   249,    23,   212,-32768,    35,-32768,-32768,-32768,-32768,-32768,
   252,-32768,    58,    44,   224,   265,-32768,   266,-32768,-32768,
    19,   245,   160,-32768,   252,-32768,    19,-32768,   173,   165,
    28,-32768,    41,-32768,-32768,-32768,   -29,   115,   115,   115,
   115,-32768,-32768,-32768,-32768,-32768,-32768,   251,   223,   229,
   237,   257,    20,-32768,   115,   165,-32768,    33,-32768,-32768,
   265,    25,-32768,-32768,-32768,   105,-32768,   -29,-32768,   147,
-32768,-32768,-32768,   180,-32768,   113,  1096,   181,   278,   180,
   180,-32768,   223,-32768,   237,-32768,   270,-32768,   229,-32768,
-32768,-32768,    67,   180,-32768,    30,   557,-32768,   283,-32768,
-32768,-32768,   139,-32768,-32768,-32768,-32768,   180,   115,-32768,
-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,
-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,
-32768,-32768,-32768,   115,   115,   237,   229,-32768,   284,   313,
-32768,   115,-32768,    30,-32768,    14,-32768,-32768,-32768,-32768,
     5,-32768,-32768,   632,   201,-32768,-32768,   674,   674,   674,
   674,   674,-32768,   674,   557,-32768,  1095,   199,-32768,-32768,
-32768,-32768,-32768,-32768,-32768,-32768,   297,-32768,   229,   289,
-32768,-32768,-32768,-32768,    65,    39,-32768,   213,   674,   273,
-32768,   205,-32768,  1095,    -5,    16,-32768,-32768,-32768,-32768,
-32768,  1019,-32768,-32768,   295,-32768,   264,-32768,-32768,-32768,
-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,
-32768,   674,   323,   115,   296,-32768,-32768,-32768,-32768,     3,
-32768,   130,   139,   282,  1095,-32768,   326,   -51,-32768,  1095,
-32768,   674,-32768,    80,   211,-32768,-32768,  1095,   205,-32768,
-32768,-32768,-32768,   139,   328,-32768,   947,-32768,-32768,   346,
-32768,  1095,-32768,   329,-32768,-32768,-32768,-32768,   279,-32768,
-32768,-32768,-32768,   205,   428,   288,-32768,   557,   557,    39,
   202,   557,    39,-32768,   906,    44,   906,   305,    22,    21,
   557,   222,   906,   674,   674,-32768,   221,-32768,   674,   139,
-32768,   906,-32768,-32768,-32768,   238,-32768,-32768,-32768,-32768,
-32768,   225,   325,   906,   471,   287,   233,-32768,-32768,   239,
   514,    17,   906,   775,   937,  1001,  1048,   242,-32768,-32768,
-32768,   674,   354,    44,-32768,   557,   557,   906,   330,   360,
-32768,-32768,-32768,   108,-32768,   808,   298,   906,    56,    38,
   248,    21,  1095,   205,-32768,   557,   906,-32768,   205,    44,
-32768,-32768,   717,   301,   815,   353,   368,-32768,   309,   263,
-32768,   361,   362,   906,    56,   344,   375,   239,   267,-32768,
-32768,    50,  1095,   674,   674,   235,    76,   382,   906,    56,
   203,    95,   906,   327,-32768,   205,-32768,   674,   665,   959,
   674,   356,-32768,-32768,-32768,   906,-32768,-32768,-32768,-32768,
-32768,   906,   272,  1095,   906,   906,   983,-32768,   906,   848,
   906,   906,-32768,   906,   387,   395,-32768>>, 0)
		end

	yypgoto_: ARRAY [INTEGER] is
		once
			Result := integer_array_.make_from_array (<<-32768,
-32768,-32768,-32768,   379,   365,   363,-32768,-32768,   334,   106,
-32768,-32768,   335,-32768,-32768,-32768,-32768,-32768,-32768,-32768,
-32768,   316,-32768,-32768,   299,-32768,   131,   -25,-32768,   339,
   -76,   341,   290,   343,  -122,-32768,   348,   319,-32768,-32768,
   322,-32768,   240,-32768,   196,-32768,-32768,-32768,-32768,-32768,
   102,  -247,   -71,-32768,-32768,-32768,-32768,-32768,-32768,-32768,
-32768,  -139,    -3,-32768,-32768,  -159,  -238,-32768,     7,-32768,
  -268,-32768,   123,-32768,-32768,  -302,-32768,    11,-32768,-32768,
-32768,    12,-32768,    -2,-32768,-32768,-32768,-32768,-32768,-32768,
-32768,-32768,-32768,    78,  -213,  -200,  -188,   207,-32768,  -198,
-32768,   148,     1,    -1,     0,     2,  -207,-32768,    36,-32768>>, 0)
		end

	yyLast: INTEGER is 1204

	yytable_: ARRAY [INTEGER] is
		once
			Result := integer_array_.make_from_array (<<    24,
    25,    23,    26,   215,   243,   234,   179,   119,   268,   237,
   238,   239,   240,   241,   281,   242,    24,    25,    23,    26,
   305,   268,   293,     7,    63,   131,   358,   360,    51,    12,
   141,    24,    25,    23,    26,   111,    24,    25,    23,    26,
   275,   280,  -190,  -190,   268,   317,    63,     1,   177,   100,
     7,   110,    64,    60,   220,    70,    12,    69,     3,     4,
   357,   406,   300,    69,   188,     9,    10,    96,   301,   414,
   111,   182,    96,   288,   112,   293,   101,   216,     3,     4,
   137,   443,   110,   107,   113,     9,    10,    93,   354,   418,
   102,    33,   359,   302,   364,   142,   265,   140,     4,   219,
   450,   319,   217,   218,   322,    10,   182,   415,   282,   112,
   223,   280,   188,    34,    35,   269,   229,   361,   243,   113,
   111,   243,   292,   230,   386,   419,   352,   225,   352,    39,
   420,    66,   226,   296,   352,   283,   383,   132,    52,   397,
   230,   377,   183,   352,    63,   365,   366,   100,    38,   405,
   367,   269,   111,   188,   306,   352,   103,   407,   408,   112,
   243,   438,   396,    29,   352,   352,    30,   453,   230,   113,
   146,    58,    31,    59,   101,   433,   243,   407,   408,   352,
   180,   413,   369,   393,   181,   150,   151,   352,   102,   352,
   446,   112,   290,   295,   369,   243,   407,   408,   352,   303,
   368,   113,   152,   153,   369,     3,   352,   413,   448,    77,
   120,   121,     9,   459,   423,   352,   460,   461,   143,   445,
   144,   400,   413,   464,   451,   134,   369,   401,    78,    79,
   352,   324,   325,    80,   352,   439,   440,   369,    81,   326,
   148,   294,    40,   295,    41,   369,    42,   352,    49,   454,
    46,    47,   457,   352,    50,   327,   352,   352,   370,   371,
   352,   352,   352,   352,    54,   352,   414,   441,    56,    61,
    63,    65,    70,   369,    73,     3,   189,   190,   232,     7,
     8,    93,     9,   192,   193,    12,   369,    77,    81,    80,
   130,   194,    78,   149,   174,    24,    25,    23,    26,   369,
   369,   369,   175,   178,   369,     3,     4,     5,     6,     7,
     8,    13,     9,    10,    11,    12,   214,   221,   222,   236,
   263,   264,   266,   230,   273,   353,   286,   287,   289,   291,
   297,   299,   304,   307,   314,   195,   315,    14,   320,   355,
   362,    13,  -265,   196,   197,   378,   373,   374,     3,   189,
   190,   232,     7,     8,  -264,     9,   192,   193,    12,   394,
   380,   385,   392,   398,   194,   399,   403,    14,   424,   417,
   427,    34,   429,   395,   198,   199,   430,   435,   431,   432,
   436,   200,   201,   202,    13,    46,   466,   412,  -267,   458,
   452,   204,   276,  -268,   467,   277,    37,    45,    75,   421,
    48,    76,   309,   122,    15,    16,   145,    90,   195,    91,
    14,    92,   176,   412,   136,    17,   196,   197,    97,   138,
   267,   323,   313,   224,   437,   444,   434,   447,   412,   449,
     3,   189,   190,   191,     7,     8,   442,     9,   192,   193,
    12,   387,   284,   428,   312,     0,   194,   198,   199,     0,
     0,     0,     0,     0,   200,   201,   202,     0,     0,   318,
     0,     0,     0,     0,   204,     0,    13,     0,   277,     0,
     0,     0,     0,     3,   189,   190,   191,     7,     8,     0,
     9,   192,   193,    12,     0,     0,     0,     0,     0,   194,
   195,     0,    14,     0,     0,     0,     0,     0,   196,   197,
     0,     0,     0,     3,     4,     5,    44,     7,     8,    13,
     9,    10,    11,    12,     0,     0,     3,   189,   190,   191,
     7,     8,     0,     9,   192,   193,    12,     0,     0,   198,
   199,     0,   194,   195,   376,    14,   200,   201,   202,    13,
   203,   196,   197,     0,     0,     0,   204,   382,     0,     0,
     0,     0,    13,     0,     0,     0,     0,     0,     0,     3,
   189,   190,   191,     7,     8,    14,     9,   192,   193,    12,
     0,     0,   198,   199,     0,   194,   195,     0,    14,   200,
   201,   202,     0,   203,   196,   197,     0,     0,     0,   204,
     0,     0,     0,     0,     0,    13,     0,     0,     0,     0,
     0,     0,    15,    16,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,   198,   199,     0,     0,   195,
     0,    14,   200,   201,   202,     0,   203,   196,   197,     0,
     0,     0,   204,     0,     3,   189,   190,   232,     7,     8,
     0,     9,   192,   193,    12,     0,     0,     0,     0,     0,
   194,   233,     0,     0,     0,     0,     0,     0,   198,   199,
     0,     0,     0,     0,     0,   200,   201,   202,     0,   203,
    13,     0,     0,     0,     0,   204,     3,   189,   190,   232,
     7,     8,     0,     9,   192,   193,    12,     0,     0,     0,
     0,     0,   194,     0,   195,     0,    14,     0,     0,     0,
     0,     0,   196,   197,     0,     0,     0,     0,     0,     0,
     0,     0,    13,     0,     0,     0,   455,     0,     0,     3,
   189,   190,   422,     7,     8,     0,     9,   192,   193,    12,
     0,     0,     0,   198,   199,   194,   195,     0,    14,     0,
   200,   201,   202,     0,   196,   197,     0,     0,     0,     0,
   204,     0,     0,     0,     0,    13,   244,   245,   246,   247,
   248,   249,   250,   251,   252,   253,   254,   255,   256,   257,
   258,   259,   260,   261,     0,   198,   199,     0,     0,   195,
   329,    14,   200,   201,   202,     0,     0,   196,   197,     0,
   330,     0,   204,     0,     0,     0,     0,     0,     0,     0,
   331,     0,     0,   332,     0,     0,     0,     0,     0,     0,
     0,     0,     0,   329,     0,   333,     0,   334,   198,   199,
   329,   335,   137,   330,     0,   200,   201,   202,     0,     0,
   330,     0,     0,   331,   336,   204,   332,     0,     0,     0,
   331,   402,     0,   332,     0,   196,   337,   425,   333,     0,
   334,     0,     0,   329,   335,   333,     0,   334,     0,     0,
     0,   335,     0,   330,     0,     0,     0,   336,     0,     0,
     0,     0,     0,   331,   336,     0,   332,     0,   196,   337,
     0,   463,     0,     0,     0,   196,   337,   338,   333,     0,
   334,     0,     0,   339,   335,   340,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,   336,     0,     0,
     0,   329,     0,     0,     0,     0,     0,     0,   196,   337,
   338,   330,     0,     0,     0,     0,   339,   338,   340,     0,
     0,   331,     0,   339,   332,   340,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,   333,     0,   334,     3,
     4,     5,   335,     7,     8,     0,     9,    10,    11,    12,
   338,     0,     0,     0,     0,   336,   339,     0,   340,     0,
     0,     0,     0,     0,     0,     0,   196,   337,     0,     0,
     0,     0,     0,     0,     0,    13,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,    54,
   388,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,    14,     0,   308,     0,     0,     0,     0,   338,     0,
     0,     0,   456,     0,   339,     0,   340,     0,   244,   245,
   246,   247,   248,   249,   250,   251,   252,   253,   254,   255,
   256,   257,   258,   259,   260,   261,   462,     0,    15,    16,
   244,   245,   246,   247,   248,   249,   250,   251,   252,   253,
   254,   255,   256,   257,   258,   259,   260,   261,     0,     0,
   389,     0,     0,     0,   244,   245,   246,   247,   248,   249,
   250,   251,   252,   253,   254,   255,   256,   257,   258,   259,
   260,   261,   244,   245,   246,   247,   248,   249,   250,   251,
   252,   253,   254,   255,   256,   257,   258,   259,   260,   261,
   244,   245,   246,   247,   248,   249,   250,   251,   252,   253,
   254,   255,   256,   257,   258,   259,   260,   261,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,   285,   244,
   245,   246,   247,   248,   249,   250,   251,   252,   253,   254,
   255,   256,   257,   258,   259,   260,   261,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,   391,   155,   156,
   157,   158,   159,   160,   161,   162,   163,   164,   165,   166,
   167,   168,   169,   170,   171,   172,   244,   245,   246,   247,
   248,   249,   250,   251,   252,   253,   254,   255,   256,   257,
   258,   259,   260,   261>>, 0)
		end

	yycheck_: ARRAY [INTEGER] is
		once
			Result := integer_array_.make_from_array (<<     1,
     1,     1,     1,   143,   205,   194,   129,    79,     6,   198,
   199,   200,   201,   202,    20,   204,    18,    18,    18,    18,
   289,     6,   270,     7,     6,     6,     6,   330,     6,    13,
     6,    33,    33,    33,    33,     6,    38,    38,    38,    38,
   229,   230,    21,    22,     6,   314,     6,    44,   125,     9,
     7,    77,    56,    54,   177,    28,    13,    61,     3,     4,
   329,     6,   114,    67,   136,    10,    11,    40,   120,    32,
     6,    42,    40,   262,    45,   323,    36,   149,     3,     4,
    48,     6,   108,   113,    55,    10,    11,   117,   327,   392,
    50,   112,    72,   282,   333,    71,   219,   101,     4,   176,
     6,   315,   174,   175,   318,    11,    42,    70,   114,    45,
   182,   300,   184,     4,     5,   113,   112,   331,   319,    55,
     6,   322,   120,   119,   363,   394,   325,   114,   327,     6,
   399,   113,   119,   273,   333,   120,   120,   118,   116,   378,
   119,   355,   113,   342,     6,   334,   335,     9,   114,   388,
   339,   113,     6,   225,   294,   354,   116,   102,   103,    45,
   361,   112,   376,    27,   363,   364,    30,   436,   119,    55,
    24,   114,    36,   116,    36,   414,   377,   102,   103,   378,
   114,   389,   342,   372,   118,    73,    74,   386,    50,   388,
   429,    45,   264,   114,   354,   396,   102,   103,   397,   120,
   340,    55,    90,    91,   364,     3,   405,   415,     6,    37,
    80,    81,    10,   452,   403,   414,   455,   456,   114,   427,
   116,   114,   430,   462,   432,    95,   386,   120,    56,    57,
   429,    30,    31,    61,   433,   424,   425,   397,    66,    38,
   110,   112,    27,   114,    27,   405,   115,   446,     6,   438,
     4,     5,   441,   452,     6,    54,   455,   456,    21,    22,
   459,   460,   461,   462,    53,   464,    32,    33,    17,    46,
     6,     6,    28,   433,   115,     3,     4,     5,     6,     7,
     8,   117,    10,    11,    12,    13,   446,    37,    66,    61,
    34,    19,    56,   114,   114,   297,   297,   297,   297,   459,
   460,   461,    25,    34,   464,     3,     4,     5,     6,     7,
     8,    39,    10,    11,    12,    13,    34,    34,     6,   119,
   122,    25,    34,   119,   112,   326,    32,    64,     6,    34,
    49,     6,   122,     6,     6,    63,    58,    65,    51,    35,
   119,    39,   122,    71,    72,    59,   122,    23,     3,     4,
     5,     6,     7,     8,   122,    10,    11,    12,    13,     6,
   122,   362,   121,    34,    19,     6,    69,    65,    68,   122,
    18,     4,    64,   374,   102,   103,   114,    34,    18,    18,
     6,   109,   110,   111,    39,     4,     0,   389,   122,    34,
    64,   119,   120,   122,     0,   123,    18,    33,    65,   400,
    38,    67,   297,    88,   102,   103,   108,    69,    63,    69,
    65,    69,   123,   415,    96,   113,    71,    72,    71,    98,
   225,   320,   300,   184,   418,   427,   415,   430,   430,   431,
     3,     4,     5,     6,     7,     8,   426,    10,    11,    12,
    13,   364,   236,   408,   297,    -1,    19,   102,   103,    -1,
    -1,    -1,    -1,    -1,   109,   110,   111,    -1,    -1,    32,
    -1,    -1,    -1,    -1,   119,    -1,    39,    -1,   123,    -1,
    -1,    -1,    -1,     3,     4,     5,     6,     7,     8,    -1,
    10,    11,    12,    13,    -1,    -1,    -1,    -1,    -1,    19,
    63,    -1,    65,    -1,    -1,    -1,    -1,    -1,    71,    72,
    -1,    -1,    -1,     3,     4,     5,     6,     7,     8,    39,
    10,    11,    12,    13,    -1,    -1,     3,     4,     5,     6,
     7,     8,    -1,    10,    11,    12,    13,    -1,    -1,   102,
   103,    -1,    19,    63,    64,    65,   109,   110,   111,    39,
   113,    71,    72,    -1,    -1,    -1,   119,    34,    -1,    -1,
    -1,    -1,    39,    -1,    -1,    -1,    -1,    -1,    -1,     3,
     4,     5,     6,     7,     8,    65,    10,    11,    12,    13,
    -1,    -1,   102,   103,    -1,    19,    63,    -1,    65,   109,
   110,   111,    -1,   113,    71,    72,    -1,    -1,    -1,   119,
    -1,    -1,    -1,    -1,    -1,    39,    -1,    -1,    -1,    -1,
    -1,    -1,   102,   103,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,   102,   103,    -1,    -1,    63,
    -1,    65,   109,   110,   111,    -1,   113,    71,    72,    -1,
    -1,    -1,   119,    -1,     3,     4,     5,     6,     7,     8,
    -1,    10,    11,    12,    13,    -1,    -1,    -1,    -1,    -1,
    19,    20,    -1,    -1,    -1,    -1,    -1,    -1,   102,   103,
    -1,    -1,    -1,    -1,    -1,   109,   110,   111,    -1,   113,
    39,    -1,    -1,    -1,    -1,   119,     3,     4,     5,     6,
     7,     8,    -1,    10,    11,    12,    13,    -1,    -1,    -1,
    -1,    -1,    19,    -1,    63,    -1,    65,    -1,    -1,    -1,
    -1,    -1,    71,    72,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    39,    -1,    -1,    -1,    52,    -1,    -1,     3,
     4,     5,     6,     7,     8,    -1,    10,    11,    12,    13,
    -1,    -1,    -1,   102,   103,    19,    63,    -1,    65,    -1,
   109,   110,   111,    -1,    71,    72,    -1,    -1,    -1,    -1,
   119,    -1,    -1,    -1,    -1,    39,    92,    93,    94,    95,
    96,    97,    98,    99,   100,   101,   102,   103,   104,   105,
   106,   107,   108,   109,    -1,   102,   103,    -1,    -1,    63,
     6,    65,   109,   110,   111,    -1,    -1,    71,    72,    -1,
    16,    -1,   119,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    26,    -1,    -1,    29,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,     6,    -1,    41,    -1,    43,   102,   103,
     6,    47,    48,    16,    -1,   109,   110,   111,    -1,    -1,
    16,    -1,    -1,    26,    60,   119,    29,    -1,    -1,    -1,
    26,    34,    -1,    29,    -1,    71,    72,    33,    41,    -1,
    43,    -1,    -1,     6,    47,    41,    -1,    43,    -1,    -1,
    -1,    47,    -1,    16,    -1,    -1,    -1,    60,    -1,    -1,
    -1,    -1,    -1,    26,    60,    -1,    29,    -1,    71,    72,
    -1,    34,    -1,    -1,    -1,    71,    72,   113,    41,    -1,
    43,    -1,    -1,   119,    47,   121,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    60,    -1,    -1,
    -1,     6,    -1,    -1,    -1,    -1,    -1,    -1,    71,    72,
   113,    16,    -1,    -1,    -1,    -1,   119,   113,   121,    -1,
    -1,    26,    -1,   119,    29,   121,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    41,    -1,    43,     3,
     4,     5,    47,     7,     8,    -1,    10,    11,    12,    13,
   113,    -1,    -1,    -1,    -1,    60,   119,    -1,   121,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    71,    72,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    39,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    53,
    64,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    65,    -1,    67,    -1,    -1,    -1,    -1,   113,    -1,
    -1,    -1,    64,    -1,   119,    -1,   121,    -1,    92,    93,
    94,    95,    96,    97,    98,    99,   100,   101,   102,   103,
   104,   105,   106,   107,   108,   109,    64,    -1,   102,   103,
    92,    93,    94,    95,    96,    97,    98,    99,   100,   101,
   102,   103,   104,   105,   106,   107,   108,   109,    -1,    -1,
    70,    -1,    -1,    -1,    92,    93,    94,    95,    96,    97,
    98,    99,   100,   101,   102,   103,   104,   105,   106,   107,
   108,   109,    92,    93,    94,    95,    96,    97,    98,    99,
   100,   101,   102,   103,   104,   105,   106,   107,   108,   109,
    92,    93,    94,    95,    96,    97,    98,    99,   100,   101,
   102,   103,   104,   105,   106,   107,   108,   109,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   120,    92,
    93,    94,    95,    96,    97,    98,    99,   100,   101,   102,
   103,   104,   105,   106,   107,   108,   109,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,   120,    73,    74,
    75,    76,    77,    78,    79,    80,    81,    82,    83,    84,
    85,    86,    87,    88,    89,    90,    92,    93,    94,    95,
    96,    97,    98,    99,   100,   101,   102,   103,   104,   105,
   106,   107,   108,   109>>, 0)
		end

feature {NONE} -- Semantic actions

	yy_do_action (yy_act: INTEGER) is
		do
			inspect yy_act

			else
				-- No action
			end
		end



feature {NONE} -- Initialization

	make is
			-- Create a new Eiffel parser.
		do
			make_eiffel_scanner
			make_parser_skeleton
		end

	execute is
			-- Parse Eiffel files `arguments (1..argument_count)'.
		local
			j, n: INTEGER
			a_filename: STRING
			a_file: like INPUT_STREAM_TYPE
		do
			make
			n := argument_count
			if n = 0 then
				std.error.put_string ("usage: eiffel_parser filename ...%N")
				exceptions_.die (1)
			else
				from j := 1 until j > n loop
					a_filename := argument (j)
					a_file := input_stream_.make_file_open_read (a_filename)
					if input_stream_.is_open_read (a_file) then
						reset
						set_input_buffer (new_file_buffer (a_file))
						parse
						input_stream_.close (a_file)
					else
						std.error.put_string ("eiffel_parser: cannot read %'")
						std.error.put_string (a_filename)
						std.error.put_string ("%'%N")
					end
					j := j + 1
				end
			end
		end

	benchmark is
			-- Parse Eiffel file `argument (2)' `argument (1)' times.
		local
			j, n: INTEGER
			a_filename: STRING
			a_file: like INPUT_STREAM_TYPE
		do
			make
			if
				argument_count < 2 or else
				not string_.is_integer (argument (1))
			then
				std.error.put_string ("usage: eiffel_parser nb filename%N")
				exceptions_.die (1)
			else
				n := argument (1).to_integer
				a_filename := argument (2)
				from j := 1 until j > n loop
					a_file := input_stream_.make_file_open_read (a_filename)
					if input_stream_.is_open_read (a_file) then
						reset
						set_input_buffer (new_file_buffer (a_file))
						parse
						input_stream_.close (a_file)
					else
						std.error.put_string ("eiffel_parser: cannot read %'")
						std.error.put_string (a_filename)
						std.error.put_string ("%'%N")
						exceptions_.die (1)
					end
					j := j + 1
				end
			end
		end

end -- class EIFFEL_PARSER
