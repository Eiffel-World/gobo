indexing

	description:

		"Routines that ought to be in class DOUBLE"

	library: "Gobo Eiffel Kernel Library"
	copyright: "Copyright (c) 2003-2005, Eric Bezault and others"
	license: "Eiffel Forum License v2 (see forum.txt)"
	date: "$Date$"
	revision: "$Revision$"

class KL_DOUBLE_ROUTINES

inherit

#ifdef ISE
	DOUBLE_MATH
		rename
			log as old_log,
			log10 as old_log10,
			exp as old_exp
		export
			{NONE} all
		end

#endif
#ifdef VE
	MATH
		rename
			log as old_log,
			exp as old_exp
		export
			{NONE} all
		end

#endif

	KL_SHARED_PLATFORM

feature -- Logarithms

	log (d: DOUBLE): DOUBLE is
			-- Natural logarithm of `d'
		require
			d_positive: d > 0.0
		do
#ifdef SE
			Result := d.log
#endif
#ifdef ISE
			Result := old_log (d)
#endif
#ifdef VE
			Result := old_log (d.truncated_to_real)
#endif
		end

	log2 (d: DOUBLE): DOUBLE is
			-- Base 2 logarithm of `d'
		require
			d_positive: d > 0.0
#ifdef VE || SE
		local
#endif
#ifdef SE
			a: DOUBLE
#endif
#ifdef VE
			a: REAL
#endif
		do
#ifdef ISE
			Result := log_2 (d)
#endif
#ifdef VE || SE
			a := 2.0
#endif
#ifdef SE
			Result := d.log / a.log
#endif
#ifdef VE
			Result := old_log (d.truncated_to_real) / log (a)
#endif
		end

	log10 (d: DOUBLE): DOUBLE is
			-- Base 10 logarithm of `d'
		require
			d_positive: d > 0.0
		do
#ifdef SE
			Result := d.log10
#endif
#ifdef ISE
			Result := old_log10 (d)
#endif
#ifdef VE
			Result := log (d) / log (10.0)
#endif
		end

feature -- Exponent

	exp (d: DOUBLE): DOUBLE is
			-- Inverse of the natural logarithm
		do
#ifdef SE
			Result := d.exp
#endif
#ifdef ISE
			Result := old_exp (d)
#endif
#ifdef VE
			Result := old_exp (d.truncated_to_real)
#endif
		end

	nth_root (d, n: DOUBLE): DOUBLE is
			-- `n'-th root of `d'
		require
#ifdef VE
			divisible: (1.0).divisible (n.truncated_to_real)
#else
			divisible: (1.0).divisible (n)
#endif
		do
#ifdef ISE || VE
			Result := d ^ (1.0 / n)
#endif
#ifdef SE
			Result := d.pow (1.0 / n)
#endif
		end

feature -- Conversion

	truncated_to_integer (d: DOUBLE): INTEGER is
			-- Integer part (Same sign, largest absolute
			-- value no greater than current object's)
		require
			d_large_enough: d >= Platform.Minimum_integer
			d_small_enough: d <= Platform.Maximum_integer
		do
#ifdef (SE && ! SE_1_0)
			Result := d.force_to_integer_32
#else
			Result := d.truncated_to_integer
#endif
		end

	rounded_to_integer (d: DOUBLE): INTEGER is
			-- Rounded integral value
		require
			d_large_enough: (d.abs + 0.5) >= Platform.Minimum_integer
			d_small_enough: (d.abs + 0.5) < (Platform.Maximum_integer + 1.0)
		do
#ifdef ISE
			Result := d.rounded
#else
			Result := d.sign * floor_to_integer (d.abs + 0.5)
#endif
		ensure
			definition: Result = d.sign * floor_to_integer (d.abs + 0.5)
		end

	floor_to_integer (d: DOUBLE): INTEGER is
			-- INTEGER floor
			-- (floor returns integer in ELKS, but a floating point value with SE2)
		require
			d_large_enough: d >= Platform.Minimum_integer
			d_small_enough: d < (Platform.Maximum_integer + 1.0)
		do
#ifdef (SE && ! SE_1_0)
			Result := d.force_to_integer_32
#else
			Result := d.truncated_to_integer
#endif
			if d.floor /= Result then
				Result := Result - 1
			end
		ensure
			definition: Result = d.floor
		end

end
