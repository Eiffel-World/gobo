indexing

	description:

		"Shell commands"

	library:    "Gobo Eiffel Kernel Library"
	author:     "Eric Bezault <ericb@gobosoft.com>"
	copyright:  "Copyright (c) 2001, Eric Bezault and others"
	license:    "Eiffel Forum Freeware License v1 (see forum.txt)"
	date:       "$Date$"
	revision:   "$Revision$"

class KL_SHELL_COMMAND

inherit

	KI_SHELL_COMMAND

#ifdef ISE || HACT
	EXECUTION_ENVIRONMENT
		export {NONE} all end

#endif
#ifdef SE
	SYSTEM
		export
			{NONE} all
		undefine
			get_environment_variable
		end

#endif
#ifdef VE
	EXTERNAL_PROCESS
		rename
			make as old_make,
			command as old_command,
			execute as old_execute,
			exit_code as old_exit_code
		export
			{NONE} all
		end

	KL_VE_SHELL_COMMAND
		export {NONE} all end

	KL_SHARED_OPERATING_SYSTEM
		export {NONE} all end

#endif
creation

	make

feature {NONE} -- Initialization

	make (a_command: like command) is
			-- Create a new shell command.
		do
#ifdef VE
			if operating_system.is_windows then
				make_shell (a_command)
			end
#endif
			command := a_command
		end

feature -- Access

	command: STRING
			-- Command to be executed from the shell

	exit_code: INTEGER
			-- Exit status code of the last execution
			-- of `command' in shell

feature -- Execution

	execute is
			-- Ask operating system to execute `command'.
			-- Wait until termination. Make exit status
			-- code available in `exit_code' (Note that
			-- under Windows 95/98 the exit status code
			-- returned is always 0).
		local
			retried: BOOLEAN
		do
			if not retried then
#ifdef HACT || ISE
				system (command)
				exit_code := return_code
#endif
#ifdef VE
				if operating_system.is_windows then
					old_execute
					exit_code := old_exit_code
				else
					exit_code := system (command)
				end
#endif
#ifdef SE
				exit_code := execute_command (command)
#endif
			else
				exit_code := -1
			end
		rescue
			if not retried then
				retried := True
				retry
			end
		end

end -- class KL_SHELL_COMMAND
