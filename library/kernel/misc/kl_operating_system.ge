indexing

	description:

		"Underlying operating systems"

	library: "Gobo Eiffel Kernel Library"
	copyright: "Copyright (c) 2001, Eric Bezault and others"
	license: "Eiffel Forum License v1 (see forum.txt)"
	date: "$Date$"
	revision: "$Revision$"

class KL_OPERATING_SYSTEM

feature -- Status report

	is_windows: BOOLEAN is
			-- Is underlying operating system Windows-like?
		local
			cwd: STRING
		once
			cwd := current_working_directory
			if cwd.count >= 3 then
				Result := (cwd.item (2) = ':' and cwd.item (3) = '\')
			end
		end

	is_unix: BOOLEAN is
			-- Is underlying operating system Unix-like?
		local
			cwd: STRING
		once
			cwd := current_working_directory
			if cwd.count > 0 then
				Result := cwd.item (1) = '/'
			end
		end

	is_dotnet: BOOLEAN is
			-- Has this application been compiled with Eiffel for .NET?
#ifdef (ISE && ! ISE_5_1)
		local
			p: PLATFORM
		once
			!! p
			Result := p.is_dotnet
#else
		once
			Result := False
#endif
		end

feature {NONE} -- Implementation

	current_working_directory: STRING is
			-- Name of current working directory;
			-- Return absolute pathname with the naming 
			-- convention of the underlying file system
			-- (Return a new object at each call.)
		do
#ifdef SE
			basic_directory.connect_to_current_working_directory
			Result := clone (basic_directory.last_entry)
			basic_directory.disconnect
#endif
#ifdef ISE || HACT
			Result := execution_environment.current_working_directory
#endif
#ifdef VE
			Result := file_system_impl.current_cluster
#endif
		ensure
			current_working_directory_not_void: Result /= Void
		end

#ifdef SE
	basic_directory: BASIC_DIRECTORY
			-- Implementation

#endif
#ifdef VE
	file_system_impl: FILE_SYSTEM is
			-- Implementation
		once
			!! Result.make
		ensure
			file_system_impl_not_void: Result /= Void
		end

#endif
#ifdef ISE || HACT
	execution_environment: EXECUTION_ENVIRONMENT is
			-- Execution environment implementation
		once
			!! Result
		ensure
			execution_environment_not_void: Result /= Void
		end

#endif
end
