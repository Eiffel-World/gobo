indexing

	description:

		"Text output files. The character '%%N' is automatically %
		%converted to the line separtor of the underlying %
		%file system when written to the file."

	library:    "Gobo Eiffel Kernel Library"
	author:     "Eric Bezault <ericb@gobosoft.com>"
	copyright:  "Copyright (c) 2001, Eric Bezault and others"
	license:    "Eiffel Forum Freeware License v1 (see forum.txt)"
	date:       "$Date$"
	revision:   "$Revision$"

class KL_TEXT_OUTPUT_FILE

inherit

	KI_TEXT_OUTPUT_FILE

	KL_OUTPUT_FILE
#ifdef ISE || HACT || VE
#ifdef ISE || HACT
		rename
			index as position
		undefine
#ifdef HACT
			medium_table_type,
#endif
			is_plain_text
#endif
#ifdef HACT || VE
		redefine
#ifdef HACT
			file_ps
#endif
#ifdef VE
			put_character,
			put_string
#endif
#endif
		end
#endif

#ifdef ISE || HACT
	PLAIN_TEXT_FILE
		rename
			make as old_make,
			name as old_name,
			count as old_count,
			exists as old_exists,
			is_readable as old_is_readable,
			is_open_read as old_is_open_read,
			is_open_write as old_is_open_write,
			end_of_file as old_end_of_file,
			is_closed as old_is_closed,
			open_read as old_open_read,
			open_write as old_open_write,
			open_append as old_open_append,
			put_character as old_put_character,
			put_string as old_put_string,
			put_integer as old_put_integer,
			put_boolean as old_put_boolean,
			put_new_line as old_put_new_line,
			read_character as old_read_character,
			read_stream as old_read_stream,
			read_line as old_read_line,
			change_name as old_change_name,
			flush as old_flush,
			close as old_close,
			delete as old_delete,
			reset as old_reset
		export
			{NONE} all
		undefine
			file_readable
#ifdef HACT
		redefine
			file_ps
#endif
		end

#endif
creation

	make

feature -- Access

	eol: STRING is "%N"
			-- Line separator

#ifdef VE
feature -- Output

	put_character (c: CHARACTER) is
			-- Write `c' to output file.
		do
			if c = '%N' and then operating_system.is_windows then
					-- Windows.
				old_put_character ('%R')
			end
			old_put_character (c)
		end

	put_string (a_string: STRING) is
			-- Write `a_string' to output file.
		local
			i, nb: INTEGER
			c: CHARACTER
		do
			if operating_system.is_windows then
					-- Windows.
				nb := a_string.count
				from i := 1 until i > nb loop
					c := a_string.item (i)
					if c = '%N' then
						old_put_character ('%R')
					end
					old_put_character (c)
					i := i + 1
				end
			else
				old_put_string (a_string)
			end
		end

#endif
#ifdef SE || HACT
feature {NONE} -- Implementation

#ifdef SE
	old_open_write is
			-- Open file in write mode.
		do
			connect_to (name)
		end

	old_open_append is
			-- Open file in append mode.
		do
			connect_for_appending_to (name)
		end

#endif
#ifdef HACT
	file_ps (file : POINTER; s : POINTER; length : INTEGER) is
			-- Print `a_string' to `file'.
		external
			"C | <eif_file.h>"
		alias
			"file_pt_ps"
		end

#endif
#endif
end -- class KL_TEXT_OUTPUT_FILE
