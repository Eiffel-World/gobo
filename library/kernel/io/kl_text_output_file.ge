indexing

	description:

		"Text output files containing extended ASCII characters %
		%(8-bit code between 0 and 255). The character '%%N' is %
		%automatically converted to the line separtor of %
		%the underlying file system when written to the file."

	library: "Gobo Eiffel Kernel Library"
	copyright: "Copyright (c) 2001, Eric Bezault and others"
	license: "MIT License"
	date: "$Date$"
	revision: "$Revision$"

class KL_TEXT_OUTPUT_FILE

inherit

	KI_TEXT_OUTPUT_FILE
#ifdef VE
		undefine
			copy
		end
#endif

	KL_OUTPUT_FILE
#ifdef VE || ISE
		redefine
#ifdef ISE
			string_name
#endif
#ifdef VE
			put_character,
			put_string
#endif
		end
#endif

#ifdef ISE || GE
	PLAIN_TEXT_FILE
		rename
			make as old_make,
			name as string_name,
			count as old_count,
			exists as old_exists,
			is_readable as old_is_readable,
			is_open_read as old_is_open_read,
			is_open_write as old_is_open_write,
			end_of_file as old_end_of_file,
			is_closed as old_is_closed,
			open_read as old_open_read,
			open_write as old_open_write,
			open_append as old_open_append,
			put_character as old_put_character,
			put_string as old_put_string,
			put_integer as old_put_integer,
			put_boolean as old_put_boolean,
			put_new_line as old_put_new_line,
			read_character as old_read_character,
			read_stream as old_read_stream,
			read_line as old_read_line,
			change_name as old_change_name,
			flush as old_flush,
			close as old_close,
			delete as old_delete,
			reset as old_reset,
			append as old_append
		export
			{PLAIN_TEXT_FILE} old_open_read, extendible, file_pointer, old_count, old_close, old_is_closed, old_put_string, old_is_open_write;
			{NONE} all
		redefine
#ifdef GE
			old_open_write,
			old_open_append,
#endif
			string_name
		end

#endif
#ifdef SE
	TEXT_FILE_WRITE
		rename
			make as old_make,
			is_connected as old_is_open_write,
			put_character as old_put_character,
			put_string as old_put_string,
			put_integer as old_put_integer,
			put_boolean as old_put_boolean,
			put_new_line as old_put_new_line,
			disconnect as old_close,
			flush as old_flush
		export
			{NONE} all
		end

#endif
create

	make

feature -- Access

	eol: STRING is "%N"
			-- Line separator

#ifdef VE
feature -- Output

	put_character (c: CHARACTER) is
			-- Write `c' to output file.
		do
			if c = '%N' and then operating_system.is_windows then
					-- Windows.
				old_put_character ('%R')
			end
			old_put_character (c)
		end

	put_string (a_string: STRING) is
			-- Write `a_string' to output file.
		local
			i, nb: INTEGER
			c: CHARACTER
			a_string_string: STRING
		do
			a_string_string := STRING_.as_string (a_string)
			if operating_system.is_windows then
					-- Windows.
				nb := a_string_string.count
				from i := 1 until i > nb loop
					c := a_string_string.item (i)
					if c = '%N' then
						old_put_character ('%R')
					end
					old_put_character (c)
					i := i + 1
				end
			else
				old_put_string (a_string_string)
			end
		end

#endif
#ifdef SE || ISE || GE
feature {NONE} -- Implementation

#ifdef SE
	old_open_write is
			-- Open file in write mode.
		do
			if string_name /= Empty_name then
				connect_to (string_name)
			end
		end

	old_open_append is
			-- Open file in append mode.
		do
			if string_name /= Empty_name then
				connect_for_appending_to (string_name)
			end
		end

#endif
#ifdef ISE
	string_name: STRING
			-- Name of file (STRING version)

#endif
#ifdef GE
	old_open_write is
			-- Open file in write-only mode;
			-- create it if it does not exist.
		do
			precursor
			if file_pointer = default_pointer then
				mode := Closed_file
				descriptor_available := False
			end
		end

	old_open_append is
			-- Open file in append-only mode;
			-- create it if it does not exist.
		do
			precursor
			if file_pointer = default_pointer then
				mode := Closed_file
				descriptor_available := False
			end
		end

#endif
#endif
end
