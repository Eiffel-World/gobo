indexing

	description:

		"Binary input files"

	library: "Gobo Eiffel Kernel Library"
	copyright: "Copyright (c) 2001, Eric Bezault and others"
	license: "Eiffel Forum License v1 (see forum.txt)"
	date: "$Date$"
	revision: "$Revision$"

class KL_BINARY_INPUT_FILE

inherit

	KI_BINARY_INPUT_FILE
		undefine
#ifdef ISE || SE || VE
			read_to_string,
#endif
#ifdef VE
			copy,
#endif
			read_to_buffer
		end

	KL_INPUT_FILE
#ifdef HACT || ISE
#ifdef HACT
		rename
			index as position
		undefine
			medium_table_type
#endif
		redefine
#ifdef ISE
			string_name,
			last_character,
			last_string
#endif
#ifdef HACT
			file_reopen, file_open, file_dopen
#endif
		end
#endif

#ifdef ISE || HACT
	RAW_FILE
		rename
			make as old_make,
			name as string_name,
			count as old_count,
			exists as old_exists,
			is_readable as old_is_readable,
			is_open_read as old_is_open_read,
			is_open_write as old_is_open_write,
			end_of_file as old_end_of_file,
			is_closed as old_is_closed,
			open_read as old_open_read,
			open_write as old_open_write,
			open_append as old_open_append,
			put_character as old_put_character,
			put_string as old_put_string,
			put_integer as old_put_integer,
			put_boolean as old_put_boolean,
			put_new_line as old_put_new_line,
			read_character as old_read_character,
			read_stream as old_read_stream,
			read_line as old_read_line,
#ifdef (ISE && ! ISE_5_1)
			read_to_string as old_read_to_string,
#endif
			change_name as old_change_name,
			flush as old_flush,
			close as old_close,
			delete as old_delete,
			reset as old_reset,
			append as old_append
		export
			{NONE} all
		undefine
			file_readable
		redefine
#ifdef ISE
			string_name,
			last_character,
			last_string
#endif
#ifdef HACT
			file_reopen, file_open, file_dopen
#endif
		end

#endif
creation

	make

#ifdef ISE
feature -- Access

	last_character: CHARACTER
			-- Last character read

	last_string: STRING
			-- Last string read
			-- (Note: this query always return the same object.
			-- Therefore a clone should be used if the result
			-- is to be kept beyond the next call to this feature.
			-- However `last_string' is not shared between file objects.)

#endif
#ifdef ISE || HACT || SE
feature {NONE} -- Implementation

#ifdef SE
	old_open_read is
			-- Open file in read-only mode.
		do
			if string_name /= Empty_name then
				input_stream := basic_io_binary_file_read_open (string_name.to_external)
				if input_stream.is_not_null then
					push_back_flag := False
					memory := (' ').code
					path := string_name
				end
			end
		end

	basic_io_binary_file_read_open (path_pointer: POINTER): POINTER is
			-- Open file in binary read-only mode.
		external
			"SmallEiffel"
		end

#endif
#ifdef ISE
	string_name: STRING
			-- Name of file (STRING version)

#ifdef ISE_5_1
	old_read_to_string (a_string: STRING; pos, nb: INTEGER): INTEGER is
			-- Fill `a_string', starting at position `pos' with at
			-- most `nb' characters read from current file.
			-- Return the number of characters actually read.
		local
			str_area: ANY
		do
			str_area := a_string.area
			Result := file_gss (file_pointer, c_rtid ($str_area) + (pos - 1), nb)
		end

	c_rtid (p: POINTER): POINTER is
			-- Return `p'
		external
			"C [macro <eif_macros.h>]"
		alias
			"/**/"
		end

#endif
#endif
#ifdef HACT
	file_open (f_name: POINTER; how: INTEGER): POINTER is
			-- File pointer for file `f_name', in mode `how'.
		external
			"C | <eif_file.h>"
		alias
			"file_binary_open"
		end

	file_dopen (fd, how: INTEGER): POINTER is
			-- File pointer for file of descriptor `fd' in mode `how'
			-- (which must fit the way `fd' was obtained).
		external
			"C | <eif_file.h>"
		alias
			"file_binary_dopen"
		end

	file_reopen (f_name: POINTER; how: INTEGER; file: POINTER): POINTER is
		   -- File pointer to `file', reopened to have new name `f_name'
		   -- in a mode specified by `how'.
		external
			"C | <eif_file.h>"
		alias
			"file_binary_reopen"
		end

#endif
#endif
end
