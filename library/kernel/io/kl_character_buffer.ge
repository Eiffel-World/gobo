indexing

	description:

		"Character buffers"

	library: "Gobo Eiffel Kernel Library"
	copyright: "Copyright (c) 2001, Eric Bezault and others"
	license: "Eiffel Forum License v2 (see forum.txt)"
	date: "$Date$"
	revision: "$Revision$"

class KL_CHARACTER_BUFFER

inherit

	KI_CHARACTER_BUFFER
#ifdef ISE
		undefine
			copy, is_equal, out
#endif
		redefine
#ifdef ISE
			as_special,
#endif
#ifdef ISE || SE
			append_substring_to_string,
#endif
			fill_from_string, fill_from_stream,
			move_left, move_right
		end

#ifdef ISE
	STRING
		rename
			make as string_make,
			make_from_string as string_make_from_string,
			put as string_put,
			item as string_item,
			substring as string_substring,
			count as string_count,
			resize as string_resize,
			area as string_area
		end

	KL_SHARED_OPERATING_SYSTEM
		export
			{NONE} all
		undefine
			copy, is_equal, out
		end

#endif
creation

	make, make_from_string

feature {NONE} -- Initialization

	make (n: INTEGER) is
			-- Create a new character buffer being able
			-- to contain `n' characters.
		do
#ifdef ISE
			string_make (n)
			set_count (n)
#endif
#ifdef VE
			create area.make_filled ('%U', n)
#endif
#ifdef SE
			create area_string.make_filled ('%U', n + 2)
			area_string.remove_tail (1)
			area := area.from_pointer (area_string.to_external)
			count := n
#endif
#ifdef HACT
			create area.make (n)
			area.fill_blank
#endif
		end

feature -- Access

	item (i: INTEGER): CHARACTER is
			-- Item at position `i'
		do
#ifdef ISE
			Result := string_item (i)
#else
			Result := area.item (i)
#endif
		end

	substring (s, e: INTEGER): STRING is
			-- New string made up of characters held in
			-- buffer between indexes `s' and `e'
#ifdef ISE
		local
			nb: INTEGER
#endif
#ifdef SE || VE
		local
			i, nb: INTEGER
#ifdef VE
			j: INTEGER
#endif
#endif
		do
			if e < s then
					-- Empty string
#ifdef VE
				create Result.make_empty
#else
				create Result.make (0)
#endif
			else
#ifdef ISE
				nb := e - s + 1
				create Result.make (nb)
				Result.set_count (nb)
				Result.subcopy (Current, s, e, 1)
#endif
#ifdef SE
				nb := e - s + 1
				create Result.make (nb)
				from i := s until i > e loop
					Result.append_character (area.item (i))
					i := i + 1
				end
#endif
#ifdef VE
				nb := e - s + 1
				create Result.make_filled ('%U', nb)
				from i := s until i > e loop
					j := j + 1
					Result.put (area.item (i), j)
					i := i + 1
				end
#endif
#ifdef HACT
				Result := area.substring (s, e)
#endif
			end
		end

feature -- Measurement

#ifdef SE
	count: INTEGER
			-- Number of characters in buffer
#else
	count: INTEGER is
			-- Number of characters in buffer
		do
#ifdef ISE
			Result := string_count
#else
			Result := area.count
#endif
		end
#endif

#ifdef ISE
feature -- Conversion

	as_special: SPECIAL [CHARACTER] is
			-- 'SPECIAL [CHARACTER]' version of current character buffer;
			-- May return void in some descendants, and the result may share
			-- the internal data with `Current'
		do
			if not operating_system.is_dotnet then
				Result := string_area
			end
		end

#endif
feature -- Element change

	put (v: CHARACTER; i: INTEGER) is
			-- Replace character at position `i' by `v'.
		do
#ifdef ISE
			string_put (v, i)
#else
			area.put (v, i)
#endif
		end

#ifdef ISE || SE
	append_substring_to_string (s, e: INTEGER; a_string: STRING) is
			-- Append string made up of characters held in buffer
			-- between indexes `s' and `e' to `a_string'.
#ifdef ISE
		local
			i, nb: INTEGER
			old_count, new_count: INTEGER
		do
			if s <= e then
				nb := e - s + 1
				old_count := a_string.count
				new_count := old_count + nb
				if new_count > a_string.capacity then
					a_string.resize (new_count)
				end
				a_string.set_count (new_count)
				if a_string.same_type (dummy_string) then
					a_string.subcopy (Current, s, e, old_count + 1)
				else
					from i := s until i > e loop
						a_string.append_character (string_item (i))
						i := i + 1
					end
				end
			end
#else
		local
			i, nb: INTEGER
			old_count, new_count: INTEGER
		do
			if s <= e then
				nb := e - s + 1
				old_count := a_string.count
				new_count := old_count + nb
				if new_count > a_string.capacity then
					a_string.resize (new_count)
					a_string.keep_head (old_count)
				end
				from i := s until i > e loop
					a_string.append_character (area.item (i))
					i := i + 1
				end
			end
#endif
		end

#endif
	fill_from_string (a_string: STRING; pos: INTEGER) is
			-- Copy characters of `a_string' to buffer
			-- starting at position `pos'.
		local
			nb: INTEGER
#ifndef ISE
			i, j: INTEGER
#endif
		do
			nb := a_string.count
			if nb > 0 then
#ifdef ISE
				area.subcopy (a_string, 1, nb, pos)
#else
				j := pos
				from i := 1 until i > nb loop
					area.put (a_string.item (i), j)
					j := j + 1
					i := i + 1
				end
#endif
			end
		end

	fill_from_stream (a_stream: KI_CHARACTER_INPUT_STREAM; pos, nb: INTEGER): INTEGER is
			-- Fill buffer, starting at position `pos', with
			-- at most `nb' characters read from `a_stream'.
			-- Return the number of characters actually read.
		do
#ifdef SE
			Result := a_stream.read_to_string (area_string, pos + 1, nb)
#else
			Result := a_stream.read_to_string (area, pos, nb)
#endif
		end

	move_left (old_pos, new_pos: INTEGER; nb: INTEGER) is
			-- Copy `nb' characters from `old_pos' to
			-- `new_pos' in buffer.
#ifndef ISE
		local
			i, j, nb2: INTEGER
#endif
		do
			if nb > 0 then
#ifdef ISE
				area.subcopy (Current, old_pos, old_pos + nb - 1, new_pos)
#else
				j := new_pos
				nb2 := old_pos + nb - 1
				from i := old_pos until i > nb2 loop
					area.put (area.item (i), j)
					j := j + 1
					i := i + 1
				end
#endif
			end
		end

	move_right (old_pos, new_pos: INTEGER; nb: INTEGER) is
			-- Copy `nb' characters from `old_pos' to
			-- `new_pos' in buffer.
#ifndef ISE
		local
			i, j: INTEGER
#endif
		do
			if nb > 0 then
#ifdef ISE
				area.subcopy (Current, old_pos, old_pos + nb - 1, new_pos)
#else
				j := new_pos + nb - 1
				from i := old_pos + nb - 1 until i < old_pos loop
					area.put (area.item (i), j)
					j := j - 1
					i := i - 1
				end
#endif
			end
		end

feature -- Resizing

	resize (n: INTEGER) is
			-- Resize buffer so that it contains `n' characters.
			-- Do not lose any previously entered characters.
#ifdef VE
		do
			area.resize (n)
#endif
#ifdef SE
		do
			area_string.resize (n + 2)
			area_string.remove_tail (1)
			area := area.from_pointer (area_string.to_external)
			count := n
#endif
#ifdef ISE
		do
			string_resize (n)
			set_count (n)
#endif
#ifdef HACT
		local
			i: INTEGER
		do
			from
				i := n - count
				area.resize (n)
			until
				i = 0
			loop
				area.append_character ('#')
				i := i - 1
			end
#endif
		end

feature {NONE} -- Implementation

#ifdef ISE
	area: STRING is
			-- Implementation
		do
			Result := Current
		end
#else
#ifdef SE
	area: NATIVE_ARRAY [CHARACTER]
	area_string: STRING
			-- Implementation
#else
	area: STRING
			-- Implementation
#endif
#endif

invariant

	area_not_void: area /= Void
#ifdef SE
	area_string_not_void: area_string /= Void
#endif

end
