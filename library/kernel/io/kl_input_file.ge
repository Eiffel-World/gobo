indexing

	description:

		"Input files"

	library:    "Gobo Eiffel Kernel Library"
	author:     "Eric Bezault <ericb@gobosoft.com>"
	copyright:  "Copyright (c) 2001, Eric Bezault and others"
	license:    "Eiffel Forum Freeware License v1 (see forum.txt)"
	date:       "$Date$"
	revision:   "$Revision$"

deferred class KL_INPUT_FILE

inherit

	KI_INPUT_FILE
#ifdef VE
		undefine
				-- Make sure that this deferred class
				-- has a deferred routine.
			read_to_string
#endif
		redefine
#ifdef ISE
			read_to_string,
#endif
			read_to_buffer
		end

	KL_FILE
		rename
			open as open_read,
			is_open as is_open_read
		redefine
#ifdef ISE || HACT
			file_readable,
#endif
			close
		end

#ifdef SE
	TEXT_FILE_READ
		rename
			make as old_make,
			is_connected as old_is_open_read,
			end_of_input as old_end_of_file,
			last_character as old_last_character,
			read_character as old_read_character,
			unread_character as old_unread_character,
			read_line as old_read_line,
			disconnect as old_close
		export
			{NONE} all
		redefine
			last_string
		end

#endif
#ifdef SE
feature -- Access

	last_character: CHARACTER
			-- Last character read

	last_string: STRING
			-- Last string read
			-- (Note: this query always return the same object.
			-- Therefore a clone should be used if the result
			-- is to be kept beyond the next call to this feature.
			-- However `last_string' is not shared between file objects.)

#endif
feature -- Status report

	is_open_read: BOOLEAN is
			-- Is file opened in read mode?
		do
			Result := old_is_open_read
		end

	end_of_file: BOOLEAN
			-- Has the end of file been reached?

feature -- Input

	read_character is
			-- Read the next character in input file.
			-- Make the result available in `last_character'.
		do
			if character_buffer /= Void then
				last_character := character_buffer.item
				character_buffer := character_buffer.right
			elseif old_end_of_file then
				end_of_file := True
			else
				old_read_character
				end_of_file := old_end_of_file
#ifdef SE
				if not end_of_file then
					last_character := old_last_character
				end
#endif
			end
		end

	unread_character (a_character: CHARACTER) is
			-- Put `a_character' back in input file.
			-- This character will be read first by the next
			-- call to a read routine.
		local
			a_cell: like character_buffer
		do
			!! a_cell.make (a_character)
			if character_buffer /= Void then
				a_cell.put_right (character_buffer)
			end
			character_buffer := a_cell
			last_character := a_character
			end_of_file := False
		end

	read_string (nb: INTEGER) is
			-- Read at most `nb' characters from input stream.
			-- Make the characters that have actually been read
			-- available in `last_string'.
#ifdef ISE || HACT
		local
			i: INTEGER
		do
			if last_string = Void then
				!! last_string.make (nb)
			elseif last_string.capacity < nb then
				last_string.resize (nb)
			end
			if character_buffer = Void then
				if not old_end_of_file then
					old_read_stream (nb)
				else
					last_string.set_count (0)
				end
			else
				last_string.set_count (nb)
				i := read_to_string (last_string, 1, nb)
				last_string.set_count (i)
			end
#endif
#ifdef SE
		local
			i: INTEGER
			a_target: STRING
		do
			if last_string = Void then
				!! a_target.make (nb)
				last_string := a_target
			else
				a_target := last_string
				if a_target.capacity < nb then
					a_target.resize (nb)
				end
				a_target.clear
			end
			from i := nb until i < 1 loop
				read_character
				if not end_of_file then
					a_target.append_character (last_character)
					i := i - 1
				else
					i := 0 -- Jump out of the loop.
				end
			end
#endif
#ifdef VE
		local
			old_string: STRING
			i, j: INTEGER
			a_target: STRING
		do
			if character_buffer = Void then
				if not old_end_of_file then
					old_string := last_string
					old_read_stream (nb)
					if last_string = Void then
						if old_string /= Void then
							old_string.wipe_out
							last_string := old_string
						else
							!! last_string.make (0)
						end
					end
				elseif last_string = Void then
					!! last_string.make (0)
				else
					last_string.wipe_out
				end
			else
				if last_string = Void then
					!! last_string.make (nb)
				elseif last_string.count < nb then
					last_string.resize (nb)
				end
				i := read_to_string (last_string, 1, nb)
				last_string.resize (i)
			end
#endif
			end_of_file := (last_string.count = 0)
		end

#ifdef ISE
	read_to_string (a_string: STRING; pos, nb: INTEGER): INTEGER is
			-- Fill `a_string', starting at position `pos' with
			-- at most `nb' characters read from input file.
			-- Return the number of characters actually read.
		local
			str_area: ANY
			i, j: INTEGER
		do
			from
				j := pos
			until
				i = nb or
				character_buffer = Void
			loop
				i := i + 1
				a_string.put (character_buffer.item, j)
				character_buffer := character_buffer.right
				j := j + 1
			end
			if i < nb then
				if not old_end_of_file then
					str_area := a_string.area
					Result := i + file_gss (file_pointer, c_rtid ($str_area) + (j - 1), nb - i)
				else
					Result := i
				end
			end
		end

#endif
	read_to_buffer (a_buffer: KI_BUFFER [CHARACTER]; pos, nb: INTEGER): INTEGER is
			-- Fill `a_buffer', starting at position `pos', with
			-- at most `nb' characters read from input stream.
			-- Return the number of characters actually read.
		local
			char_buffer: KL_CHARACTER_BUFFER
		do
			char_buffer ?= a_buffer
			if char_buffer /= Void then
				Result := char_buffer.fill_from_stream (Current, pos, nb)
			else
				Result := precursor (a_buffer, pos, nb)
			end
		end

feature -- Basic operations

	open_read is
			-- Open current file in read-only mode if
			-- it can be opened, let it closed otherwise.
		local
			rescued: BOOLEAN
		do
			if not rescued then
				if name.count > 0 then
					character_buffer := Void
					end_of_file := False
					old_open_read
				end
			elseif not is_closed then
				close
			end
		rescue
			if not rescued then
				rescued := True
				retry
			end
		end

	close is
			-- Close current file if it is closable,
			-- let it open otherwise.
		local
			rescued: BOOLEAN
		do
			if not rescued then
				old_close
				character_buffer := Void
			end
		rescue
			if not rescued then
				rescued := True
				retry
			end
		end

feature {NONE} -- Implementation

	character_buffer: KL_LINKABLE [CHARACTER]
			-- Unread characters

#ifdef SE
	old_open_read is
			-- Open file in read-only mode.
		require
			name_not_void: name /= Void
			name_not_empty: name.count > 0
		deferred
		end

#endif
#ifdef ISE || HACT
	file_readable: BOOLEAN is
			-- Is there a current item that may be read?
		do
			Result := is_open_read
		end

#endif
#ifdef ISE
	c_rtid (p: POINTER): POINTER is
			-- Return `p'
		external
			"C [macro <eif_macros.h>]"
		alias
			"/**/"
		end

#endif
end -- class KL_INPUT_FILE
