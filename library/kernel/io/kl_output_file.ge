indexing

	description:

		"Text output files. The character '%N' is automatically %
		%converted to the line separtor of the underlying %
		%file system when written to the file."

	library:    "Gobo Eiffel Kernel Library"
	author:     "Eric Bezault <ericb@gobosoft.com>"
	copyright:  "Copyright (c) 2001, Eric Bezault and others"
	license:    "Eiffel Forum Freeware License v1 (see forum.txt)"
	date:       "$Date$"
	revision:   "$Revision$"

class KL_OUTPUT_FILE

inherit

	KI_OUTPUT_FILE

	KL_SHARED_FILE_SYSTEM
#ifdef SE
		rename
			rename_file as se_rename_file
#endif
		export
			{NONE} all
		end

#ifdef ISE
	PLAIN_TEXT_FILE
		rename
			make as old_make,
			name as old_name,
			open_write as old_open_write,
			close as old_close,
			delete as old_delete,
			put_boolean as old_put_boolean,
			put_integer as old_put_integer,
			put_string as old_put_string,
			put_character as old_put_character,
			put_new_line as old_put_new_line,
			is_open_write as old_is_open_write,
			is_closed as old_is_closed,
			flush as old_flush
		export
			{NONE} all
		end
#endif
#ifdef HACT
	PLAIN_TEXT_FILE
		rename
			make as old_make,
			name as old_name,
			open_write as old_open_write,
			close as old_close,
			delete as old_delete,
			put_boolean as old_put_boolean,
			put_integer as old_put_integer,
			put_string as old_put_string,
			put_character as old_put_character,
			put_new_line as old_put_new_line,
			is_open_write as old_is_open_write,
			is_closed as old_is_closed,
			flush as old_flush
		export
			{NONE} all
		end
#endif
#ifdef SE
	TEXT_FILE_WRITE
		rename
			make as old_make,
			rename_file as se_rename_file,
			is_connected as old_is_open_write,
			disconnect as old_close,
			put_boolean as old_put_boolean,
			put_integer as old_put_integer,
			put_string as old_put_string,
			put_character as old_put_character,
			put_new_line as old_put_new_line,
			flush as old_flush
		export
			{NONE} all
		end

	FILE_TOOLS
		rename
			rename_file as se_rename_file,
			delete as old_delete,
			tmp_string as old_tmp_string
		export
			{NONE} all
		end
#endif
#ifdef VE
	FILE
		rename
			make as old_make,
			name as old_name,
			open_write as old_open_write,
			put_character as old_put_character,
			put_string as old_put_string,
			close as old_close,
			delete as old_delete,
			put_boolean as old_put_boolean,
			put_integer as old_put_integer,
			is_open_write as old_is_open_write,
			is_closed as old_is_closed
		export
			{NONE} all
		end
#endif

creation

	make

feature {NONE} -- Initialization

	make (a_name: like name) is
			-- Create a new output file named `a_name'.
		do
			name := a_name
#ifdef ISE || HACT
			if a_name.count > 0 then
				old_name := a_name
			else
				old_name := Empty_name
			end
			mode := Closed_file
#endif
#ifdef SE
			old_make
#endif
#ifdef VE
			if a_name.count > 0 then
				old_make (a_name)
			else
				old_make (Empty_name)
			end
#endif
		end

feature -- Access

	eol: STRING is "%N"
			-- Line separator

	name: STRING
			-- File name

feature -- Status report

	is_open_write: BOOLEAN is
			-- Is file opened in write mode?
		do
			Result := old_is_open_write
		end

	is_closed: BOOLEAN is
			-- Is file closed?
		do
#ifdef SE
			Result := not old_is_open_write
#else
			Result := old_is_closed
#endif
		end

feature -- Output

	put_character (c: CHARACTER) is
			-- Write `c' to output file.
		do
#ifdef VE
			if is_windows and then c = '%N' then
					-- Windows.
				old_put_character ('%R')
			end
#endif
			old_put_character (c)
		end

	put_string (a_string: STRING) is
			-- Write `a_string' to output file.
#ifdef VE
		local
			i, nb: INTEGER
			c: CHARACTER
		do
			if is_windows then
					-- Windows.
				nb := a_string.count
				from i := 1 until i > nb loop
					c := a_string.item (i)
					if c = '%N' then
						old_put_character ('%R')
					end
					old_put_character (c)
					i := i + 1
				end
			else
				old_put_string (a_string)
			end
#else
		do
			old_put_string (a_string)
#endif
		end

feature -- Basic operations

	open_write is
			-- Open current file in write-only mode if
			-- it can be opened, let it closed otherwise.
		local
			rescued: BOOLEAN
		do
			if not rescued then
				if name.count > 0 then
#ifdef SE
					connect_to (name)
#else
					old_open_write
#endif
				end
			elseif not is_closed then
				close
			end
		rescue
			if not rescued then
				rescued := True
				retry
			end
		end

	flush is
			-- Flush buffered data to disk.
		do
#ifndef VE
			old_flush
#endif
		end

	close is
			-- Close current file if it is closable,
			-- let it open otherwise.
		local
			rescued: BOOLEAN
		do
			if not rescued then
				old_close
			end
		rescue
			if not rescued then
				rescued := True
				retry
			end
		end

	rename_file (new_name: STRING) is
			-- Rename current file as `new_name'.
			-- Do nothing if the file could not be renamed, if
			-- it did not exist or if `new_name' already existed.
			-- If renaming was successful, then `name' is set to
			-- `new_name'.
#ifndef SE
		local
			a_name: STRING
#endif
		do
			if new_name.count > 0 then
#ifdef SE
				if not file_exists (new_name) then
#else
				a_name := old_name
				old_name := new_name
				if exists then
					old_name := a_name
				else
					old_name := a_name
#endif
					file_system.rename_file (name, new_name)
#ifdef SE
					if file_exists (new_name) then
						name := new_name
#else
					a_name := old_name
					old_name := new_name
					if exists then
						name := new_name
					else
						old_name := a_name
#endif
					end
				end
			end
		end

	delete is
			-- Delete current file.
			-- Do nothing if the file could not be
			-- deleted or if it did not exist.
		local
			rescued: BOOLEAN
		do
			if not rescued then
				if name.count > 0 then
#ifdef SE
					old_delete (name)
#endif
#ifdef ISE || HACT || VE
					if exists then
						old_delete
					end
#endif
				end
			end
		rescue
			if not rescued then
				rescued := True
				retry
			end
		end

#ifdef ISE || HACT || VE
feature {NONE} -- Implementation

	Empty_name: STRING is "empty_name"
			-- Empty name place-holder

#endif
end -- class KL_OUTPUT_FILE
