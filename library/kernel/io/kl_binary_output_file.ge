indexing

	description:

		"Binary output files"

	library:    "Gobo Eiffel Kernel Library"
	author:     "Eric Bezault <ericb@gobosoft.com>"
	copyright:  "Copyright (c) 2001, Eric Bezault and others"
	license:    "Eiffel Forum Freeware License v1 (see forum.txt)"
	date:       "$Date$"
	revision:   "$Revision$"

class KL_BINARY_OUTPUT_FILE

inherit

	KI_BINARY_OUTPUT_FILE

#ifdef ISE
	RAW_FILE
		rename
			make as ise_make,
			open_write as ise_open_write,
			close as do_close,
			delete as do_delete,
			put_new_line as ise_put_new_line,
			put_integer as ise_put_integer,
			put_boolean as ise_put_boolean
		export
			{NONE} all
		end
#endif
#ifdef HACT
	RAW_FILE
		rename
			make as hact_make,
			open_write as hact_open_write,
			close as do_close,
			delete as do_delete,
			put_new_line as hact_put_new_line,
			put_integer as hact_put_integer,
			put_boolean as hact_put_boolean
		export
			{NONE} all
		end
#endif
#ifdef SE
	STD_FILE_WRITE
		rename
			make as se_make,
			rename_file as se_rename_file,
			is_connected as is_open_write,
			disconnect as do_close,
			put_new_line as se_put_new_line,
			put_integer as se_put_integer,
			put_boolean as se_put_boolean
		export
			{NONE} all
		end

	FILE_TOOLS
		rename
			rename_file as se_rename_file,
			delete as se_delete,
			tmp_string as ft_tmp_string
		export
			{NONE} all
		end
#endif
#ifdef VE
	FILE
		rename
			make as ve_make,
			open_write as ve_open_write,
			close as do_close,
			delete as do_delete,
			put_integer as ve_put_integer,
			put_boolean as ve_put_boolean
		export
			{NONE} all
		end
#endif

creation

	make

feature {NONE} -- Initialization

	make (a_name: like name) is
			-- Create a new output file named `a_name'.
		do
#ifdef ISE || HACT
			name := a_name
			mode := Closed_file
#endif
#ifdef SE
			name := a_name
			se_make
#endif
#ifdef VE
			ve_make (a_name)
#endif
		end

#ifdef SE
feature -- Access

	name: STRING
			-- File name

feature -- Status report

	is_closed: BOOLEAN is
			-- Is file closed?
		do
			Result := not is_open_write
		end

#endif
feature -- Basic operations

	open_write is
			-- Open current file in write-only mode if
			-- it can be opened, let it closed otherwise.
		local
			rescued: BOOLEAN
		do
			if not rescued then
#ifdef ISE
				ise_open_write
#endif
#ifdef HACT
				hact_open_write
#endif
#ifdef SE
				output_stream := bfw_open (name.to_external)
				if output_stream.is_not_null then
					path := name
				end
#endif
#ifdef VE
				ve_open_write
#endif
			elseif not is_closed then
				close
			end
		rescue
			if not rescued then
				rescued := True
				retry
			end
		end

#ifdef VE
	flush is
			-- Flush buffered data to disk.
		do
		end

#endif
	close is
			-- Close current file if it is closable,
			-- let it open otherwise.
		local
			rescued: BOOLEAN
		do
			if not rescued then
				do_close
			end
		rescue
			if not rescued then
				rescued := True
				retry
			end
		end

	rename_file (new_name: STRING) is
			-- Rename current file as `new_name'.
			-- Do nothing if the file could not be renamed
			-- or if it did not exist. Overwrite file
			-- `new_name' if it existed. If renaming was
			-- successful, then `name' is set to `new_name'.
		local
			rescued: BOOLEAN
			old_name: STRING
		do
			if not rescued then
				old_name := name
#ifdef SE
				if file_exists (name) then
					rename_to (name, new_name)
					if file_exists (new_name) then
						name := new_name
					end
				end
#endif
#ifdef ISE || HACT || VE
				if exists then
					change_name (new_name)
				end
#endif
			else
				name := old_name
			end
		rescue
			if not rescued then
				rescued := True
				retry
			end
		end

	delete is
			-- Delete current file.
			-- Do nothing if the file could not be
			-- deleted or if it did not exist.
		local
			rescued: BOOLEAN
		do
			if not rescued then
#ifdef SE
				se_delete (name)
#endif
#ifdef ISE || HACT || VE
				if exists then
					do_delete
				end
#endif
			end
		rescue
			if not rescued then
				rescued := True
				retry
			end
		end

#ifdef SE
feature {NONE} -- Implementation

	bfw_open (path_pointer: POINTER): POINTER is
			-- Open file in binary write mode.
		do
			c_inline_c ("R=fopen(a1,%"wb%");")
		end

#endif
end -- class KL_BINARY_OUTPUT_FILE
