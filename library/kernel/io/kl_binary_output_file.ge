indexing

	description:

		"Binary output files"

	library: "Gobo Eiffel Kernel Library"
	copyright: "Copyright (c) 2001, Eric Bezault and others"
	license: "Eiffel Forum License v1 (see forum.txt)"
	date: "$Date$"
	revision: "$Revision$"

class KL_BINARY_OUTPUT_FILE

inherit

	KI_BINARY_OUTPUT_FILE
#ifdef VE
		undefine
			copy
		end
#endif

	KL_OUTPUT_FILE
#ifdef ISE || HACT
#ifdef HACT
		rename
			index as position
		undefine
			medium_table_type
#endif
		redefine
#ifdef HACT
			file_reopen, file_open, file_dopen
#endif
#ifdef ISE
			string_name
#endif
		end
#endif

#ifdef ISE || HACT
	RAW_FILE
		rename
			make as old_make,
			name as string_name,
			count as old_count,
			exists as old_exists,
			is_readable as old_is_readable,
			is_open_read as old_is_open_read,
			is_open_write as old_is_open_write,
			end_of_file as old_end_of_file,
			is_closed as old_is_closed,
			open_read as old_open_read,
			open_write as old_open_write,
			open_append as old_open_append,
			put_character as old_put_character,
			put_string as old_put_string,
			put_integer as old_put_integer,
			put_boolean as old_put_boolean,
			put_new_line as old_put_new_line,
			read_character as old_read_character,
			read_stream as old_read_stream,
			read_line as old_read_line,
			change_name as old_change_name,
			flush as old_flush,
			close as old_close,
			delete as old_delete,
			reset as old_reset,
			append as old_append
		export
			{NONE} all
#ifdef HACT
		undefine
			file_readable
#endif
		redefine
#ifdef HACT
			file_reopen, file_open, file_dopen
#endif
#ifdef ISE
			string_name
#endif
		end

#endif
#ifdef SE
	BINARY_FILE_WRITE
		rename
#ifndef SE_0_74
			flush as old_flush
#endif
			make as old_make,
			is_connected as old_is_open_write,
			disconnect as old_close
		export
			{NONE} all
		end

#endif
creation

	make

#ifdef SE || HACT || ISE
feature {NONE} -- Implementation

#ifdef SE
	old_open_write is
			-- Open file in write mode.
		do
			if string_name /= Empty_name then
				connect_to (string_name)
			end
		end

	old_open_append is
			-- Open file in append mode.
		do
			if string_name /= Empty_name then
				connect_for_appending_to (string_name)
			end
		end

	old_put_character (c: CHARACTER) is
			-- Write `c' at current position.
		do
			put_byte (c.code)
		end

	old_put_string (s: STRING) is
			-- Write `s' at current position.
		local
			i, nb: INTEGER
		do
			nb := s.count
			from i := 1 until i > nb loop
				old_put_character (s.item (i))
				i := i + 1
			end
		end

#ifdef SE_0_74
	old_flush is
			-- Forces a write of unwritten character (write my have been 
			-- delayed, flush writes buffered characters).
		do
			basic_io_flush (output_stream)
		end

	basic_io_flush(stream_pointer: POINTER) is
		external
			"SmallEiffel"
		end

#endif
#endif
#ifdef ISE
	string_name: STRING
			-- Name of file (STRING version)

#endif
#ifdef HACT
	file_open (f_name: POINTER; how: INTEGER): POINTER is
			-- File pointer for file `f_name', in mode `how'.
		external
			"C | <eif_file.h>"
		alias
			"file_binary_open"
		end

	file_dopen (fd, how: INTEGER): POINTER is
			-- File pointer for file of descriptor `fd' in mode `how'
			-- (which must fit the way `fd' was obtained).
		external
			"C | <eif_file.h>"
		alias
			"file_binary_dopen"
		end

	file_reopen (f_name: POINTER; how: INTEGER; file: POINTER): POINTER is
		   -- File pointer to `file', reopened to have new name `f_name'
		   -- in a mode specified by `how'.
		external
			"C | <eif_file.h>"
		alias
			"file_binary_reopen"
		end

#endif
#endif
end
