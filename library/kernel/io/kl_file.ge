indexing

	description:

		"Files"

	library:    "Gobo Eiffel Kernel Library"
	author:     "Eric Bezault <ericb@gobosoft.com>"
	copyright:  "Copyright (c) 2001, Eric Bezault and others"
	license:    "Eiffel Forum Freeware License v1 (see forum.txt)"
	date:       "$Date$"
	revision:   "$Revision$"

deferred class KL_FILE

inherit

	KI_FILE

	KL_SHARED_FILE_SYSTEM
		export
			{NONE} all
#ifdef VE
		undefine
			copy
#endif
		end

#ifdef ISE || HACT
	FILE
		rename
			make as old_make,
			name as old_name,
			count as old_count,
			exists as old_exists,
			is_readable as old_is_readable,
			is_open_read as old_is_open_read,
			is_open_write as old_is_open_write,
			end_of_file as old_end_of_file,
			is_closed as old_is_closed,
			open_read as old_open_read,
			open_write as old_open_write,
			open_append as old_open_append,
			put_character as old_put_character,
			put_string as old_put_string,
			put_integer as old_put_integer,
			put_boolean as old_put_boolean,
			put_new_line as old_put_new_line,
			read_character as old_read_character,
			read_stream as old_read_stream,
			read_line as old_read_line,
			change_name as old_change_name,
			flush as old_flush,
			close as old_close,
			delete as old_delete,
			reset as old_reset
		export
			{NONE} all
		end
#endif
#ifdef SE
	FILE_TOOLS
		rename
			delete as old_delete,
			is_readable as old_is_readable,
			tmp_string as old_tmp_string
		export
			{NONE} all
		end
#endif
#ifdef VE
	FILE
		rename
			make as old_make,
			name as old_name,
			count as old_count,
			exists as old_exists,
			is_open_read as old_is_open_read,
			is_open_write as old_is_open_write,
			end_of_file as old_end_of_file,
			is_closed as old_is_closed,
			open_read as old_open_read,
			open_write as old_open_write,
			open_append as old_open_append,
			put_character as old_put_character,
			put_string as old_put_string,
			put_integer as old_put_integer,
			put_boolean as old_put_boolean,
			read_character as old_read_character,
			read_stream as old_read_stream,
			read_line as old_read_line,
			change_name as old_change_name,
			close as old_close,
			delete as old_delete
		export
			{NONE} all
		end
#endif

feature {NONE} -- Initialization

	make (a_name: like name) is
			-- Create a new file named `a_name'.
			-- (`a_name' should follow the pathname convention
			-- of the underlying platform. For pathname conversion
			-- use KI_FILE_SYSTEM.pathname_from_file_system.)
		do
			name := a_name
#ifdef ISE || HACT
			if a_name.count > 0 then
				old_name := a_name
			else
				old_name := Empty_name
			end
			mode := Closed_file
#endif
#ifdef SE
			old_make
#endif
#ifdef VE
			if a_name.count > 0 then
				old_make (a_name)
			else
				old_make (Empty_name)
			end
#endif
		end

feature -- Access

	name: STRING
			-- File name

	time_stamp: INTEGER is
			-- Time stamp (number of seconds since 1 January 1970
			-- at 00:00:00 UTC) of last modification to current file;
			-- Return -1 if the time stamp was not available, if the
			-- file did not exist for example, or if the time stamp
			-- didn't fit into an INTEGER. (Use DT_DATE_TIME.make_from_epoch
			-- to convert this time stamp to a human readable format.)
		local
			rescued: BOOLEAN
#ifdef SE
			basic_time: BASIC_TIME
#endif
#ifdef VE
			dos_datetime: INTEGER
			dos_date, dos_time: INTEGER
			y, m, d: INTEGER
			h, mi, s: INTEGER
#endif
		do
			Result := -1
			if not rescued then
				if name.count > 0 then
#ifdef SE
					if file_exists (name) then
						basic_time := last_change_of (name)
						Result := epoch_time.elapsed_seconds (basic_time)
						if Result < 0 then
							Result := -1
						end
					end
#endif
#ifdef VE
						-- The return value of `file_time' is calculated
						-- as "((DWORD) wDosDate << 16) + wDosTime" assigned
						-- to REAL. Here:
						--  wDosDate bits are:
						--   0-4 Day of the month (1-31)
						--   5-8 Month (1 = January, 2 = February, etc.)
						--   9-15 Year offset from 1980 (add 1980 to get actual year)
						--  wDosTime bits are:
						--   0-4 Second divided by 2
						--   5-10 Minute (0-59)
						--   11-15 Hour (0-23 on a 24-hour clock)
					dos_datetime := file_system_impl.file_time (name).truncated_to_integer
					dos_date := dos_datetime // 65536 -- 2^16
					d := dos_date \\ 32 -- 2^5
					dos_date := dos_date // 32 -- 2^5
					m := dos_date \\ 16 -- 2^4
					dos_date := dos_date // 16 -- 2^4
					y := 1980 + dos_date \\ 128 -- 2^7
					dos_time := dos_datetime \\ 65536 -- 2^16
					s := dos_time \\ 32 -- 2^5
					s := s * 2
					dos_time := dos_time // 32 -- 2^5
					mi := dos_time \\ 64 -- 2^6
					dos_time := dos_time // 64 -- 2^6
					h := dos_time \\ 32 -- 2^5
					date_impl.set_date (y, m, d)
					d := date_impl.absolute_days - epoch_absolute_days
					Result := (((d * 24) + h) * 60 + mi) * 60 + s
					if Result < 0 then
						Result := -1
					end
#endif
#ifdef ISE || HACT
					if old_exists then
						Result := date
						if Result < 0 then
							Result := -1
						end
					end
#endif
				end
			end
		rescue
			if not rescued then
				rescued := True
				retry
			end
		end

feature -- Measurement

	count: INTEGER is
			-- Number of bytes in current file;
			-- Return -1 if the number of bytes was not available,
			-- if the file did not exist for example.
		local
			rescued: BOOLEAN
		do
			Result := -1
			if not rescued then
				if name.count > 0 then
#ifdef SE
					if file_exists (name) then
						Result := size_of (name)
					end
#else
					if old_exists then
						Result := old_count
					end
#endif
				end
			end
		rescue
			if not rescued then
				rescued := True
				retry
			end
		end

feature -- Status report

	exists: BOOLEAN is
			-- Does file physically exist on disk?
			-- (Note that with SmallEiffel this routine
			-- actually returns `is_readable'.)
		do
			if name.count > 0 then
#ifdef ISE || HACT
				Result := old_exists and then is_plain
#endif
#ifdef SE
				Result := is_readable
#endif
#ifdef VE
				Result := old_exists
#endif
			end
		end

	is_readable: BOOLEAN is
			-- Can file be opened in read mode?
		do
			if name.count > 0 then
#ifdef ISE || HACT
				Result := old_exists and then (old_is_readable and is_plain)
#endif
#ifdef SE
				tmp_file.reset (name)
				Result := tmp_file.is_readable
#endif
#ifdef VE
				if old_exists then
					tmp_file.reset (name)
					Result := tmp_file.is_readable
				end
#endif
			end
		end

	is_closed: BOOLEAN is
			-- Is file closed?
		do
#ifdef SE
			Result := not is_open
#else
			Result := old_is_closed
#endif
		end

feature -- Basic operations

	close is
			-- Close current file if it is closable,
			-- let it open otherwise.
		local
			rescued: BOOLEAN
		do
			if not rescued then
				old_close
			end
		rescue
			if not rescued then
				rescued := True
				retry
			end
		end

	change_name (new_name: STRING) is
			-- Rename current file as `new_name'.
			-- Do nothing if the file could not be renamed, if
			-- it did not exist or if `new_name' already existed.
			-- If renaming was successful, then `name' is set to
			-- `new_name'.
		local
			rescued: BOOLEAN
#ifdef ISE || HACT || VE
			a_name: STRING
#endif
		do
			if not rescued then
				if name.count > 0 and new_name.count > 0 then
#ifdef SE
					if not file_exists (new_name) then
						rename_to (name, new_name)
						if file_exists (new_name) then
							name := new_name
						end
					end
#endif
#ifdef ISE || HACT || VE
					a_name := name
					old_name := new_name
					if old_exists then
						old_name := a_name
					else
						old_name := a_name
						if old_exists then
							old_change_name (new_name)
							old_name := new_name
							if old_exists then
								name := new_name
							else
								old_name := a_name
							end
						end
					end
#endif
				end
			end
		rescue
			if not rescued then
				rescued := True
				retry
			end
		end

	copy_file (new_name: STRING) is
			-- Copy current file to `new_name'.
			-- Do nothing if the file could not be copied, if it
			-- did not exist or if `new_name' already existed.
		local
			old_file: KL_BINARY_INPUT_FILE
			new_file: KL_BINARY_OUTPUT_FILE
#ifdef ISE || HACT || VE
			a_name: STRING
#endif
		do
			if name.count > 0 and new_name.count > 0 then
#ifdef SE
				if not file_exists (new_name) then
#endif
#ifdef ISE || HACT || VE
				a_name := name
				old_name := new_name
				if old_exists then
					old_name := a_name
				else
					old_name := a_name
#endif
					!! old_file.make (name)
					old_file.open_read
					if old_file.is_open_read then
						!! new_file.make (new_name)
						new_file.open_write
						if new_file.is_open_write then
							from
								old_file.read_string (512)
							until
								old_file.end_of_file
							loop
								new_file.put_string (old_file.last_string)
								old_file.read_string (512)
							end
							new_file.close
						end
						old_file.close
					end
				end
			end
		end

	delete is
			-- Delete current file.
			-- Do nothing if the file could not be
			-- deleted or if it did not exist.
		local
			rescued: BOOLEAN
		do
			if not rescued then
				if name.count > 0 then
#ifdef SE
					old_delete (name)
#endif
#ifdef ISE || HACT || VE
					if old_exists then
						old_delete
					end
#endif
				end
			end
		rescue
			if not rescued then
				rescued := True
				retry
			end
		end

feature {NONE} -- Implementation

#ifdef SE
	old_make is
			-- The new created object is not connected.
		deferred
		ensure
			is_closed: not is_open
		end

	old_close is
			-- Close file.
		require
			not_closed: is_open
		deferred
		end

	epoch_time: BASIC_TIME is
			-- Epoch time (1 Jan 1970 at 00:00:00)
		local
			b: BOOLEAN
		once
			b := Result.set (1970, 1, 1, 0, 0, 0)
		end

#endif
#ifdef SE || VE
	tmp_file: KL_TEXT_INPUT_FILE is
			-- Temporary file object
		once
			!! Result.make (dummy_name)
		ensure
			file_not_void: Result /= Void
			file_closed: Result.is_closed
		end

	dummy_name: STRING is "dummy"
			-- Dummy name

#endif
#ifdef VE
	file_system_impl: FILE_SYSTEM is
			-- Implementation
		once
			!! Result.make
		ensure
			file_system_impl_not_void: Result /= Void
		end

	date_impl: DATE is
			-- Date implementation
		once
			!! Result.set_date (1970, 1, 1)
		ensure
			date_impl_not_void: Result /= Void
		end

	epoch_absolute_days: INTEGER is
			-- Absolute days for epoch (1 Jan 1970)
		once
			date_impl.set_date (1970, 1, 1)
			Result := date_impl.absolute_days
		end

#endif
#ifdef ISE || HACT || VE
	Empty_name: STRING is "empty_name"
			-- Empty name place-holder

#endif
end -- class KL_FILE
