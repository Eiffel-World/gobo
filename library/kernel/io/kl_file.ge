indexing

	description:

		"Files"

	library:    "Gobo Eiffel Kernel Library"
	author:     "Eric Bezault <ericb@gobosoft.com>"
	copyright:  "Copyright (c) 2001, Eric Bezault and others"
	license:    "Eiffel Forum Freeware License v1 (see forum.txt)"
	date:       "$Date$"
	revision:   "$Revision$"

deferred class KL_FILE

inherit

	KI_FILE

	KL_SHARED_FILE_SYSTEM
		export
			{NONE} all
		end

#ifdef ISE || HACT
	FILE
		rename
			make as old_make,
			name as old_name,
			exists as old_exists,
			is_readable as old_is_readable,
			is_open_read as old_is_open_read,
			is_open_write as old_is_open_write,
			end_of_file as old_end_of_file,
			is_closed as old_is_closed,
			open_read as old_open_read,
			open_write as old_open_write,
			put_character as old_put_character,
			put_string as old_put_string,
			put_integer as old_put_integer,
			put_boolean as old_put_boolean,
			put_new_line as old_put_new_line,
			read_character as old_read_character,
			read_stream as old_read_stream,
			read_line as old_read_line,
			change_name as old_change_name,
			flush as old_flush,
			close as old_close,
			delete as old_delete
		export
			{NONE} all
		end
#endif
#ifdef SE
	FILE_TOOLS
		rename
			delete as old_delete,
			is_readable as old_is_readable,
			tmp_string as old_tmp_string
		export
			{NONE} all
		end
#endif
#ifdef VE
	FILE
		rename
			make as old_make,
			name as old_name,
			exists as old_exists,
			is_readable as old_is_readable,
			is_open_read as old_is_open_read,
			is_open_write as old_is_open_write,
			end_of_file as old_end_of_file,
			is_closed as old_is_closed,
			open_read as old_open_read,
			open_write as old_open_write,
			put_character as old_put_character,
			put_string as old_put_string,
			put_integer as old_put_integer,
			put_boolean as old_put_boolean,
			read_character as old_read_character,
			read_stream as old_read_stream,
			read_line as old_read_line,
			change_name as old_change_name,
			close as old_close,
			delete as old_delete
		export
			{NONE} all
		end
#endif

feature {NONE} -- Initialization

	make (a_name: like name) is
			-- Create a new file named `a_name'.
		do
			name := a_name
#ifdef ISE || HACT
			if a_name.count > 0 then
				old_name := a_name
			else
				old_name := Empty_name
			end
			mode := Closed_file
#endif
#ifdef SE
			old_make
#endif
#ifdef VE
			if a_name.count > 0 then
				old_make (a_name)
			else
				old_make (Empty_name)
			end
#endif
		end

feature -- Access

	name: STRING
			-- File name

feature -- Status report

	is_readable: BOOLEAN is
			-- Can file be opened in read mode?
		do
			if name.count > 0 then
#ifdef ISE || HACT
				Result := old_exists and then (old_is_readable and is_plain)
#endif
#ifdef SE
				Result := old_is_readable (name)
#endif
#ifdef VE
				Result := old_exists and then old_is_readable
#endif
			end
		end

	is_closed: BOOLEAN is
			-- Is file closed?
		do
#ifdef SE
			Result := not is_open
#else
			Result := old_is_closed
#endif
		end

feature -- Basic operations

	close is
			-- Close current file if it is closable,
			-- let it open otherwise.
		local
			rescued: BOOLEAN
		do
			if not rescued then
				old_close
			end
		rescue
			if not rescued then
				rescued := True
				retry
			end
		end

	change_name (new_name: STRING) is
			-- Rename current file as `new_name'.
			-- Do nothing if the file could not be renamed, if
			-- it did not exist or if `new_name' already existed.
			-- If renaming was successful, then `name' is set to
			-- `new_name'.
#ifndef SE
		local
			a_name: STRING
#endif
		do
			if new_name.count > 0 then
#ifdef SE
				if not file_exists (new_name) then
#else
				a_name := old_name
				old_name := new_name
				if old_exists then
					old_name := a_name
				else
					old_name := a_name
#endif
					file_system.rename_file (name, new_name)
#ifdef SE
					if file_exists (new_name) then
						name := new_name
#else
					a_name := old_name
					old_name := new_name
					if old_exists then
						name := new_name
					else
						old_name := a_name
#endif
					end
				end
			end
		end

	delete is
			-- Delete current file.
			-- Do nothing if the file could not be
			-- deleted or if it did not exist.
		local
			rescued: BOOLEAN
		do
			if not rescued then
				if name.count > 0 then
#ifdef SE
					old_delete (name)
#endif
#ifdef ISE || HACT || VE
					if old_exists then
						old_delete
					end
#endif
				end
			end
		rescue
			if not rescued then
				rescued := True
				retry
			end
		end

feature {NONE} -- Implementation

#ifdef SE
	old_make is
			-- The new created object is not connected.
		deferred
		ensure
			is_closed: not is_open
		end

	old_close is
			-- Close file.
		require
			not_closed: is_open
		deferred
		end

#endif
#ifdef ISE || HACT || VE
	Empty_name: STRING is "empty_name"
			-- Empty name place-holder

#endif
end -- class KL_FILE
