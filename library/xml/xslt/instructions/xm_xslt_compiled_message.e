indexing

	description: "Objects that represent an xsl:message,"

	library: "Gobo Eiffel XSLT Library"
	copyright: "Copyright (c) 2004, Colin Adams and others"
	license: "Eiffel Forum License v2 (see forum.txt)"
	date: "$Date$"
	revision: "$Revision$"

class XM_XSLT_COMPILED_MESSAGE

inherit
	
	XM_XSLT_INSTRUCTION
		redefine
			result_type
		end

	XM_XSLT_VALIDATION

creation

	make

feature {NONE} -- Initialization

	make (an_executable: XM_XSLT_EXECUTABLE; a_select_expression: like select_expression; a_terminate: like terminate) is
			-- Establish invariant.
		require
			executable_not_void: an_executable /= Void
		do
			executable := an_executable
			terminate := a_terminate
			select_expression := a_select_expression
			instruction_name := "message"
			create children.make (0)
		ensure
			executable_set: executable = an_executable
			terminate_set: terminate = a_terminate
			select_expression_set: select_expression = a_select_expression
		end

feature -- Access
	
	instruction_name: STRING
			-- Name of instruction, for diagnostics

	result_type: XM_XPATH_SEQUENCE_TYPE is
			-- Static type of values generated by `Current'
		do
			create Result.make_empty
		end
	
feature -- Evaluation

	process_leaving_tail (a_context: XM_XSLT_EVALUATION_CONTEXT) is
			-- Execute `Current', writing results to the current `XM_XPATH_RECEIVER'.
		local
			a_transformer: XM_XSLT_TRANSFORMER
			a_message_emitter: XM_XSLT_MESSAGE_EMITTER
			an_outputter: XM_OUTPUT
			some_output_properties: XM_XSLT_OUTPUT_PROPERTIES
			a_result: XM_XSLT_TRANSFORMATION_RESULT
			a_tree_receiver: XM_XSLT_TREE_RECEIVER
			a_saved_receiver: XM_XSLT_SEQUENCE_RECEIVER
			an_iterator: XM_XPATH_SEQUENCE_ITERATOR [XM_XPATH_ITEM]
			a_string_value: XM_XPATH_STRING_VALUE
			an_error: XM_XPATH_ERROR_VALUE
		do
			last_tail_call := Void
			a_transformer := a_context.transformer
			create some_output_properties.make (-1000000)
			create an_outputter
			an_outputter.set_output_standard_error
			some_output_properties.set_omit_xml_declaration (True, -1000000)
			create a_message_emitter.make (a_transformer, an_outputter, some_output_properties, Void)
			a_message_emitter.set_output_properties (some_output_properties)
			create a_tree_receiver.make (a_message_emitter)
			create a_result.make_receiver (a_tree_receiver)
			a_saved_receiver := a_transformer.current_receiver
			a_transformer.change_output_destination (some_output_properties, a_result, False, Validation_strip, Void)
			if select_expression /= Void then
				an_iterator := select_expression.iterator (a_context)
				from
					an_iterator.start
				until
					an_iterator.after
				loop
					a_tree_receiver.append_item (an_iterator.item)
					an_iterator.forth
				end
			end
			process_children (a_context)
			a_transformer.reset_output_destination (a_saved_receiver)
			if terminate /= Void then
				terminate.evaluate_as_string (a_context)
				a_string_value := terminate.last_evaluated_string
				if a_string_value.is_error then
					a_transformer.report_fatal_error (a_string_value.error_value, Current)
				elseif STRING_.same_string (a_string_value.string_value, "no") then
					-- do_nothing
				elseif STRING_.same_string (a_string_value.string_value, "yes") then
					create an_error.make_from_string ("Execution terminated owing to xsl:message terminate='yes'.", Gexslt_eiffel_type_uri, "TERMINATE_MESSAGE", Dynamic_error)
					a_transformer.report_fatal_error (an_error, Current)
				else
					create an_error.make_from_string (STRING_.concat ("xsl:message terminate attribute must evaluate to 'yes' or 'no'. Found: ", a_string_value.string_value),
																 Gexslt_eiffel_type_uri, "INVALID_TERMINATE", Dynamic_error)
					a_transformer.report_fatal_error (an_error, Current)
				end
			end
		end

feature {NONE} -- Implementation

	terminate: XM_XPATH_EXPRESSION
			-- Value of terminate attribute

	select_expression: XM_XPATH_EXPRESSION
			-- Value of select attribute
	
end
	
