<?xml version="1.0"?>

<project name="libexml-expat" default="help">
  
	<description>
		description: "Eiffel Ant file for Gobo XML expat C Library"
		author:      "Andreas Leitner [nozone@sbox.tugraz.at]"
		copyright:   "Copyright (c) 2001, Andreas Leitner and others"
		license:     "Eiffel Forum Freeware License v1 (see forum.txt)"
		date:        "$Date$"
		revision:    "$Revision$"
	</description>
	
	<target name="help">
		<echo message="usage:"/>
		<echo message="   geant compile"/>
		<echo message="   geant compile_gcc"/>
		<echo message="   geant compile_cl"/>
		<echo message="   geant compile_lcc"/>
		<echo message="   geant compile_bcc"/>
		<echo message="   geant clean"/>
		<echo message="   geant clobber"/>
	</target>
	
	<target name="clean" depend="init" dir="${GOBO}/library/xml/impl/expat/spec/c">
		<description>
			Remove intermediary generated files.
		</description>
		<delete file="exml_helper${obj}"/>
		<delete file="exml_expat${obj}"/>
	</target>

	<target name="clobber" depend="init" dir="${GOBO}/library/xml/impl/expat/spec/c">
		<description>
			Remove all generated files.
		</description>
		<delete file="libexml-expat-${eiffel}${lib}"/>
	</target>

	<target name="compile" depend="init">
		<description>
			Compile '${system}'.
			Use Eiffel compiler set in ${GOBO_EIFFEL}
			or 'se' if this variable is not defined.
			Use C compiler set in ${GOBO_CC} or 'gcc' 
			if this variable is not defined.
		</description>
		<echo message="compiling libexml-expat for:"/>
		<echo message="C compiler: ${cc}"/>
		<echo message="Eiffel compiler: ${eiffel}"/>
		<geant target="compile_${cc}"/>
	</target>

	<target name="compile_gcc" depend="init" dir="${GOBO}/library/xml/impl/expat/spec/c">
		<exec executable="gcc -c exml_helper.c -D${eiffel} ${gobo_eiffel_include} ${expat_include} ${c_defines}"/> 
		<exec executable="gcc -c exml_expat.c -D${eiffel} ${gobo_eiffel_include} ${expat_include} ${c_defines}"/> 
		<exec executable="ar rc libexml-expat-${eiffel}${lib} exml_helper${obj} exml_expat${obj}"/>
		<exec executable="ranlib libexml-expat-${eiffel}${lib}"/>
   	</target>

	<target name="compile_cl" depend="init" dir="${GOBO}/library/xml/impl/expat/spec/c">
		<exec executable="cl -c exml_helper.c -D${eiffel} ${gobo_eiffel_include} ${expat_include} ${c_defines}"/> 
		<exec executable="cl -c exml_expat.c -D${eiffel} ${gobo_eiffel_include} ${expat_include} ${c_defines}"/> 
		<exec executable="lib /OUT:libexml-expat-${eiffel}${lib} exml_helper${obj} exml_expat${obj}"/>
   	</target>

	<target name="compile_lcc" depend="init" dir="${GOBO}/library/xml/impl/expat/spec/c">
		<exec executable="lcc -c exml_helper.c -D${eiffel} ${gobo_eiffel_include} ${expat_include} ${c_defines}"/> 
		<exec executable="lcc -c exml_expat.c -D${eiffel} ${gobo_eiffel_include} ${expat_include} ${c_defines}"/> 
		<exec executable="lcclib /OUT:libexml-expat-${eiffel}${lib} exml_helper${obj} exml_expat${obj}"/>
   	</target>

	<target name="compile_bcc" depend="init" dir="${GOBO}/library/xml/impl/expat/spec/c">
		<exec executable="bcc -c exml_helper.c -D${eiffel} ${gobo_eiffel_include} ${expat_include} ${c_defines}"/> 
		<exec executable="bcc -c exml_expat.c -D${eiffel} ${gobo_eiffel_include} ${expat_include} ${c_defines}"/> 
		<exec executable="tlib libexml-expat-${eiffel}${lib} exml_helper${obj} exml_expat${obj}"/>
   	</target>

   		


<!-- Implementation -->

	<target name="init">
		<set name="system" value="libexml-expat"/>
		<set name="eiffel" value="se"/>
		<set name="cc" value="gcc"/>
		<set name="expat_include" value=""/>
		<geant target="init_eiffel"/>
		<geant target="init_c_defines"/>
		<geant target="init_os"/>
		<geant target="init_cc"/>
		<geant target="init_expat"/>
		<geant target="init_se"/>
		<geant target="init_ve"/>
		<geant target="init_ise"/>
		<geant target="init_hact"/>
	</target>

	<target name="init_c_defines" if="${GOBO_C_DEBUG}">
		<set name="c_defines" value="-DGOBO_DEBUG"/>
	</target>

	<target name="init_eiffel" if="${GOBO_EIFFEL}">
		<set name="eiffel" value="${GOBO_EIFFEL}"/>
	</target>

	<target name="init_se" if="${eiffel}=se">
		<set name="gobo_eiffel_include" value="-I${SmallEiffelDirectory}"/>
	</target>

	<target name="init_ve" if="${eiffel}=ve">
		<set name="gobo_eiffel_include" value="-I${VE_Bin}"/>
	</target>

	<target name="init_ise" if="${eiffel}=ise">
		<!-- 
				On the latest linux beta versions the dir bench has been renamed to studio.
				Please make a symbolic link from studio to bench, to keep backward compatible.
		-->
		<set name="gobo_eiffel_include" value="-I${ISE_EIFFEL}/bench/spec/${PLATFORM}/include"/>
	</target>

	<target name="init_hact" if="${eiffel}=hact">
		<set name="gobo_eiffel_include" value=""/> <!-- TODO -->
	</target>

	<target name="init_expat" if="${EXPAT}">
		<set name="expat_include" value="-I${EXPAT}\Source\lib"/>
	</target>

	<target name="init_os">
		<geant target="init_windows"/>
		<geant target="init_unix"/>
	</target>

	<target name="init_windows" if="${GOBO_OS}=windows">
		<set name="exe" value=".exe"/>
		<set name="obj" value=".obj"/>
		<set name="lib" value=".lib"/>
		<set name="PLATFORM" value="windows"/>
	</target>

	<target name="init_unix" unless="${GOBO_OS}=windows">
		<set name="exe" value=""/>
		<set name="obj" value=".o"/>
		<set name="lib" value=".a"/>
	</target>

	<target name="init_cc">
		<geant target="init_gcc"/>
		<geant target="init_cl"/>
		<geant target="init_lcc"/>
		<geant target="init_bcc"/>
	</target>

	<target name="init_gcc" if="${GOBO_CC}=gcc">
		<set name="cc" value="gcc"/>
	</target>

	<target name="init_cl" if="${GOBO_CC}=cl">
		<set name="cc" value="msc"/>
	</target>

	<target name="init_lcc" if="${GOBO_CC}=lcc">
		<set name="cc" value="lcc"/>
	</target>

	<target name="init_bcc" if="${GOBO_CC}=bcc">
		<set name="cc" value="bcc"/>
	</target>

</project>
