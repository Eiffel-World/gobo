indexing

	description:

		"Arrays";

	library:    "Gobo Eiffel Lexical Library";
	author:     "Eric Bezault <ericb@gobo.demon.co.uk>";
	copyright:  "Copyright (c) 1997, Eric Bezault";
	date:       "$Date$";
	revision:   "$Revision$"

class YY_ARRAY [G]

inherit

	ARRAY [G]
		rename
			make_from_array as array_make_from_array
		end

creation

	make, make_from_array

feature {NONE} -- Initialization

	make_from_array (an_array: ARRAY [G]; min_index: INTEGER) is
			-- Initialize from the items of `an_array'.
#ifdef ISE || HACT
			-- (Share representation.)
#endif
		require
			an_array_not_void: an_array /= Void
#ifndef ISE || HACT
		local
			i, j, nb: INTEGER
#endif
		do
#ifdef ISE || HACT
			area := an_array.area
			lower := min_index
			upper := min_index + an_array.count - 1
#else
			make (min_index, min_index + an_array.count - 1)
			from
				nb := an_array.upper
				i := an_array.lower
				j := min_index
			until
				i > nb
			loop
				put (an_array.item (i), j)
				i := i + 1
				j := j + 1
			end
#endif
		ensure
			lower_set: lower = min_index
			count_set: count = an_array.count
		end

end -- class YY_ARRAY
