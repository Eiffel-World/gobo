<?xml version="1.0"?>

<project name="eiffel" default="help">

	<description>
		description: "Eiffel compilation"
		copyright: "Copyright (c) 2001-2002, Eric Bezault and others"
		license: "Eiffel Forum License v1 (see forum.txt)"
		date: "$Date$"
		revision: "$Revision$"
	</description>

	<inherit>
		<parent location="${GOBO}/misc/ge2e.eant"/>
	</inherit>

	<target name="help">
		<echo message="usage:"/>
		<echo message="   geant install"/>
		<echo message="   geant compile"/>
		<echo message="   geant compile_ise"/>
		<echo message="   geant compile_hact"/>
		<echo message="   geant compile_se"/>
		<echo message="   geant compile_ve"/>
		<echo message="   geant compile_debug"/>
		<echo message="   geant compile_debug_ise"/>
		<echo message="   geant compile_debug_hact"/>
		<echo message="   geant compile_debug_se"/>
		<echo message="   geant compile_debug_ve"/>
		<echo message="   geant clean"/>
		<echo message="   geant clobber"/>
	</target>

	<target name="install" depend="init">
		<description>
			Install ${system} directory.
		</description>

		<unset name="gexace_output"/>
		<set name="eiffel" value="ise"/>
		<geant target="xace"/>
		<set name="eiffel" value="hact"/>
		<geant target="xace"/>
		<set name="eiffel" value="se"/>
		<geant target="xace"/>
		<set name="eiffel" value="ve"/>
		<geant target="xace"/>
		<geant target="other_install"/>
	</target>

	<target name="compile" depend="prepare_compile">
		<description>
			Compile '${system}'.
			Use Eiffel compiler set in ${GOBO_EIFFEL}
			or 'se' if this variable is not defined.
			Compile in debug mode if ${debug} is defined.
		</description>

		<geant target="compile_${eiffel}"/>
	</target>

	<target name="compile_ise" depend="prepare_compile">
		<description>
			Compile '${system}' with ISE Eiffel.
			Compile in debug mode if ${debug} is defined.
		</description>

		<set name="eiffel" value="ise"/>
		<set name="gexace_output" value="compile_ise.ace"/>
		<geant target="xace"/>
		<delete file="${system}${exe}"/>
		<delete file="${system}.melted"/>
		<set name="finalize" value="true"/>
		<set name="finalize" value="false" if="${debug}"/>
		<set name="finalize" value="false" if="${GOBO_DOTNET}"/>
		<ise ace="compile_ise.ace" system="${system}" finalize="${finalize}" finish_freezing="true"/>
		<set name="codedir" value="W_code" if="${finalize}=false"/>
		<set name="codedir" value="F_code" if="${finalize}=true"/>
		<move file="EIFGEN/${codedir}/${system}${exe}" to_directory="."/>
		<move to_directory=".">
			<fileset directory="EIFGEN/${codedir}" include="@(lib${system}.dll)"/>
		</move>
		<move to_directory=".">
			<fileset directory="EIFGEN/${codedir}" include="@(${system}.melted)"/>
		</move>
	</target>

	<target name="compile_hact" depend="prepare_compile">
		<description>
			Compile '${system}' with Halstenbach Eiffel.
			Compile in debug mode if ${debug} is defined.
		</description>

		<set name="eiffel" value="hact"/>
		<set name="gexace_output" value="compile_hact.ace"/>
		<geant target="xace"/>
		<delete file="${system}${exe}"/>
		<delete file="${system}.h2o"/>
		<hact ace="compile_hact.ace" system="${system}" finalize="true" fish="true" unless="${debug}"/>
		<move file="${system}_gen/F_code/${system}${exe}" to_directory="." unless="${debug}"/>
		<hact ace="compile_hact.ace" system="${system}" finalize="false" fish="true" if="${debug}"/>
		<move file="${system}_gen/W_code/${system}${exe}" to_directory="." if="${debug}"/>
		<move file="${system}_gen/W_code/${system}.h2o" to_directory="." if="${debug}"/>
	</target>

	<target name="compile_ve" depend="prepare_compile">
		<description>
			Compile '${system}' with Visual Eiffel.
			Compile in debug mode if ${debug} is defined.
			If '${vetuner}' is set, set call 'vetuner'
			with the given tuning level.
		</description>

		<set name="eiffel" value="ve"/>
		<set name="gexace_output" value="compile_ve.esd"/>
		<geant target="xace"/>
		<delete file="${system}${exe}"/>
		<ve esd="compile_ve.esd"/>
		<ve tune="${system}${exe}" level="${vetuner}" if="${vetuner}"/>
	</target>

	<target name="compile_se" depend="prepare_compile">
		<description>
			Compile '${system}' with SmallEiffel.
			Compile in debug mode if ${debug} is defined.
		</description>

		<set name="eiffel" value="se"/>
		<set name="gexace_output" value="compile_se.ace"/>
		<geant target="xace"/>
		<delete file="${system}${exe}"/>
		<se ace="compile_se.ace"/>
	</target>

	<target name="compile_debug" depend="prepare_compile">
		<description>
			Compile '${system}' in debug mode.
			Use Eiffel compiler set in ${GOBO_EIFFEL}
			or 'se' if this variable is not defined.
		</description>

		<set name="debug" value="true"/>
		<geant target="compile"/>
	</target>

	<target name="compile_debug_ise" depend="prepare_compile">
		<description>
			Compile '${system}' with ISE Eiffel in debug mode.
		</description>

		<set name="eiffel" value="ise"/>
		<set name="debug" value="true"/>
		<geant target="compile"/>
	</target>

	<target name="compile_debug_hact" depend="prepare_compile">
		<description>
			Compile '${system}' with Halstenbach Eiffel in debug mode.
		</description>

		<set name="eiffel" value="hact"/>
		<set name="debug" value="true"/>
		<geant target="compile"/>
	</target>

	<target name="compile_debug_ve" depend="prepare_compile">
		<description>
			Compile '${system}' with Visual Eiffel in debug mode.
			If '${vetuner}' is set, set call 'vetuner'
			with the given tuning level.
		</description>

		<set name="eiffel" value="ve"/>
		<set name="debug" value="true"/>
		<geant target="compile"/>
	</target>

	<target name="compile_debug_se" depend="prepare_compile">
		<description>
			Compile '${system}' with SmallEiffel in debug mode.
		</description>

		<set name="eiffel" value="se"/>
		<set name="debug" value="true"/>
		<geant target="compile"/>
	</target>

	<target name="clean" depend="init">
		<description>
			Remove intermediary generated files.
		</description>

		<ise clean="${system}"/>
		<hact clean="${system}"/>
		<se clean="${system}"/>
		<ve clean="${system}" recursive="true"/>
		<delete file="compile_ise.ace"/>
		<delete file="compile_hact.ace"/>
		<delete file="compile_se.ace"/>
		<delete file="compile_ve.esd"/>
		<geant target="other_clean"/>
	</target>

	<target name="clobber" depend="init">
		<description>
			Remove all generated files.
		</description>

		<geant target="clean"/>
		<delete file="ise.ace"/>
		<delete file="hact.ace"/>
		<delete file="se.ace"/>
		<delete file="ve.esd"/>
		<delete file="${system}${exe}"/>
		<delete file="${system}.melted"/>
		<delete file="lib${system}.dll"/>
		<delete file="${system}.h2o"/>
		<geant target="other_clobber"/>
	</target>


<!-- Implementation -->

	<target name="xace" depend="init">
		<description>
			Build Ace file or ESD file for Eiffel compiler ${eiffel}.
			Generate file in ${gexace_output} if specified.
			Pass $DEBUG option to 'gexace' if ${debug} is defined.
			Pass $GOBO_OS value to 'gexace'.
			Pass $GOBO_CC value to 'gexace' if defined.
			Pass $GOBO_XML_EXPAT option to 'gexace' if defined.
			Pass $GOBO_DOTNET option to 'gexace' if defined.
			Pass $ISE_5_1 option to 'gexace' if defined.
			To be redefined in descendant if additional options are
			necessary.
		</description>

		<set name="gexace_output" value="" unless="${gexace_output}"/>
		<gexace system="${eiffel}" output="${gexace_output}" xace="${system_dir}/system.xace">
			<define name="DEBUG" value="${debug}" if="${debug}"/>
			<define name="GOBO_OS" value="${GOBO_OS}"/>
			<define name="GOBO_CC" value="${GOBO_CC}" if="${GOBO_CC}"/>
			<define name="GOBO_XML_EXPAT" value="true" if="${GOBO_XML_EXPAT}"/>
			<define name="GOBO_DOTNET" value="true" if="${GOBO_DOTNET}"/>
			<define name="ISE_5_1" value="true" if="${ISE_5_1}"/>
		</gexace>
	</target>

	<target name="prepare_compile" depend="init">
		<description>
			Prepare compilation if necessary.
		</description>

		<!-- To be redefined in descendant if necessary -->
	</target>

	<target name="other_install" depend="init">
		<description>
			Install other items in ${system} directory.
		</description>

		<!-- To be redefined in descendant if necessary -->
	</target>

	<target name="other_clean" depend="init">
		<description>
			Remove other intermediary generated files.
		</description>

		<!-- To be redefined in descendant if necessary -->
	</target>

	<target name="other_clobber" depend="init">
		<description>
			Remove other generated files.
		</description>

		<!-- To be redefined in descendant if necessary -->
	</target>

	<target name="init">
		<set name="eiffel" value="se"/>
		<geant target="init_eiffel"/>
		<geant target="init_os"/>
		<geant target="init_system"/>
	</target>

	<target name="init_system">
		<!--
			Values to be defined:
				. ${system} : name of the system to be compiled
				. ${system_dir} : directory for the compilation
		-->
	</target>

	<target name="init_eiffel" if="${GOBO_EIFFEL}">
		<set name="eiffel" value="${GOBO_EIFFEL}"/>
	</target>

	<target name="init_os">
		<geant target="init_windows"/>
		<geant target="init_unix"/>
	</target>

	<target name="init_windows" if="${GOBO_OS}=windows">
		<set name="exe" value=".exe"/>
	</target>

	<target name="init_unix" unless="${GOBO_OS}=windows">
		<set name="exe" value=""/>
	</target>

</project>
