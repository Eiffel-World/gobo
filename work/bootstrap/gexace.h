#ifdef __cplusplus
extern "C" {
#endif
/*
ANSI C code generated by SmallEiffel The GNU Eiffel Compiler
Release -0.74 Beta #21 (Wednesday April 10th 2002)
Copyright (C), 1994-2002 - LORIA - UHP - INRIA - FRANCE
Dominique COLNET and Suzanne COLLIN - SmallEiffel@loria.fr
http://SmallEiffel.loria.fr
C Compiler options used: -O2 -nologo -D"WIN32" -w
*/

/*
-- This file is  free  software, which  comes  along  with  SmallEiffel. This
-- software  is  distributed  in the hope that it will be useful, but WITHOUT
-- ANY  WARRANTY;  without  even  the  implied warranty of MERCHANTABILITY or
-- FITNESS  FOR A PARTICULAR PURPOSE. You can modify it as you want, provided
-- this header is kept unaltered, and a notification of the changes is added.
-- You  are  allowed  to  redistribute  it and sell it, alone or as a part of
-- another product.
--       Copyright (C) 1994-2002 LORIA - INRIA - U.H.P. Nancy 1 - FRANCE
--          Dominique COLNET and Suzanne COLLIN - SmallEiffel@loria.fr
--                       http://SmallEiffel.loria.fr
--
*/
/*
  This file (SmallEiffel/sys/runtime/base.h) contains all basic Eiffel
  type definitions.
  This file is automatically included in the header for all modes of
  compilation: -boost, -no_check, -require_check, -ensure_check, ...
  This file is also included in the header of any cecil file (when the
  -cecil option is used).
  This file is also included in the header file of C++ wrappers (when
  using the external "C++" clause).
*/
#include <stdio.h>
#include <string.h>
#include <math.h>
#include <stdlib.h>
#include <signal.h>
#include <stddef.h>
#include <stdarg.h>
#include <limits.h>
#include <float.h>
#include <setjmp.h>
#include <sys/types.h>
#include <sys/stat.h>
#include <fcntl.h>
#ifdef WIN32
#include <windows.h>
#else
#ifndef O_RDONLY
#include <sys/file.h>
#endif
#ifndef O_RDONLY
#define O_RDONLY 0000
#endif
#endif

/* Because ANSI C EXIT_* are not always defined: */
#ifndef EXIT_FAILURE
#define EXIT_FAILURE 1
#endif
#ifndef EXIT_SUCCESS
#define EXIT_SUCCESS 0
#endif

/*
   On Linux glibc systems, we need to use sig.* versions of jmp_buf,
   setjmp and longjmp to preserve the signal handling context.
   Currently, the way I figured to detect this is if _SIGSET_H_types has
   been defined in /usr/include/setjmp.h.
*/
#ifdef _SIGSET_H_types
#define JMP_BUF    sigjmp_buf
#define SETJMP(x)  sigsetjmp( (x), 1)
#define LONGJMP    siglongjmp
#else
#define JMP_BUF    jmp_buf
#define SETJMP(x)  setjmp( (x) )
#define LONGJMP    longjmp
#endif

/*
   Type to store reference objects Id:
 */
typedef int Tid;
typedef struct S0 T0;
struct S0{Tid id;};

/*
   The default channel used to print runtime error messages:
*/
#define SE_ERR stderr

/*
   Eiffel type INTEGER is #2:
*/
typedef int T2;
#define EIF_INTEGER T2
#define M2 (0)
#define EIF_INTEGER_BITS (CHAR_BIT*sizeof(int))
#define EIF_MINIMUM_INTEGER (INT_MIN)
#define EIF_MAXIMUM_INTEGER (INT_MAX)

/*
  Eiffel type CHARACTER is #3:
*/
typedef unsigned char T3;
#define EIF_CHARACTER T3
#define M3 (0)
#define EIF_CHARACTER_BITS (CHAR_BIT)
#define EIF_MINIMUM_CHARACTER_CODE (0)
#define EIF_MAXIMUM_CHARACTER_CODE (255)
#define T3code(x) ((T2)(x))
#define T3to_integer(x) ((T2)((char)(x)))
#define T3to_bit(x) (x)

/*
  Eiffel type REAL is #4:
*/
typedef float T4;
#define EIF_REAL T4
#define M4 (0.0)
#define EIF_REAL_BITS (CHAR_BIT*sizeof(float))
#define EIF_MINIMUM_REAL (-(FLT_MAX))
#define EIF_MAXIMUM_REAL (FLT_MAX)
#define T2toT4(x) ((T4)(x))

/*
  Eiffel type DOUBLE is #5:
*/
typedef double T5;
#define EIF_DOUBLE T5
#define M5 (0.0)
#define EIF_DOUBLE_BITS (CHAR_BIT*sizeof(double))
#define EIF_MINIMUM_DOUBLE (-(DBL_MAX))
#define EIF_MAXIMUM_DOUBLE (DBL_MAX)
#define T2toT5(x) ((T5)(x))
#define T4toT5(x) ((T5)(x))

/*
  Eiffel type BOOLEAN is #6:
*/
typedef char T6;
#define EIF_BOOLEAN T6
#define M6 (0)
#define EIF_BOOLEAN_BITS (CHAR_BIT)

/*
   Eiffel type POINTER is #8:
*/
typedef void* T8;
#define EIF_POINTER T8
#define M8 (NULL)
#define EIF_POINTER_BITS (CHAR_BIT*sizeof(void*))

/*
  To use type STRING on the C side:
*/
#define EIF_STRING T7*

/*
  Some Other EIF_* defined in ETL:
*/
#define eif_access(x) ((char*)(x))
#define EIF_REFERENCE T0*
#define EIF_OBJ T0*
#define EIF_OBJECT EIF_OBJ

/*
   Wrappers for `malloc' and `calloc':
*/
void* se_malloc(size_t size);
void* se_calloc(size_t nmemb, size_t size);

/*C Header Pass 1 :*/
typedef struct S508 T508;
typedef struct S360 T360;
typedef struct S340 T340;
typedef struct S326 T326;
typedef struct S353 T353;
typedef struct S411 T411;
typedef struct S414 T414;
typedef struct S105 T105;
typedef struct S157 T157;
typedef struct S416 T416;
typedef struct S264 T264;
typedef struct S176 T176;
typedef struct S406 T406;
typedef struct S315 T315;
typedef struct S413 T413;
typedef struct S372 T372;
typedef struct S190 T190;
typedef struct S308 T308;
typedef struct S278 T278;
typedef struct S215 T215;
typedef struct S243 T243;
typedef struct S276 T276;
typedef struct S138 T138;
typedef struct S479 T479;
typedef struct S242 T242;
typedef struct S275 T275;
typedef struct S384 T384;
typedef struct S391 T391;
typedef struct S454 T454;
typedef struct S43 T43;
typedef struct S387 T387;
typedef struct S369 T369;
typedef struct S189 T189;
typedef struct S211 T211;
typedef struct S481 T481;
typedef struct S229 T229;
typedef struct S314 T314;
typedef struct S125 T125;
typedef struct S191 T191;
typedef struct S92 T92;
typedef struct S136 T136;
typedef struct S495 T495;
typedef struct S134 T134;
typedef struct S168 T168;
typedef struct S490 T490;
typedef struct S39 T39;
typedef struct S486 T486;
typedef struct S144 T144;
typedef struct S511 T511;
typedef struct S521 T521;
typedef struct S352 T352;
typedef struct S403 T403;
typedef struct S175 T175;
typedef struct S331 T331;
typedef struct S324 T324;
typedef struct S248 T248;
typedef struct S33 T33;
typedef struct S455 T455;
typedef struct S351 T351;
typedef struct S304 T304;
typedef struct S390 T390;
typedef struct S131 T131;
typedef struct S433 T433;
typedef struct S303 T303;
typedef struct S227 T227;
typedef struct S250 T250;
typedef struct S526 T526;
typedef struct S519 T519;
typedef struct S108 T108;
typedef struct S238 T238;
typedef struct S137 T137;
typedef struct S104 T104;
typedef struct S496 T496;
typedef struct S335 T335;
typedef struct S210 T210;
typedef struct S107 T107;
typedef struct S246 T246;
typedef struct S516 T516;
typedef struct S239 T239;
typedef struct S160 T160;
typedef struct S441 T441;
typedef struct S460 T460;
typedef struct S38 T38;
typedef struct S367 T367;
typedef struct S155 T155;
typedef struct S75 T75;
typedef int T334;
typedef struct S193 T193;
typedef struct S67 T67;
typedef struct S7 T7;
typedef struct S409 T409;
typedef struct S209 T209;
typedef struct S133 T133;
typedef struct S525 T525;
typedef struct S330 T330;
typedef struct S410 T410;
typedef struct S370 T370;
typedef struct S450 T450;
typedef struct S453 T453;
typedef struct S408 T408;
typedef struct S445 T445;
typedef struct S16 T16;
typedef struct S230 T230;
typedef struct S461 T461;
typedef struct S132 T132;
typedef struct S494 T494;
typedef struct S101 T101;
typedef struct S311 T311;
typedef struct S332 T332;
typedef struct S236 T236;
typedef struct S283 T283;
typedef struct S427 T427;
typedef struct S412 T412;
typedef struct S121 T121;
typedef struct S407 T407;
typedef struct S118 T118;
typedef struct S79 T79;
typedef struct S333 T333;
typedef struct S517 T517;
typedef struct S514 T514;
typedef struct S145 T145;
typedef struct S489 T489;
typedef struct S139 T139;
typedef struct S449 T449;
typedef struct S161 T161;
typedef struct S492 T492;
typedef struct S305 T305;
typedef struct S389 T389;
typedef struct S235 T235;
typedef struct S127 T127;
typedef struct S302 T302;
typedef struct S103 T103;
typedef struct S444 T444;
typedef struct S480 T480;
typedef struct S419 T419;
typedef struct S199 T199;
typedef struct S233 T233;
typedef struct S78 T78;
typedef struct S373 T373;
typedef struct S467 T467;
typedef struct S87 T87;
typedef struct S130 T130;
typedef struct S142 T142;
typedef struct S282 T282;
typedef struct S294 T294;
typedef struct S68 T68;
typedef struct S371 T371;
typedef struct S415 T415;
typedef struct S34 T34;
typedef struct S63 T63;

/*C Header Pass 2 :*/
typedef T0**T466;
typedef T0**T252;
typedef T0**T217;
typedef T0**T245;
typedef T0**T77;
typedef T3*T9;
typedef T0**T448;
typedef T2*T123;
typedef T0**T484;

/*C Header Pass 3 :*/
struct S461{T8 _directory_stream;T8 _current_entry;};
int se_cmpT461(T461 o1,T461 o2);

/*C Header Pass 4 :*/
struct S508{Tid id;T0* _container;T6 _after;T6 _before;T0* _current_cell;T0* _next_cursor;};
extern T508 M508;
struct S360{Tid id;};
extern T360 M360;
struct S340{Tid id;T0* _equality_tester;T2 _count;T2 _capacity;T2 _last_position;T2 _modulus;T2 _free_slot;T2 _position;T2 _slots_position;T2 _clashes_previous_position;T2 _found_position;T0* _internal_cursor;T0* _items;T0* _clashes;T0* _slots;T0* _fixed_item_array_;};
extern T340 M340;
struct S326{Tid id;T0* _item;T0* _right;};
extern T326 M326;
struct S353{Tid id;T0* _equality_tester;T0* _key_equality_tester;T2 _count;T2 _capacity;T2 _last_position;T2 _modulus;T2 _free_slot;T2 _position;T2 _slots_position;T2 _clashes_previous_position;T2 _found_position;T0* _internal_cursor;T0* _items;T0* _keys;T0* _clashes;T0* _slots;T0* _fixed_item_array_;T0* _fixed_key_array_;};
extern T353 M353;
struct S411{Tid id;T0* _parameters;};
extern T411 M411;
struct S414{Tid id;T0* _parameters;};
extern T414 M414;
struct S105{Tid id;T0* _item;T0* _right;};
extern T105 M105;
struct S157{Tid id;T0* _item;T0* _right;};
extern T157 M157;
struct S416{Tid id;T0* _event_parser_factory;};
extern T416 M416;
struct S264{Tid id;T0* _container;T2 _position;T0* _next_cursor;};
extern T264 M264;
struct S176{Tid id;T6 _push_back_flag;T0* _name;T0* _path;T8 _input_stream;T2 _memory;T3 _last_character;T6 _end_of_file;T0* _character_buffer;};
extern T176 M176;
struct S406{Tid id;T0* _variables;T0* _error_handler;};
extern T406 M406;
struct S315{Tid id;T0* _first;T0* _second;};
extern T315 M315;
struct S413{Tid id;T0* _parameters;};
extern T413 M413;
struct S372{Tid id;T0* _class_name;T0* _features;};
extern T372 M372;
struct S190{Tid id;T0* _ast_factory;T0* _error_handler;T0* _library_parser;T0* _parsed_libraries;T0* _xml_parser;T0* _xml_validator;T0* _xml_preprocessor;T0* _last_system;};
extern T190 M190;
struct S308{Tid id;T0* _container;T6 _after;T6 _before;T0* _current_cell;T0* _next_cursor;};
extern T308 M308;
struct S278{Tid id;T0* _parameters;};
extern T278 M278;
struct S215{Tid id;T217 _storage;T2 _capacity;T2 _upper;};
extern T215 M215;
struct S243{Tid id;T245 _storage;T2 _capacity;T2 _upper;};
extern T243 M243;
struct S276{Tid id;T0* _declared_address_expression;T0* _declared_arguments;T0* _declared_array_optimization;T0* _declared_assertion;T0* _declared_case_insensitive;T0* _declared_check_vape;T0* _declared_clean;T0* _declared_component;T0* _declared_console_application;T0* _declared_create_keyword_extension;T0* _declared_dead_code_removal;T0* _declared_debug_option;T0* _declared_debug_tag;T0* _declared_debugger;T0* _declared_document;T0* _declared_dynamic_runtime;T0* _declared_exception_trace;T0* _declared_finalize;T0* _declared_flat_fst_optimization;T2 _declared_fst_expansion_factor;T0* _declared_fst_optimization;T0* _declared_garbage_collector;T0* _declared_gc_info;T2 _declared_heap_size;T0* _declared_inlining;T2 _declared_inlining_size;T0* _declared_jumps_optimization;T0* _declared_layout_optimization;T0* _declared_leaves_optimization;T0* _declared_line_generation;T0* _declared_linker;T0* _declared_linux_fpu_double_precision;T0* _declared_manifest_string_trace;T0* _declared_map;T0* _declared_multithreaded;T0* _declared_no_default_lib;T0* _declared_override_cluster;T0* _declared_portable_code_generation;T0* _declared_precompiled;T0* _declared_profile;T0* _declared_reloads_optimization;T0* _declared_shared_library_definition;T0* _declared_split;T2 _declared_stack_size;T0* _declared_storable_filename;T0* _declared_strip_option;T0* _declared_target;T0* _declared_trace;T0* _declared_verbose;T0* _declared_visible_filename;T0* _declared_warning;T0* _declared_wedit;};
extern T276 M276;
struct S138{Tid id;};
extern T138 M138;
struct S479{Tid id;T123 _storage;T2 _capacity;T2 _upper;T2 _lower;};
extern T479 M479;
struct S242{Tid id;T2 _count;T2 _capacity;T0* _storage;T0* _fixed_array_;T0* _internal_cursor;};
extern T242 M242;
struct S275{Tid id;T0* _exported_classes;T0* _include_directories;T0* _link_libraries;};
extern T275 M275;
struct S384{Tid id;T0* _container;T6 _after;T6 _before;T0* _current_cell;T0* _next_cursor;};
extern T384 M384;
struct S391{Tid id;T0* _item;T0* _right;};
extern T391 M391;
struct S454{Tid id;};
extern T454 M454;
struct S43{Tid id;};
extern T43 M43;
struct S387{Tid id;T0* _item;T0* _right;};
extern T387 M387;
struct S369{Tid id;T0* _parameters;};
extern T369 M369;
struct S189{Tid id;T0* _system_name;T0* _root_class_name;T0* _creation_procedure_name;T0* _options;T0* _clusters;T0* _libraries;T0* _externals;};
extern T189 M189;
struct S211{Tid id;T0* _equality_tester;T0* _key_equality_tester;T2 _count;T2 _capacity;T2 _last_position;T2 _modulus;T2 _free_slot;T2 _position;T2 _slots_position;T2 _clashes_previous_position;T2 _found_position;T0* _internal_cursor;T0* _items;T0* _keys;T0* _clashes;T0* _slots;T0* _fixed_item_array_;T0* _fixed_key_array_;};
extern T211 M211;
struct S481{Tid id;};
extern T481 M481;
struct S229{Tid id;T0* _table;};
extern T229 M229;
struct S314{Tid id;T0* _container;T6 _after;T6 _before;T0* _current_cell;T0* _next_cursor;};
extern T314 M314;
struct S125{Tid id;};
extern T125 M125;
struct S191{Tid id;T0* _ast_factory;T0* _error_handler;T0* _library_parser;T0* _parsed_libraries;T0* _xml_parser;T0* _xml_validator;T0* _xml_preprocessor;};
extern T191 M191;
struct S92{Tid id;T0* _container;T6 _after;T6 _before;T0* _current_cell;T0* _next_cursor;};
extern T92 M92;
struct S136{Tid id;T0* _xace_filename;T0* _variables;T0* _error_handler;T0* _generators;};
extern T136 M136;
struct S495{Tid id;T0* _first;T0* _second;};
extern T495 M495;
struct S134{Tid id;T0* _output_filename;T0* _variables;T0* _error_handler;};
extern T134 M134;
struct S168{Tid id;T2 _position;T0* _container;T0* _next_cursor;};
extern T168 M168;
struct S490{Tid id;T6 _push_back_flag;T461 _basic_directory;T2 _memory;T0* _name;T3 _last_character;T6 _end_of_file;T0* _character_buffer;};
extern T490 M490;
struct S39{Tid id;T2 _item;};
extern T39 M39;
struct S486{Tid id;T2 _count;T9 _area;T0* _area_string;};
extern T486 M486;
struct S144{Tid id;T0* _first;T0* _second;};
extern T144 M144;
struct S511{Tid id;T0* _item;T0* _right;};
extern T511 M511;
struct S521{Tid id;};
extern T521 M521;
struct S352{Tid id;T3 _value;};
extern T352 M352;
struct S403{Tid id;T0* _container;T6 _after;T6 _before;T0* _current_cell;T0* _next_cursor;};
extern T403 M403;
struct S175{Tid id;T8 _item;};
extern T175 M175;
struct S331{Tid id;T0* _parameters;};
extern T331 M331;
struct S324{Tid id;T2 _count;T0* _first_cell;T0* _last_cell;T0* _internal_cursor;};
extern T324 M324;
struct S248{Tid id;T2 _count;T2 _capacity;T0* _storage;T0* _fixed_array_;T0* _internal_cursor;};
extern T248 M248;
struct S33{Tid id;T0* _container;T6 _after;T6 _before;T0* _current_cell;T0* _next_cursor;};
extern T33 M33;
struct S455{Tid id;T0* _name;T0* _path;T8 _output_stream;};
extern T455 M455;
struct S351{Tid id;T2 _position;T0* _container;T0* _next_cursor;};
extern T351 M351;
struct S304{Tid id;};
extern T304 M304;
struct S390{Tid id;T2 _count;T0* _first_cell;T0* _last_cell;T0* _internal_cursor;};
extern T390 M390;
struct S131{Tid id;T0* _output_filename;T0* _variables;T0* _error_handler;};
extern T131 M131;
struct S433{Tid id;};
extern T433 M433;
struct S303{Tid id;};
extern T303 M303;
struct S227{Tid id;T2 _position;T0* _container;T0* _next_cursor;};
extern T227 M227;
struct S250{Tid id;T252 _storage;T2 _capacity;T2 _upper;};
extern T250 M250;
struct S526{Tid id;};
extern T526 M526;
struct S519{Tid id;T0* _parent;T0* _data;};
extern T519 M519;
struct S108{Tid id;T0* _defined_values;};
extern T108 M108;
struct S137{Tid id;T0* _xace_filename;T0* _variables;T0* _error_handler;};
extern T137 M137;
struct S104{Tid id;T0* _parameters;};
extern T104 M104;
struct S496{Tid id;T2 _count;T0* _first_cell;T0* _last_cell;T0* _internal_cursor;};
extern T496 M496;
struct S335{Tid id;};
extern T335 M335;
struct S210{Tid id;T0* _name;T0* _options;T0* _clusters;T0* _libraries;T0* _externals;T0* _library_prefix;};
extern T210 M210;
struct S107{Tid id;T0* _output_filename;T0* _variables;T0* _error_handler;};
extern T107 M107;
struct S246{Tid id;};
extern T246 M246;
struct S516{Tid id;T0* _parent;T0* _content;};
extern T516 M516;
struct S160{Tid id;T0* _name;};
extern T160 M160;
struct S441{Tid id;T2 _position;T0* _container;T0* _next_cursor;};
extern T441 M441;
struct S460{Tid id;T0* _parameters;};
extern T460 M460;
struct S38{Tid id;T6 _item;};
extern T38 M38;
struct S367{Tid id;T2 _position;T0* _container;T0* _next_cursor;};
extern T367 M367;
struct S155{Tid id;T0* _equality_tester;T2 _count;T0* _first_cell;T0* _last_cell;T0* _internal_cursor;};
extern T155 M155;
struct S75{Tid id;T77 _storage;T2 _capacity;T2 _upper;};
extern T75 M75;
extern T334 M334;
struct S193{Tid id;};
extern T193 M193;
struct S67{Tid id;T0* _item;T0* _right;};
extern T67 M67;
struct S409{Tid id;T0* _parameters;};
extern T409 M409;
struct S209{Tid id;T0* _error_handler;T6 _has_error;};
extern T209 M209;
struct S133{Tid id;T0* _output_filename;T0* _variables;T0* _error_handler;};
extern T133 M133;
struct S525{Tid id;};
extern T525 M525;
struct S330{Tid id;T0* _ast_factory;T0* _error_handler;T0* _library_parser;T0* _parsed_libraries;T0* _xml_parser;T0* _xml_validator;T0* _xml_preprocessor;T0* _last_library;};
extern T330 M330;
struct S410{Tid id;T0* _parameters;};
extern T410 M410;
struct S370{Tid id;T0* _parameters;};
extern T370 M370;
struct S450{Tid id;};
extern T450 M450;
struct S7{Tid id;T9 _storage;T2 _count;T2 _capacity;};
extern T7 M7;
struct S453{Tid id;T0* _parameters;};
extern T453 M453;
struct S408{Tid id;};
extern T408 M408;
struct S445{Tid id;};
extern T445 M445;
struct S16{Tid id;T2 _next_option_position;T0* _commands;T0* _variables;T0* _error_handler;};
extern T16 M16;
struct S230{Tid id;T0* _parent;T2 _count;T0* _first_cell;T0* _last_cell;T0* _internal_cursor;T0* _namespaces;T0* _root_element;};
extern T230 M230;
extern T461 M461;
struct S132{Tid id;T0* _output_filename;T0* _variables;T0* _error_handler;};
extern T132 M132;
struct S494{Tid id;T0* _first;T0* _second;};
extern T494 M494;
struct S101{Tid id;};
extern T101 M101;
struct S311{Tid id;T0* _item;T0* _right;};
extern T311 M311;
struct S332{Tid id;T0* _parameters;};
extern T332 M332;
struct S236{Tid id;T0* _clusters;};
extern T236 M236;
struct S283{Tid id;};
extern T283 M283;
struct S427{Tid id;T0* _equality_tester;T0* _key_equality_tester;T2 _count;T2 _capacity;T2 _last_position;T2 _modulus;T2 _free_slot;T2 _position;T2 _slots_position;T2 _clashes_previous_position;T2 _found_position;T0* _internal_cursor;T0* _items;T0* _keys;T0* _clashes;T0* _slots;T0* _fixed_item_array_;T0* _fixed_key_array_;};
extern T427 M427;
struct S412{Tid id;T0* _parameters;};
extern T412 M412;
struct S121{Tid id;T123 _storage;T2 _capacity;T2 _upper;};
extern T121 M121;
struct S407{Tid id;T2 _code;};
extern T407 M407;
struct S118{Tid id;T0* _equality_tester;T0* _key_equality_tester;T2 _count;T2 _capacity;T2 _last_position;T2 _modulus;T2 _free_slot;T2 _position;T2 _slots_position;T2 _clashes_previous_position;T2 _found_position;T0* _internal_cursor;T0* _items;T0* _keys;T0* _clashes;T0* _slots;T0* _fixed_item_array_;T0* _fixed_key_array_;};
extern T118 M118;
struct S79{Tid id;T0* _xace_filename;T0* _variables;T0* _error_handler;T0* _generators;};
extern T79 M79;
struct S333{Tid id;};
extern T333 M333;
struct S517{Tid id;T0* _parent;T0* _target;T0* _data;};
extern T517 M517;
struct S514{Tid id;T0* _uri;};
extern T514 M514;
struct S145{Tid id;T0* _container;T6 _after;T6 _before;T0* _current_cell;T0* _next_cursor;};
extern T145 M145;
struct S489{Tid id;T0* _content;T2 _count;T2 _capacity;T2 _position;T2 _column;T2 _line;T2 _index;T6 _beginning_of_line;T6 _filled;T6 _interactive;T0* _file;T6 _end_of_file;};
extern T489 M489;
struct S139{Tid id;T461 _basic_directory;T0* _name;};
extern T139 M139;
struct S239{Tid id;T6 _is_abstract;T6 _is_relative;T0* _name;T0* _library_prefix;T0* _cluster_prefix;T0* _pathname;T0* _libraries;T0* _options;T0* _externals;T6 _is_mounted;T0* _parent;T0* _subclusters;};
extern T239 M239;
struct S449{Tid id;};
extern T449 M449;
struct S161{Tid id;T461 _basic_directory;T0* _name;};
extern T161 M161;
struct S492{Tid id;T0* _source;T2 _byte_index;T2 _column;T2 _row;};
extern T492 M492;
struct S305{Tid id;T0* _parent;T0* _name;T0* _ns_prefix;T0* _value;};
extern T305 M305;
struct S389{Tid id;T0* _feature_name;T0* _external_name;};
extern T389 M389;
struct S235{Tid id;T0* _libraries;};
extern T235 M235;
struct S127{Tid id;};
extern T127 M127;
struct S302{Tid id;T9 _storage;T2 _count;T2 _byte_count;T2 _byte_capacity;};
extern T302 M302;
struct S103{Tid id;T77 _storage;T2 _capacity;T2 _upper;T2 _lower;};
extern T103 M103;
struct S444{Tid id;T448 _storage;T2 _capacity;T2 _upper;};
extern T444 M444;
struct S480{Tid id;T484 _storage;T2 _capacity;T2 _upper;};
extern T480 M480;
struct S419{Tid id;T0* _event_implementation;T0* _document;T0* _last_position_table;T0* _current_node;T0* _current_open_composite;};
extern T419 M419;
struct S199{Tid id;T0* _implementation;};
extern T199 M199;
struct S233{Tid id;T0* _parent;T0* _ns_prefix;T0* _first_cell;T0* _last_cell;T0* _internal_cursor;T0* _namespaces;T0* _name;T2 _count;};
extern T233 M233;
struct S78{Tid id;T3 _item;};
extern T78 M78;
struct S373{Tid id;T2 _count;T0* _first_cell;T0* _last_cell;T0* _internal_cursor;};
extern T373 M373;
struct S467{Tid id;T2 _error_count;T0* _yyr1;T0* _yyr2;T0* _yydefact;T0* _yydefgoto;T0* _yypact;T0* _yypgoto;T0* _yytable;T0* _yycheck;T0* _yyvs;T0* _yyss;T2 _yyvsp;T2 _yyssp;T0* _yyval;T6 _yy_lookahead_needed;T2 _yyerrstatus;T0* _fixed_array_;T2 _position_nat_parser;T2 _yy_start_state;T0* _yy_content;T2 _yy_column;T2 _yy_last_accepting_state;T2 _yy_last_accepting_cpos;T0* _interface;T2 _last_token;T0* _input_buffer;T2 _line;T2 _column;T2 _yy_end;T2 _yy_start;T2 _yy_position;T2 _yy_more_len;T0* _yy_nxt;T0* _yy_chk;T0* _yy_base;T0* _yy_def;T0* _yy_ec;T0* _yy_meta;T0* _yy_accept;T0* _yy_acclist;T6 _yy_rejected;T2 _yy_state_count;T2 _yy_looking_for_trail_begin;T2 _yy_full_lp;T2 _yy_full_state;T0* _last_value;T0* _yytranslate;T2 _yy_parsing_status;T2 _yy_line;T6 _yy_more_flag;T0* _yy_state_stack;T2 _yy_full_match;T2 _yy_lp;T0* _tmp_uc_pair;T0* _source;T2 _last_error;T0* _last_error_description;};
extern T467 M467;
struct S87{Tid id;T2 _count;T0* _first_cell;T0* _last_cell;T0* _internal_cursor;};
extern T87 M87;
struct S238{Tid id;T6 _is_root;T0* _pathname;T0* _library;T0* _library_prefix;T0* _position;};
extern T238 M238;
struct S130{Tid id;};
extern T130 M130;
struct S142{Tid id;T461 _basic_directory;};
extern T142 M142;
struct S282{Tid id;};
extern T282 M282;
struct S294{Tid id;T0* _container;T2 _position;T0* _next_cursor;};
extern T294 M294;
struct S68{Tid id;T0* _program_name;};
extern T68 M68;
struct S371{Tid id;T0* _parameters;};
extern T371 M371;
struct S415{Tid id;T0* _te_ep_tree_fact;T0* _te_ef_tree_fact;};
extern T415 M415;
struct S34{Tid id;T0* _error_file;T0* _warning_file;T0* _message_file;T2 _error_count;};
extern T34 M34;
struct S63{Tid id;T2 _count;T0* _first_cell;T0* _last_cell;T0* _internal_cursor;};
extern T63 M63;
/*
-- This file is  free  software, which  comes  along  with  SmallEiffel. This
-- software  is  distributed  in the hope that it will be useful, but WITHOUT
-- ANY  WARRANTY;  without  even  the  implied warranty of MERCHANTABILITY or
-- FITNESS  FOR A PARTICULAR PURPOSE. You can modify it as you want, provided
-- this header is kept unaltered, and a notification of the changes is added.
-- You  are  allowed  to  redistribute  it and sell it, alone or as a part of
-- another product.
--       Copyright (C) 1994-2002 LORIA - INRIA - U.H.P. Nancy 1 - FRANCE
--          Dominique COLNET and Suzanne COLLIN - SmallEiffel@loria.fr
--                       http://SmallEiffel.loria.fr
--
*/

/*
  This file (SmallEiffel/sys/runtime/boost.h) is automatically included when
  `run_control.boost' is true (ie. only for mode -boost).
*/
#define SE_BOOST 1
void se_print_run_time_stack (void);
void se_signal_handler(int sig);
/*
-- This file is  free  software, which  comes  along  with  SmallEiffel. This
-- software  is  distributed  in the hope that it will be useful, but WITHOUT
-- ANY  WARRANTY;  without  even  the  implied warranty of MERCHANTABILITY or
-- FITNESS  FOR A PARTICULAR PURPOSE. You can modify it as you want, provided
-- this header is kept unaltered, and a notification of the changes is added.
-- You  are  allowed  to  redistribute  it and sell it, alone or as a part of
-- another product.
--       Copyright (C) 1994-2002 LORIA - INRIA - U.H.P. Nancy 1 - FRANCE
--          Dominique COLNET and Suzanne COLLIN - SmallEiffel@loria.fr
--                       http://SmallEiffel.loria.fr
--
*/
/*
  This file (SmallEiffel/sys/runtime/exception.h) is automatically included
  when exception handling is used somewhere in the live code.
*/

#define SE_EXCEPTIONS 1

/*
  Constants from Eiffel class EXCEPTIONS :
*/
#define Check_instruction 	  1
#define Class_invariant 	  2
#define Developer_exception 	  3
#define Incorrect_inspect_value   4
#define Loop_invariant 		  5
#define Loop_variant 		  6
#define No_more_memory  	  7
#define Postcondition 		  8
#define Precondition  		  9
#define Routine_failure  	  10
#define	Os_signal		  11
#define Void_attached_to_expanded 12
#define Void_call_target 	  13
#define System_level_type_error	  14

/*
   This will be the structure of rescue contexts.  A rescue context
   will be declared for every routine that has a rescue clause.

   The `next' pointer is the address of the next rescue context if there
   is one higher up the call chain, or NULL if there is no other
   context.
*/
struct rescue_context {
  JMP_BUF jb;
#ifdef SE_NO_CHECK
  /* To keep track of dump stack to unwind it safely
     before the LONGJMP :
  */
  struct _se_dump_stack * top_of_ds ;
#endif
  struct rescue_context *next;
};

extern struct rescue_context *rescue_context_top;
extern int internal_exception_number;
extern int original_internal_exception_number;
extern int signal_exception_number;
extern char *additional_error_message;

void setup_signal_handler(void);
void signal_exception_handler(int);
void internal_exception_handler(int);
void print_exception(void);
/*
-- This file is  free  software, which  comes  along  with  SmallEiffel. This
-- software  is  distributed  in the hope that it will be useful, but WITHOUT
-- ANY  WARRANTY;  without  even  the  implied warranty of MERCHANTABILITY or
-- FITNESS  FOR A PARTICULAR PURPOSE. You can modify it as you want, provided
-- this header is kept unaltered, and a notification of the changes is added.
-- You  are  allowed  to  redistribute  it and sell it, alone or as a part of
-- another product.
--       Copyright (C) 1994-2002 LORIA - INRIA - U.H.P. Nancy 1 - FRANCE
--          Dominique COLNET and Suzanne COLLIN - SmallEiffel@loria.fr
--                       http://SmallEiffel.loria.fr
--
*/
/*
  This file (SmallEiffel/sys/runtime/basic_directory.h) is automatically
  included when some external "SmallEiffel" feature of class BASIC_DIRECTORY
  is live.
*/
#ifndef WIN32
#include <dirent.h>
#endif
#ifndef WIN32
#include <unistd.h>
#endif

EIF_POINTER basic_directory_open(EIF_POINTER path);
EIF_POINTER basic_directory_read_entry(EIF_POINTER dirstream);
EIF_POINTER basic_directory_get_entry_name(EIF_POINTER entry);
EIF_BOOLEAN basic_directory_close(EIF_POINTER dirstream);
#define basic_directory_current_working_directory (basic_directory_cwd())
EIF_POINTER basic_directory_cwd(void);
EIF_BOOLEAN basic_directory_chdir(EIF_POINTER destination);
EIF_BOOLEAN basic_directory_mkdir(EIF_POINTER directory_path);
EIF_BOOLEAN basic_directory_rmdir(EIF_POINTER directory_path);
/*
-- This file is  free  software, which  comes  along  with  SmallEiffel. This
-- software  is  distributed  in the hope that it will be useful, but WITHOUT
-- ANY  WARRANTY;  without  even  the  implied warranty of MERCHANTABILITY or
-- FITNESS  FOR A PARTICULAR PURPOSE. You can modify it as you want, provided
-- this header is kept unaltered, and a notification of the changes is added.
-- You  are  allowed  to  redistribute  it and sell it, alone or as a part of
-- another product.
--       Copyright (C) 1994-2002 LORIA - INRIA - U.H.P. Nancy 1 - FRANCE
--          Dominique COLNET and Suzanne COLLIN - SmallEiffel@loria.fr
--                       http://SmallEiffel.loria.fr
--
*/
/*
  This file (SmallEiffel/sys/runtime/basic_io.h) is automatically
  included when some external "SmallEiffel" basic_io_* feature is used.
*/

#define basic_io_stdin (stdin)
#define basic_io_stdout (stdout)
#define basic_io_stderr (stderr)
#define basic_io_eof (EOF)
#define basic_io_text_file_read_open(p) (fopen(((char*)(p)),"r"))
#define basic_io_text_file_write_open(p) (fopen(((char*)(p)),"w"))
#define basic_io_text_file_write_append(p) (fopen(((char*)(p)),"a"))
#define basic_io_text_file_read_write_open(p) (fopen(((char*)(p)),"r+"))
#define basic_io_text_file_read_write_append(p) (fopen(((char*)(p)),"a+"))
#define basic_io_binary_file_read_open(p) (fopen(((char*)(p)),"rb"))
#define basic_io_binary_file_write_open(p) (fopen(((char*)(p)),"wb"))
#define basic_io_binary_file_write_append(p) (fopen(((char*)(p)),"ab"))
#define basic_io_fclose(p) (fclose((FILE*)(p)))
#define basic_io_flush(p) (fflush((FILE*)(p)))
#define basic_io_getc(f) (getc(((FILE*)(f))))
#define basic_io_putc(b, f) (putc((b),((FILE*)(f))))
#define basic_io_feof(f) (feof(((FILE*)(f))))
#define basic_io_rename(o, n) (rename(((char*)(o)),((char*)(n))))
#define basic_io_remove(f) (remove(((char*)(f))))
/*
-- This file is  free  software, which  comes  along  with  SmallEiffel. This
-- software  is  distributed  in the hope that it will be useful, but WITHOUT
-- ANY  WARRANTY;  without  even  the  implied warranty of MERCHANTABILITY or
-- FITNESS  FOR A PARTICULAR PURPOSE. You can modify it as you want, provided
-- this header is kept unaltered, and a notification of the changes is added.
-- You  are  allowed  to  redistribute  it and sell it, alone or as a part of
-- another product.
--       Copyright (C) 1994-2002 LORIA - INRIA - U.H.P. Nancy 1 - FRANCE
--          Dominique COLNET and Suzanne COLLIN - SmallEiffel@loria.fr
--                       http://SmallEiffel.loria.fr
--
*/
/*
  This file (SmallEiffel/sys/runtime/basic_getenv.h) is automatically
  included when the GENERAL.basic_getenv feature is used (ie. in live code).
*/

#define basic_getenv(v) (getenv((char*)v))
T6 r8is_null(T8 C);
extern T0*oBC8string_buffer;
void r8append_in(T8 C,T0* a1);
T6 r6_ix_not(T6 C);
T6 r6_px_or(T6 C,T6 a1);
T6 r6_px_and(T6 C,T6 a1);
T6 r3_px_6061(T3 C,T3 a1);
T6 r3is_digit(T3 C);
T6 r3is_separator(T3 C);
T6 r3_px_6261(T3 C,T3 a1);
T2 r3value(T3 C);
T6 r3_px_60(T3 C,T3 a1);
T2 r3decimal_value(T3 C);
T3 r3to_lower(T3 C);
T0* r2out(T2 C);
T3 r2digit(T2 C);
void r2append_in(T2 C,T0* a1);
extern T0*oBC1tagged_out_memory;
void r252clear_all(T252 C,T2 a1);
T252 r252realloc(T252 C,T2 a1,T2 a2);
void r252set_all_with(T252 C,T0* a1,T2 a2);
T6 r252fast_memcmp(T252 C,T252 a1,T2 a2);
void r252clear(T252 C,T2 a1,T2 a2);
void r252copy_from(T252 C,T252 a1,T2 a2);
void r217clear_all(T217 C,T2 a1);
T217 r217realloc(T217 C,T2 a1,T2 a2);
void r217set_all_with(T217 C,T0* a1,T2 a2);
T6 r217fast_memcmp(T217 C,T217 a1,T2 a2);
void r217clear(T217 C,T2 a1,T2 a2);
void r217copy_from(T217 C,T217 a1,T2 a2);
void r245clear_all(T245 C,T2 a1);
T245 r245realloc(T245 C,T2 a1,T2 a2);
void r245set_all_with(T245 C,T0* a1,T2 a2);
T6 r245fast_memcmp(T245 C,T245 a1,T2 a2);
void r245clear(T245 C,T2 a1,T2 a2);
void r245copy_from(T245 C,T245 a1,T2 a2);
void r77clear_all(T77 C,T2 a1);
T77 r77realloc(T77 C,T2 a1,T2 a2);
T6 r77fast_memcmp(T77 C,T77 a1,T2 a2);
void r77set_all_with(T77 C,T0* a1,T2 a2);
void r77clear(T77 C,T2 a1,T2 a2);
void r77copy_from(T77 C,T77 a1,T2 a2);
void r9copy_slice(T9 C,T2 a1,T9 a2,T2 a3,T2 a4);
T9 r9realloc(T9 C,T2 a1,T2 a2);
void r9set_all_with(T9 C,T3 a1,T2 a2);
T6 r9fast_memcmp(T9 C,T9 a1,T2 a2);
void r9copy_at(T9 C,T2 a1,T9 a2,T2 a3);
void r9clear(T9 C,T2 a1,T2 a2);
void r9copy_from(T9 C,T9 a1,T2 a2);
void r448clear_all(T448 C,T2 a1);
T448 r448realloc(T448 C,T2 a1,T2 a2);
void r448set_all_with(T448 C,T0* a1,T2 a2);
T6 r448fast_memcmp(T448 C,T448 a1,T2 a2);
void r448clear(T448 C,T2 a1,T2 a2);
void r448copy_from(T448 C,T448 a1,T2 a2);
void r123clear_all(T123 C,T2 a1);
T123 r123realloc(T123 C,T2 a1,T2 a2);
void r123set_all_with(T123 C,T2 a1,T2 a2);
T6 r123fast_memcmp(T123 C,T123 a1,T2 a2);
void r123clear(T123 C,T2 a1,T2 a2);
void r123copy_from(T123 C,T123 a1,T2 a2);
void r484clear_all(T484 C,T2 a1);
T484 r484realloc(T484 C,T2 a1,T2 a2);
T6 r484fast_memcmp(T484 C,T484 a1,T2 a2);
void r484set_all_with(T484 C,T0* a1,T2 a2);
void r484clear(T484 C,T2 a1,T2 a2);
void r484copy_from(T484 C,T484 a1,T2 a2);
void r7copy(T7* C,T0* a1);
T0* r7substring(T7* C,T2 a1,T2 a2);
T2 r7item_code(T7* C,T2 a1);
T6 r7is_equal(T7* C,T0* a1);
T3 r7item(T7* C,T2 a1);
void r7append(T7* C,T0* a1);
T6 r7se_assigned_from(T0* a1);
T2 r7index_of(T7* C,T3 a1,T2 a2);
T6 r7same_type(T7* C,T0* a1);
void r7remove_tail(T7* C,T2 a1);
T6 r7is_integer(T7* C);
void r7make(T7* C,T2 a1);
void r7append_string(T7* C,T0* a1);
void r7make_filled(T7* C,T3 a1,T2 a2);
T0* r7_px_43(T7* C,T0* a1);
void r7extend(T7* C,T3 a1);
T2 r7hash_code(T7* C);
T6 r7conforms_to(T7* C,T0* a1);
T2 r7to_integer(T7* C);
void r7append_character(T7* C,T3 a1);
void r7resize(T7* C,T2 a1);
void r7from_external_copy(T7* C,T8 a1);
T8 r7to_external(T7* C);
T0* r7twin(T7* C);
void r7swap(T7* C,T2 a1,T2 a2);
void r215copy(T215* C,T0* a1);
T6 r215is_equal(T215* C,T0* a1);
T6 r215se_assigned_from(T0* a1);
void r215make(T215* C,T2 a1);
T6 r215conforms_to(T215* C,T0* a1);
void r215resize(T215* C,T2 a1);
T0* r215twin(T215* C);
void r243copy(T243* C,T0* a1);
T6 r243is_equal(T243* C,T0* a1);
T6 r243se_assigned_from(T0* a1);
void r243make(T243* C,T2 a1);
T6 r243conforms_to(T243* C,T0* a1);
void r243resize(T243* C,T2 a1);
T0* r243twin(T243* C);
void r479copy(T479* C,T0* a1);
T2 r479count(T479* C);
T6 r479is_equal(T479* C,T0* a1);
T2 r479item(T479* C,T2 a1);
T6 r479se_assigned_from(T0* a1);
T6 r479conforms_to(T479* C,T0* a1);
T0* r479twin(T479* C);
void r250copy(T250* C,T0* a1);
T6 r250is_equal(T250* C,T0* a1);
T6 r250se_assigned_from(T0* a1);
void r250make(T250* C,T2 a1);
T6 r250conforms_to(T250* C,T0* a1);
void r250resize(T250* C,T2 a1);
T0* r250twin(T250* C);
void r75copy(T75* C,T0* a1);
T2 r75count(T75* C);
T6 r75is_equal(T75* C,T0* a1);
T0* r75item(T75* C,T2 a1);
T6 r75se_assigned_from(T0* a1);
void r75make(T75* C,T2 a1);
T6 r75conforms_to(T75* C,T0* a1);
void r75resize(T75* C,T2 a1);
T0* r75twin(T75* C);
void r121copy(T121* C,T0* a1);
T6 r121is_equal(T121* C,T0* a1);
T6 r121se_assigned_from(T0* a1);
void r121make(T121* C,T2 a1);
T6 r121conforms_to(T121* C,T0* a1);
void r121resize(T121* C,T2 a1);
T0* r121twin(T121* C);
void r121with_capacity(T121* C,T2 a1);
void r121from_collection(T121* C,T0* a1);
void r103copy(T103* C,T0* a1);
T2 r103count(T103* C);
T6 r103is_equal(T103* C,T0* a1);
T0* r103item(T103* C,T2 a1);
T6 r103valid_index(T103* C,T2 a1);
T6 r103se_assigned_from(T0* a1);
void r103make(T103* C,T2 a1,T2 a2);
T6 r103conforms_to(T103* C,T0* a1);
T0* r103twin(T103* C);
void r444copy(T444* C,T0* a1);
T6 r444is_equal(T444* C,T0* a1);
T6 r444se_assigned_from(T0* a1);
void r444make(T444* C,T2 a1);
T6 r444conforms_to(T444* C,T0* a1);
void r444resize(T444* C,T2 a1);
T0* r444twin(T444* C);
void r480copy(T480* C,T0* a1);
T2 r480count(T480* C);
T6 r480is_equal(T480* C,T0* a1);
T0* r480item(T480* C,T2 a1);
T6 r480se_assigned_from(T0* a1);
void r480make(T480* C,T2 a1);
T6 r480conforms_to(T480* C,T0* a1);
void r480resize(T480* C,T2 a1);
T0* r480twin(T480* C);
void r508copy(T508* C,T0* a1);
void r508set(T508* C,T0* a1,T6 a2,T6 a3);
T6 r508is_equal(T508* C,T0* a1);
T6 r508same_position(T508* C,T0* a1);
T6 r508se_assigned_from(T0* a1);
T6 r508same_type(T508* C,T0* a1);
void r508make(T508* C,T0* a1);
T6 r508conforms_to(T508* C,T0* a1);
void r508set_after(T508* C);
T0* r508twin(T508* C);
T6 r360is_equal(T360* C,T0* a1);
T6 r360se_assigned_from(T0* a1);
T6 r360conforms_to(T360* C,T0* a1);
T0* r360twin(T360* C);
T2 r340new_capacity(T2 a1);
void r340copy(T340* C,T0* a1);
void r340make_equal(T340* C,T2 a1);
void r340make_clashes(T340* C,T2 a1);
T0* r340cursor_item(T340* C,T0* a1);
void r340search_position(T340* C,T0* a1);
T6 r340is_equal(T340* C,T0* a1);
void r340remove_traversing_cursor(T340* C,T0* a1);
void r340clone_slots(T340* C);
T0* r340items_item(T340* C,T2 a1);
void r340clone_clashes(T340* C);
void r340move_all_cursors_after(T340* C);
void r340make_items(T340* C,T2 a1);
void r340add_traversing_cursor(T340* C,T0* a1);
T6 r340se_assigned_from(T0* a1);
T0* r340clone(T0* a1);
T6 r340same_type(T340* C,T0* a1);
void r340put_new(T340* C,T0* a1);
void r340slots_wipe_out(T340* C);
void r340make(T340* C,T2 a1);
void r340clashes_wipe_out(T340* C);
T6 r340equal(T0* a1,T0* a2);
void r340clone_items(T340* C);
T6 r340same_equality_tester(T340* C,T0* a1);
T6 r340cursor_after(T0* a1);
T6 r340conforms_to(T340* C,T0* a1);
T6 r340has(T340* C,T0* a1);
T2 r340hash_position(T340* C,T0* a1);
void r340cursor_forth(T340* C,T0* a1);
extern T0*oBC112fixed_integer_array_;
void r340items_resize(T340* C,T2 a1);
void r340resize(T340* C,T2 a1);
T6 r340cursor_same_position(T0* a1,T0* a2);
void r340cursor_start(T340* C,T0* a1);
void r340clashes_resize(T340* C,T2 a1);
void r340slots_resize(T340* C,T2 a1);
T0* r340twin(T340* C);
void r340force_last(T340* C,T0* a1);
T0* r340new_cursor(T340* C);
void r340make_slots(T340* C,T2 a1);
void r340put_last(T340* C,T0* a1);
void r340move_all_cursors(T340* C,T2 a1,T2 a2);
T2 r340new_modulus(T2 a1);
T6 r340cursor_off(T0* a1);
void r340items_put(T340* C,T0* a1,T2 a2);
void r340compress(T340* C);
T6 r326is_equal(T326* C,T0* a1);
T6 r326se_assigned_from(T0* a1);
T6 r326conforms_to(T326* C,T0* a1);
T0* r326twin(T326* C);
void r353copy(T353* C,T0* a1);
void r353make_equal(T353* C,T2 a1);
T0* r353keys_item(T353* C,T2 a1);
void r353make_clashes(T353* C,T2 a1);
void r353search_position(T353* C,T0* a1);
T6 r353is_equal(T353* C,T0* a1);
void r353remove_traversing_cursor(T353* C,T0* a1);
void r353clone_slots(T353* C);
T2 r353item(T353* C,T0* a1);
void r353clone_clashes(T353* C);
void r353move_all_cursors_after(T353* C);
void r353make_items(T353* C,T2 a1);
void r353add_traversing_cursor(T353* C,T0* a1);
T6 r353se_assigned_from(T0* a1);
T0* r353clone(T0* a1);
T6 r353same_type(T353* C,T0* a1);
void r353put_new(T353* C,T2 a1,T0* a2);
void r353clone_items(T353* C);
T6 r353conforms_to(T353* C,T0* a1);
T6 r353has(T353* C,T0* a1);
void r353make_keys(T353* C,T2 a1);
T2 r353hash_position(T353* C,T0* a1);
void r353clone_keys(T353* C);
T2 r353found_item(T353* C);
void r353make_with_equality_testers(T353* C,T2 a1,T0* a2,T0* a3);
T6 r353cursor_same_position(T0* a1,T0* a2);
T6 r353found(T353* C);
void r353search(T353* C,T0* a1);
T0* r353twin(T353* C);
T0* r353new_cursor(T353* C);
void r353make_slots(T353* C,T2 a1);
void r353keys_put(T353* C,T0* a1,T2 a2);
T2 r353new_modulus(T2 a1);
T6 r353cursor_off(T0* a1);
T6 r105is_equal(T105* C,T0* a1);
T6 r105se_assigned_from(T0* a1);
T6 r105conforms_to(T105* C,T0* a1);
T0* r105twin(T105* C);
T6 r157is_equal(T157* C,T0* a1);
T6 r157se_assigned_from(T0* a1);
T6 r157conforms_to(T157* C,T0* a1);
T0* r157twin(T157* C);
void r264copy(T264* C,T0* a1);
T6 r264is_equal(T264* C,T0* a1);
T6 r264same_position(T264* C,T0* a1);
T6 r264se_assigned_from(T0* a1);
T6 r264same_type(T264* C,T0* a1);
T6 r264off(T264* C);
T6 r264conforms_to(T264* C,T0* a1);
T0* r264twin(T264* C);
T6 r315is_equal(T315* C,T0* a1);
T6 r315se_assigned_from(T0* a1);
void r315make(T315* C,T0* a1,T0* a2);
T6 r315conforms_to(T315* C,T0* a1);
T0* r315twin(T315* C);
void r308copy(T308* C,T0* a1);
void r308set(T308* C,T0* a1,T6 a2,T6 a3);
T6 r308is_equal(T308* C,T0* a1);
T6 r308same_position(T308* C,T0* a1);
T6 r308se_assigned_from(T0* a1);
T6 r308is_first(T308* C);
T6 r308is_last(T308* C);
T6 r308same_type(T308* C,T0* a1);
void r308make(T308* C,T0* a1);
void r308forth(T308* C);
T6 r308conforms_to(T308* C,T0* a1);
void r308start(T308* C);
void r308go_after(T308* C);
void r308set_after(T308* C);
T0* r308twin(T308* C);
T2 r242new_capacity(T2 a1);
void r242copy(T242* C,T0* a1);
T6 r242extendible(T242* C,T2 a1);
T6 r242is_equal(T242* C,T0* a1);
void r242remove_traversing_cursor(T242* C,T0* a1);
void r242move_all_cursors_after(T242* C);
void r242add_traversing_cursor(T242* C,T0* a1);
T6 r242se_assigned_from(T0* a1);
T0* r242clone(T0* a1);
T6 r242cursor_before(T0* a1);
T6 r242same_type(T242* C,T0* a1);
void r242make(T242* C,T2 a1);
T6 r242cursor_after(T0* a1);
T6 r242conforms_to(T242* C,T0* a1);
void r242resize(T242* C,T2 a1);
T6 r242cursor_same_position(T0* a1,T0* a2);
T0* r242twin(T242* C);
void r242force_last(T242* C,T0* a1);
T0* r242new_cursor(T242* C);
void r242put_last(T242* C,T0* a1);
T6 r242cursor_off(T0* a1);
void r384copy(T384* C,T0* a1);
void r384set(T384* C,T0* a1,T6 a2,T6 a3);
T6 r384is_equal(T384* C,T0* a1);
T6 r384same_position(T384* C,T0* a1);
T6 r384se_assigned_from(T0* a1);
T6 r384same_type(T384* C,T0* a1);
void r384make(T384* C,T0* a1);
T6 r384conforms_to(T384* C,T0* a1);
void r384set_after(T384* C);
T0* r384twin(T384* C);
T6 r391is_equal(T391* C,T0* a1);
T6 r391se_assigned_from(T0* a1);
T6 r391conforms_to(T391* C,T0* a1);
T0* r391twin(T391* C);
T6 r387is_equal(T387* C,T0* a1);
T6 r387se_assigned_from(T0* a1);
T6 r387conforms_to(T387* C,T0* a1);
T0* r387twin(T387* C);
T2 r211new_capacity(T2 a1);
void r211copy(T211* C,T0* a1);
void r211wipe_out(T211* C);
T0* r211keys_item(T211* C,T2 a1);
void r211make_clashes(T211* C,T2 a1);
void r211search_position(T211* C,T0* a1);
T6 r211is_equal(T211* C,T0* a1);
void r211remove_traversing_cursor(T211* C,T0* a1);
void r211clone_slots(T211* C);
void r211keys_resize(T211* C,T2 a1);
T0* r211item(T211* C,T0* a1);
void r211clone_clashes(T211* C);
void r211make_items(T211* C,T2 a1);
void r211move_all_cursors_after(T211* C);
void r211add_traversing_cursor(T211* C,T0* a1);
T6 r211se_assigned_from(T0* a1);
T0* r211clone(T0* a1);
T6 r211same_type(T211* C,T0* a1);
void r211slots_wipe_out(T211* C);
void r211make(T211* C,T2 a1);
void r211clashes_wipe_out(T211* C);
void r211clone_items(T211* C);
T6 r211conforms_to(T211* C,T0* a1);
T6 r211has(T211* C,T0* a1);
void r211make_keys(T211* C,T2 a1);
void r211force_new(T211* C,T0* a1,T0* a2);
T2 r211hash_position(T211* C,T0* a1);
void r211items_wipe_out(T211* C);
void r211items_resize(T211* C,T2 a1);
void r211clone_keys(T211* C);
void r211make_with_equality_testers(T211* C,T2 a1,T0* a2,T0* a3);
void r211resize(T211* C,T2 a1);
T0* r211found_item(T211* C);
T6 r211cursor_same_position(T0* a1,T0* a2);
T6 r211found(T211* C);
void r211search(T211* C,T0* a1);
void r211clashes_resize(T211* C,T2 a1);
void r211slots_resize(T211* C,T2 a1);
T0* r211twin(T211* C);
void r211keys_wipe_out(T211* C);
T0* r211new_cursor(T211* C);
void r211make_slots(T211* C,T2 a1);
void r211keys_put(T211* C,T0* a1,T2 a2);
T2 r211new_modulus(T2 a1);
T6 r211cursor_off(T0* a1);
void r481clear_all(T0* a1);
T6 r481is_equal(T481* C,T0* a1);
T6 r481se_assigned_from(T0* a1);
T0* r481make(T2 a1);
T6 r481conforms_to(T481* C,T0* a1);
T0* r481resize(T0* a1,T2 a2);
T0* r481twin(T481* C);
void r314copy(T314* C,T0* a1);
void r314set(T314* C,T0* a1,T6 a2,T6 a3);
T6 r314is_equal(T314* C,T0* a1);
T6 r314same_position(T314* C,T0* a1);
T6 r314se_assigned_from(T0* a1);
T6 r314same_type(T314* C,T0* a1);
void r314make(T314* C,T0* a1);
T6 r314conforms_to(T314* C,T0* a1);
void r314set_after(T314* C);
T0* r314twin(T314* C);
T6 r125is_equal(T125* C,T0* a1);
T6 r125se_assigned_from(T0* a1);
T0* r125to_fixed_array(T0* a1);
T0* r125make(T2 a1);
T0* r125make_from_array(T0* a1);
T6 r125conforms_to(T125* C,T0* a1);
T0* r125resize(T0* a1,T2 a2);
T0* r125twin(T125* C);
void r92copy(T92* C,T0* a1);
void r92set(T92* C,T0* a1,T6 a2,T6 a3);
T6 r92is_equal(T92* C,T0* a1);
T6 r92same_position(T92* C,T0* a1);
T6 r92se_assigned_from(T0* a1);
T6 r92same_type(T92* C,T0* a1);
void r92make(T92* C,T0* a1);
T6 r92conforms_to(T92* C,T0* a1);
void r92set_after(T92* C);
T0* r92twin(T92* C);
T6 r495is_equal(T495* C,T0* a1);
T6 r495se_assigned_from(T0* a1);
void r495make(T495* C,T0* a1,T0* a2);
T6 r495conforms_to(T495* C,T0* a1);
T0* r495twin(T495* C);
void r168copy(T168* C,T0* a1);
T6 r168is_equal(T168* C,T0* a1);
T0* r168item(T168* C);
T6 r168same_position(T168* C,T0* a1);
T6 r168se_assigned_from(T0* a1);
T6 r168after(T168* C);
T6 r168same_type(T168* C,T0* a1);
void r168make(T168* C,T0* a1);
void r168forth(T168* C);
T6 r168off(T168* C);
T6 r168conforms_to(T168* C,T0* a1);
void r168start(T168* C);
T0* r168twin(T168* C);
T6 r144is_equal(T144* C,T0* a1);
T6 r144se_assigned_from(T0* a1);
void r144make(T144* C,T0* a1,T0* a2);
T6 r144conforms_to(T144* C,T0* a1);
T0* r144twin(T144* C);
T6 r511is_equal(T511* C,T0* a1);
T6 r511se_assigned_from(T0* a1);
T6 r511conforms_to(T511* C,T0* a1);
T0* r511twin(T511* C);
void r403copy(T403* C,T0* a1);
void r403set(T403* C,T0* a1,T6 a2,T6 a3);
T6 r403is_equal(T403* C,T0* a1);
T6 r403same_position(T403* C,T0* a1);
T6 r403se_assigned_from(T0* a1);
T6 r403is_last(T403* C);
T6 r403same_type(T403* C,T0* a1);
void r403make(T403* C,T0* a1);
T6 r403conforms_to(T403* C,T0* a1);
void r403set_after(T403* C);
T0* r403twin(T403* C);
void r324copy(T324* C,T0* a1);
T6 r324is_equal(T324* C,T0* a1);
void r324remove_traversing_cursor(T324* C,T0* a1);
void r324move_all_cursors_after(T324* C);
void r324add_traversing_cursor(T324* C,T0* a1);
T6 r324se_assigned_from(T0* a1);
T6 r324same_type(T324* C,T0* a1);
void r324make(T324* C);
T6 r324conforms_to(T324* C,T0* a1);
void r324cursor_forth(T324* C,T0* a1);
void r324cursor_start(T324* C,T0* a1);
T0* r324twin(T324* C);
T0* r324new_cursor(T324* C);
void r324put_last(T324* C,T0* a1);
T6 r324cursor_off(T0* a1);
T2 r248new_capacity(T2 a1);
void r248copy(T248* C,T0* a1);
T6 r248extendible(T248* C,T2 a1);
T6 r248is_equal(T248* C,T0* a1);
void r248remove_traversing_cursor(T248* C,T0* a1);
void r248move_all_cursors_after(T248* C);
void r248add_traversing_cursor(T248* C,T0* a1);
T6 r248se_assigned_from(T0* a1);
T0* r248clone(T0* a1);
T6 r248cursor_before(T0* a1);
T6 r248same_type(T248* C,T0* a1);
void r248make(T248* C,T2 a1);
T6 r248cursor_after(T0* a1);
T6 r248conforms_to(T248* C,T0* a1);
void r248resize(T248* C,T2 a1);
T6 r248cursor_same_position(T0* a1,T0* a2);
T0* r248twin(T248* C);
void r248force_last(T248* C,T0* a1);
T0* r248new_cursor(T248* C);
T6 r248cursor_off(T0* a1);
void r33copy(T33* C,T0* a1);
void r33set(T33* C,T0* a1,T6 a2,T6 a3);
T6 r33is_equal(T33* C,T0* a1);
T6 r33same_position(T33* C,T0* a1);
T6 r33se_assigned_from(T0* a1);
T6 r33same_type(T33* C,T0* a1);
void r33make(T33* C,T0* a1);
T6 r33conforms_to(T33* C,T0* a1);
void r33set_after(T33* C);
T0* r33twin(T33* C);
void r351copy(T351* C,T0* a1);
T6 r351is_equal(T351* C,T0* a1);
T0* r351item(T351* C);
T6 r351same_position(T351* C,T0* a1);
T6 r351se_assigned_from(T0* a1);
T6 r351after(T351* C);
T6 r351same_type(T351* C,T0* a1);
void r351make(T351* C,T0* a1);
T6 r351off(T351* C);
T6 r351conforms_to(T351* C,T0* a1);
T0* r351twin(T351* C);
void r390copy(T390* C,T0* a1);
T6 r390cursor_is_last(T390* C,T0* a1);
T6 r390is_equal(T390* C,T0* a1);
void r390remove_traversing_cursor(T390* C,T0* a1);
void r390move_all_cursors_after(T390* C);
void r390add_traversing_cursor(T390* C,T0* a1);
T6 r390se_assigned_from(T0* a1);
T6 r390same_type(T390* C,T0* a1);
void r390make(T390* C);
T6 r390conforms_to(T390* C,T0* a1);
void r390cursor_forth(T390* C,T0* a1);
void r390cursor_start(T390* C,T0* a1);
T0* r390twin(T390* C);
void r390force_last(T390* C,T0* a1);
T0* r390new_cursor(T390* C);
T6 r390cursor_off(T0* a1);
T6 r433is_equal(T433* C,T0* a1);
T6 r433se_assigned_from(T0* a1);
T6 r433conforms_to(T433* C,T0* a1);
T6 r433test(T0* a1,T0* a2);
T0* r433twin(T433* C);
void r227copy(T227* C,T0* a1);
T6 r227is_equal(T227* C,T0* a1);
T6 r227same_position(T227* C,T0* a1);
T6 r227se_assigned_from(T0* a1);
T6 r227same_type(T227* C,T0* a1);
void r227make(T227* C,T0* a1);
T6 r227off(T227* C);
T6 r227conforms_to(T227* C,T0* a1);
T0* r227twin(T227* C);
void r496copy(T496* C,T0* a1);
T0* r496cursor_item(T0* a1);
T6 r496is_equal(T496* C,T0* a1);
void r496remove_traversing_cursor(T496* C,T0* a1);
void r496move_all_cursors_after(T496* C);
void r496add_traversing_cursor(T496* C,T0* a1);
T6 r496se_assigned_from(T0* a1);
T6 r496cursor_before(T0* a1);
T6 r496same_type(T496* C,T0* a1);
void r496make(T496* C);
T6 r496cursor_after(T0* a1);
T6 r496conforms_to(T496* C,T0* a1);
void r496cursor_forth(T496* C,T0* a1);
void r496cursor_start(T496* C,T0* a1);
T0* r496twin(T496* C);
T0* r496new_cursor(T496* C);
void r496put_last(T496* C,T0* a1);
T6 r496cursor_off(T0* a1);
T6 r335is_equal(T335* C,T0* a1);
T6 r335se_assigned_from(T0* a1);
T0* r335make(T2 a1);
T6 r335conforms_to(T335* C,T0* a1);
T0* r335resize(T0* a1,T2 a2);
T0* r335twin(T335* C);
T6 r246is_equal(T246* C,T0* a1);
T6 r246se_assigned_from(T0* a1);
T0* r246make(T2 a1);
T6 r246conforms_to(T246* C,T0* a1);
T0* r246resize(T0* a1,T2 a2);
T0* r246twin(T246* C);
void r441copy(T441* C,T0* a1);
T6 r441is_equal(T441* C,T0* a1);
T0* r441item(T441* C);
T6 r441same_position(T441* C,T0* a1);
T6 r441se_assigned_from(T0* a1);
T6 r441after(T441* C);
T6 r441same_type(T441* C,T0* a1);
void r441make(T441* C,T0* a1);
T6 r441off(T441* C);
T6 r441conforms_to(T441* C,T0* a1);
T0* r441twin(T441* C);
void r367copy(T367* C,T0* a1);
T6 r367is_equal(T367* C,T0* a1);
T6 r367same_position(T367* C,T0* a1);
T6 r367se_assigned_from(T0* a1);
T6 r367same_type(T367* C,T0* a1);
void r367make(T367* C,T0* a1);
T6 r367off(T367* C);
T6 r367conforms_to(T367* C,T0* a1);
T0* r367twin(T367* C);
void r155copy(T155* C,T0* a1);
void r155append_last(T155* C,T0* a1);
T0* r155cursor_item(T0* a1);
T6 r155cursor_is_last(T155* C,T0* a1);
T6 r155is_equal(T155* C,T0* a1);
void r155remove_traversing_cursor(T155* C,T0* a1);
void r155move_all_cursors_after(T155* C);
void r155add_traversing_cursor(T155* C,T0* a1);
T6 r155se_assigned_from(T0* a1);
T6 r155same_type(T155* C,T0* a1);
void r155make(T155* C);
T6 r155cursor_after(T0* a1);
T6 r155conforms_to(T155* C,T0* a1);
void r155cursor_forth(T155* C,T0* a1);
void r155make_from_linear(T155* C,T0* a1);
void r155cursor_start(T155* C,T0* a1);
T0* r155twin(T155* C);
void r155force_last(T155* C,T0* a1);
T0* r155new_cursor(T155* C);
void r155put_last(T155* C,T0* a1);
T6 r155cursor_off(T0* a1);
T6 r67is_equal(T67* C,T0* a1);
T6 r67se_assigned_from(T0* a1);
T6 r67conforms_to(T67* C,T0* a1);
T0* r67twin(T67* C);
T6 r445is_equal(T445* C,T0* a1);
T6 r445se_assigned_from(T0* a1);
T0* r445make(T2 a1);
T6 r445conforms_to(T445* C,T0* a1);
T0* r445resize(T0* a1,T2 a2);
T0* r445twin(T445* C);
T6 r494is_equal(T494* C,T0* a1);
T6 r494se_assigned_from(T0* a1);
void r494make(T494* C,T0* a1,T0* a2);
T6 r494conforms_to(T494* C,T0* a1);
T0* r494twin(T494* C);
T6 r311is_equal(T311* C,T0* a1);
T6 r311se_assigned_from(T0* a1);
T6 r311conforms_to(T311* C,T0* a1);
T0* r311twin(T311* C);
T2 r118new_capacity(T2 a1);
void r118copy(T118* C,T0* a1);
void r118force(T118* C,T0* a1,T0* a2);
T0* r118keys_item(T118* C,T2 a1);
T2 r118clashes_item(T118* C,T2 a1);
void r118make_clashes(T118* C,T2 a1);
T0* r118cursor_item(T118* C,T0* a1);
void r118search_position(T118* C,T0* a1);
T6 r118is_equal(T118* C,T0* a1);
void r118remove_traversing_cursor(T118* C,T0* a1);
void r118clone_slots(T118* C);
void r118keys_resize(T118* C,T2 a1);
T0* r118items_item(T118* C,T2 a1);
T0* r118item(T118* C,T0* a1);
void r118clone_clashes(T118* C);
void r118move_all_cursors_after(T118* C);
void r118make_items(T118* C,T2 a1);
void r118add_traversing_cursor(T118* C,T0* a1);
T6 r118se_assigned_from(T0* a1);
T0* r118clone(T0* a1);
T2 r118slots_item(T118* C,T2 a1);
T6 r118same_type(T118* C,T0* a1);
void r118make(T118* C,T2 a1);
void r118clone_items(T118* C);
T6 r118cursor_after(T0* a1);
T6 r118conforms_to(T118* C,T0* a1);
T6 r118has(T118* C,T0* a1);
void r118make_keys(T118* C,T2 a1);
T2 r118hash_position(T118* C,T0* a1);
void r118cursor_forth(T118* C,T0* a1);
void r118items_resize(T118* C,T2 a1);
void r118clone_keys(T118* C);
void r118make_with_equality_testers(T118* C,T2 a1,T0* a2,T0* a3);
void r118resize(T118* C,T2 a1);
T6 r118cursor_same_position(T0* a1,T0* a2);
void r118cursor_start(T118* C,T0* a1);
void r118clashes_resize(T118* C,T2 a1);
void r118slots_resize(T118* C,T2 a1);
T0* r118twin(T118* C);
T0* r118new_cursor(T118* C);
void r118make_slots(T118* C,T2 a1);
void r118keys_put(T118* C,T0* a1,T2 a2);
T2 r118new_modulus(T2 a1);
T6 r118cursor_off(T0* a1);
void r118items_put(T118* C,T0* a1,T2 a2);
void r145copy(T145* C,T0* a1);
void r145set(T145* C,T0* a1,T6 a2,T6 a3);
T6 r145is_equal(T145* C,T0* a1);
T6 r145same_position(T145* C,T0* a1);
T6 r145se_assigned_from(T0* a1);
T6 r145is_last(T145* C);
T6 r145same_type(T145* C,T0* a1);
void r145make(T145* C,T0* a1);
T6 r145conforms_to(T145* C,T0* a1);
void r145set_after(T145* C);
T0* r145twin(T145* C);
void r127clear_all(T0* a1);
T6 r127is_equal(T127* C,T0* a1);
T6 r127se_assigned_from(T0* a1);
T0* r127make(T2 a1);
T6 r127conforms_to(T127* C,T0* a1);
T0* r127resize(T0* a1,T2 a2);
T0* r127twin(T127* C);
void r373copy(T373* C,T0* a1);
void r373append_last(T373* C,T0* a1);
T0* r373cursor_item(T0* a1);
T6 r373is_equal(T373* C,T0* a1);
void r373remove_traversing_cursor(T373* C,T0* a1);
void r373cursor_go_after(T373* C,T0* a1);
void r373move_all_cursors_after(T373* C);
void r373add_traversing_cursor(T373* C,T0* a1);
T6 r373se_assigned_from(T0* a1);
T6 r373same_type(T373* C,T0* a1);
void r373make(T373* C);
T6 r373cursor_after(T0* a1);
T6 r373conforms_to(T373* C,T0* a1);
void r373cursor_forth(T373* C,T0* a1);
void r373make_from_linear(T373* C,T0* a1);
void r373cursor_start(T373* C,T0* a1);
T0* r373twin(T373* C);
void r373force_last(T373* C,T0* a1);
T0* r373new_cursor(T373* C);
T6 r373cursor_off(T0* a1);
void r87copy(T87* C,T0* a1);
T0* r87cursor_item(T0* a1);
T6 r87is_equal(T87* C,T0* a1);
void r87remove_traversing_cursor(T87* C,T0* a1);
void r87move_all_cursors_after(T87* C);
void r87add_traversing_cursor(T87* C,T0* a1);
T6 r87se_assigned_from(T0* a1);
T6 r87same_type(T87* C,T0* a1);
void r87make(T87* C);
T6 r87cursor_after(T0* a1);
T6 r87conforms_to(T87* C,T0* a1);
void r87cursor_forth(T87* C,T0* a1);
void r87cursor_start(T87* C,T0* a1);
T0* r87twin(T87* C);
void r87force_last(T87* C,T0* a1);
T0* r87new_cursor(T87* C);
T6 r87cursor_off(T0* a1);
T6 r130is_equal(T130* C,T0* a1);
T6 r130se_assigned_from(T0* a1);
T6 r130conforms_to(T130* C,T0* a1);
T6 r130test(T0* a1,T0* a2);
T0* r130twin(T130* C);
T6 r282is_equal(T282* C,T0* a1);
T6 r282se_assigned_from(T0* a1);
T0* r282make(T2 a1);
T6 r282conforms_to(T282* C,T0* a1);
T0* r282resize(T0* a1,T2 a2);
T0* r282twin(T282* C);
void r294copy(T294* C,T0* a1);
T6 r294is_equal(T294* C,T0* a1);
T6 r294same_position(T294* C,T0* a1);
T6 r294se_assigned_from(T0* a1);
T6 r294same_type(T294* C,T0* a1);
T6 r294off(T294* C);
T6 r294conforms_to(T294* C,T0* a1);
T0* r294twin(T294* C);
void r63copy(T63* C,T0* a1);
T6 r63is_equal(T63* C,T0* a1);
void r63remove_traversing_cursor(T63* C,T0* a1);
void r63move_all_cursors_after(T63* C);
void r63add_traversing_cursor(T63* C,T0* a1);
T6 r63se_assigned_from(T0* a1);
T6 r63same_type(T63* C,T0* a1);
void r63make(T63* C);
T6 r63conforms_to(T63* C,T0* a1);
void r63cursor_forth(T63* C,T0* a1);
void r63cursor_start(T63* C,T0* a1);
T0* r63twin(T63* C);
void r63force_last(T63* C,T0* a1);
T0* r63new_cursor(T63* C);
T6 r63cursor_off(T0* a1);
extern T0*oBC97string_;
T6 r411is_equal(T411* C,T0* a1);
extern T0*oBC23arguments;
extern int fBC23arguments;
T0* r411arguments(void);
T6 r411se_assigned_from(T0* a1);
void r411make(T411* C,T0* a1,T0* a2,T0* a3);
T0* r411message(T411* C,T0* a1);
T6 r411conforms_to(T411* C,T0* a1);
T0* r411twin(T411* C);
T0* r411default_message(T411* C);
T6 r414is_equal(T414* C,T0* a1);
T0* r414arguments(void);
T6 r414se_assigned_from(T0* a1);
void r414make(T414* C,T0* a1,T0* a2,T0* a3);
T0* r414message(T414* C,T0* a1);
T6 r414conforms_to(T414* C,T0* a1);
T0* r414twin(T414* C);
T0* r414default_message(T414* C);
T6 r416is_equal(T416* C,T0* a1);
T0* r416new_tree_parser(T416* C);
T6 r416se_assigned_from(T0* a1);
T0* r416new_tree_parser_imp(T416* C);
T6 r416conforms_to(T416* C,T0* a1);
T0* r416twin(T416* C);
T6 r416is_available(T416* C);
T6 r176is_closed(T176* C);
void r176old_close(T176* C);
T6 r176is_equal(T176* C,T0* a1);
T2 r176read_to_string(T176* C,T0* a1,T2 a2,T2 a3);
void r176open_read(T176* C);
T6 r176se_assigned_from(T0* a1);
void r176old_read_character(T176* C);
T6 r176old_end_of_file(T176* C);
void r176read_character(T176* C);
void r176close(T176* C);
void r176make(T176* C,T0* a1);
T6 r176conforms_to(T176* C,T0* a1);
void r176connect_to(T176* C,T0* a1);
T0* r176twin(T176* C);
extern T0*oBC194uc_optimize;
extern int fBC194uc_optimize;
T0* r330uc_optimize(void);
extern T0*oBC194uc_check;
extern int fBC194uc_check;
T0* r330uc_check(void);
extern T0*oBC194uc_external;
extern int fBC194uc_external;
T0* r330uc_external(void);
T0* r330new_cluster(T330* C,T0* a1,T0* a2,T0* a3);
T0* r330new_exported_feature(T330* C,T0* a1,T0* a2);
T6 r330is_equal(T330* C,T0* a1);
T0* r330new_export(T330* C,T0* a1,T0* a2);
extern T0*oBC194uc_invariant;
extern int fBC194uc_invariant;
T0* r330uc_invariant(void);
T6 r330se_assigned_from(T0* a1);
T0* r330new_options(T330* C,T0* a1,T0* a2);
T6 r330is_false(T0* a1);
void r330make_with_variables(T330* C,T0* a1,T0* a2);
extern T0*oBC19execution_environment;
extern T0*oBC194uc_mount;
extern int fBC194uc_mount;
T0* r330uc_mount(void);
extern T0*oBC194uc_value;
extern int fBC194uc_value;
T0* r330uc_value(void);
T0* r330new_system(T330* C,T0* a1,T0* a2);
extern T0*oBC194uc_debug;
extern int fBC194uc_debug;
T0* r330uc_debug(void);
extern T0*oBC193option_codes;
extern int fBC193option_codes;
T0* r330option_codes(void);
extern T0*oBC194uc_option;
extern int fBC194uc_option;
T0* r330uc_option(void);
extern T0*oBC194uc_root;
extern int fBC194uc_root;
T0* r330uc_root(void);
extern T0*oBC194uc_library;
extern int fBC194uc_library;
T0* r330uc_library(void);
extern T0*oBC194uc_feature;
extern int fBC194uc_feature;
T0* r330uc_feature(void);
extern T0*oBC194uc_class;
extern int fBC194uc_class;
T0* r330uc_class(void);
extern T0*oBC194uc_loop;
extern int fBC194uc_loop;
T0* r330uc_loop(void);
T6 r330conforms_to(T330* C,T0* a1);
void r330fill_library(T330* C,T0* a1,T0* a2,T0* a3);
extern T0*oBC194uc_abstract;
extern int fBC194uc_abstract;
T0* r330uc_abstract(void);
T0* r330new_externals(T330* C,T0* a1,T0* a2);
extern T0*oBC194uc_alias;
extern int fBC194uc_alias;
T0* r330uc_alias(void);
void r330parse_library(T330* C,T0* a1,T0* a2);
extern T0*oBC194uc_cluster;
extern int fBC194uc_cluster;
T0* r330uc_cluster(void);
extern T0*oBC194uc_enable;
extern int fBC194uc_enable;
T0* r330uc_enable(void);
extern T0*oBC194uc_export;
extern int fBC194uc_export;
T0* r330uc_export(void);
extern T0*oBC194uc_link_library;
extern int fBC194uc_link_library;
T0* r330uc_link_library(void);
void r330parse_file(T330* C,T0* a1);
T6 r330is_true(T0* a1);
extern T0*oBC194uc_include_dir;
extern int fBC194uc_include_dir;
T0* r330uc_include_dir(void);
extern T0*oBC194uc_location;
extern int fBC194uc_location;
T0* r330uc_location(void);
void r330fill_system(T330* C,T0* a1,T0* a2,T0* a3);
T0* r330twin(T330* C);
extern T0*oBC194uc_relative;
extern int fBC194uc_relative;
T0* r330uc_relative(void);
T0* r330new_mount(T330* C,T0* a1,T0* a2);
extern T0*oBC194uc_system;
extern int fBC194uc_system;
T0* r330uc_system(void);
void r330make_with_variables_and_factory(T330* C,T0* a1,T0* a2,T0* a3);
extern T0*oBC194uc_prefix;
extern int fBC194uc_prefix;
T0* r330uc_prefix(void);
extern T0*oBC194uc_creation;
extern int fBC194uc_creation;
T0* r330uc_creation(void);
T0* r330new_library(T330* C,T0* a1,T0* a2);
extern T0*oBC194uc_require;
extern int fBC194uc_require;
T0* r330uc_require(void);
extern T0*oBC194uc_name;
extern int fBC194uc_name;
T0* r330uc_name(void);
T0* r330new_unicode_string(T0* a1);
void r330fill_options(T330* C,T0* a1,T0* a2,T0* a3);
extern T0*oBC194uc_ensure;
extern int fBC194uc_ensure;
T0* r330uc_ensure(void);
T6 r413is_equal(T413* C,T0* a1);
T0* r413arguments(void);
T6 r413se_assigned_from(T0* a1);
void r413make(T413* C);
T0* r413message(T413* C,T0* a1);
T6 r413conforms_to(T413* C,T0* a1);
T0* r413twin(T413* C);
T0* r413default_message(T413* C);
T6 r372is_equal(T372* C,T0* a1);
T6 r372se_assigned_from(T0* a1);
void r372make(T372* C,T0* a1);
T6 r372conforms_to(T372* C,T0* a1);
T0* r372twin(T372* C);
T0* r190uc_optimize(void);
T0* r190uc_check(void);
T0* r190uc_external(void);
T0* r190new_cluster(T190* C,T0* a1,T0* a2,T0* a3);
T0* r190new_exported_feature(T190* C,T0* a1,T0* a2);
T6 r190is_equal(T190* C,T0* a1);
T0* r190new_export(T190* C,T0* a1,T0* a2);
T0* r190uc_invariant(void);
T6 r190se_assigned_from(T0* a1);
T0* r190new_options(T190* C,T0* a1,T0* a2);
T6 r190is_false(T0* a1);
void r190make_with_variables(T190* C,T0* a1,T0* a2);
T0* r190uc_mount(void);
T0* r190uc_value(void);
T0* r190new_system(T190* C,T0* a1,T0* a2);
T0* r190uc_debug(void);
T0* r190option_codes(void);
T0* r190uc_option(void);
T0* r190uc_root(void);
T0* r190uc_library(void);
T0* r190uc_feature(void);
T0* r190uc_class(void);
T0* r190uc_loop(void);
T6 r190conforms_to(T190* C,T0* a1);
void r190fill_library(T190* C,T0* a1,T0* a2,T0* a3);
T0* r190uc_abstract(void);
T0* r190new_externals(T190* C,T0* a1,T0* a2);
T0* r190uc_alias(void);
T0* r190uc_cluster(void);
T0* r190uc_enable(void);
T0* r190uc_export(void);
T0* r190uc_link_library(void);
void r190parse_file(T190* C,T0* a1);
T6 r190is_true(T0* a1);
T0* r190uc_include_dir(void);
T0* r190uc_location(void);
void r190fill_system(T190* C,T0* a1,T0* a2,T0* a3);
T0* r190twin(T190* C);
T0* r190uc_relative(void);
T0* r190new_mount(T190* C,T0* a1,T0* a2);
T0* r190uc_system(void);
void r190make_with_variables_and_factory(T190* C,T0* a1,T0* a2,T0* a3);
T0* r190uc_prefix(void);
T0* r190new_library(T190* C,T0* a1,T0* a2);
T0* r190uc_creation(void);
T0* r190uc_require(void);
T0* r190uc_name(void);
T0* r190new_unicode_string(T0* a1);
void r190fill_options(T190* C,T0* a1,T0* a2,T0* a3);
T0* r190uc_ensure(void);
T6 r278is_equal(T278* C,T0* a1);
T0* r278arguments(void);
T6 r278se_assigned_from(T0* a1);
void r278make(T278* C,T0* a1,T0* a2);
T0* r278message(T278* C,T0* a1);
T6 r278conforms_to(T278* C,T0* a1);
T0* r278twin(T278* C);
T0* r278default_message(T278* C);
T6 r276is_address_expression_declared(T276* C);
void r276set_layout_optimization(T276* C,T6 a1);
T6 r276portable_code_generation(T276* C);
T0* r276arguments(T276* C);
void r276set_map(T276* C,T6 a1);
T6 r276profile(T276* C);
T6 r276is_linux_fpu_double_precision_declared(T276* C);
void r276set_gc_info(T276* C,T6 a1);
T6 r276dynamic_runtime(T276* C);
extern T0*oBC276valid_assertion;
extern int fBC276valid_assertion;
T0* r276valid_assertion(void);
T6 r276is_no_default_lib_declared(T276* C);
T6 r276debug_option(T276* C);
void r276set_exception_trace(T276* C,T6 a1);
extern T0*oBC276default_assertion;
extern int fBC276default_assertion;
T0* r276default_assertion(void);
T0* r276warning(T276* C);
void r276set_wedit(T276* C,T6 a1);
extern T0*oBC276default_warning;
extern int fBC276default_warning;
T0* r276default_warning(void);
void r276set_finalize(T276* C,T6 a1);
extern T0*oBC276default_linker;
extern int fBC276default_linker;
T0* r276default_linker(void);
void r276set_dynamic_runtime(T276* C,T6 a1);
extern T0*oBC276default_override_cluster;
void r276set_verbose(T276* C,T6 a1);
extern T0*oBC276default_precompiled;
T6 r276exception_trace(T276* C);
void r276set_trace(T276* C,T6 a1);
T6 r276is_inlining_declared(T276* C);
void r276set_clean(T276* C,T6 a1);
T0* r276linker(T276* C);
extern T0*oBC276default_visible_filename;
T6 r276is_check_vape_declared(T276* C);
T6 r276is_debug_tag_declared(T276* C);
T0* r276component(T276* C);
T6 r276is_gc_info_declared(T276* C);
extern T0*oBC276default_garbage_collector;
extern int fBC276default_garbage_collector;
T0* r276default_garbage_collector(void);
T6 r276is_trace_declared(T276* C);
T6 r276is_layout_optimization_declared(T276* C);
void r276set_array_optimization(T276* C,T6 a1);
void r276set_line_generation(T276* C,T6 a1);
T0* r276inlining(T276* C);
extern T0*oBC276valid_target;
extern int fBC276valid_target;
T0* r276valid_target(void);
T6 r276is_portable_code_generation_declared(T276* C);
void r276set_debug_tag(T276* C,T0* a1);
T6 r276is_profile_declared(T276* C);
T6 r276is_strip_option_declared(T276* C);
T0* r276dead_code_removal(T276* C);
T6 r276is_dynamic_runtime_declared(T276* C);
T6 r276line_generation(T276* C);
T6 r276check_vape(T276* C);
T6 r276reloads_optimization(T276* C);
extern T0*oBC82options;
extern T0*oBC276default_inlining;
extern int fBC276default_inlining;
T0* r276default_inlining(void);
void r276set_console_application(T276* C,T6 a1);
T6 r276case_insensitive(T276* C);
extern T0*oBC276valid_warning;
extern int fBC276valid_warning;
T0* r276valid_warning(void);
extern T0*oBC276valid_dead_code_removal;
extern int fBC276valid_dead_code_removal;
T0* r276valid_dead_code_removal(void);
T6 r276multithreaded(T276* C);
void r276set_reloads_optimization(T276* C,T6 a1);
T6 r276strip_option(T276* C);
void r276set_manifest_string_trace(T276* C,T6 a1);
extern T0*oBC276default_arguments;
extern int fBC276default_arguments;
T0* r276default_arguments(void);
void r276set_check_vape(T276* C,T6 a1);
T6 r276is_map_declared(T276* C);
T6 r276layout_optimization(T276* C);
void r276set_portable_code_generation(T276* C,T6 a1);
T6 r276is_wedit_declared(T276* C);
T6 r276split(T276* C);
void r276set_leaves_optimization(T276* C,T6 a1);
T6 r276leaves_optimization(T276* C);
T6 r276linux_fpu_double_precision(T276* C);
T6 r276is_fst_optimization_declared(T276* C);
void r276set_address_expression(T276* C,T6 a1);
T0* r276debug_tag(T276* C);
void r276set_strip_option(T276* C,T6 a1);
T0* r276shared_library_definition(T276* C);
void r276set_create_keyword_extension(T276* C,T6 a1);
extern T0*oBC276default_component;
T6 r276array_optimization(T276* C);
void r276set_inlining(T276* C,T0* a1);
T6 r276jumps_optimization(T276* C);
T6 r276is_create_keyword_extension_declared(T276* C);
void r276set_case_insensitive(T276* C,T6 a1);
extern T0*oBC276default_dead_code_removal;
extern int fBC276default_dead_code_removal;
T0* r276default_dead_code_removal(void);
T6 r276conforms_to(T276* C,T0* a1);
void r276set_profile(T276* C,T6 a1);
T6 r276is_exception_trace_declared(T276* C);
T6 r276is_dead_code_removal_declared(T276* C);
T6 r276is_jumps_optimization_declared(T276* C);
T6 r276map(T276* C);
T6 r276is_verbose_declared(T276* C);
void r276set_no_default_lib(T276* C,T6 a1);
T0* r276garbage_collector(T276* C);
T6 r276console_application(T276* C);
T0* r276twin(T276* C);
T6 r276gc_info(T276* C);
T6 r276finalize(T276* C);
void r276set_dead_code_removal(T276* C,T0* a1);
T0* r276target(T276* C);
T0* r276visible_filename(T276* C);
T6 r276is_array_optimization_declared(T276* C);
void r276set_assertion(T276* C,T0* a1);
extern T0*oBC276default_storable_filename;
T6 r276is_case_insensitive_declared(T276* C);
T0* r276document(T276* C);
T6 r276verbose(T276* C);
T6 r276is_arguments_declared(T276* C);
T2 r276inlining_size(T276* C);
extern T0*oBC276default_target;
extern int fBC276default_target;
T0* r276default_target(void);
extern T0*oBC276valid_linker;
extern int fBC276valid_linker;
T0* r276valid_linker(void);
T0* r276override_cluster(T276* C);
void r276set_debugger(T276* C,T6 a1);
extern T0*oBC276default_debug_tag;
extern int fBC276default_debug_tag;
T0* r276default_debug_tag(void);
extern T0*oBC276default_document;
void r276set_split(T276* C,T6 a1);
T6 r276flat_fst_optimization(T276* C);
T6 r276is_reloads_optimization_declared(T276* C);
void r276set_jumps_optimization(T276* C,T6 a1);
T0* r276storable_filename(T276* C);
T6 r276wedit(T276* C);
T6 r276is_manifest_string_trace_declared(T276* C);
T6 r276is_equal(T276* C,T0* a1);
T2 r276fst_expansion_factor(T276* C);
T0* r276precompiled(T276* C);
T6 r276is_flat_fst_optimization_declared(T276* C);
T0* r276assertion(T276* C);
T6 r276is_console_application_declared(T276* C);
T6 r276trace(T276* C);
T6 r276is_clean_declared(T276* C);
T6 r276clean(T276* C);
extern T0*oBC276valid_inlining;
extern int fBC276valid_inlining;
T0* r276valid_inlining(void);
T6 r276is_assertion_declared(T276* C);
void r276set_multithreaded(T276* C,T6 a1);
T6 r276fst_optimization(T276* C);
void r276set_arguments(T276* C,T0* a1);
T6 r276is_debugger_declared(T276* C);
T6 r276is_leaves_optimization_declared(T276* C);
T2 r276stack_size(T276* C);
void r276make(T276* C);
T6 r276address_expression(T276* C);
void r276set_linux_fpu_double_precision(T276* C,T6 a1);
T6 r276is_line_generation_declared(T276* C);
T6 r276create_keyword_extension(T276* C);
T6 r276manifest_string_trace(T276* C);
T6 r276no_default_lib(T276* C);
T6 r276se_assigned_from(T0* a1);
extern T0*oBC276valid_garbage_collector;
extern int fBC276valid_garbage_collector;
T0* r276valid_garbage_collector(void);
T2 r276heap_size(T276* C);
void r276set_debug_option(T276* C,T6 a1);
void r276set_fst_optimization(T276* C,T6 a1);
T6 r276is_debug_option_declared(T276* C);
T6 r276is_split_declared(T276* C);
extern T0*oBC276default_shared_library_definition;
T6 r276is_multithreaded_declared(T276* C);
void r276set_flat_fst_optimization(T276* C,T6 a1);
T6 r276debugger(T276* C);
T6 r276is_finalize_declared(T276* C);
T6 r275has_exported_features(T275* C);
T6 r275is_equal(T275* C,T0* a1);
T6 r275se_assigned_from(T0* a1);
void r275merge(T275* C,T0* a1);
void r275make(T275* C);
T6 r275is_empty(T275* C);
T6 r275conforms_to(T275* C,T0* a1);
T0* r275cloned_externals(T275* C);
T6 r275has_include_directories(T275* C);
T6 r275has_link_libraries(T275* C);
T0* r275twin(T275* C);
T6 r369is_equal(T369* C,T0* a1);
T0* r369arguments(void);
T6 r369se_assigned_from(T0* a1);
void r369make(T369* C,T0* a1,T0* a2,T0* a3,T0* a4);
T0* r369message(T369* C,T0* a1);
T6 r369conforms_to(T369* C,T0* a1);
T0* r369twin(T369* C);
T0* r369default_message(T369* C);
T6 r189is_equal(T189* C,T0* a1);
T6 r189se_assigned_from(T0* a1);
T6 r189conforms_to(T189* C,T0* a1);
T0* r189twin(T189* C);
void r189mount_libraries(T189* C);
void r189merge_externals(T189* C);
void r229put(T229* C,T0* a1,T0* a2);
T6 r229is_equal(T229* C,T0* a1);
T0* r229item(T229* C,T0* a1);
T6 r229se_assigned_from(T0* a1);
void r229make(T229* C);
T6 r229conforms_to(T229* C,T0* a1);
T0* r229twin(T229* C);
T0* r191uc_optimize(void);
T0* r191uc_check(void);
T0* r191uc_external(void);
T0* r191new_cluster(T191* C,T0* a1,T0* a2,T0* a3);
T0* r191new_exported_feature(T191* C,T0* a1,T0* a2);
T6 r191is_equal(T191* C,T0* a1);
T0* r191new_export(T191* C,T0* a1,T0* a2);
T0* r191uc_invariant(void);
T6 r191se_assigned_from(T0* a1);
T0* r191new_options(T191* C,T0* a1,T0* a2);
T6 r191is_false(T0* a1);
void r191make_with_variables(T191* C,T0* a1,T0* a2);
T0* r191uc_mount(void);
T0* r191uc_value(void);
T0* r191new_system(T191* C,T0* a1,T0* a2);
T0* r191uc_debug(void);
T0* r191option_codes(void);
T0* r191uc_option(void);
T0* r191uc_root(void);
T0* r191uc_library(void);
T0* r191uc_feature(void);
T0* r191uc_class(void);
T0* r191uc_loop(void);
T6 r191conforms_to(T191* C,T0* a1);
void r191fill_library(T191* C,T0* a1,T0* a2,T0* a3);
T0* r191uc_abstract(void);
T0* r191new_externals(T191* C,T0* a1,T0* a2);
T0* r191uc_alias(void);
T0* r191uc_cluster(void);
T0* r191uc_enable(void);
T0* r191uc_export(void);
T0* r191uc_link_library(void);
void r191parse_file(T191* C,T0* a1);
T6 r191is_true(T0* a1);
T0* r191uc_include_dir(void);
T0* r191uc_location(void);
void r191fill_system(T191* C,T0* a1,T0* a2,T0* a3);
T0* r191twin(T191* C);
T0* r191uc_relative(void);
T0* r191new_mount(T191* C,T0* a1,T0* a2);
T0* r191uc_system(void);
void r191make_with_variables_and_factory(T191* C,T0* a1,T0* a2,T0* a3);
T0* r191uc_prefix(void);
T0* r191new_library(T191* C,T0* a1,T0* a2);
T0* r191uc_creation(void);
T0* r191uc_require(void);
T0* r191uc_name(void);
T0* r191new_unicode_string(T0* a1);
void r191fill_options(T191* C,T0* a1,T0* a2,T0* a3);
T0* r191uc_ensure(void);
T6 r136is_equal(T136* C,T0* a1);
T6 r136se_assigned_from(T0* a1);
void r136execute_generators(T136* C,T0* a1);
void r136make(T136* C,T0* a1,T0* a2);
T6 r136conforms_to(T136* C,T0* a1);
void r136execute(T136* C);
T0* r136twin(T136* C);
void r134print_cluster(T134* C,T0* a1,T2 a2,T0* a3);
void r134generate_library(T134* C,T0* a1);
void r134print_xml_library_file(T134* C,T0* a1,T0* a2);
T6 r134is_equal(T134* C,T0* a1);
void r134print_externals(T0* a1,T2 a2,T0* a3);
T6 r134se_assigned_from(T0* a1);
void r134print_exported_class(T0* a1,T2 a2,T0* a3);
void r134make(T134* C,T0* a1,T0* a2);
void r134print_clusters(T134* C,T0* a1,T2 a2,T0* a3);
T6 r134conforms_to(T134* C,T0* a1);
T0* r134twin(T134* C);
void r134print_options(T0* a1,T2 a2,T0* a3);
void r134print_indentation(T2 a1,T0* a2);
void r134print_link_libraries(T0* a1,T2 a2,T0* a3);
void r134generate_system(T134* C,T0* a1);
void r134print_xml_system_file(T134* C,T0* a1,T0* a2);
void r134print_include_directories(T0* a1,T2 a2,T0* a3);
T0* r490current_working_directory(T490* C);
T6 r490is_equal(T490* C,T0* a1);
T2 r490read_to_string(T490* C,T0* a1,T2 a2,T2 a3);
T6 r490se_assigned_from(T0* a1);
void r490old_read_character(T490* C);
T0* r490clone(T0* a1);
extern T6 oBC142is_windows;
extern int fBC142is_windows;
T6 r490is_windows(T490* C);
T6 r490old_end_of_file(T490* C);
void r490read_character(T490* C);
void r490make(T490* C);
T6 r490conforms_to(T490* C,T0* a1);
T0* r490twin(T490* C);
T0* r486substring(T486* C,T2 a1,T2 a2);
T6 r486is_equal(T486* C,T0* a1);
T2 r486fill_from_stream(T486* C,T0* a1,T2 a2,T2 a3);
T6 r486se_assigned_from(T0* a1);
void r486move_left(T486* C,T2 a1,T2 a2,T2 a3);
void r486make(T486* C,T2 a1);
T6 r486conforms_to(T486* C,T0* a1);
void r486resize(T486* C,T2 a1);
T0* r486twin(T486* C);
T6 r352is_equal(T352* C,T0* a1);
T6 r352se_assigned_from(T0* a1);
T6 r352conforms_to(T352* C,T0* a1);
T6 r352is_undefined(T352* C);
T0* r352twin(T352* C);
T6 r331is_equal(T331* C,T0* a1);
T0* r331arguments(void);
T6 r331se_assigned_from(T0* a1);
void r331make(T331* C,T0* a1);
T0* r331message(T331* C,T0* a1);
T6 r331conforms_to(T331* C,T0* a1);
T0* r331twin(T331* C);
T0* r331default_message(T331* C);
T6 r455is_closed(T455* C);
void r455old_close(T455* C);
T6 r455is_equal(T455* C,T0* a1);
T6 r455se_assigned_from(T0* a1);
void r455close(T455* C);
void r455make(T455* C,T0* a1);
void r455old_put_string(T455* C,T0* a1);
T6 r455conforms_to(T455* C,T0* a1);
void r455connect_to(T455* C,T0* a1);
void r455put_integer(T455* C,T2 a1);
void r455put_line(T455* C,T0* a1);
T0* r455twin(T455* C);
void r455open_write(T455* C);
void r131print_cluster(T131* C,T0* a1,T0* a2);
void r131generate_library(T131* C,T0* a1);
T6 r131is_equal(T131* C,T0* a1);
T0* r131replace_all_characters(T0* a1,T3 a2,T3 a3);
T6 r131se_assigned_from(T0* a1);
T0* r131clone(T0* a1);
T6 r131is_lace_keyword(T0* a1);
T6 r131is_windows(T131* C);
void r131print_ace_file(T131* C,T0* a1,T0* a2);
void r131print_exported_class(T0* a1,T2 a2,T0* a3);
void r131make(T131* C,T0* a1,T0* a2);
extern T0*oBC18operating_system;
void r131print_clusters(T131* C,T0* a1,T0* a2);
T6 r131conforms_to(T131* C,T0* a1);
void r131print_precompile_ace_file(T131* C,T0* a1,T0* a2);
void r131print_escaped_name(T0* a1,T0* a2);
T0* r131twin(T131* C);
void r131print_options(T0* a1,T2 a2,T0* a3);
extern T0*oBC131lace_keywords;
void r131print_indentation(T2 a1,T0* a2);
void r131print_link_libraries(T131* C,T0* a1,T0* a2);
void r131generate_system(T131* C,T0* a1);
void r131print_include_directories(T131* C,T0* a1,T0* a2);
T6 r519is_equal(T519* C,T0* a1);
T6 r519se_assigned_from(T0* a1);
void r519make(T519* C,T0* a1,T0* a2);
T6 r519conforms_to(T519* C,T0* a1);
T0* r519twin(T519* C);
T6 r108is_defined(T108* C,T0* a1);
extern T0*oBC109template_expander;
T6 r108is_equal(T108* C,T0* a1);
T6 r108se_assigned_from(T0* a1);
void r108make(T108* C);
T0* r108value(T108* C,T0* a1);
T6 r108conforms_to(T108* C,T0* a1);
T0* r108twin(T108* C);
void r108define_value(T108* C,T0* a1,T0* a2);
T0* r108expanded_variables(T108* C,T0* a1);
T6 r137is_equal(T137* C,T0* a1);
T6 r137se_assigned_from(T0* a1);
void r137make(T137* C,T0* a1,T0* a2);
T6 r137conforms_to(T137* C,T0* a1);
void r137execute(T137* C);
T0* r137twin(T137* C);
T6 r104is_equal(T104* C,T0* a1);
T0* r104arguments(void);
T6 r104se_assigned_from(T0* a1);
void r104make(T104* C,T0* a1);
T0* r104message(T104* C,T0* a1);
T6 r104conforms_to(T104* C,T0* a1);
T0* r104twin(T104* C);
T0* r104default_message(T104* C);
T6 r210is_equal(T210* C,T0* a1);
T6 r210se_assigned_from(T0* a1);
void r210merge_libraries(T210* C,T0* a1,T0* a2);
T6 r210conforms_to(T210* C,T0* a1);
T0* r210twin(T210* C);
void r210mount_libraries(T210* C);
void r210merge_externals(T210* C);
void r107print_cluster(T107* C,T0* a1,T0* a2);
void r107generate_library(T107* C,T0* a1);
void r107print_loadpath_clusters(T107* C,T0* a1,T0* a2);
T6 r107is_equal(T107* C,T0* a1);
T6 r107se_assigned_from(T0* a1);
void r107print_loadpath_cluster(T107* C,T0* a1,T0* a2);
void r107print_ace_file(T107* C,T0* a1,T0* a2);
void r107generate_cecil_file(T107* C,T0* a1);
void r107print_exported_class(T0* a1,T0* a2);
void r107make(T107* C,T0* a1,T0* a2);
void r107print_clusters(T107* C,T0* a1,T0* a2);
T6 r107conforms_to(T107* C,T0* a1);
void r107print_generate(T0* a1,T2 a2,T0* a3);
void r107print_escaped_name(T0* a1,T0* a2);
T0* r107twin(T107* C);
void r107print_options(T0* a1,T2 a2,T0* a3);
void r107print_exported_classes(T0* a1,T0* a2);
void r107print_indentation(T2 a1,T0* a2);
void r107print_link_libraries(T0* a1,T0* a2);
void r107generate_system(T107* C,T0* a1);
void r107print_include_directories(T0* a1,T0* a2);
T6 r516is_equal(T516* C,T0* a1);
T6 r516se_assigned_from(T0* a1);
void r516make(T516* C,T0* a1,T0* a2);
T6 r516conforms_to(T516* C,T0* a1);
T0* r516twin(T516* C);
T6 r160is_equal(T160* C,T0* a1);
T6 r160se_assigned_from(T0* a1);
T6 r160conforms_to(T160* C,T0* a1);
void r160put_integer(T2 a1);
void r160put_line(T0* a1);
T0* r160twin(T160* C);
T6 r460is_equal(T460* C,T0* a1);
T0* r460arguments(void);
T6 r460se_assigned_from(T0* a1);
void r460make(T460* C,T0* a1);
T0* r460message(T460* C,T0* a1);
T6 r460conforms_to(T460* C,T0* a1);
T0* r460twin(T460* C);
T0* r460default_message(T460* C);
T6 r409is_equal(T409* C,T0* a1);
T0* r409arguments(void);
T6 r409se_assigned_from(T0* a1);
void r409make(T409* C,T0* a1,T0* a2);
T0* r409message(T409* C,T0* a1);
T6 r409conforms_to(T409* C,T0* a1);
T0* r409twin(T409* C);
T0* r409default_message(T409* C);
T0* r209uc_optimize(void);
void r209validate_named_cluster(T209* C,T0* a1,T0* a2);
T0* r209uc_check(void);
void r209validate_root(T209* C,T0* a1,T0* a2);
T0* r209uc_external(void);
void r209validate_library(T209* C,T0* a1,T0* a2);
void r209validate_external(T209* C,T0* a1,T0* a2);
extern T0*oBC194uc_exclude;
extern int fBC194uc_exclude;
T0* r209uc_exclude(void);
void r209validate_mount(T209* C,T0* a1,T0* a2);
T6 r209is_equal(T209* C,T0* a1);
void r209validate_system_doc(T209* C,T0* a1,T0* a2);
T0* r209uc_invariant(void);
T6 r209se_assigned_from(T0* a1);
void r209validate_cluster(T209* C,T0* a1,T0* a2);
extern T0*oBC194uc_description;
extern int fBC194uc_description;
T0* r209uc_description(void);
T0* r209uc_mount(void);
T0* r209uc_value(void);
T0* r209uc_debug(void);
T0* r209uc_option(void);
T0* r209uc_root(void);
T0* r209uc_library(void);
void r209validate_system(T209* C,T0* a1,T0* a2);
T0* r209uc_feature(void);
T0* r209uc_class(void);
T0* r209uc_loop(void);
T6 r209conforms_to(T209* C,T0* a1);
void r209validate_export(T209* C,T0* a1,T0* a2);
T0* r209uc_cluster(void);
void r209validate_exclude(T209* C,T0* a1,T0* a2);
T0* r209uc_export(void);
T0* r209uc_link_library(void);
T0* r209uc_include_dir(void);
T0* r209uc_location(void);
T0* r209twin(T209* C);
void r209validate_library_doc(T209* C,T0* a1,T0* a2);
T0* r209uc_system(void);
T0* r209uc_creation(void);
T0* r209uc_require(void);
T0* r209uc_name(void);
void r209validate_option(T209* C,T0* a1,T0* a2);
T0* r209new_unicode_string(T0* a1);
T0* r209uc_ensure(void);
void r133print_cluster(T133* C,T0* a1,T2 a2,T0* a3);
void r133generate_library(T133* C,T0* a1);
T6 r133is_equal(T133* C,T0* a1);
T0* r133replace_all_characters(T0* a1,T3 a2,T3 a3);
T6 r133se_assigned_from(T0* a1);
T0* r133clone(T0* a1);
T6 r133is_lace_keyword(T0* a1);
T6 r133is_windows(T133* C);
void r133print_ace_file(T133* C,T0* a1,T0* a2);
void r133print_exported_class(T0* a1,T2 a2,T0* a3);
T6 r133print_component(T133* C,T0* a1,T6 a2,T0* a3);
void r133make(T133* C,T0* a1,T0* a2);
void r133print_clusters(T133* C,T0* a1,T2 a2,T0* a3);
T6 r133conforms_to(T133* C,T0* a1);
void r133print_precompile_ace_file(T133* C,T0* a1,T0* a2);
void r133print_escaped_name(T0* a1,T0* a2);
T0* r133twin(T133* C);
T6 r133print_components(T133* C,T0* a1,T6 a2,T0* a3);
void r133print_options(T133* C,T0* a1,T2 a2,T0* a3);
extern T0*oBC133lace_keywords;
void r133print_indentation(T2 a1,T0* a2);
void r133print_link_libraries(T133* C,T0* a1,T0* a2);
void r133generate_system(T133* C,T0* a1);
void r133print_include_directories(T133* C,T0* a1,T0* a2);
T6 r410is_equal(T410* C,T0* a1);
T0* r410arguments(void);
T6 r410se_assigned_from(T0* a1);
void r410make(T410* C,T0* a1,T0* a2,T0* a3);
T0* r410message(T410* C,T0* a1);
T6 r410conforms_to(T410* C,T0* a1);
T0* r410twin(T410* C);
T0* r410default_message(T410* C);
T6 r370is_equal(T370* C,T0* a1);
T0* r370arguments(void);
T6 r370se_assigned_from(T0* a1);
void r370make(T370* C,T0* a1,T0* a2,T0* a3,T0* a4,T0* a5);
T0* r370message(T370* C,T0* a1);
T6 r370conforms_to(T370* C,T0* a1);
T0* r370twin(T370* C);
T0* r370default_message(T370* C);
T6 r453is_equal(T453* C,T0* a1);
T0* r453arguments(void);
T6 r453se_assigned_from(T0* a1);
void r453make(T453* C,T0* a1);
T0* r453message(T453* C,T0* a1);
T6 r453conforms_to(T453* C,T0* a1);
T0* r453twin(T453* C);
T0* r453default_message(T453* C);
T6 r408is_equal(T408* C,T0* a1);
T6 r408se_assigned_from(T0* a1);
T6 r408conforms_to(T408* C,T0* a1);
T0* r408expand_from_hash_table(T0* a1,T0* a2);
T0* r408twin(T408* C);
void r230set_last_cell(T230* C,T0* a1);
void r230copy(T230* C,T0* a1);
void r230wipe_out(T230* C);
void r230remove_first(T230* C);
T0* r230cursor_item(T0* a1);
T6 r230cursor_is_last(T230* C,T0* a1);
T6 r230is_equal(T230* C,T0* a1);
void r230remove_traversing_cursor(T230* C,T0* a1);
void r230cursor_go_after(T230* C,T0* a1);
void r230move_all_cursors_after(T230* C);
void r230add_traversing_cursor(T230* C,T0* a1);
T6 r230se_assigned_from(T0* a1);
T6 r230same_type(T230* C,T0* a1);
void r230remove_last(T230* C);
T6 r230cursor_after(T0* a1);
T6 r230conforms_to(T230* C,T0* a1);
void r230make_list(T230* C);
void r230cursor_forth(T230* C,T0* a1);
void r230move_last_cursors_after(T230* C);
void r230cursor_start(T230* C,T0* a1);
T0* r230twin(T230* C);
void r230force_last(T230* C,T0* a1);
T0* r230new_cursor(T230* C);
void r230make_composite(T230* C);
T6 r230cursor_is_first(T230* C,T0* a1);
void r230remove_at_cursor(T230* C,T0* a1);
void r230move_all_cursors(T230* C,T0* a1,T0* a2);
T6 r230cursor_off(T0* a1);
void r230set_root_element(T230* C,T0* a1);
void r132print_cluster(T132* C,T0* a1,T0* a2);
void r132print_esd_file(T132* C,T0* a1,T0* a2);
void r132generate_library(T132* C,T0* a1);
T6 r132is_equal(T132* C,T0* a1);
T6 r132se_assigned_from(T0* a1);
T0* r132clone(T0* a1);
void r132make(T132* C,T0* a1,T0* a2);
void r132print_clusters(T132* C,T0* a1,T0* a2);
T0* r132remove_all_characters(T0* a1,T3 a2);
T6 r132conforms_to(T132* C,T0* a1);
void r132print_eld_file(T132* C,T0* a1,T0* a2);
void r132print_escaped_name(T0* a1,T0* a2);
T0* r132twin(T132* C);
void r132print_options(T0* a1,T2 a2,T0* a3);
void r132print_indentation(T2 a1,T0* a2);
void r132print_link_libraries(T0* a1,T0* a2);
void r132generate_system(T132* C,T0* a1);
T6 r332is_equal(T332* C,T0* a1);
T0* r332arguments(void);
T6 r332se_assigned_from(T0* a1);
void r332make(T332* C,T0* a1);
T0* r332message(T332* C,T0* a1);
T6 r332conforms_to(T332* C,T0* a1);
T0* r332twin(T332* C);
T0* r332default_message(T332* C);
T6 r236is_equal(T236* C,T0* a1);
T6 r236se_assigned_from(T0* a1);
void r236make_empty(T236* C);
void r236merge_libraries(T236* C,T0* a1,T0* a2);
void r236make(T236* C,T0* a1);
void r236set_parent(T236* C,T0* a1);
T6 r236conforms_to(T236* C,T0* a1);
T0* r236twin(T236* C);
void r236mount_libraries(T236* C,T0* a1,T0* a2);
void r236set_library_prefix(T236* C,T0* a1);
void r236merge_externals(T236* C,T0* a1);
T0* r283new_cluster(T0* a1,T0* a2);
T0* r283new_mounted_library(T0* a1,T0* a2,T0* a3);
T0* r283new_exported_feature(T0* a1,T0* a2);
T6 r283is_equal(T283* C,T0* a1);
T0* r283new_mounted_libraries(void);
T6 r283se_assigned_from(T0* a1);
T0* r283new_options(void);
T0* r283new_system(T0* a1);
T0* r283new_exported_class(T0* a1);
T6 r283conforms_to(T283* C,T0* a1);
T0* r283new_externals(void);
T0* r283new_clusters(T0* a1);
T0* r283twin(T283* C);
T0* r283new_library(void);
T2 r427new_capacity(T2 a1);
void r427copy(T427* C,T0* a1);
void r427force(T427* C,T0* a1,T0* a2);
void r427make_clashes(T427* C,T2 a1);
void r427make_non_equal(T427* C,T2 a1);
T0* r427cursor_item(T427* C,T0* a1);
void r427search_position(T427* C,T0* a1);
T6 r427is_equal(T427* C,T0* a1);
void r427remove_traversing_cursor(T427* C,T0* a1);
void r427clone_slots(T427* C);
void r427keys_resize(T427* C,T2 a1);
T0* r427item(T427* C,T0* a1);
void r427clone_clashes(T427* C);
void r427move_all_cursors_after(T427* C);
void r427make_items(T427* C,T2 a1);
void r427add_traversing_cursor(T427* C,T0* a1);
T6 r427se_assigned_from(T0* a1);
T0* r427clone(T0* a1);
T6 r427same_type(T427* C,T0* a1);
void r427make(T427* C,T2 a1);
void r427clone_items(T427* C);
T6 r427cursor_after(T0* a1);
T6 r427conforms_to(T427* C,T0* a1);
T6 r427has(T427* C,T0* a1);
void r427make_keys(T427* C,T2 a1);
T2 r427hash_position(T427* C,T0* a1);
void r427cursor_forth(T427* C,T0* a1);
void r427items_resize(T427* C,T2 a1);
void r427clone_keys(T427* C);
void r427resize(T427* C,T2 a1);
void r427make_with_equality_testers(T427* C,T2 a1,T0* a2,T0* a3);
T6 r427cursor_same_position(T0* a1,T0* a2);
void r427cursor_start(T427* C,T0* a1);
void r427clashes_resize(T427* C,T2 a1);
void r427slots_resize(T427* C,T2 a1);
T0* r427twin(T427* C);
T0* r427new_cursor(T427* C);
void r427make_slots(T427* C,T2 a1);
T2 r427new_modulus(T2 a1);
T6 r427cursor_off(T0* a1);
T6 r412is_equal(T412* C,T0* a1);
T0* r412arguments(void);
T6 r412se_assigned_from(T0* a1);
void r412make(T412* C,T0* a1,T0* a2);
T0* r412message(T412* C,T0* a1);
T6 r412conforms_to(T412* C,T0* a1);
T0* r412twin(T412* C);
T0* r412default_message(T412* C);
T0* r302out(T302* C);
void r302copy(T302* C,T0* a1);
T0* r302substring(T302* C,T2 a1,T2 a2);
T2 r302occurrences(T302* C,T0* a1);
T2 r302shifted_byte_index(T302* C,T2 a1,T2 a2);
T2 r302item_code(T302* C,T2 a1);
void r302put_latin1(T302* C,T3 a1,T2 a2);
T6 r302is_equal(T302* C,T0* a1);
T2 r302index_of_code(T302* C,T2 a1,T2 a2);
T3 r302latin1_item(T302* C,T2 a1);
T0* r302item(T302* C,T2 a1);
extern T0*oBC268integer_;
void r302resize_byte_storage(T302* C,T2 a1);
void r302append(T302* C,T0* a1);
T6 r302se_assigned_from(T0* a1);
T2 r302byte_index(T302* C,T2 a1);
T0* r302clone(T0* a1);
void r302make_from_string(T302* C,T0* a1);
T2 r302index_of(T302* C,T0* a1,T2 a2);
void r302move_bytes_right(T302* C,T2 a1,T2 a2);
T2 r302next_byte_index(T302* C,T2 a1);
T6 r302same_type(T302* C,T0* a1);
T6 r302is_integer(T302* C);
void r302make(T302* C,T2 a1);
void r302old_make_filled(T302* C,T3 a1,T2 a2);
void r302append_string(T302* C,T0* a1);
T2 r302code_occurrences(T302* C,T2 a1);
void r302old_remove_tail(T302* C,T2 a1);
T2 r302item_code_at_byte_index(T302* C,T2 a1);
extern T0*oBC270platform;
void r302extend(T302* C,T3 a1);
T0* r302_px_43(T302* C,T0* a1);
T2 r302hash_code(T302* C);
T2 r302index_of_latin1(T302* C,T3 a1,T2 a2);
T6 r302conforms_to(T302* C,T0* a1);
T2 r302to_integer(T302* C);
void r302append_latin1(T302* C,T3 a1);
void r302put_code_at_byte_index(T302* C,T2 a1,T2 a2,T2 a3);
void r302make_from_substring(T302* C,T0* a1,T2 a2,T2 a3);
void r302resize(T302* C,T2 a1);
void r302put_substring_at_byte_index(T302* C,T0* a1,T2 a2,T2 a3,T2 a4,T2 a5);
extern T0*oBC196utf8;
void r302from_external_copy(T302* C,T8 a1);
void r302move_bytes_left(T302* C,T2 a1,T2 a2);
void r302old_make(T302* C,T2 a1);
T8 r302to_external(T302* C);
T0* r302old_infix_plus(T302* C,T0* a1);
T0* r302twin(T302* C);
T0* r302to_utf8(T302* C);
T3 r302latin1_item_at_byte_index(T302* C,T2 a1);
extern T0*oBC269unicode;
void r302put_latin1_at_byte_index(T302* C,T3 a1,T2 a2,T2 a3);
void r302make_from_utf8(T302* C,T0* a1);
void r302swap(T302* C,T2 a1,T2 a2);
T6 r79is_equal(T79* C,T0* a1);
T6 r79se_assigned_from(T0* a1);
void r79execute_generators(T79* C,T0* a1);
void r79make(T79* C,T0* a1,T0* a2);
T6 r79conforms_to(T79* C,T0* a1);
void r79execute(T79* C);
T0* r79twin(T79* C);
T6 r517is_equal(T517* C,T0* a1);
T6 r517se_assigned_from(T0* a1);
void r517make(T517* C,T0* a1,T0* a2);
T6 r517conforms_to(T517* C,T0* a1);
T0* r517twin(T517* C);
T0* r514out(T514* C);
T6 r514is_equal(T514* C,T0* a1);
T6 r514se_assigned_from(T0* a1);
T0* r514clone(T0* a1);
void r514out_in_tagged_out_memory(T514* C);
T6 r514conforms_to(T514* C,T0* a1);
T0* r514twin(T514* C);
void r489fill(T489* C);
void r489compact_left(T489* C);
void r489set_position(T489* C,T2 a1,T2 a2,T2 a3);
T6 r489is_equal(T489* C,T0* a1);
T6 r489se_assigned_from(T0* a1);
T6 r489conforms_to(T489* C,T0* a1);
void r489resize(T489* C);
void r489make_with_size(T489* C,T0* a1,T2 a2);
T0* r489twin(T489* C);
void r489set_file(T489* C,T0* a1);
void r489flush(T489* C);
T0* r139current_working_directory(T139* C);
T6 r139is_equal(T139* C,T0* a1);
T6 r139se_assigned_from(T0* a1);
T0* r139clone(T0* a1);
T6 r139is_windows(T139* C);
void r139make(T139* C);
void r139old_put_string(T0* a1);
T6 r139conforms_to(T139* C,T0* a1);
void r139put_integer(T2 a1);
void r139put_line(T0* a1);
T0* r139twin(T139* C);
T6 r239is_fully_abstract(T239* C);
T0* r239prefixed_name(T239* C);
T6 r239is_equal(T239* C,T0* a1);
void r239set_subclusters(T239* C,T0* a1);
T6 r239se_assigned_from(T0* a1);
void r239merge_libraries(T239* C,T0* a1,T0* a2);
T0* r239full_pathname(T239* C);
void r239make(T239* C,T0* a1,T0* a2);
T6 r239conforms_to(T239* C,T0* a1);
T0* r239twin(T239* C);
void r239set_library_prefix(T239* C,T0* a1);
void r239merge_externals(T239* C,T0* a1);
T0* r161current_working_directory(T161* C);
T6 r161is_equal(T161* C,T0* a1);
T6 r161se_assigned_from(T0* a1);
T0* r161clone(T0* a1);
T6 r161is_windows(T161* C);
void r161make(T161* C);
void r161old_put_string(T0* a1);
T6 r161conforms_to(T161* C,T0* a1);
void r161put_integer(T2 a1);
void r161put_line(T0* a1);
T0* r161twin(T161* C);
T0* r492out(T492* C);
T6 r492is_equal(T492* C,T0* a1);
T6 r492se_assigned_from(T0* a1);
T0* r492clone(T0* a1);
void r492make(T492* C,T0* a1,T2 a2,T2 a3,T2 a4);
T6 r492conforms_to(T492* C,T0* a1);
T0* r492twin(T492* C);
T6 r305is_equal(T305* C,T0* a1);
T6 r305se_assigned_from(T0* a1);
void r305make(T305* C,T0* a1,T0* a2,T0* a3,T0* a4);
T6 r305conforms_to(T305* C,T0* a1);
T0* r305twin(T305* C);
T6 r389is_equal(T389* C,T0* a1);
T6 r389se_assigned_from(T0* a1);
void r389make(T389* C,T0* a1,T0* a2);
T6 r389conforms_to(T389* C,T0* a1);
T0* r389twin(T389* C);
T6 r235is_equal(T235* C,T0* a1);
T0* r235item(T235* C,T0* a1);
T6 r235se_assigned_from(T0* a1);
T0* r235clone(T0* a1);
void r235make_empty(T235* C);
void r235merge_libraries(T235* C,T0* a1,T0* a2);
T6 r235equal(T0* a1,T0* a2);
void r235set_root(T235* C,T6 a1);
T6 r235conforms_to(T235* C,T0* a1);
T0* r235twin(T235* C);
void r235mount_libraries(T235* C,T0* a1);
void r235merge_externals(T235* C,T0* a1);
T0* r419next_open_composite(T0* a1);
void r419enable_position_table(T419* C);
T6 r419is_equal(T419* C,T0* a1);
void r419on_content(T419* C,T0* a1);
T6 r419se_assigned_from(T0* a1);
void r419on_processing_instruction(T419* C,T0* a1,T0* a2);
void r419on_start_tag(T419* C,T0* a1,T0* a2,T0* a3);
void r419make_from_implementation_event(T419* C,T0* a1);
void r419make_from_implementation(T419* C,T0* a1);
void r419handle_position(T419* C,T0* a1);
void r419on_comment(T419* C,T0* a1);
void r419_200Pparse_from_stream(T419* C,T0* a1);
void r419parse_from_stream(T419* C,T0* a1);
void r419on_end_tag(T419* C,T0* a1,T0* a2);
T6 r419conforms_to(T419* C,T0* a1);
void r419reset(T419* C);
T0* r419twin(T419* C);
T6 r199is_equal(T199* C,T0* a1);
T6 r199se_assigned_from(T0* a1);
T0* r199clone(T0* a1);
void r199make_from_implementation(T199* C,T0* a1);
T6 r199is_correct(T199* C);
T6 r199conforms_to(T199* C,T0* a1);
T0* r199last_error_extended_description(T199* C);
T0* r199twin(T199* C);
void r233set_last_cell(T233* C,T0* a1);
void r233copy(T233* C,T0* a1);
void r233wipe_out(T233* C);
void r233remove_first(T233* C);
T0* r233cursor_item(T0* a1);
T6 r233cursor_is_last(T233* C,T0* a1);
void r233add_attributes(T233* C,T0* a1);
T6 r233is_equal(T233* C,T0* a1);
void r233remove_traversing_cursor(T233* C,T0* a1);
void r233make_root(T233* C,T0* a1,T0* a2);
void r233cursor_go_after(T233* C,T0* a1);
void r233move_all_cursors_after(T233* C);
T6 r233has_attribute_by_name(T233* C,T0* a1);
void r233add_traversing_cursor(T233* C,T0* a1);
T6 r233se_assigned_from(T0* a1);
void r233add_attribute(T233* C,T0* a1,T0* a2,T0* a3);
T0* r233attribute_by_name(T233* C,T0* a1);
void r233make_child(T233* C,T0* a1,T0* a2,T0* a3);
T6 r233same_type(T233* C,T0* a1);
T6 r233equal(T0* a1,T0* a2);
void r233remove_last(T233* C);
T6 r233cursor_after(T0* a1);
T6 r233conforms_to(T233* C,T0* a1);
void r233make_list(T233* C);
void r233cursor_forth(T233* C,T0* a1);
void r233move_last_cursors_after(T233* C);
void r233cursor_start(T233* C,T0* a1);
T0* r233twin(T233* C);
void r233force_last(T233* C,T0* a1);
T0* r233new_cursor(T233* C);
void r233make_composite(T233* C);
T6 r233has_element_by_name(T233* C,T0* a1);
T6 r233cursor_is_first(T233* C,T0* a1);
void r233remove_at_cursor(T233* C,T0* a1);
T0* r233element_by_name(T233* C,T0* a1);
void r233move_all_cursors(T233* C,T0* a1,T0* a2);
T6 r233cursor_off(T0* a1);
void r467yy_do_action(T467* C,T2 a1);
extern T0*oBC468yytable_template;
extern int fBC468yytable_template;
T0* r467yytable_template(void);
T0* r467empty_ucstring(void);
void r467make_parser_skeleton(T467* C);
T2 r467yy_at_beginning_of_line(T467* C);
void r467fatal_error(T0* a1);
extern T0*oBC37std;
T0* r467yytype1(T0* a1);
T6 r467yytype2(T0* a1);
T0* r467yytype3(T0* a1);
T0* r467yytype4(T0* a1);
T0* r467yytype5(T0* a1);
void r467handle_found_text(T467* C);
void r467parse(T467* C);
void r467set_input_buffer(T467* C,T0* a1);
T2 r467yy_translate(T467* C,T2 a1);
extern T0*oBC469yy_ec_template;
extern int fBC469yy_ec_template;
T0* r467yy_ec_template(void);
void r467yy_execute_action(T467* C,T2 a1);
extern T0*oBC468yytranslate_template;
extern int fBC468yytranslate_template;
T0* r467yytranslate_template(void);
void r467clear_stacks(T467* C);
extern T0*oBC469yy_def_template;
extern int fBC469yy_def_template;
T0* r467yy_def_template(void);
T3 r467text_item(T467* C,T2 a1);
void r467yy_load_input_buffer(T467* C);
extern T0*oBC468uc_collon;
extern int fBC468uc_collon;
T0* r467uc_collon(void);
extern T0*oBC468yyr1_template;
extern int fBC468yyr1_template;
T0* r467yyr1_template(void);
void r467make_with_buffer(T467* C,T0* a1);
T2 r467yy_null_trans_state(T467* C,T2 a1);
T0* r467position(T467* C);
extern T0*oBC469yy_accept_template;
extern int fBC469yy_accept_template;
T0* r467yy_accept_template(void);
void r467read_token(T467* C);
extern T0*oBC468yyr2_template;
extern int fBC468yyr2_template;
T0* r467yyr2_template(void);
T2 r467yy_previous_state(T467* C);
extern T0*oBC468yypgoto_template;
extern int fBC468yypgoto_template;
T0* r467yypgoto_template(void);
void r467yy_refill_input_buffer(T467* C);
T0* r467yy_fixed_array(T0* a1);
T6 r467conforms_to(T467* C,T0* a1);
extern T0*oBC469yy_meta_template;
extern int fBC469yy_meta_template;
T0* r467yy_meta_template(void);
extern T0*oBC469yy_base_template;
extern int fBC469yy_base_template;
T0* r467yy_base_template(void);
T0* r467twin(T467* C);
T2 r467text_count(T467* C);
T0* r467clone(T0* a1);
T0* r467new_file_buffer(T0* a1);
void r467yy_initialize(T467* C);
void r467reset(T467* C);
T0* r467text(T467* C);
extern T0*oBC469yy_nxt_template;
extern int fBC469yy_nxt_template;
T0* r467yy_nxt_template(void);
void r467parse_from_stream(T467* C,T0* a1);
void r467yy_set_line_column(T467* C);
void r467yy_build_parser_tables(T467* C);
T0* r467new_unicode_character(T3 a1);
T0* r467new_unicode_string(T0* a1);
T0* r467split_name_and_prefix(T0* a1);
T6 r467is_equal(T467* C,T0* a1);
void r467report_error(T467* C,T0* a1);
extern T0*oBC468yydefact_template;
extern int fBC468yydefact_template;
T0* r467yydefact_template(void);
extern T0*oBC469yy_chk_template;
extern int fBC469yy_chk_template;
T0* r467yy_chk_template(void);
extern T0*oBC468yycheck_template;
extern int fBC468yycheck_template;
T0* r467yycheck_template(void);
void r467make(T467* C);
T0* r467yyfixed_array(T0* a1);
void r467yy_clear_all(T467* C);
extern T0*oBC468yydefgoto_template;
extern int fBC468yydefgoto_template;
T0* r467yydefgoto_template(void);
void r467yy_set_content(T467* C,T0* a1);
extern T0*oBC468yypact_template;
extern int fBC468yypact_template;
T0* r467yypact_template(void);
void r467set_start_condition(T467* C,T2 a1);
T6 r467se_assigned_from(T0* a1);
void r467yy_build_tables(T467* C);
void r467less(T467* C,T2 a1);
T6 r238is_equal(T238* C,T0* a1);
T6 r238se_assigned_from(T0* a1);
void r238make(T238* C,T0* a1,T0* a2,T0* a3);
T6 r238conforms_to(T238* C,T0* a1);
T0* r238twin(T238* C);
T6 r68is_equal(T68* C,T0* a1);
extern T0*oBC1command_arguments;
extern int fBC1command_arguments;
T0* r68command_arguments(void);
T6 r68se_assigned_from(T0* a1);
T6 r68conforms_to(T68* C,T0* a1);
T0* r68twin(T68* C);
T0* r68argument(T2 a1);
T6 r371is_equal(T371* C,T0* a1);
T0* r371arguments(void);
T6 r371se_assigned_from(T0* a1);
void r371make(T371* C,T0* a1,T0* a2,T0* a3,T0* a4);
T0* r371message(T371* C,T0* a1);
T6 r371conforms_to(T371* C,T0* a1);
T0* r371twin(T371* C);
T0* r371default_message(T371* C);
T6 r415is_equal(T415* C,T0* a1);
extern T0*oBC415ep_event_fact;
T6 r415se_assigned_from(T0* a1);
void r415make(T415* C);
T6 r415conforms_to(T415* C,T0* a1);
extern T0*oBC415ef_event_fact;
T0* r415twin(T415* C);
void r34_35Preport_error(T34* C,T0* a1);
void r34report_missing_element_error(T34* C,T0* a1,T0* a2,T0* a3);
T6 r34is_equal(T34* C,T0* a1);
void r34report_no_parser_available_error(T34* C);
T6 r34se_assigned_from(T0* a1);
void r34report_missing_attribute_error(T34* C,T0* a1,T0* a2,T0* a3);
extern T0*oBC36null_output_stream;
extern int fBC36null_output_stream;
T0* r34null_output_stream(void);
void r34report_cannot_write_file_error(T34* C,T0* a1);
void r34make(T34* C);
void r34report_cannot_read_file_error(T34* C,T0* a1);
void r34report_parser_error(T34* C,T0* a1);
T0* r34message(T0* a1);
void r34report_invalid_expression_error(T34* C,T0* a1,T0* a2);
T6 r34conforms_to(T34* C,T0* a1);
void r34report_positive_integer_expected_error(T34* C,T0* a1,T0* a2,T0* a3,T0* a4);
void r34report_not_xace_file_error(T34* C,T0* a1);
void r34report_wrong_root_element_error(T34* C,T0* a1,T0* a2);
void r34report_unknown_element_error(T34* C,T0* a1,T0* a2,T0* a3);
void r34report_warning(T34* C,T0* a1);
void r34report_multiple_library_prefix_error(T34* C,T0* a1,T0* a2);
T0* r34twin(T34* C);
void r34report_wrong_attribute_value_error(T34* C,T0* a1,T0* a2,T0* a3,T0* a4,T0* a5);
void r34report_boolean_expected_error(T34* C,T0* a1,T0* a2,T0* a3,T0* a4);
void r34report_error(T34* C,T0* a1);
T6 r406is_expression_true(T406* C,T0* a1);
T6 r406should_strip_element(T406* C,T0* a1,T0* a2);
T6 r406is_equal(T406* C,T0* a1);
T6 r406se_assigned_from(T0* a1);
void r406preprocess_composite(T406* C,T0* a1,T0* a2);
T0* r406new_unicode_string_from_utf8(T0* a1);
extern T0*oBC194uc_equal;
extern int fBC194uc_equal;
T0* r406uc_equal(void);
T6 r406is_valid_expression(T0* a1);
T0* r406new_unicode_character(T3 a1);
extern T0*oBC194uc_closing_curly_brace;
extern int fBC194uc_closing_curly_brace;
T0* r406uc_closing_curly_brace(void);
void r406make(T406* C,T0* a1,T0* a2);
extern T0*oBC194uc_unless;
extern int fBC194uc_unless;
T0* r406uc_unless(void);
extern T0*oBC194uc_if;
extern int fBC194uc_if;
T0* r406uc_if(void);
T6 r406conforms_to(T406* C,T0* a1);
extern T0*oBC194uc_opening_curly_brace;
extern int fBC194uc_opening_curly_brace;
T0* r406uc_opening_curly_brace(void);
T0* r406twin(T406* C);
void r406expand_attribute_variables(T406* C,T0* a1);
T0* r406new_unicode_string(T0* a1);
extern T0*oBC194uc_dollar;
extern int fBC194uc_dollar;
T0* r406uc_dollar(void);
T6 r407is_equal(T407* C,T0* a1);
T6 r407se_assigned_from(T0* a1);
T6 r407conforms_to(T407* C,T0* a1);
T6 r407_px_60(T407* C,T0* a1);
void r407make_from_character(T407* C,T3 a1);
T0* r407twin(T407* C);
extern T0*oBC138error;
extern int fBC138error;
T0* r138error(void);
T6 r138is_equal(T138* C,T0* a1);
T6 r138se_assigned_from(T0* a1);
extern T0*oBC138input;
extern int fBC138input;
T0* r138input(void);
extern T0*oBC138output;
extern int fBC138output;
T0* r138output(void);
T6 r138conforms_to(T138* C,T0* a1);
T0* r138twin(T138* C);
T6 r454is_equal(T454* C,T0* a1);
T6 r454se_assigned_from(T0* a1);
T6 r454conforms_to(T454* C,T0* a1);
T0* r454twin(T454* C);
T6 r43is_equal(T43* C,T0* a1);
T6 r43se_assigned_from(T0* a1);
T6 r43conforms_to(T43* C,T0* a1);
T0* r43twin(T43* C);
T6 r39is_equal(T39* C,T0* a1);
T6 r39se_assigned_from(T0* a1);
T6 r39conforms_to(T39* C,T0* a1);
T6 r39_px_60(T39* C,T0* a1);
T0* r39twin(T39* C);
T6 r521is_equal(T521* C,T0* a1);
T6 r521se_assigned_from(T0* a1);
T6 r521conforms_to(T521* C,T0* a1);
T0* r521twin(T521* C);
T6 r175is_equal(T175* C,T0* a1);
T6 r175se_assigned_from(T0* a1);
T6 r175conforms_to(T175* C,T0* a1);
T0* r175twin(T175* C);
T2 r304encoded_next_value(T3 a1);
T6 r304is_equal(T304* C,T0* a1);
T6 r304se_assigned_from(T0* a1);
T2 r304encoded_first_value(T3 a1);
T6 r304conforms_to(T304* C,T0* a1);
T2 r304code_byte_count(T2 a1);
T2 r304encoded_byte_count(T3 a1);
T2 r304latin1_byte_count(T3 a1);
T0* r304twin(T304* C);
T2 r304substring_byte_count(T0* a1,T2 a2,T2 a3);
T6 r303is_equal(T303* C,T0* a1);
T6 r303se_assigned_from(T0* a1);
T6 r303conforms_to(T303* C,T0* a1);
T3 r303to_character(T2 a1);
T0* r303twin(T303* C);
T6 r526is_equal(T526* C,T0* a1);
T6 r526se_assigned_from(T0* a1);
T6 r526conforms_to(T526* C,T0* a1);
T0* r526twin(T526* C);
T6 r38is_equal(T38* C,T0* a1);
T6 r38se_assigned_from(T0* a1);
T6 r38conforms_to(T38* C,T0* a1);
T0* r38twin(T38* C);
T0* r334get_environment_variable(T0* a1);
T6 r193is_equal(T193* C,T0* a1);
T6 r193se_assigned_from(T0* a1);
T6 r193conforms_to(T193* C,T0* a1);
T0* r193twin(T193* C);
T6 r525is_equal(T525* C,T0* a1);
T6 r525se_assigned_from(T0* a1);
T6 r525conforms_to(T525* C,T0* a1);
T0* r525twin(T525* C);
T6 r450is_equal(T450* C,T0* a1);
T6 r450se_assigned_from(T0* a1);
T6 r450conforms_to(T450* C,T0* a1);
T0* r450twin(T450* C);
void r16process_cluster(T16* C);
T0* r16split_on_first(T0* a1,T3 a2);
T6 r16is_equal(T16* C,T0* a1);
void r16process_options(T16* C);
void r16process_arguments(T16* C);
T0* r16arguments(void);
T6 r16has_next_option_value(T16* C);
T6 r16se_assigned_from(T0* a1);
T0* r16clone(T0* a1);
void r16process_xace_file(T16* C,T0* a1);
T6 r16is_next_option_long_option(T16* C);
extern T0*oBC16usage_message;
extern int fBC16usage_message;
T0* r16usage_message(void);
T0* r16next_option_value(T16* C);
void r16make(T16* C);
void r16process_command(T16* C);
T6 r16is_valid_option_position(T2 a1);
void r16process_system(T16* C);
T6 r16conforms_to(T16* C,T0* a1);
extern T0*oBC20exceptions;
void r16process_define_string(T16* C,T0* a1);
void r16process_output(T16* C,T0* a1);
void r16process_validate(T16* C);
T0* r16next_option(T16* C);
T6 r16has_next_option(T16* C);
void r16process_library(T16* C);
T0* r16twin(T16* C);
void r16process_define(T16* C);
T0* r16split_string(T0* a1,T3 a2);
void r16process_compilers(T16* C,T0* a1,T0* a2);
T6 r16match_long_option(T16* C,T0* a1);
void r16consume_option(T16* C);
void r461connect_to_current_working_directory(T461* C);
void r461disconnect(T461* C);
extern T0*oBC461last_entry;
T6 r101is_equal(T101* C,T0* a1);
T6 r101se_assigned_from(T0* a1);
T6 r101is_integer(T0* a1);
T6 r101same_case_insensitive(T0* a1,T0* a2);
T0* r101make(T2 a1);
T6 r101conforms_to(T101* C,T0* a1);
T0* r101twin(T101* C);
T6 r333is_equal(T333* C,T0* a1);
T0* r333variable_value(T0* a1);
T6 r333se_assigned_from(T0* a1);
extern T334 oBC333environment_impl;
T6 r333conforms_to(T333* C,T0* a1);
T0* r333interpreted_string(T0* a1);
T0* r333twin(T333* C);
T6 r449is_equal(T449* C,T0* a1);
T6 r449se_assigned_from(T0* a1);
T0* r449new_event_parser_imp(void);
T6 r449conforms_to(T449* C,T0* a1);
T0* r449twin(T449* C);
T6 r78is_equal(T78* C,T0* a1);
T6 r78se_assigned_from(T0* a1);
T6 r78conforms_to(T78* C,T0* a1);
T6 r78_px_60(T78* C,T0* a1);
T0* r78twin(T78* C);
T0* r142current_working_directory(T142* C);
T6 r142is_equal(T142* C,T0* a1);
T6 r142se_assigned_from(T0* a1);
T0* r142clone(T0* a1);
T6 r142is_windows(T142* C);
T6 r142conforms_to(T142* C,T0* a1);
T0* r142twin(T142* C);
extern T16*eiffel_root_object;
extern int se_argc;
extern char**se_argv;
#define SE_MAXID 527
extern T7* g[];
extern T7* t[];
void initialize_eiffel_runtime(int argc,char*argv[]);
extern T7*ms193_264596220;
extern T7*ms131_2071896;
extern T7*ms193_537250837;
extern T7*ms193_2250778;
extern T7*ms193_2246326;
extern T7*ms278_2131726096;
extern T7*ms193_50458336;
extern T7*ms193_53099313;
extern T7*ms193_765701343;
extern T7*ms193_1817115202;
extern T7*ms414_462378139;
extern T7*ms193_295494129;
extern T7*ms193_78002;
extern T7*ms412_820451542;
extern T7*ms193_1831836695;
extern T7*ms371_802821753;
extern T7*ms193_2191641;
extern T7*ms193_39972254;
extern T7*ms193_78263;
extern T7*ms193_78331;
extern T7*ms193_78279;
extern T7*ms193_78490;
extern T7*ms193_78495;
extern T7*ms193_2185421;
extern T7*ms193_90041;
extern T7*ms193_1155828738;
extern T7*ms193_90141;
extern T7*ms193_722497341;
extern T7*ms193_692313432;
extern T7*ms193_1619639801;
extern T7*ms193_9901966;
extern T7*ms32_1415324896;
extern T7*ms410_1179444653;
extern T7*ms139_10;
extern T7*ms193_662126768;
extern T7*ms132_440790;
extern T7*ms132_440825;
extern T7*ms193_89216;
extern T7*ms193_1085709462;
extern T7*ms193_89771;
extern T7*ms193_89862;
extern T7*ms193_9786069;
extern T7*ms160_10;
extern T7*ms193_554402727;
extern T7*ms193_49076540;
extern T7*ms107_431271;
extern T7*ms161_10;
extern T7*ms193_484842691;
extern T7*ms331_229;
extern T7*ms193_49483191;
extern T7*ms32_2045384695;
extern T7*ms193_1040155018;
extern T7*ms332_988446515;
extern T7*ms193_51843716;
extern T7*ms104_1515383187;
extern T7*ms193_1570582567;
extern T7*ms193_1991783165;
extern T7*ms193_17221;
extern T7*ms134_11272528;
extern T7*ms193_17176;
extern T7*ms193_10342028;
extern T7*ms193_440571;
extern T7*ms193_702131887;
extern T7*ms193_279458336;
extern T7*ms193_234165132;
extern T7*ms193_1994621;
extern T7*ms193_1183150341;
extern T7*ms193_19162620;
extern T7*ms193_1988096;
extern T7*ms193_388005040;
extern T7*ms192_79251;
extern T7*ms193_2141685;
extern T7*ms193_2040823781;
extern T7*ms193_48856070;
extern T7*ms210_0;
extern T7*ms193_1846843898;
extern T7*ms193_335219475;
extern T7*ms193_9946191;
extern T7*ms193_1493399999;
extern T7*ms193_52771526;
extern T7*ms192_0;
extern T7*ms413_1214914019;
extern T7*ms193_420169;
extern T7*ms239_0;
extern T7*ms193_1365755180;
extern T7*ms304_0;
extern T7*ms193_1962309625;
extern T7*ms193_10365093;
extern T7*ms267_0;
extern T7*ms460_1606053737;
extern T7*ms369_1003460429;
extern T7*ms107_1319327951;
extern T7*ms193_10030586;
extern T7*ms455_10;
extern T7*ms370_105797387;
extern T7*ms193_1957581;
extern T7*ms193_402346;
extern T7*ms411_454072470;
extern T7*ms193_3073;
extern T7*ms193_3139;
extern T7*ms193_3148;
extern T7*ms193_3226;
extern T7*ms193_3322;
extern T7*ms193_783353191;
extern T7*ms107_9702826;
extern T7*ms193_243833461;
extern T7*ms409_54177410;
extern T7*ms193_48929738;
extern T7*ms453_512683247;
extern T7*ms192_18036;
extern T7*ms133_10031271;
T7*se_ms(int c,char*e);
T7*se_string(char*e);
void se_msi1(void);
void se_msi2(void);
void se_msi3(void);
void*se_ma479(int argc,...);
void*se_ma103(int argc,...);
T0* X418new_event_parser_imp(T0*C);
T6 X418is_available(T0*C);
void X32execute(T0*C);
T0* X148item(T0*C);
T6 X148after(T0*C);
void X148forth(T0*C);
void X148start(T0*C);
T2 X149count(T0*C);
T0* X149cursor_item(T0*C,T0* a1);
T6 X149is_empty(T0*C);
T6 X149cursor_after(T0*C,T0* a1);
void X149cursor_forth(T0*C,T0* a1);
void X149cursor_start(T0*C,T0* a1);
T0* X149new_cursor(T0*C);
T0* X7substring(T0*C,T2 a1,T2 a2);
T2 X7item_code(T0*C,T2 a1);
void X7put(T0*C,T3 a1,T2 a2);
T6 X7is_equal(T0*C,T0* a1);
T3 X7item(T0*C,T2 a1);
void X7append(T0*C,T0* a1);
T2 X7index_of(T0*C,T3 a1,T2 a2);
void X7set_count(T0*C,T2 a1);
T6 X7same_type(T0*C,T0* a1);
T6 X7is_integer(T0*C);
void X7remove_tail(T0*C,T2 a1);
void X7append_string(T0*C,T0* a1);
T0* X7_px_43(T0*C,T0* a1);
void X7extend(T0*C,T3 a1);
T2 X7hash_code(T0*C);
T2 X7to_integer(T0*C);
void X7append_character(T0*C,T3 a1);
void X7resize(T0*C,T2 a1);
void X7from_external_copy(T0*C,T8 a1);
T8 X7to_external(T0*C);
T0* X7twin(T0*C);
void X7swap(T0*C,T2 a1,T2 a2);
T0* X301cursor_item(T0*C,T0* a1);
T6 X301cursor_after(T0*C,T0* a1);
void X301cursor_forth(T0*C,T0* a1);
void X301cursor_start(T0*C,T0* a1);
T6 X10is_equal(T0*C,T0* a1);
T0* X10twin(T0*C);
void X168set_next_cursor(T0*C,T0* a1);
T0* X127make(T0*C,T2 a1);
T0* X127resize(T0*C,T0* a1,T2 a2);
T6 X1se_assigned_from(T0*C,T0* a1);
T6 X1conforms_to(T0*C,T0* a1);
void X481clear_all(T0*C,T0* a1);
T0* X481make(T0*C,T2 a1);
T0* X481resize(T0*C,T0* a1,T2 a2);
void X98put_new_line(T0*C);
void X98put_integer(T0*C,T2 a1);
void X98put_line(T0*C,T0* a1);
void X98put_character(T0*C,T3 a1);
void X98put_string(T0*C,T0* a1);
T0* X185name(T0*C);
T2 X185read_to_string(T0*C,T0* a1,T2 a2,T2 a3);
void X185read_character(T0*C);
T6 X185end_of_input(T0*C);
void X231force_last(T0*C,T0* a1);
T0* X231new_cursor(T0*C);
void X231remove_at_cursor(T0*C,T0* a1);
void X75put(T0*C,T0* a1,T2 a2);
T0* X75item(T0*C,T2 a1);
void X75set_all_with(T0*C,T0* a1);
void X75resize(T0*C,T2 a1);
T2 X477count(T0*C);
T2 X477item(T0*C,T2 a1);
T2 X477lower(T0*C);
void X118force(T0*C,T0* a1,T0* a2);
T0* X118cursor_item(T0*C,T0* a1);
void X118remove_traversing_cursor(T0*C,T0* a1);
T0* X118item(T0*C,T0* a1);
void X118add_traversing_cursor(T0*C,T0* a1);
T6 X118cursor_after(T0*C,T0* a1);
T6 X118has(T0*C,T0* a1);
void X118cursor_forth(T0*C,T0* a1);
T6 X118cursor_same_position(T0*C,T0* a1,T0* a2);
void X118cursor_start(T0*C,T0* a1);
T6 X118cursor_off(T0*C,T0* a1);
void X191parse_file(T0*C,T0* a1);
void X480put(T0*C,T0* a1,T2 a2);
T0* X480item(T0*C,T2 a1);
T484 X480storage(T0*C);
void X480set_all_with(T0*C,T0* a1);
void X480resize(T0*C,T2 a1);
T6 X130test(T0*C,T0* a1,T0* a2);
T0* X95default_message(T0*C);
T6 X142is_windows(T0*C);
void X81generate_library(T0*C,T0* a1);
void X81generate_system(T0*C,T0* a1);
T0* T2toT39(T2 source);
T2 T39toT2(T0* source);
T0* T6toT38(T6 source);

#ifdef __cplusplus
}
#endif
