#ifdef __cplusplus
extern "C" {
#endif
/*
ANSI C code generated by SmallEiffel The GNU Eiffel Compiler
Release -0.74 Beta #21 (Wednesday April 10th 2002)
Copyright (C), 1994-2002 - LORIA - UHP - INRIA - FRANCE
Dominique COLNET and Suzanne COLLIN - SmallEiffel@loria.fr
http://SmallEiffel.loria.fr
C Compiler options used: -O2 -nologo -D"WIN32" -w
*/

/*
-- This file is  free  software, which  comes  along  with  SmallEiffel. This
-- software  is  distributed  in the hope that it will be useful, but WITHOUT
-- ANY  WARRANTY;  without  even  the  implied warranty of MERCHANTABILITY or
-- FITNESS  FOR A PARTICULAR PURPOSE. You can modify it as you want, provided
-- this header is kept unaltered, and a notification of the changes is added.
-- You  are  allowed  to  redistribute  it and sell it, alone or as a part of
-- another product.
--       Copyright (C) 1994-2002 LORIA - INRIA - U.H.P. Nancy 1 - FRANCE
--          Dominique COLNET and Suzanne COLLIN - SmallEiffel@loria.fr
--                       http://SmallEiffel.loria.fr
--
*/
/*
  This file (SmallEiffel/sys/runtime/base.h) contains all basic Eiffel
  type definitions.
  This file is automatically included in the header for all modes of
  compilation: -boost, -no_check, -require_check, -ensure_check, ...
  This file is also included in the header of any cecil file (when the
  -cecil option is used).
  This file is also included in the header file of C++ wrappers (when
  using the external "C++" clause).
*/
#include <stdio.h>
#include <string.h>
#include <math.h>
#include <stdlib.h>
#include <signal.h>
#include <stddef.h>
#include <stdarg.h>
#include <limits.h>
#include <float.h>
#include <setjmp.h>
#include <sys/types.h>
#include <sys/stat.h>
#include <fcntl.h>
#ifdef WIN32
#include <windows.h>
#else
#ifndef O_RDONLY
#include <sys/file.h>
#endif
#ifndef O_RDONLY
#define O_RDONLY 0000
#endif
#endif

/* Because ANSI C EXIT_* are not always defined: */
#ifndef EXIT_FAILURE
#define EXIT_FAILURE 1
#endif
#ifndef EXIT_SUCCESS
#define EXIT_SUCCESS 0
#endif

/*
   On Linux glibc systems, we need to use sig.* versions of jmp_buf,
   setjmp and longjmp to preserve the signal handling context.
   Currently, the way I figured to detect this is if _SIGSET_H_types has
   been defined in /usr/include/setjmp.h.
*/
#ifdef _SIGSET_H_types
#define JMP_BUF    sigjmp_buf
#define SETJMP(x)  sigsetjmp( (x), 1)
#define LONGJMP    siglongjmp
#else
#define JMP_BUF    jmp_buf
#define SETJMP(x)  setjmp( (x) )
#define LONGJMP    longjmp
#endif

/*
   Type to store reference objects Id:
 */
typedef int Tid;
typedef struct S0 T0;
struct S0{Tid id;};

/*
   The default channel used to print runtime error messages:
*/
#define SE_ERR stderr

/*
   Eiffel type INTEGER is #2:
*/
typedef int T2;
#define EIF_INTEGER T2
#define M2 (0)
#define EIF_INTEGER_BITS (CHAR_BIT*sizeof(int))
#define EIF_MINIMUM_INTEGER (INT_MIN)
#define EIF_MAXIMUM_INTEGER (INT_MAX)

/*
  Eiffel type CHARACTER is #3:
*/
typedef unsigned char T3;
#define EIF_CHARACTER T3
#define M3 (0)
#define EIF_CHARACTER_BITS (CHAR_BIT)
#define EIF_MINIMUM_CHARACTER_CODE (0)
#define EIF_MAXIMUM_CHARACTER_CODE (255)
#define T3code(x) ((T2)(x))
#define T3to_integer(x) ((T2)((char)(x)))
#define T3to_bit(x) (x)

/*
  Eiffel type REAL is #4:
*/
typedef float T4;
#define EIF_REAL T4
#define M4 (0.0)
#define EIF_REAL_BITS (CHAR_BIT*sizeof(float))
#define EIF_MINIMUM_REAL (-(FLT_MAX))
#define EIF_MAXIMUM_REAL (FLT_MAX)
#define T2toT4(x) ((T4)(x))

/*
  Eiffel type DOUBLE is #5:
*/
typedef double T5;
#define EIF_DOUBLE T5
#define M5 (0.0)
#define EIF_DOUBLE_BITS (CHAR_BIT*sizeof(double))
#define EIF_MINIMUM_DOUBLE (-(DBL_MAX))
#define EIF_MAXIMUM_DOUBLE (DBL_MAX)
#define T2toT5(x) ((T5)(x))
#define T4toT5(x) ((T5)(x))

/*
  Eiffel type BOOLEAN is #6:
*/
typedef char T6;
#define EIF_BOOLEAN T6
#define M6 (0)
#define EIF_BOOLEAN_BITS (CHAR_BIT)

/*
   Eiffel type POINTER is #8:
*/
typedef void* T8;
#define EIF_POINTER T8
#define M8 (NULL)
#define EIF_POINTER_BITS (CHAR_BIT*sizeof(void*))

/*
  To use type STRING on the C side:
*/
#define EIF_STRING T7*

/*
  Some Other EIF_* defined in ETL:
*/
#define eif_access(x) ((char*)(x))
#define EIF_REFERENCE T0*
#define EIF_OBJ T0*
#define EIF_OBJECT EIF_OBJ

/*
   Wrappers for `malloc' and `calloc':
*/
void* se_malloc(size_t size);
void* se_calloc(size_t nmemb, size_t size);

/*C Header Pass 1 :*/
typedef struct S511 T511;
typedef struct S363 T363;
typedef struct S343 T343;
typedef struct S327 T327;
typedef struct S356 T356;
typedef struct S415 T415;
typedef struct S418 T418;
typedef struct S105 T105;
typedef struct S157 T157;
typedef struct S420 T420;
typedef struct S263 T263;
typedef struct S176 T176;
typedef struct S409 T409;
typedef struct S316 T316;
typedef struct S417 T417;
typedef struct S375 T375;
typedef struct S190 T190;
typedef struct S309 T309;
typedef struct S270 T270;
typedef struct S214 T214;
typedef struct S242 T242;
typedef struct S268 T268;
typedef struct S138 T138;
typedef struct S305 T305;
typedef struct S241 T241;
typedef struct S267 T267;
typedef struct S387 T387;
typedef struct S394 T394;
typedef struct S499 T499;
typedef struct S43 T43;
typedef struct S390 T390;
typedef struct S372 T372;
typedef struct S189 T189;
typedef struct S210 T210;
typedef struct S483 T483;
typedef struct S44 T44;
typedef struct S228 T228;
typedef struct S315 T315;
typedef struct S125 T125;
typedef struct S191 T191;
typedef struct S92 T92;
typedef struct S136 T136;
typedef struct S497 T497;
typedef struct S134 T134;
typedef struct S168 T168;
typedef struct S492 T492;
typedef struct S39 T39;
typedef struct S488 T488;
typedef struct S144 T144;
typedef struct S514 T514;
typedef struct S355 T355;
typedef struct S406 T406;
typedef struct S175 T175;
typedef struct S332 T332;
typedef struct S325 T325;
typedef struct S247 T247;
typedef struct S33 T33;
typedef struct S458 T458;
typedef struct S354 T354;
typedef struct S393 T393;
typedef struct S131 T131;
typedef struct S437 T437;
typedef struct S338 T338;
typedef struct S226 T226;
typedef struct S300 T300;
typedef struct S249 T249;
typedef struct S526 T526;
typedef struct S522 T522;
typedef struct S108 T108;
typedef struct S237 T237;
typedef struct S137 T137;
typedef struct S104 T104;
typedef struct S498 T498;
typedef struct S336 T336;
typedef struct S209 T209;
typedef struct S107 T107;
typedef struct S245 T245;
typedef struct S519 T519;
typedef struct S238 T238;
typedef struct S160 T160;
typedef struct S411 T411;
typedef struct S445 T445;
typedef struct S463 T463;
typedef struct S38 T38;
typedef struct S370 T370;
typedef struct S155 T155;
typedef struct S75 T75;
typedef int T335;
typedef struct S193 T193;
typedef struct S67 T67;
typedef struct S7 T7;
typedef struct S413 T413;
typedef struct S208 T208;
typedef struct S133 T133;
typedef struct S525 T525;
typedef struct S331 T331;
typedef struct S414 T414;
typedef struct S373 T373;
typedef struct S454 T454;
typedef struct S457 T457;
typedef struct S412 T412;
typedef struct S449 T449;
typedef struct S16 T16;
typedef struct S303 T303;
typedef struct S229 T229;
typedef struct S464 T464;
typedef struct S132 T132;
typedef struct S496 T496;
typedef struct S101 T101;
typedef struct S312 T312;
typedef struct S302 T302;
typedef struct S266 T266;
typedef struct S333 T333;
typedef struct S235 T235;
typedef struct S275 T275;
typedef struct S431 T431;
typedef struct S416 T416;
typedef struct S121 T121;
typedef struct S295 T295;
typedef struct S118 T118;
typedef struct S79 T79;
typedef struct S334 T334;
typedef struct S520 T520;
typedef struct S337 T337;
typedef struct S517 T517;
typedef struct S145 T145;
typedef struct S491 T491;
typedef struct S139 T139;
typedef struct S453 T453;
typedef struct S161 T161;
typedef struct S494 T494;
typedef struct S306 T306;
typedef struct S392 T392;
typedef struct S234 T234;
typedef struct S127 T127;
typedef struct S103 T103;
typedef struct S448 T448;
typedef struct S482 T482;
typedef struct S423 T423;
typedef struct S198 T198;
typedef struct S304 T304;
typedef struct S232 T232;
typedef struct S78 T78;
typedef struct S376 T376;
typedef struct S470 T470;
typedef struct S87 T87;
typedef struct S130 T130;
typedef struct S527 T527;
typedef struct S142 T142;
typedef struct S274 T274;
typedef struct S286 T286;
typedef struct S68 T68;
typedef struct S374 T374;
typedef struct S419 T419;
typedef struct S34 T34;
typedef struct S63 T63;

/*C Header Pass 2 :*/
typedef T0**T469;
typedef T0**T251;
typedef T0**T216;
typedef T0**T244;
typedef T0**T77;
typedef T3*T9;
typedef T0**T452;
typedef T2*T123;
typedef T0**T486;

/*C Header Pass 3 :*/
struct S464{T8 _directory_stream;T8 _current_entry;};
int se_cmpT464(T464 o1,T464 o2);
struct S295{T2 _i_code;};
int se_cmpT295(T295 o1,T295 o2);

/*C Header Pass 4 :*/
struct S511{Tid id;T0* _container;T6 _after;T6 _before;T0* _current_cell;T0* _next_cursor;};
extern T511 M511;
struct S363{Tid id;};
extern T363 M363;
struct S343{Tid id;T0* _equality_tester;T2 _count;T2 _capacity;T2 _last_position;T2 _modulus;T2 _free_slot;T2 _position;T2 _slots_position;T2 _clashes_previous_position;T2 _found_position;T0* _internal_cursor;T0* _items;T0* _clashes;T0* _slots;T0* _fixed_item_array_;};
extern T343 M343;
struct S327{Tid id;T0* _item;T0* _right;};
extern T327 M327;
struct S356{Tid id;T0* _equality_tester;T0* _key_equality_tester;T2 _count;T2 _capacity;T2 _last_position;T2 _modulus;T2 _free_slot;T2 _position;T2 _slots_position;T2 _clashes_previous_position;T2 _found_position;T0* _internal_cursor;T0* _items;T0* _keys;T0* _clashes;T0* _slots;T0* _fixed_item_array_;T0* _fixed_key_array_;};
extern T356 M356;
struct S415{Tid id;T0* _parameters;};
extern T415 M415;
struct S418{Tid id;T0* _parameters;};
extern T418 M418;
struct S105{Tid id;T0* _item;T0* _right;};
extern T105 M105;
struct S157{Tid id;T0* _item;T0* _right;};
extern T157 M157;
struct S420{Tid id;T0* _event_parser_factory;};
extern T420 M420;
struct S263{Tid id;T0* _container;T2 _position;T0* _next_cursor;};
extern T263 M263;
struct S176{Tid id;T6 _push_back_flag;T0* _name;T0* _path;T8 _input_stream;T2 _memory;T3 _last_character;T6 _end_of_file;T0* _character_buffer;};
extern T176 M176;
struct S409{Tid id;T0* _variables;T0* _error_handler;};
extern T409 M409;
struct S316{Tid id;T0* _first;T0* _second;};
extern T316 M316;
struct S417{Tid id;T0* _parameters;};
extern T417 M417;
struct S375{Tid id;T0* _class_name;T0* _features;};
extern T375 M375;
struct S190{Tid id;T0* _ast_factory;T0* _error_handler;T0* _library_parser;T0* _parsed_libraries;T0* _xml_parser;T0* _xml_validator;T0* _xml_preprocessor;T0* _last_system;};
extern T190 M190;
struct S309{Tid id;T0* _container;T6 _after;T6 _before;T0* _current_cell;T0* _next_cursor;};
extern T309 M309;
struct S270{Tid id;T0* _parameters;};
extern T270 M270;
struct S214{Tid id;T216 _storage;T2 _capacity;T2 _upper;};
extern T214 M214;
struct S242{Tid id;T244 _storage;T2 _capacity;T2 _upper;};
extern T242 M242;
struct S268{Tid id;T0* _declared_address_expression;T0* _declared_arguments;T0* _declared_array_optimization;T0* _declared_assertion;T0* _declared_case_insensitive;T0* _declared_check_vape;T0* _declared_clean;T0* _declared_component;T0* _declared_console_application;T0* _declared_create_keyword_extension;T0* _declared_dead_code_removal;T0* _declared_debug_option;T0* _declared_debug_tag;T0* _declared_debugger;T0* _declared_document;T0* _declared_dynamic_runtime;T0* _declared_exception_trace;T0* _declared_finalize;T0* _declared_flat_fst_optimization;T2 _declared_fst_expansion_factor;T0* _declared_fst_optimization;T0* _declared_garbage_collector;T0* _declared_gc_info;T2 _declared_heap_size;T0* _declared_inlining;T2 _declared_inlining_size;T0* _declared_jumps_optimization;T0* _declared_layout_optimization;T0* _declared_leaves_optimization;T0* _declared_line_generation;T0* _declared_linker;T0* _declared_linux_fpu_double_precision;T0* _declared_manifest_string_trace;T0* _declared_map;T0* _declared_multithreaded;T0* _declared_no_default_lib;T0* _declared_override_cluster;T0* _declared_portable_code_generation;T0* _declared_precompiled;T0* _declared_profile;T0* _declared_reloads_optimization;T0* _declared_shared_library_definition;T0* _declared_split;T2 _declared_stack_size;T0* _declared_storable_filename;T0* _declared_strip_option;T0* _declared_target;T0* _declared_trace;T0* _declared_verbose;T0* _declared_visible_filename;T0* _declared_warning;T0* _declared_wedit;};
extern T268 M268;
struct S138{Tid id;};
extern T138 M138;
struct S305{Tid id;T123 _storage;T2 _capacity;T2 _upper;T2 _lower;};
extern T305 M305;
struct S241{Tid id;T2 _count;T2 _capacity;T0* _storage;T0* _fixed_array_;T0* _internal_cursor;};
extern T241 M241;
struct S267{Tid id;T0* _exported_classes;T0* _include_directories;T0* _link_libraries;};
extern T267 M267;
struct S387{Tid id;T0* _container;T6 _after;T6 _before;T0* _current_cell;T0* _next_cursor;};
extern T387 M387;
struct S394{Tid id;T0* _item;T0* _right;};
extern T394 M394;
struct S499{Tid id;};
extern T499 M499;
struct S43{Tid id;};
extern T43 M43;
struct S390{Tid id;T0* _item;T0* _right;};
extern T390 M390;
struct S372{Tid id;T0* _parameters;};
extern T372 M372;
struct S189{Tid id;T0* _system_name;T0* _root_class_name;T0* _creation_procedure_name;T0* _options;T0* _clusters;T0* _libraries;T0* _externals;};
extern T189 M189;
struct S210{Tid id;T0* _equality_tester;T0* _key_equality_tester;T2 _count;T2 _capacity;T2 _last_position;T2 _modulus;T2 _free_slot;T2 _position;T2 _slots_position;T2 _clashes_previous_position;T2 _found_position;T0* _internal_cursor;T0* _items;T0* _keys;T0* _clashes;T0* _slots;T0* _fixed_item_array_;T0* _fixed_key_array_;};
extern T210 M210;
struct S483{Tid id;};
extern T483 M483;
struct S44{Tid id;};
extern T44 M44;
struct S228{Tid id;T0* _table;};
extern T228 M228;
struct S315{Tid id;T0* _container;T6 _after;T6 _before;T0* _current_cell;T0* _next_cursor;};
extern T315 M315;
struct S125{Tid id;};
extern T125 M125;
struct S191{Tid id;T0* _ast_factory;T0* _error_handler;T0* _library_parser;T0* _parsed_libraries;T0* _xml_parser;T0* _xml_validator;T0* _xml_preprocessor;};
extern T191 M191;
struct S92{Tid id;T0* _container;T6 _after;T6 _before;T0* _current_cell;T0* _next_cursor;};
extern T92 M92;
struct S136{Tid id;T0* _xace_filename;T0* _variables;T0* _error_handler;T0* _generators;};
extern T136 M136;
struct S497{Tid id;T0* _first;T0* _second;};
extern T497 M497;
struct S134{Tid id;T0* _output_filename;T0* _variables;T0* _error_handler;};
extern T134 M134;
struct S168{Tid id;T2 _position;T0* _container;T0* _next_cursor;};
extern T168 M168;
struct S492{Tid id;T6 _push_back_flag;T464 _basic_directory;T2 _memory;T0* _name;T3 _last_character;T6 _end_of_file;T0* _character_buffer;};
extern T492 M492;
struct S39{Tid id;T2 _item;};
extern T39 M39;
struct S488{Tid id;T2 _count;T9 _area;T0* _area_string;};
extern T488 M488;
struct S144{Tid id;T0* _first;T0* _second;};
extern T144 M144;
struct S514{Tid id;T0* _item;T0* _right;};
extern T514 M514;
struct S355{Tid id;T3 _value;};
extern T355 M355;
struct S406{Tid id;T0* _container;T6 _after;T6 _before;T0* _current_cell;T0* _next_cursor;};
extern T406 M406;
struct S175{Tid id;T8 _item;};
extern T175 M175;
struct S332{Tid id;T0* _parameters;};
extern T332 M332;
struct S325{Tid id;T2 _count;T0* _first_cell;T0* _last_cell;T0* _internal_cursor;};
extern T325 M325;
struct S247{Tid id;T2 _count;T2 _capacity;T0* _storage;T0* _fixed_array_;T0* _internal_cursor;};
extern T247 M247;
struct S33{Tid id;T0* _container;T6 _after;T6 _before;T0* _current_cell;T0* _next_cursor;};
extern T33 M33;
struct S458{Tid id;T0* _name;T0* _path;T8 _output_stream;};
extern T458 M458;
struct S354{Tid id;T2 _position;T0* _container;T0* _next_cursor;};
extern T354 M354;
struct S393{Tid id;T2 _count;T0* _first_cell;T0* _last_cell;T0* _internal_cursor;};
extern T393 M393;
struct S131{Tid id;T0* _output_filename;T0* _variables;T0* _error_handler;};
extern T131 M131;
struct S437{Tid id;};
extern T437 M437;
struct S338{Tid id;};
extern T338 M338;
struct S226{Tid id;T2 _position;T0* _container;T0* _next_cursor;};
extern T226 M226;
struct S300{Tid id;};
extern T300 M300;
struct S249{Tid id;T251 _storage;T2 _capacity;T2 _upper;};
extern T249 M249;
struct S526{Tid id;};
extern T526 M526;
struct S522{Tid id;T0* _parent;T0* _data;};
extern T522 M522;
struct S108{Tid id;T0* _defined_values;};
extern T108 M108;
struct S137{Tid id;T0* _xace_filename;T0* _variables;T0* _error_handler;};
extern T137 M137;
struct S104{Tid id;T0* _parameters;};
extern T104 M104;
struct S498{Tid id;T2 _count;T0* _first_cell;T0* _last_cell;T0* _internal_cursor;};
extern T498 M498;
struct S336{Tid id;};
extern T336 M336;
struct S209{Tid id;T0* _name;T0* _options;T0* _clusters;T0* _libraries;T0* _externals;};
extern T209 M209;
struct S107{Tid id;T0* _output_filename;T0* _variables;T0* _error_handler;};
extern T107 M107;
struct S245{Tid id;};
extern T245 M245;
struct S519{Tid id;T0* _parent;T0* _content;};
extern T519 M519;
struct S160{Tid id;T0* _name;};
extern T160 M160;
struct S411{Tid id;T0* _item;};
extern T411 M411;
struct S445{Tid id;T2 _position;T0* _container;T0* _next_cursor;};
extern T445 M445;
struct S463{Tid id;T0* _parameters;};
extern T463 M463;
struct S38{Tid id;T6 _item;};
extern T38 M38;
struct S370{Tid id;T2 _position;T0* _container;T0* _next_cursor;};
extern T370 M370;
struct S155{Tid id;T0* _equality_tester;T2 _count;T0* _first_cell;T0* _last_cell;T0* _internal_cursor;};
extern T155 M155;
struct S75{Tid id;T77 _storage;T2 _capacity;T2 _upper;};
extern T75 M75;
extern T335 M335;
struct S193{Tid id;};
extern T193 M193;
struct S67{Tid id;T0* _item;T0* _right;};
extern T67 M67;
struct S413{Tid id;T0* _parameters;};
extern T413 M413;
struct S208{Tid id;T0* _error_handler;T6 _has_error;};
extern T208 M208;
struct S133{Tid id;T0* _output_filename;T0* _variables;T0* _error_handler;};
extern T133 M133;
struct S525{Tid id;};
extern T525 M525;
struct S331{Tid id;T0* _ast_factory;T0* _error_handler;T0* _library_parser;T0* _parsed_libraries;T0* _xml_parser;T0* _xml_validator;T0* _xml_preprocessor;T0* _last_library;};
extern T331 M331;
struct S414{Tid id;T0* _parameters;};
extern T414 M414;
struct S373{Tid id;T0* _parameters;};
extern T373 M373;
struct S454{Tid id;};
extern T454 M454;
struct S7{Tid id;T9 _storage;T2 _count;T2 _capacity;};
extern T7 M7;
struct S457{Tid id;T0* _parameters;};
extern T457 M457;
struct S412{Tid id;};
extern T412 M412;
struct S449{Tid id;};
extern T449 M449;
struct S16{Tid id;T2 _next_option_position;T0* _commands;T0* _variables;T0* _error_handler;};
extern T16 M16;
struct S303{Tid id;T2 _count;T0* _storage;T2 _storage_count;T2 _last_index;T2 _last_storage_slice_start;T2 _storage_slice_start;};
extern T303 M303;
struct S229{Tid id;T0* _parent;T2 _count;T0* _first_cell;T0* _last_cell;T0* _internal_cursor;T0* _namespaces;T0* _root_element;};
extern T229 M229;
extern T464 M464;
struct S132{Tid id;T0* _output_filename;T0* _variables;T0* _error_handler;};
extern T132 M132;
struct S496{Tid id;T0* _first;T0* _second;};
extern T496 M496;
struct S101{Tid id;};
extern T101 M101;
struct S312{Tid id;T0* _item;T0* _right;};
extern T312 M312;
struct S302{Tid id;T2 _type;};
extern T302 M302;
struct S333{Tid id;T0* _parameters;};
extern T333 M333;
struct S235{Tid id;T0* _clusters;};
extern T235 M235;
struct S275{Tid id;};
extern T275 M275;
struct S431{Tid id;T0* _equality_tester;T0* _key_equality_tester;T2 _count;T2 _capacity;T2 _last_position;T2 _modulus;T2 _free_slot;T2 _position;T2 _slots_position;T2 _clashes_previous_position;T2 _found_position;T0* _internal_cursor;T0* _items;T0* _keys;T0* _clashes;T0* _slots;T0* _fixed_item_array_;T0* _fixed_key_array_;};
extern T431 M431;
struct S416{Tid id;T0* _parameters;};
extern T416 M416;
struct S121{Tid id;T123 _storage;T2 _capacity;T2 _upper;};
extern T121 M121;
struct S266{Tid id;T0* _i_representation;};
extern T266 M266;
extern T295 M295;
struct S118{Tid id;T0* _equality_tester;T0* _key_equality_tester;T2 _count;T2 _capacity;T2 _last_position;T2 _modulus;T2 _free_slot;T2 _position;T2 _slots_position;T2 _clashes_previous_position;T2 _found_position;T0* _internal_cursor;T0* _items;T0* _keys;T0* _clashes;T0* _slots;T0* _fixed_item_array_;T0* _fixed_key_array_;};
extern T118 M118;
struct S79{Tid id;T0* _xace_filename;T0* _variables;T0* _error_handler;T0* _generators;};
extern T79 M79;
struct S334{Tid id;};
extern T334 M334;
struct S520{Tid id;T0* _parent;T0* _target;T0* _data;};
extern T520 M520;
struct S337{Tid id;T2 _last_code;T2 _next_pos;};
extern T337 M337;
struct S517{Tid id;T0* _uri;};
extern T517 M517;
struct S145{Tid id;T0* _container;T6 _after;T6 _before;T0* _current_cell;T0* _next_cursor;};
extern T145 M145;
struct S491{Tid id;T0* _content;T2 _count;T2 _capacity;T2 _position;T2 _column;T2 _line;T2 _index;T6 _beginning_of_line;T6 _filled;T6 _interactive;T0* _file;T6 _end_of_file;};
extern T491 M491;
struct S139{Tid id;T464 _basic_directory;T0* _name;};
extern T139 M139;
struct S238{Tid id;T6 _is_abstract;T6 _is_relative;T0* _name;T0* _prefixed_name;T0* _pathname;T0* _libraries;T0* _options;T0* _externals;T6 _is_mounted;T0* _parent;T0* _subclusters;};
extern T238 M238;
struct S453{Tid id;};
extern T453 M453;
struct S161{Tid id;T464 _basic_directory;T0* _name;};
extern T161 M161;
struct S494{Tid id;T0* _source;T2 _byte_index;T2 _column;T2 _row;};
extern T494 M494;
struct S306{Tid id;T0* _parent;T0* _name;T0* _ns_prefix;T0* _value;};
extern T306 M306;
struct S392{Tid id;T0* _feature_name;T0* _external_name;};
extern T392 M392;
struct S234{Tid id;T0* _libraries;};
extern T234 M234;
struct S127{Tid id;};
extern T127 M127;
struct S103{Tid id;T77 _storage;T2 _capacity;T2 _upper;T2 _lower;};
extern T103 M103;
struct S448{Tid id;T452 _storage;T2 _capacity;T2 _upper;};
extern T448 M448;
struct S482{Tid id;T486 _storage;T2 _capacity;T2 _upper;};
extern T482 M482;
struct S423{Tid id;T0* _event_implementation;T0* _document;T0* _last_position_table;T0* _current_node;T0* _current_open_composite;};
extern T423 M423;
struct S198{Tid id;T0* _implementation;};
extern T198 M198;
struct S304{Tid id;T2 _count;T0* _storage;};
extern T304 M304;
struct S232{Tid id;T0* _parent;T0* _ns_prefix;T0* _first_cell;T0* _last_cell;T0* _internal_cursor;T0* _namespaces;T0* _name;T2 _count;};
extern T232 M232;
struct S78{Tid id;T3 _item;};
extern T78 M78;
struct S376{Tid id;T2 _count;T0* _first_cell;T0* _last_cell;T0* _internal_cursor;};
extern T376 M376;
struct S470{Tid id;T2 _error_count;T0* _yyr1;T0* _yyr2;T0* _yydefact;T0* _yydefgoto;T0* _yypact;T0* _yypgoto;T0* _yytable;T0* _yycheck;T0* _yyvs;T0* _yyss;T2 _yyvsp;T2 _yyssp;T0* _yyval;T6 _yy_lookahead_needed;T2 _yyerrstatus;T0* _fixed_array_;T2 _position_nat_parser;T2 _yy_start_state;T0* _yy_content;T2 _yy_column;T2 _yy_last_accepting_state;T2 _yy_last_accepting_cpos;T0* _interface;T2 _last_token;T0* _input_buffer;T2 _line;T2 _column;T2 _yy_end;T2 _yy_start;T2 _yy_position;T2 _yy_more_len;T0* _yy_nxt;T0* _yy_chk;T0* _yy_base;T0* _yy_def;T0* _yy_ec;T0* _yy_meta;T0* _yy_accept;T0* _yy_acclist;T6 _yy_rejected;T2 _yy_state_count;T2 _yy_looking_for_trail_begin;T2 _yy_full_lp;T2 _yy_full_state;T0* _last_value;T0* _yytranslate;T2 _yy_parsing_status;T2 _yy_line;T6 _yy_more_flag;T0* _yy_state_stack;T2 _yy_full_match;T2 _yy_lp;T0* _tmp_uc_pair;T0* _source;T2 _last_error;T0* _last_error_description;};
extern T470 M470;
struct S87{Tid id;T2 _count;T0* _first_cell;T0* _last_cell;T0* _internal_cursor;};
extern T87 M87;
struct S237{Tid id;T6 _is_root;T0* _pathname;T0* _library;T0* _library_prefix;T0* _position;};
extern T237 M237;
struct S130{Tid id;};
extern T130 M130;
struct S527{Tid id;T2 _i_code;};
extern T527 M527;
struct S142{Tid id;T464 _basic_directory;};
extern T142 M142;
struct S274{Tid id;};
extern T274 M274;
struct S286{Tid id;T0* _container;T2 _position;T0* _next_cursor;};
extern T286 M286;
struct S68{Tid id;T0* _program_name;};
extern T68 M68;
struct S374{Tid id;T0* _parameters;};
extern T374 M374;
struct S419{Tid id;T0* _te_ep_tree_fact;T0* _te_ef_tree_fact;};
extern T419 M419;
struct S34{Tid id;T0* _error_file;T0* _warning_file;T0* _message_file;T2 _error_count;};
extern T34 M34;
struct S63{Tid id;T2 _count;T0* _first_cell;T0* _last_cell;T0* _internal_cursor;};
extern T63 M63;
/*
-- This file is  free  software, which  comes  along  with  SmallEiffel. This
-- software  is  distributed  in the hope that it will be useful, but WITHOUT
-- ANY  WARRANTY;  without  even  the  implied warranty of MERCHANTABILITY or
-- FITNESS  FOR A PARTICULAR PURPOSE. You can modify it as you want, provided
-- this header is kept unaltered, and a notification of the changes is added.
-- You  are  allowed  to  redistribute  it and sell it, alone or as a part of
-- another product.
--       Copyright (C) 1994-2002 LORIA - INRIA - U.H.P. Nancy 1 - FRANCE
--          Dominique COLNET and Suzanne COLLIN - SmallEiffel@loria.fr
--                       http://SmallEiffel.loria.fr
--
*/

/*
  This file (SmallEiffel/sys/runtime/boost.h) is automatically included when
  `run_control.boost' is true (ie. only for mode -boost).
*/
#define SE_BOOST 1
void se_print_run_time_stack (void);
void se_signal_handler(int sig);
/*
-- This file is  free  software, which  comes  along  with  SmallEiffel. This
-- software  is  distributed  in the hope that it will be useful, but WITHOUT
-- ANY  WARRANTY;  without  even  the  implied warranty of MERCHANTABILITY or
-- FITNESS  FOR A PARTICULAR PURPOSE. You can modify it as you want, provided
-- this header is kept unaltered, and a notification of the changes is added.
-- You  are  allowed  to  redistribute  it and sell it, alone or as a part of
-- another product.
--       Copyright (C) 1994-2002 LORIA - INRIA - U.H.P. Nancy 1 - FRANCE
--          Dominique COLNET and Suzanne COLLIN - SmallEiffel@loria.fr
--                       http://SmallEiffel.loria.fr
--
*/
/*
  This file (SmallEiffel/sys/runtime/exception.h) is automatically included
  when exception handling is used somewhere in the live code.
*/

#define SE_EXCEPTIONS 1

/*
  Constants from Eiffel class EXCEPTIONS :
*/
#define Check_instruction 	  1
#define Class_invariant 	  2
#define Developer_exception 	  3
#define Incorrect_inspect_value   4
#define Loop_invariant 		  5
#define Loop_variant 		  6
#define No_more_memory  	  7
#define Postcondition 		  8
#define Precondition  		  9
#define Routine_failure  	  10
#define	Os_signal		  11
#define Void_attached_to_expanded 12
#define Void_call_target 	  13
#define System_level_type_error	  14

/*
   This will be the structure of rescue contexts.  A rescue context
   will be declared for every routine that has a rescue clause.

   The `next' pointer is the address of the next rescue context if there
   is one higher up the call chain, or NULL if there is no other
   context.
*/
struct rescue_context {
  JMP_BUF jb;
#ifdef SE_NO_CHECK
  /* To keep track of dump stack to unwind it safely
     before the LONGJMP :
  */
  struct _se_dump_stack * top_of_ds ;
#endif
  struct rescue_context *next;
};

extern struct rescue_context *rescue_context_top;
extern int internal_exception_number;
extern int original_internal_exception_number;
extern int signal_exception_number;
extern char *additional_error_message;

void setup_signal_handler(void);
void signal_exception_handler(int);
void internal_exception_handler(int);
void print_exception(void);
/*
-- This file is  free  software, which  comes  along  with  SmallEiffel. This
-- software  is  distributed  in the hope that it will be useful, but WITHOUT
-- ANY  WARRANTY;  without  even  the  implied warranty of MERCHANTABILITY or
-- FITNESS  FOR A PARTICULAR PURPOSE. You can modify it as you want, provided
-- this header is kept unaltered, and a notification of the changes is added.
-- You  are  allowed  to  redistribute  it and sell it, alone or as a part of
-- another product.
--       Copyright (C) 1994-2002 LORIA - INRIA - U.H.P. Nancy 1 - FRANCE
--          Dominique COLNET and Suzanne COLLIN - SmallEiffel@loria.fr
--                       http://SmallEiffel.loria.fr
--
*/
/*
  This file (SmallEiffel/sys/runtime/basic_directory.h) is automatically
  included when some external "SmallEiffel" feature of class BASIC_DIRECTORY
  is live.
*/
#ifndef WIN32
#include <dirent.h>
#endif
#ifndef WIN32
#include <unistd.h>
#endif

EIF_POINTER basic_directory_open(EIF_POINTER path);
EIF_POINTER basic_directory_read_entry(EIF_POINTER dirstream);
EIF_POINTER basic_directory_get_entry_name(EIF_POINTER entry);
EIF_BOOLEAN basic_directory_close(EIF_POINTER dirstream);
#define basic_directory_current_working_directory (basic_directory_cwd())
EIF_POINTER basic_directory_cwd(void);
EIF_BOOLEAN basic_directory_chdir(EIF_POINTER destination);
EIF_BOOLEAN basic_directory_mkdir(EIF_POINTER directory_path);
EIF_BOOLEAN basic_directory_rmdir(EIF_POINTER directory_path);
/*
-- This file is  free  software, which  comes  along  with  SmallEiffel. This
-- software  is  distributed  in the hope that it will be useful, but WITHOUT
-- ANY  WARRANTY;  without  even  the  implied warranty of MERCHANTABILITY or
-- FITNESS  FOR A PARTICULAR PURPOSE. You can modify it as you want, provided
-- this header is kept unaltered, and a notification of the changes is added.
-- You  are  allowed  to  redistribute  it and sell it, alone or as a part of
-- another product.
--       Copyright (C) 1994-2002 LORIA - INRIA - U.H.P. Nancy 1 - FRANCE
--          Dominique COLNET and Suzanne COLLIN - SmallEiffel@loria.fr
--                       http://SmallEiffel.loria.fr
--
*/
/*
  This file (SmallEiffel/sys/runtime/basic_io.h) is automatically
  included when some external "SmallEiffel" basic_io_* feature is used.
*/

#define basic_io_stdin (stdin)
#define basic_io_stdout (stdout)
#define basic_io_stderr (stderr)
#define basic_io_eof (EOF)
#define basic_io_text_file_read_open(p) (fopen(((char*)(p)),"r"))
#define basic_io_text_file_write_open(p) (fopen(((char*)(p)),"w"))
#define basic_io_text_file_write_append(p) (fopen(((char*)(p)),"a"))
#define basic_io_text_file_read_write_open(p) (fopen(((char*)(p)),"r+"))
#define basic_io_text_file_read_write_append(p) (fopen(((char*)(p)),"a+"))
#define basic_io_binary_file_read_open(p) (fopen(((char*)(p)),"rb"))
#define basic_io_binary_file_write_open(p) (fopen(((char*)(p)),"wb"))
#define basic_io_binary_file_write_append(p) (fopen(((char*)(p)),"ab"))
#define basic_io_fclose(p) (fclose((FILE*)(p)))
#define basic_io_flush(p) (fflush((FILE*)(p)))
#define basic_io_getc(f) (getc(((FILE*)(f))))
#define basic_io_putc(b, f) (putc((b),((FILE*)(f))))
#define basic_io_feof(f) (feof(((FILE*)(f))))
#define basic_io_rename(o, n) (rename(((char*)(o)),((char*)(n))))
#define basic_io_remove(f) (remove(((char*)(f))))
/*
-- This file is  free  software, which  comes  along  with  SmallEiffel. This
-- software  is  distributed  in the hope that it will be useful, but WITHOUT
-- ANY  WARRANTY;  without  even  the  implied warranty of MERCHANTABILITY or
-- FITNESS  FOR A PARTICULAR PURPOSE. You can modify it as you want, provided
-- this header is kept unaltered, and a notification of the changes is added.
-- You  are  allowed  to  redistribute  it and sell it, alone or as a part of
-- another product.
--       Copyright (C) 1994-2002 LORIA - INRIA - U.H.P. Nancy 1 - FRANCE
--          Dominique COLNET and Suzanne COLLIN - SmallEiffel@loria.fr
--                       http://SmallEiffel.loria.fr
--
*/
/*
  This file (SmallEiffel/sys/runtime/basic_getenv.h) is automatically
  included when the GENERAL.basic_getenv feature is used (ie. in live code).
*/

#define basic_getenv(v) (getenv((char*)v))
T6 r8is_null(T8 C);
extern T0*oBC8string_buffer;
void r8append_in(T8 C,T0* a1);
T6 r6_ix_not(T6 C);
T6 r6_px_or(T6 C,T6 a1);
T6 r6_px_and(T6 C,T6 a1);
T6 r3_px_6061(T3 C,T3 a1);
T6 r3is_digit(T3 C);
T6 r3is_separator(T3 C);
T6 r3_px_6261(T3 C,T3 a1);
T2 r3value(T3 C);
T6 r3_px_60(T3 C,T3 a1);
T2 r3decimal_value(T3 C);
T3 r3to_lower(T3 C);
T0* r2out(T2 C);
T2 r2max(T2 C,T2 a1);
T2 r2min(T2 C,T2 a1);
T3 r2digit(T2 C);
void r2append_in(T2 C,T0* a1);
extern T0*oBC1tagged_out_memory;
void r251clear_all(T251 C,T2 a1);
T251 r251realloc(T251 C,T2 a1,T2 a2);
void r251set_all_with(T251 C,T0* a1,T2 a2);
T6 r251fast_memcmp(T251 C,T251 a1,T2 a2);
void r251clear(T251 C,T2 a1,T2 a2);
void r251copy_from(T251 C,T251 a1,T2 a2);
void r216clear_all(T216 C,T2 a1);
T216 r216realloc(T216 C,T2 a1,T2 a2);
void r216set_all_with(T216 C,T0* a1,T2 a2);
T6 r216fast_memcmp(T216 C,T216 a1,T2 a2);
void r216clear(T216 C,T2 a1,T2 a2);
void r216copy_from(T216 C,T216 a1,T2 a2);
void r244clear_all(T244 C,T2 a1);
T244 r244realloc(T244 C,T2 a1,T2 a2);
void r244set_all_with(T244 C,T0* a1,T2 a2);
T6 r244fast_memcmp(T244 C,T244 a1,T2 a2);
void r244clear(T244 C,T2 a1,T2 a2);
void r244copy_from(T244 C,T244 a1,T2 a2);
void r77clear_all(T77 C,T2 a1);
T77 r77realloc(T77 C,T2 a1,T2 a2);
T6 r77fast_memcmp(T77 C,T77 a1,T2 a2);
void r77set_all_with(T77 C,T0* a1,T2 a2);
void r77clear(T77 C,T2 a1,T2 a2);
void r77copy_from(T77 C,T77 a1,T2 a2);
void r9copy_slice(T9 C,T2 a1,T9 a2,T2 a3,T2 a4);
T9 r9realloc(T9 C,T2 a1,T2 a2);
void r9set_all_with(T9 C,T3 a1,T2 a2);
T6 r9fast_memcmp(T9 C,T9 a1,T2 a2);
void r9copy_at(T9 C,T2 a1,T9 a2,T2 a3);
void r9clear(T9 C,T2 a1,T2 a2);
void r9copy_from(T9 C,T9 a1,T2 a2);
void r452clear_all(T452 C,T2 a1);
T452 r452realloc(T452 C,T2 a1,T2 a2);
void r452set_all_with(T452 C,T0* a1,T2 a2);
T6 r452fast_memcmp(T452 C,T452 a1,T2 a2);
void r452clear(T452 C,T2 a1,T2 a2);
void r452copy_from(T452 C,T452 a1,T2 a2);
void r123clear_all(T123 C,T2 a1);
T123 r123realloc(T123 C,T2 a1,T2 a2);
void r123move(T123 C,T2 a1,T2 a2,T2 a3);
T6 r123fast_memcmp(T123 C,T123 a1,T2 a2);
void r123set_all_with(T123 C,T2 a1,T2 a2);
void r123clear(T123 C,T2 a1,T2 a2);
void r123copy_from(T123 C,T123 a1,T2 a2);
void r486clear_all(T486 C,T2 a1);
T486 r486realloc(T486 C,T2 a1,T2 a2);
T6 r486fast_memcmp(T486 C,T486 a1,T2 a2);
void r486set_all_with(T486 C,T0* a1,T2 a2);
void r486clear(T486 C,T2 a1,T2 a2);
void r486copy_from(T486 C,T486 a1,T2 a2);
void r7copy(T7* C,T0* a1);
T0* r7substring(T7* C,T2 a1,T2 a2);
T6 r7is_equal(T7* C,T0* a1);
T6 r7valid_index(T7* C,T2 a1);
void r7append(T7* C,T0* a1);
T6 r7se_assigned_from(T0* a1);
T2 r7index_of(T7* C,T3 a1,T2 a2);
void r7remove_tail(T7* C,T2 a1);
T6 r7is_integer(T7* C);
void r7make(T7* C,T2 a1);
void r7append_string(T7* C,T0* a1);
void r7make_filled(T7* C,T3 a1,T2 a2);
T0* r7_px_43(T7* C,T0* a1);
void r7extend(T7* C,T3 a1);
T2 r7hash_code(T7* C);
T6 r7conforms_to(T7* C,T0* a1);
T2 r7to_integer(T7* C);
void r7append_character(T7* C,T3 a1);
void r7resize(T7* C,T2 a1);
void r7from_external_copy(T7* C,T8 a1);
T8 r7to_external(T7* C);
T0* r7twin(T7* C);
void r7swap(T7* C,T2 a1,T2 a2);
void r214copy(T214* C,T0* a1);
T6 r214is_equal(T214* C,T0* a1);
T6 r214se_assigned_from(T0* a1);
void r214make(T214* C,T2 a1);
T6 r214conforms_to(T214* C,T0* a1);
void r214resize(T214* C,T2 a1);
T0* r214twin(T214* C);
void r242copy(T242* C,T0* a1);
T6 r242is_equal(T242* C,T0* a1);
T6 r242se_assigned_from(T0* a1);
void r242make(T242* C,T2 a1);
T6 r242conforms_to(T242* C,T0* a1);
void r242resize(T242* C,T2 a1);
T0* r242twin(T242* C);
void r305copy(T305* C,T0* a1);
T2 r305count(T305* C);
T6 r305is_equal(T305* C,T0* a1);
T2 r305item(T305* C,T2 a1);
T6 r305se_assigned_from(T0* a1);
void r305make(T305* C,T2 a1,T2 a2);
T6 r305conforms_to(T305* C,T0* a1);
void r305resize(T305* C,T2 a1,T2 a2);
T0* r305twin(T305* C);
void r249copy(T249* C,T0* a1);
T6 r249is_equal(T249* C,T0* a1);
T6 r249se_assigned_from(T0* a1);
void r249make(T249* C,T2 a1);
T6 r249conforms_to(T249* C,T0* a1);
void r249resize(T249* C,T2 a1);
T0* r249twin(T249* C);
void r75copy(T75* C,T0* a1);
T6 r75is_equal(T75* C,T0* a1);
T6 r75se_assigned_from(T0* a1);
void r75make(T75* C,T2 a1);
T6 r75conforms_to(T75* C,T0* a1);
void r75resize(T75* C,T2 a1);
T0* r75twin(T75* C);
void r121copy(T121* C,T0* a1);
T6 r121is_equal(T121* C,T0* a1);
T6 r121se_assigned_from(T0* a1);
void r121make(T121* C,T2 a1);
T6 r121conforms_to(T121* C,T0* a1);
void r121resize(T121* C,T2 a1);
T0* r121twin(T121* C);
void r121with_capacity(T121* C,T2 a1);
void r121from_collection(T121* C,T0* a1);
void r103copy(T103* C,T0* a1);
T2 r103count(T103* C);
T6 r103is_equal(T103* C,T0* a1);
T0* r103item(T103* C,T2 a1);
T6 r103valid_index(T103* C,T2 a1);
T6 r103se_assigned_from(T0* a1);
void r103make(T103* C,T2 a1,T2 a2);
T6 r103conforms_to(T103* C,T0* a1);
T0* r103twin(T103* C);
void r448copy(T448* C,T0* a1);
T6 r448is_equal(T448* C,T0* a1);
T6 r448se_assigned_from(T0* a1);
void r448make(T448* C,T2 a1);
T6 r448conforms_to(T448* C,T0* a1);
void r448resize(T448* C,T2 a1);
T0* r448twin(T448* C);
void r482copy(T482* C,T0* a1);
T2 r482count(T482* C);
T6 r482is_equal(T482* C,T0* a1);
T0* r482item(T482* C,T2 a1);
T6 r482se_assigned_from(T0* a1);
void r482make(T482* C,T2 a1);
T6 r482conforms_to(T482* C,T0* a1);
void r482resize(T482* C,T2 a1);
T0* r482twin(T482* C);
void r511copy(T511* C,T0* a1);
void r511set(T511* C,T0* a1,T6 a2,T6 a3);
T6 r511is_equal(T511* C,T0* a1);
T6 r511same_position(T511* C,T0* a1);
T6 r511se_assigned_from(T0* a1);
T6 r511same_type(T511* C,T0* a1);
void r511make(T511* C,T0* a1);
T6 r511conforms_to(T511* C,T0* a1);
void r511set_after(T511* C);
T0* r511twin(T511* C);
T6 r363is_equal(T363* C,T0* a1);
T6 r363se_assigned_from(T0* a1);
T6 r363conforms_to(T363* C,T0* a1);
T0* r363twin(T363* C);
T2 r343new_capacity(T2 a1);
void r343copy(T343* C,T0* a1);
void r343make_equal(T343* C,T2 a1);
void r343make_clashes(T343* C,T2 a1);
T0* r343cursor_item(T343* C,T0* a1);
void r343search_position(T343* C,T0* a1);
T6 r343is_equal(T343* C,T0* a1);
void r343remove_traversing_cursor(T343* C,T0* a1);
void r343clone_slots(T343* C);
void r343clone_clashes(T343* C);
void r343move_all_cursors_after(T343* C);
void r343make_items(T343* C,T2 a1);
void r343add_traversing_cursor(T343* C,T0* a1);
T6 r343se_assigned_from(T0* a1);
T0* r343clone(T0* a1);
T6 r343same_type(T343* C,T0* a1);
void r343put_new(T343* C,T0* a1);
void r343slots_wipe_out(T343* C);
void r343make(T343* C,T2 a1);
void r343clashes_wipe_out(T343* C);
T6 r343equal(T0* a1,T0* a2);
void r343clone_items(T343* C);
T6 r343same_equality_tester(T343* C,T0* a1);
T6 r343cursor_after(T0* a1);
T6 r343conforms_to(T343* C,T0* a1);
T6 r343has(T343* C,T0* a1);
T2 r343hash_position(T343* C,T0* a1);
void r343cursor_forth(T343* C,T0* a1);
extern T0*oBC112fixed_integer_array_;
void r343items_resize(T343* C,T2 a1);
void r343resize(T343* C,T2 a1);
T6 r343cursor_same_position(T0* a1,T0* a2);
void r343cursor_start(T343* C,T0* a1);
void r343clashes_resize(T343* C,T2 a1);
void r343slots_resize(T343* C,T2 a1);
T0* r343twin(T343* C);
void r343force_last(T343* C,T0* a1);
T0* r343new_cursor(T343* C);
void r343make_slots(T343* C,T2 a1);
void r343put_last(T343* C,T0* a1);
void r343move_all_cursors(T343* C,T2 a1,T2 a2);
T2 r343new_modulus(T2 a1);
T6 r343cursor_off(T0* a1);
void r343compress(T343* C);
T6 r327is_equal(T327* C,T0* a1);
T6 r327se_assigned_from(T0* a1);
T6 r327conforms_to(T327* C,T0* a1);
T0* r327twin(T327* C);
void r356copy(T356* C,T0* a1);
void r356make_equal(T356* C,T2 a1);
void r356make_clashes(T356* C,T2 a1);
void r356search_position(T356* C,T0* a1);
T6 r356is_equal(T356* C,T0* a1);
void r356remove_traversing_cursor(T356* C,T0* a1);
void r356clone_slots(T356* C);
T2 r356item(T356* C,T0* a1);
void r356clone_clashes(T356* C);
void r356move_all_cursors_after(T356* C);
void r356make_items(T356* C,T2 a1);
void r356add_traversing_cursor(T356* C,T0* a1);
T6 r356se_assigned_from(T0* a1);
T0* r356clone(T0* a1);
T6 r356same_type(T356* C,T0* a1);
void r356put_new(T356* C,T2 a1,T0* a2);
void r356clone_items(T356* C);
T6 r356conforms_to(T356* C,T0* a1);
T6 r356has(T356* C,T0* a1);
void r356make_keys(T356* C,T2 a1);
T2 r356hash_position(T356* C,T0* a1);
void r356clone_keys(T356* C);
T2 r356found_item(T356* C);
void r356make_with_equality_testers(T356* C,T2 a1,T0* a2,T0* a3);
T6 r356cursor_same_position(T0* a1,T0* a2);
T6 r356found(T356* C);
void r356search(T356* C,T0* a1);
T0* r356twin(T356* C);
T0* r356new_cursor(T356* C);
void r356make_slots(T356* C,T2 a1);
T2 r356new_modulus(T2 a1);
T6 r356cursor_off(T0* a1);
T6 r105is_equal(T105* C,T0* a1);
T6 r105se_assigned_from(T0* a1);
T6 r105conforms_to(T105* C,T0* a1);
T0* r105twin(T105* C);
T6 r157is_equal(T157* C,T0* a1);
T6 r157se_assigned_from(T0* a1);
T6 r157conforms_to(T157* C,T0* a1);
T0* r157twin(T157* C);
void r263copy(T263* C,T0* a1);
T6 r263is_equal(T263* C,T0* a1);
T6 r263same_position(T263* C,T0* a1);
T6 r263se_assigned_from(T0* a1);
T6 r263same_type(T263* C,T0* a1);
T6 r263off(T263* C);
T6 r263conforms_to(T263* C,T0* a1);
T0* r263twin(T263* C);
T6 r316is_equal(T316* C,T0* a1);
T6 r316se_assigned_from(T0* a1);
void r316make(T316* C,T0* a1,T0* a2);
T6 r316conforms_to(T316* C,T0* a1);
T0* r316twin(T316* C);
void r309copy(T309* C,T0* a1);
void r309set(T309* C,T0* a1,T6 a2,T6 a3);
T6 r309is_equal(T309* C,T0* a1);
T6 r309same_position(T309* C,T0* a1);
T6 r309se_assigned_from(T0* a1);
T6 r309is_first(T309* C);
T6 r309is_last(T309* C);
T6 r309same_type(T309* C,T0* a1);
void r309make(T309* C,T0* a1);
void r309forth(T309* C);
T6 r309conforms_to(T309* C,T0* a1);
void r309start(T309* C);
void r309go_after(T309* C);
void r309set_after(T309* C);
T0* r309twin(T309* C);
T2 r241new_capacity(T2 a1);
void r241copy(T241* C,T0* a1);
T6 r241extendible(T241* C,T2 a1);
T6 r241is_equal(T241* C,T0* a1);
void r241remove_traversing_cursor(T241* C,T0* a1);
void r241move_all_cursors_after(T241* C);
void r241add_traversing_cursor(T241* C,T0* a1);
T6 r241se_assigned_from(T0* a1);
T0* r241clone(T0* a1);
T6 r241cursor_before(T0* a1);
T6 r241same_type(T241* C,T0* a1);
void r241make(T241* C,T2 a1);
T6 r241cursor_after(T0* a1);
T6 r241conforms_to(T241* C,T0* a1);
void r241resize(T241* C,T2 a1);
T6 r241cursor_same_position(T0* a1,T0* a2);
T0* r241twin(T241* C);
void r241force_last(T241* C,T0* a1);
T0* r241new_cursor(T241* C);
void r241put_last(T241* C,T0* a1);
T6 r241cursor_off(T0* a1);
void r387copy(T387* C,T0* a1);
void r387set(T387* C,T0* a1,T6 a2,T6 a3);
T6 r387is_equal(T387* C,T0* a1);
T6 r387same_position(T387* C,T0* a1);
T6 r387se_assigned_from(T0* a1);
T6 r387same_type(T387* C,T0* a1);
void r387make(T387* C,T0* a1);
T6 r387conforms_to(T387* C,T0* a1);
void r387set_after(T387* C);
T0* r387twin(T387* C);
T6 r394is_equal(T394* C,T0* a1);
T6 r394se_assigned_from(T0* a1);
T6 r394conforms_to(T394* C,T0* a1);
T0* r394twin(T394* C);
T6 r390is_equal(T390* C,T0* a1);
T6 r390se_assigned_from(T0* a1);
T6 r390conforms_to(T390* C,T0* a1);
T0* r390twin(T390* C);
T2 r210new_capacity(T2 a1);
void r210copy(T210* C,T0* a1);
void r210wipe_out(T210* C);
void r210make_clashes(T210* C,T2 a1);
void r210search_position(T210* C,T0* a1);
T6 r210is_equal(T210* C,T0* a1);
void r210remove_traversing_cursor(T210* C,T0* a1);
void r210clone_slots(T210* C);
void r210keys_resize(T210* C,T2 a1);
T0* r210item(T210* C,T0* a1);
void r210clone_clashes(T210* C);
void r210make_items(T210* C,T2 a1);
void r210move_all_cursors_after(T210* C);
void r210add_traversing_cursor(T210* C,T0* a1);
T6 r210se_assigned_from(T0* a1);
T0* r210clone(T0* a1);
T6 r210same_type(T210* C,T0* a1);
void r210slots_wipe_out(T210* C);
void r210make(T210* C,T2 a1);
void r210clashes_wipe_out(T210* C);
void r210clone_items(T210* C);
T6 r210conforms_to(T210* C,T0* a1);
T6 r210has(T210* C,T0* a1);
void r210make_keys(T210* C,T2 a1);
void r210force_new(T210* C,T0* a1,T0* a2);
T2 r210hash_position(T210* C,T0* a1);
void r210items_wipe_out(T210* C);
void r210items_resize(T210* C,T2 a1);
void r210clone_keys(T210* C);
void r210make_with_equality_testers(T210* C,T2 a1,T0* a2,T0* a3);
void r210resize(T210* C,T2 a1);
T0* r210found_item(T210* C);
T6 r210cursor_same_position(T0* a1,T0* a2);
T6 r210found(T210* C);
void r210search(T210* C,T0* a1);
void r210clashes_resize(T210* C,T2 a1);
void r210slots_resize(T210* C,T2 a1);
T0* r210twin(T210* C);
void r210keys_wipe_out(T210* C);
T0* r210new_cursor(T210* C);
void r210make_slots(T210* C,T2 a1);
T2 r210new_modulus(T2 a1);
T6 r210cursor_off(T0* a1);
void r483clear_all(T0* a1);
T6 r483is_equal(T483* C,T0* a1);
T6 r483se_assigned_from(T0* a1);
T0* r483make(T2 a1);
T6 r483conforms_to(T483* C,T0* a1);
T0* r483resize(T0* a1,T2 a2);
T0* r483twin(T483* C);
void r315copy(T315* C,T0* a1);
void r315set(T315* C,T0* a1,T6 a2,T6 a3);
T6 r315is_equal(T315* C,T0* a1);
T6 r315same_position(T315* C,T0* a1);
T6 r315se_assigned_from(T0* a1);
T6 r315same_type(T315* C,T0* a1);
void r315make(T315* C,T0* a1);
T6 r315conforms_to(T315* C,T0* a1);
void r315set_after(T315* C);
T0* r315twin(T315* C);
T6 r125is_equal(T125* C,T0* a1);
T6 r125se_assigned_from(T0* a1);
T0* r125to_fixed_array(T0* a1);
T0* r125make(T2 a1);
T0* r125make_from_array(T0* a1);
T6 r125conforms_to(T125* C,T0* a1);
T0* r125resize(T0* a1,T2 a2);
T0* r125twin(T125* C);
void r92copy(T92* C,T0* a1);
void r92set(T92* C,T0* a1,T6 a2,T6 a3);
T6 r92is_equal(T92* C,T0* a1);
T6 r92same_position(T92* C,T0* a1);
T6 r92se_assigned_from(T0* a1);
T6 r92same_type(T92* C,T0* a1);
void r92make(T92* C,T0* a1);
T6 r92conforms_to(T92* C,T0* a1);
void r92set_after(T92* C);
T0* r92twin(T92* C);
T6 r497is_equal(T497* C,T0* a1);
T6 r497se_assigned_from(T0* a1);
void r497make(T497* C,T0* a1,T0* a2);
T6 r497conforms_to(T497* C,T0* a1);
T0* r497twin(T497* C);
void r168copy(T168* C,T0* a1);
T6 r168is_equal(T168* C,T0* a1);
T0* r168item(T168* C);
T6 r168same_position(T168* C,T0* a1);
T6 r168se_assigned_from(T0* a1);
T6 r168after(T168* C);
T6 r168same_type(T168* C,T0* a1);
void r168make(T168* C,T0* a1);
T6 r168off(T168* C);
T6 r168conforms_to(T168* C,T0* a1);
T0* r168twin(T168* C);
T6 r144is_equal(T144* C,T0* a1);
T6 r144se_assigned_from(T0* a1);
void r144make(T144* C,T0* a1,T0* a2);
T6 r144conforms_to(T144* C,T0* a1);
T0* r144twin(T144* C);
T6 r514is_equal(T514* C,T0* a1);
T6 r514se_assigned_from(T0* a1);
T6 r514conforms_to(T514* C,T0* a1);
T0* r514twin(T514* C);
void r406copy(T406* C,T0* a1);
void r406set(T406* C,T0* a1,T6 a2,T6 a3);
T6 r406is_equal(T406* C,T0* a1);
T6 r406same_position(T406* C,T0* a1);
T6 r406se_assigned_from(T0* a1);
T6 r406is_last(T406* C);
T6 r406same_type(T406* C,T0* a1);
void r406make(T406* C,T0* a1);
T6 r406conforms_to(T406* C,T0* a1);
void r406set_after(T406* C);
T0* r406twin(T406* C);
void r325copy(T325* C,T0* a1);
T6 r325is_equal(T325* C,T0* a1);
void r325remove_traversing_cursor(T325* C,T0* a1);
void r325move_all_cursors_after(T325* C);
void r325add_traversing_cursor(T325* C,T0* a1);
T6 r325se_assigned_from(T0* a1);
T6 r325same_type(T325* C,T0* a1);
void r325make(T325* C);
T6 r325conforms_to(T325* C,T0* a1);
void r325cursor_forth(T325* C,T0* a1);
void r325cursor_start(T325* C,T0* a1);
T0* r325twin(T325* C);
T0* r325new_cursor(T325* C);
void r325put_last(T325* C,T0* a1);
T6 r325cursor_off(T0* a1);
T2 r247new_capacity(T2 a1);
void r247copy(T247* C,T0* a1);
T6 r247extendible(T247* C,T2 a1);
T6 r247is_equal(T247* C,T0* a1);
void r247remove_traversing_cursor(T247* C,T0* a1);
void r247move_all_cursors_after(T247* C);
void r247add_traversing_cursor(T247* C,T0* a1);
T6 r247se_assigned_from(T0* a1);
T0* r247clone(T0* a1);
T6 r247cursor_before(T0* a1);
T6 r247same_type(T247* C,T0* a1);
void r247make(T247* C,T2 a1);
T6 r247cursor_after(T0* a1);
T6 r247conforms_to(T247* C,T0* a1);
void r247resize(T247* C,T2 a1);
T6 r247cursor_same_position(T0* a1,T0* a2);
T0* r247twin(T247* C);
void r247force_last(T247* C,T0* a1);
T0* r247new_cursor(T247* C);
T6 r247cursor_off(T0* a1);
void r33copy(T33* C,T0* a1);
void r33set(T33* C,T0* a1,T6 a2,T6 a3);
T6 r33is_equal(T33* C,T0* a1);
T6 r33same_position(T33* C,T0* a1);
T6 r33se_assigned_from(T0* a1);
T6 r33same_type(T33* C,T0* a1);
void r33make(T33* C,T0* a1);
T6 r33conforms_to(T33* C,T0* a1);
void r33set_after(T33* C);
T0* r33twin(T33* C);
void r354copy(T354* C,T0* a1);
T6 r354is_equal(T354* C,T0* a1);
T0* r354item(T354* C);
T6 r354same_position(T354* C,T0* a1);
T6 r354se_assigned_from(T0* a1);
T6 r354after(T354* C);
T6 r354same_type(T354* C,T0* a1);
void r354make(T354* C,T0* a1);
T6 r354off(T354* C);
T6 r354conforms_to(T354* C,T0* a1);
T0* r354twin(T354* C);
void r393copy(T393* C,T0* a1);
T6 r393cursor_is_last(T393* C,T0* a1);
T6 r393is_equal(T393* C,T0* a1);
void r393remove_traversing_cursor(T393* C,T0* a1);
void r393move_all_cursors_after(T393* C);
void r393add_traversing_cursor(T393* C,T0* a1);
T6 r393se_assigned_from(T0* a1);
T6 r393same_type(T393* C,T0* a1);
void r393make(T393* C);
T6 r393conforms_to(T393* C,T0* a1);
void r393cursor_forth(T393* C,T0* a1);
void r393cursor_start(T393* C,T0* a1);
T0* r393twin(T393* C);
void r393force_last(T393* C,T0* a1);
T0* r393new_cursor(T393* C);
T6 r393cursor_off(T0* a1);
T6 r437is_equal(T437* C,T0* a1);
T6 r437se_assigned_from(T0* a1);
T6 r437conforms_to(T437* C,T0* a1);
T6 r437test(T0* a1,T0* a2);
T0* r437twin(T437* C);
void r226copy(T226* C,T0* a1);
T6 r226is_equal(T226* C,T0* a1);
T6 r226same_position(T226* C,T0* a1);
T6 r226se_assigned_from(T0* a1);
T6 r226same_type(T226* C,T0* a1);
void r226make(T226* C,T0* a1);
T6 r226off(T226* C);
T6 r226conforms_to(T226* C,T0* a1);
T0* r226twin(T226* C);
void r498copy(T498* C,T0* a1);
T0* r498cursor_item(T0* a1);
T6 r498is_equal(T498* C,T0* a1);
void r498remove_traversing_cursor(T498* C,T0* a1);
void r498move_all_cursors_after(T498* C);
void r498add_traversing_cursor(T498* C,T0* a1);
T6 r498se_assigned_from(T0* a1);
T6 r498cursor_before(T0* a1);
T6 r498same_type(T498* C,T0* a1);
void r498make(T498* C);
T6 r498cursor_after(T0* a1);
T6 r498conforms_to(T498* C,T0* a1);
void r498cursor_forth(T498* C,T0* a1);
void r498cursor_start(T498* C,T0* a1);
T0* r498twin(T498* C);
T0* r498new_cursor(T498* C);
void r498put_last(T498* C,T0* a1);
T6 r498cursor_off(T0* a1);
T6 r336is_equal(T336* C,T0* a1);
T6 r336se_assigned_from(T0* a1);
T0* r336make(T2 a1);
T6 r336conforms_to(T336* C,T0* a1);
T0* r336resize(T0* a1,T2 a2);
T0* r336twin(T336* C);
T6 r245is_equal(T245* C,T0* a1);
T6 r245se_assigned_from(T0* a1);
T0* r245make(T2 a1);
T6 r245conforms_to(T245* C,T0* a1);
T0* r245resize(T0* a1,T2 a2);
T0* r245twin(T245* C);
T6 r411is_equal(T411* C,T0* a1);
T6 r411se_assigned_from(T0* a1);
T6 r411conforms_to(T411* C,T0* a1);
T0* r411twin(T411* C);
void r445copy(T445* C,T0* a1);
T6 r445is_equal(T445* C,T0* a1);
T6 r445same_position(T445* C,T0* a1);
T6 r445se_assigned_from(T0* a1);
T6 r445same_type(T445* C,T0* a1);
void r445make(T445* C,T0* a1);
T6 r445off(T445* C);
T6 r445conforms_to(T445* C,T0* a1);
T0* r445twin(T445* C);
void r370copy(T370* C,T0* a1);
T6 r370is_equal(T370* C,T0* a1);
T6 r370same_position(T370* C,T0* a1);
T6 r370se_assigned_from(T0* a1);
T6 r370same_type(T370* C,T0* a1);
void r370make(T370* C,T0* a1);
T6 r370off(T370* C);
T6 r370conforms_to(T370* C,T0* a1);
T0* r370twin(T370* C);
void r155copy(T155* C,T0* a1);
void r155append_last(T155* C,T0* a1);
T0* r155cursor_item(T0* a1);
T6 r155cursor_is_last(T155* C,T0* a1);
T6 r155is_equal(T155* C,T0* a1);
void r155remove_traversing_cursor(T155* C,T0* a1);
void r155move_all_cursors_after(T155* C);
void r155add_traversing_cursor(T155* C,T0* a1);
T6 r155se_assigned_from(T0* a1);
T6 r155same_type(T155* C,T0* a1);
void r155make(T155* C);
T6 r155cursor_after(T0* a1);
T6 r155conforms_to(T155* C,T0* a1);
void r155cursor_forth(T155* C,T0* a1);
void r155make_from_linear(T155* C,T0* a1);
void r155cursor_start(T155* C,T0* a1);
T0* r155twin(T155* C);
void r155force_last(T155* C,T0* a1);
T0* r155new_cursor(T155* C);
void r155put_last(T155* C,T0* a1);
T6 r155cursor_off(T0* a1);
T6 r67is_equal(T67* C,T0* a1);
T6 r67se_assigned_from(T0* a1);
T6 r67conforms_to(T67* C,T0* a1);
T0* r67twin(T67* C);
T6 r449is_equal(T449* C,T0* a1);
T6 r449se_assigned_from(T0* a1);
T0* r449make(T2 a1);
T6 r449conforms_to(T449* C,T0* a1);
T0* r449resize(T0* a1,T2 a2);
T0* r449twin(T449* C);
T6 r496is_equal(T496* C,T0* a1);
T6 r496se_assigned_from(T0* a1);
void r496make(T496* C,T0* a1,T0* a2);
T6 r496conforms_to(T496* C,T0* a1);
T0* r496twin(T496* C);
T6 r312is_equal(T312* C,T0* a1);
T6 r312se_assigned_from(T0* a1);
T6 r312conforms_to(T312* C,T0* a1);
T0* r312twin(T312* C);
T2 r118new_capacity(T2 a1);
void r118copy(T118* C,T0* a1);
void r118force(T118* C,T0* a1,T0* a2);
void r118make_clashes(T118* C,T2 a1);
T0* r118cursor_item(T118* C,T0* a1);
void r118search_position(T118* C,T0* a1);
T6 r118is_equal(T118* C,T0* a1);
void r118remove_traversing_cursor(T118* C,T0* a1);
void r118clone_slots(T118* C);
void r118keys_resize(T118* C,T2 a1);
T0* r118item(T118* C,T0* a1);
void r118clone_clashes(T118* C);
void r118move_all_cursors_after(T118* C);
void r118make_items(T118* C,T2 a1);
void r118add_traversing_cursor(T118* C,T0* a1);
T6 r118se_assigned_from(T0* a1);
T0* r118clone(T0* a1);
T6 r118same_type(T118* C,T0* a1);
void r118make(T118* C,T2 a1);
void r118clone_items(T118* C);
T6 r118cursor_after(T0* a1);
T6 r118conforms_to(T118* C,T0* a1);
T6 r118has(T118* C,T0* a1);
void r118make_keys(T118* C,T2 a1);
T2 r118hash_position(T118* C,T0* a1);
void r118cursor_forth(T118* C,T0* a1);
void r118items_resize(T118* C,T2 a1);
void r118clone_keys(T118* C);
void r118make_with_equality_testers(T118* C,T2 a1,T0* a2,T0* a3);
void r118resize(T118* C,T2 a1);
T6 r118cursor_same_position(T0* a1,T0* a2);
void r118cursor_start(T118* C,T0* a1);
void r118clashes_resize(T118* C,T2 a1);
void r118slots_resize(T118* C,T2 a1);
T0* r118twin(T118* C);
T0* r118new_cursor(T118* C);
void r118make_slots(T118* C,T2 a1);
T2 r118new_modulus(T2 a1);
T6 r118cursor_off(T0* a1);
void r145copy(T145* C,T0* a1);
void r145set(T145* C,T0* a1,T6 a2,T6 a3);
T6 r145is_equal(T145* C,T0* a1);
T6 r145same_position(T145* C,T0* a1);
T6 r145se_assigned_from(T0* a1);
T6 r145is_last(T145* C);
T6 r145same_type(T145* C,T0* a1);
void r145make(T145* C,T0* a1);
T6 r145conforms_to(T145* C,T0* a1);
void r145set_after(T145* C);
T0* r145twin(T145* C);
T6 r127is_equal(T127* C,T0* a1);
T6 r127se_assigned_from(T0* a1);
T0* r127make(T2 a1);
T6 r127conforms_to(T127* C,T0* a1);
T0* r127resize(T0* a1,T2 a2);
T0* r127twin(T127* C);
void r376copy(T376* C,T0* a1);
void r376append_last(T376* C,T0* a1);
T0* r376cursor_item(T0* a1);
T6 r376is_equal(T376* C,T0* a1);
void r376remove_traversing_cursor(T376* C,T0* a1);
void r376cursor_go_after(T376* C,T0* a1);
void r376move_all_cursors_after(T376* C);
void r376add_traversing_cursor(T376* C,T0* a1);
T6 r376se_assigned_from(T0* a1);
T6 r376same_type(T376* C,T0* a1);
void r376make(T376* C);
T6 r376cursor_after(T0* a1);
T6 r376conforms_to(T376* C,T0* a1);
void r376cursor_forth(T376* C,T0* a1);
void r376make_from_linear(T376* C,T0* a1);
void r376cursor_start(T376* C,T0* a1);
T0* r376twin(T376* C);
void r376force_last(T376* C,T0* a1);
T0* r376new_cursor(T376* C);
T6 r376cursor_off(T0* a1);
void r87copy(T87* C,T0* a1);
T0* r87cursor_item(T0* a1);
T6 r87is_equal(T87* C,T0* a1);
void r87remove_traversing_cursor(T87* C,T0* a1);
void r87move_all_cursors_after(T87* C);
void r87add_traversing_cursor(T87* C,T0* a1);
T6 r87se_assigned_from(T0* a1);
T6 r87same_type(T87* C,T0* a1);
void r87make(T87* C);
T6 r87cursor_after(T0* a1);
T6 r87conforms_to(T87* C,T0* a1);
void r87cursor_forth(T87* C,T0* a1);
void r87cursor_start(T87* C,T0* a1);
T0* r87twin(T87* C);
void r87force_last(T87* C,T0* a1);
T0* r87new_cursor(T87* C);
T6 r87cursor_off(T0* a1);
T6 r130is_equal(T130* C,T0* a1);
T6 r130se_assigned_from(T0* a1);
T6 r130conforms_to(T130* C,T0* a1);
T6 r130test(T0* a1,T0* a2);
T0* r130twin(T130* C);
T6 r274is_equal(T274* C,T0* a1);
T6 r274se_assigned_from(T0* a1);
T0* r274make(T2 a1);
T6 r274conforms_to(T274* C,T0* a1);
T0* r274resize(T0* a1,T2 a2);
T0* r274twin(T274* C);
void r286copy(T286* C,T0* a1);
T6 r286is_equal(T286* C,T0* a1);
T6 r286same_position(T286* C,T0* a1);
T6 r286se_assigned_from(T0* a1);
T6 r286same_type(T286* C,T0* a1);
T6 r286off(T286* C);
T6 r286conforms_to(T286* C,T0* a1);
T0* r286twin(T286* C);
void r63copy(T63* C,T0* a1);
T6 r63is_equal(T63* C,T0* a1);
void r63remove_traversing_cursor(T63* C,T0* a1);
void r63move_all_cursors_after(T63* C);
void r63add_traversing_cursor(T63* C,T0* a1);
T6 r63se_assigned_from(T0* a1);
T6 r63same_type(T63* C,T0* a1);
void r63make(T63* C);
T6 r63conforms_to(T63* C,T0* a1);
void r63cursor_forth(T63* C,T0* a1);
void r63cursor_start(T63* C,T0* a1);
T0* r63twin(T63* C);
void r63force_last(T63* C,T0* a1);
T0* r63new_cursor(T63* C);
T6 r63cursor_off(T0* a1);
extern T0*oBC97string_;
T6 r415is_equal(T415* C,T0* a1);
extern T0*oBC23arguments;
extern int fBC23arguments;
T0* r415arguments(void);
T6 r415se_assigned_from(T0* a1);
void r415make(T415* C,T0* a1,T0* a2,T0* a3);
T0* r415message(T415* C,T0* a1);
T6 r415conforms_to(T415* C,T0* a1);
T0* r415twin(T415* C);
T0* r415default_message(T415* C);
T6 r418is_equal(T418* C,T0* a1);
T0* r418arguments(void);
T6 r418se_assigned_from(T0* a1);
void r418make(T418* C,T0* a1,T0* a2,T0* a3);
T0* r418message(T418* C,T0* a1);
T6 r418conforms_to(T418* C,T0* a1);
T0* r418twin(T418* C);
T0* r418default_message(T418* C);
T6 r420is_equal(T420* C,T0* a1);
T0* r420new_tree_parser(T420* C);
T6 r420se_assigned_from(T0* a1);
T0* r420new_tree_parser_imp(T420* C);
T6 r420conforms_to(T420* C,T0* a1);
T0* r420twin(T420* C);
T6 r420is_available(T420* C);
T6 r176is_closed(T176* C);
void r176old_close(T176* C);
T6 r176is_equal(T176* C,T0* a1);
T2 r176read_to_string(T176* C,T0* a1,T2 a2,T2 a3);
void r176open_read(T176* C);
T6 r176se_assigned_from(T0* a1);
void r176old_read_character(T176* C);
T6 r176old_end_of_file(T176* C);
void r176read_character(T176* C);
void r176close(T176* C);
void r176make(T176* C,T0* a1);
T6 r176conforms_to(T176* C,T0* a1);
void r176connect_to(T176* C,T0* a1);
T0* r176twin(T176* C);
extern T0*oBC194uc_optimize;
extern int fBC194uc_optimize;
T0* r331uc_optimize(void);
extern T0*oBC194uc_check;
extern int fBC194uc_check;
T0* r331uc_check(void);
extern T0*oBC194uc_external;
extern int fBC194uc_external;
T0* r331uc_external(void);
T0* r331new_cluster(T331* C,T0* a1,T0* a2);
T0* r331new_exported_feature(T331* C,T0* a1,T0* a2);
T6 r331is_equal(T331* C,T0* a1);
T0* r331new_export(T331* C,T0* a1,T0* a2);
extern T0*oBC194uc_invariant;
extern int fBC194uc_invariant;
T0* r331uc_invariant(void);
T6 r331se_assigned_from(T0* a1);
T0* r331new_options(T331* C,T0* a1,T0* a2);
T6 r331is_false(T0* a1);
void r331make_with_variables(T331* C,T0* a1,T0* a2);
extern T0*oBC19execution_environment;
extern T0*oBC194uc_mount;
extern int fBC194uc_mount;
T0* r331uc_mount(void);
extern T0*oBC194uc_value;
extern int fBC194uc_value;
T0* r331uc_value(void);
T0* r331new_system(T331* C,T0* a1,T0* a2);
extern T0*oBC194uc_debug;
extern int fBC194uc_debug;
T0* r331uc_debug(void);
extern T0*oBC193option_codes;
extern int fBC193option_codes;
T0* r331option_codes(void);
extern T0*oBC194uc_option;
extern int fBC194uc_option;
T0* r331uc_option(void);
extern T0*oBC194uc_root;
extern int fBC194uc_root;
T0* r331uc_root(void);
extern T0*oBC194uc_library;
extern int fBC194uc_library;
T0* r331uc_library(void);
extern T0*oBC194uc_feature;
extern int fBC194uc_feature;
T0* r331uc_feature(void);
extern T0*oBC194uc_class;
extern int fBC194uc_class;
T0* r331uc_class(void);
extern T0*oBC194uc_loop;
extern int fBC194uc_loop;
T0* r331uc_loop(void);
T6 r331conforms_to(T331* C,T0* a1);
void r331fill_library(T331* C,T0* a1,T0* a2,T0* a3);
extern T0*oBC194uc_abstract;
extern int fBC194uc_abstract;
T0* r331uc_abstract(void);
T0* r331new_externals(T331* C,T0* a1,T0* a2);
extern T0*oBC194uc_alias;
extern int fBC194uc_alias;
T0* r331uc_alias(void);
void r331parse_library(T331* C,T0* a1,T0* a2);
extern T0*oBC194uc_cluster;
extern int fBC194uc_cluster;
T0* r331uc_cluster(void);
extern T0*oBC194uc_enable;
extern int fBC194uc_enable;
T0* r331uc_enable(void);
extern T0*oBC194uc_export;
extern int fBC194uc_export;
T0* r331uc_export(void);
extern T0*oBC194uc_link_library;
extern int fBC194uc_link_library;
T0* r331uc_link_library(void);
void r331parse_file(T331* C,T0* a1);
T6 r331is_true(T0* a1);
extern T0*oBC194uc_include_dir;
extern int fBC194uc_include_dir;
T0* r331uc_include_dir(void);
extern T0*oBC194uc_location;
extern int fBC194uc_location;
T0* r331uc_location(void);
void r331fill_system(T331* C,T0* a1,T0* a2,T0* a3);
T0* r331twin(T331* C);
extern T0*oBC194uc_relative;
extern int fBC194uc_relative;
T0* r331uc_relative(void);
T0* r331new_mount(T331* C,T0* a1,T0* a2);
extern T0*oBC194uc_system;
extern int fBC194uc_system;
T0* r331uc_system(void);
void r331make_with_variables_and_factory(T331* C,T0* a1,T0* a2,T0* a3);
extern T0*oBC194uc_prefix;
extern int fBC194uc_prefix;
T0* r331uc_prefix(void);
extern T0*oBC194uc_creation;
extern int fBC194uc_creation;
T0* r331uc_creation(void);
T0* r331new_library(T331* C,T0* a1,T0* a2);
extern T0*oBC194uc_require;
extern int fBC194uc_require;
T0* r331uc_require(void);
extern T0*oBC194uc_name;
extern int fBC194uc_name;
T0* r331uc_name(void);
T0* r331new_unicode_string(T0* a1);
void r331fill_options(T331* C,T0* a1,T0* a2,T0* a3);
extern T0*oBC194uc_ensure;
extern int fBC194uc_ensure;
T0* r331uc_ensure(void);
T6 r417is_equal(T417* C,T0* a1);
T0* r417arguments(void);
T6 r417se_assigned_from(T0* a1);
void r417make(T417* C);
T0* r417message(T417* C,T0* a1);
T6 r417conforms_to(T417* C,T0* a1);
T0* r417twin(T417* C);
T0* r417default_message(T417* C);
T6 r375is_equal(T375* C,T0* a1);
T6 r375se_assigned_from(T0* a1);
void r375make(T375* C,T0* a1);
T6 r375conforms_to(T375* C,T0* a1);
T0* r375twin(T375* C);
T0* r190uc_optimize(void);
T0* r190uc_check(void);
T0* r190uc_external(void);
T0* r190new_cluster(T190* C,T0* a1,T0* a2);
T0* r190new_exported_feature(T190* C,T0* a1,T0* a2);
T6 r190is_equal(T190* C,T0* a1);
T0* r190new_export(T190* C,T0* a1,T0* a2);
T0* r190uc_invariant(void);
T6 r190se_assigned_from(T0* a1);
T0* r190new_options(T190* C,T0* a1,T0* a2);
T6 r190is_false(T0* a1);
void r190make_with_variables(T190* C,T0* a1,T0* a2);
T0* r190uc_mount(void);
T0* r190uc_value(void);
T0* r190new_system(T190* C,T0* a1,T0* a2);
T0* r190uc_debug(void);
T0* r190option_codes(void);
T0* r190uc_option(void);
T0* r190uc_root(void);
T0* r190uc_library(void);
T0* r190uc_feature(void);
T0* r190uc_class(void);
T0* r190uc_loop(void);
T6 r190conforms_to(T190* C,T0* a1);
void r190fill_library(T190* C,T0* a1,T0* a2,T0* a3);
T0* r190uc_abstract(void);
T0* r190new_externals(T190* C,T0* a1,T0* a2);
T0* r190uc_alias(void);
T0* r190uc_cluster(void);
T0* r190uc_enable(void);
T0* r190uc_export(void);
T0* r190uc_link_library(void);
void r190parse_file(T190* C,T0* a1);
T6 r190is_true(T0* a1);
T0* r190uc_include_dir(void);
T0* r190uc_location(void);
void r190fill_system(T190* C,T0* a1,T0* a2,T0* a3);
T0* r190twin(T190* C);
T0* r190uc_relative(void);
T0* r190new_mount(T190* C,T0* a1,T0* a2);
T0* r190uc_system(void);
void r190make_with_variables_and_factory(T190* C,T0* a1,T0* a2,T0* a3);
T0* r190uc_prefix(void);
T0* r190new_library(T190* C,T0* a1,T0* a2);
T0* r190uc_creation(void);
T0* r190uc_require(void);
T0* r190uc_name(void);
T0* r190new_unicode_string(T0* a1);
void r190fill_options(T190* C,T0* a1,T0* a2,T0* a3);
T0* r190uc_ensure(void);
T6 r270is_equal(T270* C,T0* a1);
T0* r270arguments(void);
T6 r270se_assigned_from(T0* a1);
void r270make(T270* C,T0* a1,T0* a2);
T0* r270message(T270* C,T0* a1);
T6 r270conforms_to(T270* C,T0* a1);
T0* r270twin(T270* C);
T0* r270default_message(T270* C);
T6 r268is_address_expression_declared(T268* C);
void r268set_layout_optimization(T268* C,T6 a1);
T6 r268portable_code_generation(T268* C);
T0* r268arguments(T268* C);
void r268set_map(T268* C,T6 a1);
T6 r268profile(T268* C);
T6 r268is_linux_fpu_double_precision_declared(T268* C);
void r268set_gc_info(T268* C,T6 a1);
T6 r268dynamic_runtime(T268* C);
extern T0*oBC268valid_assertion;
extern int fBC268valid_assertion;
T0* r268valid_assertion(void);
T6 r268is_no_default_lib_declared(T268* C);
T6 r268debug_option(T268* C);
void r268set_exception_trace(T268* C,T6 a1);
extern T0*oBC268default_assertion;
extern int fBC268default_assertion;
T0* r268default_assertion(void);
T0* r268warning(T268* C);
void r268set_wedit(T268* C,T6 a1);
extern T0*oBC268default_warning;
extern int fBC268default_warning;
T0* r268default_warning(void);
void r268set_finalize(T268* C,T6 a1);
extern T0*oBC268default_linker;
extern int fBC268default_linker;
T0* r268default_linker(void);
void r268set_dynamic_runtime(T268* C,T6 a1);
extern T0*oBC268default_override_cluster;
void r268set_verbose(T268* C,T6 a1);
extern T0*oBC268default_precompiled;
T6 r268exception_trace(T268* C);
void r268set_trace(T268* C,T6 a1);
T6 r268is_inlining_declared(T268* C);
void r268set_clean(T268* C,T6 a1);
T0* r268linker(T268* C);
extern T0*oBC268default_visible_filename;
T6 r268is_check_vape_declared(T268* C);
T6 r268is_debug_tag_declared(T268* C);
T0* r268component(T268* C);
T6 r268is_gc_info_declared(T268* C);
extern T0*oBC268default_garbage_collector;
extern int fBC268default_garbage_collector;
T0* r268default_garbage_collector(void);
T6 r268is_trace_declared(T268* C);
T6 r268is_layout_optimization_declared(T268* C);
void r268set_array_optimization(T268* C,T6 a1);
void r268set_line_generation(T268* C,T6 a1);
T0* r268inlining(T268* C);
extern T0*oBC268valid_target;
extern int fBC268valid_target;
T0* r268valid_target(void);
T6 r268is_portable_code_generation_declared(T268* C);
void r268set_debug_tag(T268* C,T0* a1);
T6 r268is_profile_declared(T268* C);
T6 r268is_strip_option_declared(T268* C);
T0* r268dead_code_removal(T268* C);
T6 r268is_dynamic_runtime_declared(T268* C);
T6 r268line_generation(T268* C);
T6 r268check_vape(T268* C);
T6 r268reloads_optimization(T268* C);
extern T0*oBC82options;
extern T0*oBC268default_inlining;
extern int fBC268default_inlining;
T0* r268default_inlining(void);
void r268set_console_application(T268* C,T6 a1);
T6 r268case_insensitive(T268* C);
extern T0*oBC268valid_warning;
extern int fBC268valid_warning;
T0* r268valid_warning(void);
extern T0*oBC268valid_dead_code_removal;
extern int fBC268valid_dead_code_removal;
T0* r268valid_dead_code_removal(void);
T6 r268multithreaded(T268* C);
void r268set_reloads_optimization(T268* C,T6 a1);
T6 r268strip_option(T268* C);
void r268set_manifest_string_trace(T268* C,T6 a1);
extern T0*oBC268default_arguments;
extern int fBC268default_arguments;
T0* r268default_arguments(void);
void r268set_check_vape(T268* C,T6 a1);
T6 r268is_map_declared(T268* C);
T6 r268layout_optimization(T268* C);
void r268set_portable_code_generation(T268* C,T6 a1);
T6 r268is_wedit_declared(T268* C);
T6 r268split(T268* C);
void r268set_leaves_optimization(T268* C,T6 a1);
T6 r268leaves_optimization(T268* C);
T6 r268linux_fpu_double_precision(T268* C);
T6 r268is_fst_optimization_declared(T268* C);
void r268set_address_expression(T268* C,T6 a1);
T0* r268debug_tag(T268* C);
void r268set_strip_option(T268* C,T6 a1);
T0* r268shared_library_definition(T268* C);
void r268set_create_keyword_extension(T268* C,T6 a1);
extern T0*oBC268default_component;
T6 r268array_optimization(T268* C);
void r268set_inlining(T268* C,T0* a1);
T6 r268jumps_optimization(T268* C);
T6 r268is_create_keyword_extension_declared(T268* C);
void r268set_case_insensitive(T268* C,T6 a1);
extern T0*oBC268default_dead_code_removal;
extern int fBC268default_dead_code_removal;
T0* r268default_dead_code_removal(void);
T6 r268conforms_to(T268* C,T0* a1);
void r268set_profile(T268* C,T6 a1);
T6 r268is_exception_trace_declared(T268* C);
T6 r268is_dead_code_removal_declared(T268* C);
T6 r268is_jumps_optimization_declared(T268* C);
T6 r268map(T268* C);
T6 r268is_verbose_declared(T268* C);
void r268set_no_default_lib(T268* C,T6 a1);
T0* r268garbage_collector(T268* C);
T6 r268console_application(T268* C);
T0* r268twin(T268* C);
T6 r268gc_info(T268* C);
T6 r268finalize(T268* C);
void r268set_dead_code_removal(T268* C,T0* a1);
T0* r268target(T268* C);
T0* r268visible_filename(T268* C);
T6 r268is_array_optimization_declared(T268* C);
void r268set_assertion(T268* C,T0* a1);
extern T0*oBC268default_storable_filename;
T6 r268is_case_insensitive_declared(T268* C);
T0* r268document(T268* C);
T6 r268verbose(T268* C);
T6 r268is_arguments_declared(T268* C);
T2 r268inlining_size(T268* C);
extern T0*oBC268default_target;
extern int fBC268default_target;
T0* r268default_target(void);
extern T0*oBC268valid_linker;
extern int fBC268valid_linker;
T0* r268valid_linker(void);
T0* r268override_cluster(T268* C);
void r268set_debugger(T268* C,T6 a1);
extern T0*oBC268default_debug_tag;
extern int fBC268default_debug_tag;
T0* r268default_debug_tag(void);
extern T0*oBC268default_document;
void r268set_split(T268* C,T6 a1);
T6 r268flat_fst_optimization(T268* C);
T6 r268is_reloads_optimization_declared(T268* C);
void r268set_jumps_optimization(T268* C,T6 a1);
T0* r268storable_filename(T268* C);
T6 r268wedit(T268* C);
T6 r268is_manifest_string_trace_declared(T268* C);
T6 r268is_equal(T268* C,T0* a1);
T2 r268fst_expansion_factor(T268* C);
T0* r268precompiled(T268* C);
T6 r268is_flat_fst_optimization_declared(T268* C);
T0* r268assertion(T268* C);
T6 r268is_console_application_declared(T268* C);
T6 r268trace(T268* C);
T6 r268is_clean_declared(T268* C);
T6 r268clean(T268* C);
extern T0*oBC268valid_inlining;
extern int fBC268valid_inlining;
T0* r268valid_inlining(void);
T6 r268is_assertion_declared(T268* C);
void r268set_multithreaded(T268* C,T6 a1);
T6 r268fst_optimization(T268* C);
void r268set_arguments(T268* C,T0* a1);
T6 r268is_debugger_declared(T268* C);
T6 r268is_leaves_optimization_declared(T268* C);
T2 r268stack_size(T268* C);
void r268make(T268* C);
T6 r268address_expression(T268* C);
void r268set_linux_fpu_double_precision(T268* C,T6 a1);
T6 r268is_line_generation_declared(T268* C);
T6 r268create_keyword_extension(T268* C);
T6 r268manifest_string_trace(T268* C);
T6 r268no_default_lib(T268* C);
T6 r268se_assigned_from(T0* a1);
extern T0*oBC268valid_garbage_collector;
extern int fBC268valid_garbage_collector;
T0* r268valid_garbage_collector(void);
T2 r268heap_size(T268* C);
void r268set_debug_option(T268* C,T6 a1);
void r268set_fst_optimization(T268* C,T6 a1);
T6 r268is_debug_option_declared(T268* C);
T6 r268is_split_declared(T268* C);
extern T0*oBC268default_shared_library_definition;
T6 r268is_multithreaded_declared(T268* C);
void r268set_flat_fst_optimization(T268* C,T6 a1);
T6 r268debugger(T268* C);
T6 r268is_finalize_declared(T268* C);
T6 r267has_exported_features(T267* C);
T6 r267is_equal(T267* C,T0* a1);
T6 r267se_assigned_from(T0* a1);
void r267merge(T267* C,T0* a1);
void r267make(T267* C);
T6 r267is_empty(T267* C);
T6 r267conforms_to(T267* C,T0* a1);
T0* r267cloned_externals(T267* C);
T6 r267has_include_directories(T267* C);
T6 r267has_link_libraries(T267* C);
T0* r267twin(T267* C);
T6 r372is_equal(T372* C,T0* a1);
T0* r372arguments(void);
T6 r372se_assigned_from(T0* a1);
void r372make(T372* C,T0* a1,T0* a2,T0* a3,T0* a4);
T0* r372message(T372* C,T0* a1);
T6 r372conforms_to(T372* C,T0* a1);
T0* r372twin(T372* C);
T0* r372default_message(T372* C);
T6 r189is_equal(T189* C,T0* a1);
T6 r189se_assigned_from(T0* a1);
T6 r189conforms_to(T189* C,T0* a1);
T0* r189twin(T189* C);
void r189mount_libraries(T189* C);
void r189merge_externals(T189* C);
void r228put(T228* C,T0* a1,T0* a2);
T6 r228is_equal(T228* C,T0* a1);
T0* r228item(T228* C,T0* a1);
T6 r228se_assigned_from(T0* a1);
void r228make(T228* C);
T6 r228conforms_to(T228* C,T0* a1);
T0* r228twin(T228* C);
T0* r191uc_optimize(void);
T0* r191uc_check(void);
T0* r191uc_external(void);
T0* r191new_cluster(T191* C,T0* a1,T0* a2);
T0* r191new_exported_feature(T191* C,T0* a1,T0* a2);
T6 r191is_equal(T191* C,T0* a1);
T0* r191new_export(T191* C,T0* a1,T0* a2);
T0* r191uc_invariant(void);
T6 r191se_assigned_from(T0* a1);
T0* r191new_options(T191* C,T0* a1,T0* a2);
T6 r191is_false(T0* a1);
void r191make_with_variables(T191* C,T0* a1,T0* a2);
T0* r191uc_mount(void);
T0* r191uc_value(void);
T0* r191new_system(T191* C,T0* a1,T0* a2);
T0* r191uc_debug(void);
T0* r191option_codes(void);
T0* r191uc_option(void);
T0* r191uc_root(void);
T0* r191uc_library(void);
T0* r191uc_feature(void);
T0* r191uc_class(void);
T0* r191uc_loop(void);
T6 r191conforms_to(T191* C,T0* a1);
void r191fill_library(T191* C,T0* a1,T0* a2,T0* a3);
T0* r191uc_abstract(void);
T0* r191new_externals(T191* C,T0* a1,T0* a2);
T0* r191uc_alias(void);
T0* r191uc_cluster(void);
T0* r191uc_enable(void);
T0* r191uc_export(void);
T0* r191uc_link_library(void);
void r191parse_file(T191* C,T0* a1);
T6 r191is_true(T0* a1);
T0* r191uc_include_dir(void);
T0* r191uc_location(void);
void r191fill_system(T191* C,T0* a1,T0* a2,T0* a3);
T0* r191twin(T191* C);
T0* r191uc_relative(void);
T0* r191new_mount(T191* C,T0* a1,T0* a2);
T0* r191uc_system(void);
void r191make_with_variables_and_factory(T191* C,T0* a1,T0* a2,T0* a3);
T0* r191uc_prefix(void);
T0* r191new_library(T191* C,T0* a1,T0* a2);
T0* r191uc_creation(void);
T0* r191uc_require(void);
T0* r191uc_name(void);
T0* r191new_unicode_string(T0* a1);
void r191fill_options(T191* C,T0* a1,T0* a2,T0* a3);
T0* r191uc_ensure(void);
T6 r136is_equal(T136* C,T0* a1);
T6 r136se_assigned_from(T0* a1);
void r136execute_generators(T136* C,T0* a1);
void r136make(T136* C,T0* a1,T0* a2);
T6 r136conforms_to(T136* C,T0* a1);
void r136execute(T136* C);
T0* r136twin(T136* C);
void r134print_cluster(T134* C,T0* a1,T2 a2,T0* a3);
void r134generate_library(T134* C,T0* a1);
void r134print_xml_library_file(T134* C,T0* a1,T0* a2);
T6 r134is_equal(T134* C,T0* a1);
void r134print_externals(T0* a1,T2 a2,T0* a3);
T6 r134se_assigned_from(T0* a1);
void r134print_exported_class(T0* a1,T2 a2,T0* a3);
void r134make(T134* C,T0* a1,T0* a2);
void r134print_clusters(T134* C,T0* a1,T2 a2,T0* a3);
T6 r134conforms_to(T134* C,T0* a1);
T0* r134twin(T134* C);
void r134print_options(T0* a1,T2 a2,T0* a3);
void r134print_indentation(T2 a1,T0* a2);
void r134print_link_libraries(T0* a1,T2 a2,T0* a3);
void r134generate_system(T134* C,T0* a1);
void r134print_xml_system_file(T134* C,T0* a1,T0* a2);
void r134print_include_directories(T0* a1,T2 a2,T0* a3);
T0* r492current_working_directory(T492* C);
T6 r492is_equal(T492* C,T0* a1);
T2 r492read_to_string(T492* C,T0* a1,T2 a2,T2 a3);
T6 r492se_assigned_from(T0* a1);
void r492old_read_character(T492* C);
T0* r492clone(T0* a1);
extern T6 oBC142is_windows;
extern int fBC142is_windows;
T6 r492is_windows(T492* C);
T6 r492old_end_of_file(T492* C);
void r492read_character(T492* C);
void r492make(T492* C);
T6 r492conforms_to(T492* C,T0* a1);
T0* r492twin(T492* C);
T0* r488substring(T488* C,T2 a1,T2 a2);
T6 r488is_equal(T488* C,T0* a1);
T2 r488fill_from_stream(T488* C,T0* a1,T2 a2,T2 a3);
T6 r488se_assigned_from(T0* a1);
void r488move_left(T488* C,T2 a1,T2 a2,T2 a3);
void r488make(T488* C,T2 a1);
T6 r488conforms_to(T488* C,T0* a1);
void r488resize(T488* C,T2 a1);
T0* r488twin(T488* C);
T6 r355is_equal(T355* C,T0* a1);
T6 r355se_assigned_from(T0* a1);
T6 r355conforms_to(T355* C,T0* a1);
T6 r355is_undefined(T355* C);
T0* r355twin(T355* C);
T6 r332is_equal(T332* C,T0* a1);
T0* r332arguments(void);
T6 r332se_assigned_from(T0* a1);
void r332make(T332* C,T0* a1);
T0* r332message(T332* C,T0* a1);
T6 r332conforms_to(T332* C,T0* a1);
T0* r332twin(T332* C);
T0* r332default_message(T332* C);
T6 r458is_closed(T458* C);
void r458old_close(T458* C);
T6 r458is_equal(T458* C,T0* a1);
T6 r458se_assigned_from(T0* a1);
void r458close(T458* C);
void r458make(T458* C,T0* a1);
void r458old_put_string(T458* C,T0* a1);
T6 r458conforms_to(T458* C,T0* a1);
void r458connect_to(T458* C,T0* a1);
void r458put_integer(T458* C,T2 a1);
void r458put_line(T458* C,T0* a1);
T0* r458twin(T458* C);
void r458open_write(T458* C);
void r131print_cluster(T131* C,T0* a1,T0* a2);
void r131generate_library(T131* C,T0* a1);
T6 r131is_equal(T131* C,T0* a1);
T0* r131replace_all_characters(T0* a1,T3 a2,T3 a3);
T6 r131se_assigned_from(T0* a1);
T0* r131clone(T0* a1);
T6 r131is_lace_keyword(T0* a1);
T6 r131is_windows(T131* C);
void r131print_ace_file(T131* C,T0* a1,T0* a2);
void r131print_exported_class(T0* a1,T2 a2,T0* a3);
void r131make(T131* C,T0* a1,T0* a2);
extern T0*oBC18operating_system;
void r131print_clusters(T131* C,T0* a1,T0* a2);
T6 r131conforms_to(T131* C,T0* a1);
void r131print_precompile_ace_file(T131* C,T0* a1,T0* a2);
void r131print_escaped_name(T0* a1,T0* a2);
T0* r131twin(T131* C);
void r131print_options(T0* a1,T2 a2,T0* a3);
extern T0*oBC131lace_keywords;
void r131print_indentation(T2 a1,T0* a2);
void r131print_link_libraries(T131* C,T0* a1,T0* a2);
void r131generate_system(T131* C,T0* a1);
void r131print_include_directories(T131* C,T0* a1,T0* a2);
T6 r522is_equal(T522* C,T0* a1);
T6 r522se_assigned_from(T0* a1);
void r522make(T522* C,T0* a1,T0* a2);
T6 r522conforms_to(T522* C,T0* a1);
T0* r522twin(T522* C);
extern T0*oBC109template_expander;
T6 r108is_equal(T108* C,T0* a1);
T6 r108se_assigned_from(T0* a1);
void r108make(T108* C);
T6 r108conforms_to(T108* C,T0* a1);
T0* r108twin(T108* C);
T0* r108expanded_variables(T108* C,T0* a1);
T6 r137is_equal(T137* C,T0* a1);
T6 r137se_assigned_from(T0* a1);
void r137make(T137* C,T0* a1,T0* a2);
T6 r137conforms_to(T137* C,T0* a1);
void r137execute(T137* C);
T0* r137twin(T137* C);
T6 r104is_equal(T104* C,T0* a1);
T0* r104arguments(void);
T6 r104se_assigned_from(T0* a1);
void r104make(T104* C,T0* a1);
T0* r104message(T104* C,T0* a1);
T6 r104conforms_to(T104* C,T0* a1);
T0* r104twin(T104* C);
T0* r104default_message(T104* C);
T6 r209is_equal(T209* C,T0* a1);
T6 r209se_assigned_from(T0* a1);
void r209merge_libraries(T209* C,T0* a1,T0* a2);
T6 r209conforms_to(T209* C,T0* a1);
T0* r209twin(T209* C);
void r209mount_libraries(T209* C);
void r209merge_externals(T209* C);
void r107print_cluster(T107* C,T0* a1,T0* a2);
void r107generate_library(T107* C,T0* a1);
void r107print_loadpath_clusters(T107* C,T0* a1,T0* a2);
T6 r107is_equal(T107* C,T0* a1);
T6 r107se_assigned_from(T0* a1);
void r107print_loadpath_cluster(T107* C,T0* a1,T0* a2);
void r107print_ace_file(T107* C,T0* a1,T0* a2);
void r107generate_cecil_file(T107* C,T0* a1);
void r107print_exported_class(T0* a1,T0* a2);
void r107make(T107* C,T0* a1,T0* a2);
void r107print_clusters(T107* C,T0* a1,T0* a2);
T6 r107conforms_to(T107* C,T0* a1);
void r107print_generate(T0* a1,T2 a2,T0* a3);
void r107print_escaped_name(T0* a1,T0* a2);
T0* r107twin(T107* C);
void r107print_options(T0* a1,T2 a2,T0* a3);
void r107print_exported_classes(T0* a1,T0* a2);
void r107print_indentation(T2 a1,T0* a2);
void r107print_link_libraries(T0* a1,T0* a2);
void r107generate_system(T107* C,T0* a1);
void r107print_include_directories(T0* a1,T0* a2);
T6 r519is_equal(T519* C,T0* a1);
T6 r519se_assigned_from(T0* a1);
void r519make(T519* C,T0* a1,T0* a2);
T6 r519conforms_to(T519* C,T0* a1);
T0* r519twin(T519* C);
T6 r160is_equal(T160* C,T0* a1);
T6 r160se_assigned_from(T0* a1);
T6 r160conforms_to(T160* C,T0* a1);
void r160put_integer(T2 a1);
void r160put_line(T0* a1);
T0* r160twin(T160* C);
T6 r463is_equal(T463* C,T0* a1);
T0* r463arguments(void);
T6 r463se_assigned_from(T0* a1);
void r463make(T463* C,T0* a1);
T0* r463message(T463* C,T0* a1);
T6 r463conforms_to(T463* C,T0* a1);
T0* r463twin(T463* C);
T0* r463default_message(T463* C);
T6 r413is_equal(T413* C,T0* a1);
T0* r413arguments(void);
T6 r413se_assigned_from(T0* a1);
void r413make(T413* C,T0* a1,T0* a2);
T0* r413message(T413* C,T0* a1);
T6 r413conforms_to(T413* C,T0* a1);
T0* r413twin(T413* C);
T0* r413default_message(T413* C);
T0* r208uc_optimize(void);
void r208validate_named_cluster(T208* C,T0* a1,T0* a2);
T0* r208uc_check(void);
void r208validate_root(T208* C,T0* a1,T0* a2);
T0* r208uc_external(void);
void r208validate_library(T208* C,T0* a1,T0* a2);
void r208validate_external(T208* C,T0* a1,T0* a2);
extern T0*oBC194uc_exclude;
extern int fBC194uc_exclude;
T0* r208uc_exclude(void);
void r208validate_mount(T208* C,T0* a1,T0* a2);
T6 r208is_equal(T208* C,T0* a1);
void r208validate_system_doc(T208* C,T0* a1,T0* a2);
T0* r208uc_invariant(void);
T6 r208se_assigned_from(T0* a1);
void r208validate_cluster(T208* C,T0* a1,T0* a2);
extern T0*oBC194uc_description;
extern int fBC194uc_description;
T0* r208uc_description(void);
T0* r208uc_mount(void);
T0* r208uc_value(void);
T0* r208uc_debug(void);
T0* r208uc_option(void);
T0* r208uc_root(void);
T0* r208uc_library(void);
void r208validate_system(T208* C,T0* a1,T0* a2);
T0* r208uc_feature(void);
T0* r208uc_class(void);
T0* r208uc_loop(void);
T6 r208conforms_to(T208* C,T0* a1);
void r208validate_export(T208* C,T0* a1,T0* a2);
T0* r208uc_cluster(void);
void r208validate_exclude(T208* C,T0* a1,T0* a2);
T0* r208uc_export(void);
T0* r208uc_link_library(void);
T0* r208uc_include_dir(void);
T0* r208uc_location(void);
T0* r208twin(T208* C);
void r208validate_library_doc(T208* C,T0* a1,T0* a2);
T0* r208uc_system(void);
T0* r208uc_creation(void);
T0* r208uc_require(void);
T0* r208uc_name(void);
void r208validate_option(T208* C,T0* a1,T0* a2);
T0* r208new_unicode_string(T0* a1);
T0* r208uc_ensure(void);
void r133print_cluster(T133* C,T0* a1,T2 a2,T0* a3);
void r133generate_library(T133* C,T0* a1);
T6 r133is_equal(T133* C,T0* a1);
T0* r133replace_all_characters(T0* a1,T3 a2,T3 a3);
T6 r133se_assigned_from(T0* a1);
T0* r133clone(T0* a1);
T6 r133is_lace_keyword(T0* a1);
T6 r133is_windows(T133* C);
void r133print_ace_file(T133* C,T0* a1,T0* a2);
void r133print_exported_class(T0* a1,T2 a2,T0* a3);
T6 r133print_component(T133* C,T0* a1,T6 a2,T0* a3);
void r133make(T133* C,T0* a1,T0* a2);
void r133print_clusters(T133* C,T0* a1,T2 a2,T0* a3);
T6 r133conforms_to(T133* C,T0* a1);
void r133print_precompile_ace_file(T133* C,T0* a1,T0* a2);
void r133print_escaped_name(T0* a1,T0* a2);
T0* r133twin(T133* C);
T6 r133print_components(T133* C,T0* a1,T6 a2,T0* a3);
void r133print_options(T133* C,T0* a1,T2 a2,T0* a3);
extern T0*oBC133lace_keywords;
void r133print_indentation(T2 a1,T0* a2);
void r133print_link_libraries(T133* C,T0* a1,T0* a2);
void r133generate_system(T133* C,T0* a1);
void r133print_include_directories(T133* C,T0* a1,T0* a2);
T6 r414is_equal(T414* C,T0* a1);
T0* r414arguments(void);
T6 r414se_assigned_from(T0* a1);
void r414make(T414* C,T0* a1,T0* a2,T0* a3);
T0* r414message(T414* C,T0* a1);
T6 r414conforms_to(T414* C,T0* a1);
T0* r414twin(T414* C);
T0* r414default_message(T414* C);
T6 r373is_equal(T373* C,T0* a1);
T0* r373arguments(void);
T6 r373se_assigned_from(T0* a1);
void r373make(T373* C,T0* a1,T0* a2,T0* a3,T0* a4,T0* a5);
T0* r373message(T373* C,T0* a1);
T6 r373conforms_to(T373* C,T0* a1);
T0* r373twin(T373* C);
T0* r373default_message(T373* C);
T6 r457is_equal(T457* C,T0* a1);
T0* r457arguments(void);
T6 r457se_assigned_from(T0* a1);
void r457make(T457* C,T0* a1);
T0* r457message(T457* C,T0* a1);
T6 r457conforms_to(T457* C,T0* a1);
T0* r457twin(T457* C);
T0* r457default_message(T457* C);
T6 r412is_equal(T412* C,T0* a1);
T6 r412se_assigned_from(T0* a1);
T6 r412conforms_to(T412* C,T0* a1);
T0* r412expand_from_hash_table(T0* a1,T0* a2);
T0* r412twin(T412* C);
extern T0*oBC303utils;
T2 r303item_code(T303* C,T2 a1);
T6 r303is_equal(T303* C,T0* a1);
T6 r303se_assigned_from(T0* a1);
void r303make(T303* C);
void r303insert(T303* C,T2 a1,T0* a2,T2 a3,T2 a4);
void r303add_to_storage_count(T303* C,T2 a1);
void r303insert_code(T303* C,T2 a1,T2 a2);
T6 r303conforms_to(T303* C,T0* a1);
extern T6 oBC303optimize_access;
void r303storage_move(T303* C,T2 a1,T2 a2,T2 a3);
T0* r303twin(T303* C);
void r303find_position(T303* C,T2 a1);
void r229set_last_cell(T229* C,T0* a1);
void r229copy(T229* C,T0* a1);
void r229wipe_out(T229* C);
void r229remove_first(T229* C);
T0* r229cursor_item(T0* a1);
T6 r229cursor_is_last(T229* C,T0* a1);
T6 r229is_equal(T229* C,T0* a1);
void r229remove_traversing_cursor(T229* C,T0* a1);
void r229cursor_go_after(T229* C,T0* a1);
void r229move_all_cursors_after(T229* C);
void r229add_traversing_cursor(T229* C,T0* a1);
T6 r229se_assigned_from(T0* a1);
T6 r229same_type(T229* C,T0* a1);
void r229remove_last(T229* C);
T6 r229cursor_after(T0* a1);
T6 r229conforms_to(T229* C,T0* a1);
void r229make_list(T229* C);
void r229cursor_forth(T229* C,T0* a1);
void r229move_last_cursors_after(T229* C);
void r229cursor_start(T229* C,T0* a1);
T0* r229twin(T229* C);
void r229force_last(T229* C,T0* a1);
T0* r229new_cursor(T229* C);
void r229make_composite(T229* C);
T6 r229cursor_is_first(T229* C,T0* a1);
void r229remove_at_cursor(T229* C,T0* a1);
void r229move_all_cursors(T229* C,T0* a1,T0* a2);
T6 r229cursor_off(T0* a1);
void r229set_root_element(T229* C,T0* a1);
void r132print_cluster(T132* C,T0* a1,T0* a2);
void r132print_esd_file(T132* C,T0* a1,T0* a2);
void r132generate_library(T132* C,T0* a1);
T6 r132is_equal(T132* C,T0* a1);
T6 r132se_assigned_from(T0* a1);
T0* r132clone(T0* a1);
void r132make(T132* C,T0* a1,T0* a2);
void r132print_clusters(T132* C,T0* a1,T0* a2);
T0* r132remove_all_characters(T0* a1,T3 a2);
T6 r132conforms_to(T132* C,T0* a1);
void r132print_eld_file(T132* C,T0* a1,T0* a2);
void r132print_escaped_name(T0* a1,T0* a2);
T0* r132twin(T132* C);
void r132print_options(T0* a1,T2 a2,T0* a3);
void r132print_indentation(T2 a1,T0* a2);
void r132print_link_libraries(T0* a1,T0* a2);
void r132generate_system(T132* C,T0* a1);
T0* r302create_representation(T302* C);
T6 r302is_equal(T302* C,T0* a1);
T6 r302se_assigned_from(T0* a1);
T6 r302conforms_to(T302* C,T0* a1);
T0* r302twin(T302* C);
T6 r333is_equal(T333* C,T0* a1);
T0* r333arguments(void);
T6 r333se_assigned_from(T0* a1);
void r333make(T333* C,T0* a1);
T0* r333message(T333* C,T0* a1);
T6 r333conforms_to(T333* C,T0* a1);
T0* r333twin(T333* C);
T0* r333default_message(T333* C);
void r235set_name_prefix(T235* C,T0* a1);
T6 r235is_equal(T235* C,T0* a1);
T6 r235se_assigned_from(T0* a1);
void r235make_empty(T235* C);
void r235merge_libraries(T235* C,T0* a1,T0* a2);
void r235make(T235* C,T0* a1);
void r235set_parent(T235* C,T0* a1);
T6 r235conforms_to(T235* C,T0* a1);
T0* r235twin(T235* C);
void r235mount_libraries(T235* C,T0* a1,T0* a2);
void r235merge_externals(T235* C,T0* a1);
T0* r275new_cluster(T0* a1,T0* a2);
T0* r275new_mounted_library(T0* a1,T0* a2,T0* a3);
T0* r275new_exported_feature(T0* a1,T0* a2);
T6 r275is_equal(T275* C,T0* a1);
T0* r275new_mounted_libraries(void);
T6 r275se_assigned_from(T0* a1);
T0* r275new_options(void);
T0* r275new_system(T0* a1);
T0* r275new_exported_class(T0* a1);
T6 r275conforms_to(T275* C,T0* a1);
T0* r275new_externals(void);
T0* r275new_clusters(T0* a1);
T0* r275twin(T275* C);
T0* r275new_library(void);
void r431copy(T431* C,T0* a1);
void r431make_clashes(T431* C,T2 a1);
void r431search_position(T431* C,T0* a1);
T6 r431is_equal(T431* C,T0* a1);
void r431remove_traversing_cursor(T431* C,T0* a1);
void r431clone_slots(T431* C);
T0* r431item(T431* C,T0* a1);
void r431clone_clashes(T431* C);
void r431move_all_cursors_after(T431* C);
void r431make_items(T431* C,T2 a1);
void r431add_traversing_cursor(T431* C,T0* a1);
T6 r431se_assigned_from(T0* a1);
T0* r431clone(T0* a1);
T6 r431same_type(T431* C,T0* a1);
void r431make(T431* C,T2 a1);
void r431clone_items(T431* C);
T6 r431conforms_to(T431* C,T0* a1);
T6 r431has(T431* C,T0* a1);
void r431make_keys(T431* C,T2 a1);
T2 r431hash_position(T431* C,T0* a1);
void r431clone_keys(T431* C);
void r431make_with_equality_testers(T431* C,T2 a1,T0* a2,T0* a3);
T6 r431cursor_same_position(T0* a1,T0* a2);
T0* r431twin(T431* C);
T0* r431new_cursor(T431* C);
void r431make_slots(T431* C,T2 a1);
T2 r431new_modulus(T2 a1);
T6 r431cursor_off(T0* a1);
T6 r416is_equal(T416* C,T0* a1);
T0* r416arguments(void);
T6 r416se_assigned_from(T0* a1);
void r416make(T416* C,T0* a1,T0* a2);
T0* r416message(T416* C,T0* a1);
T6 r416conforms_to(T416* C,T0* a1);
T0* r416twin(T416* C);
T0* r416default_message(T416* C);
T0* r266out(T266* C);
void r266copy(T266* C,T0* a1);
T0* r266substring(T266* C,T2 a1,T2 a2);
T2 r266occurrences(T266* C,T295 a1);
T2 r266count(T266* C);
T2 r266item_code(T266* C,T2 a1);
T6 r266is_equal(T266* C,T0* a1);
T295 r266item(T266* C,T2 a1);
extern T0*oBC266utf8utils;
void r266append_uc_string(T266* C,T0* a1);
T6 r266se_assigned_from(T0* a1);
void r266make_from_string(T266* C,T0* a1);
T2 r266index_of(T266* C,T295 a1,T2 a2);
void r266make(T266* C,T2 a1);
void r266append_string(T266* C,T0* a1);
T2 r266hash_code(T266* C);
T6 r266conforms_to(T266* C,T0* a1);
void r266append_ucc_code(T266* C,T2 a1);
T6 r266empty(T266* C);
T0* r266twin(T266* C);
T0* r266to_utf8(T266* C);
T2 r266three_way_comparison(T266* C,T0* a1);
extern T0*oBC266i_settings;
void r266make_from_utf8(T266* C,T0* a1);
T6 r79is_equal(T79* C,T0* a1);
T6 r79se_assigned_from(T0* a1);
void r79execute_generators(T79* C,T0* a1);
void r79make(T79* C,T0* a1,T0* a2);
T6 r79conforms_to(T79* C,T0* a1);
void r79execute(T79* C);
T0* r79twin(T79* C);
T6 r520is_equal(T520* C,T0* a1);
T6 r520se_assigned_from(T0* a1);
void r520make(T520* C,T0* a1,T0* a2);
T6 r520conforms_to(T520* C,T0* a1);
T0* r520twin(T520* C);
T0* r517out(T517* C);
T6 r517is_equal(T517* C,T0* a1);
T6 r517se_assigned_from(T0* a1);
T0* r517clone(T0* a1);
void r517out_in_tagged_out_memory(T517* C);
T6 r517conforms_to(T517* C,T0* a1);
T0* r517twin(T517* C);
void r491fill(T491* C);
void r491compact_left(T491* C);
void r491set_position(T491* C,T2 a1,T2 a2,T2 a3);
T6 r491is_equal(T491* C,T0* a1);
T6 r491se_assigned_from(T0* a1);
T6 r491conforms_to(T491* C,T0* a1);
void r491resize(T491* C);
void r491make_with_size(T491* C,T0* a1,T2 a2);
T0* r491twin(T491* C);
void r491set_file(T491* C,T0* a1);
void r491flush(T491* C);
T0* r139current_working_directory(T139* C);
T6 r139is_equal(T139* C,T0* a1);
T6 r139se_assigned_from(T0* a1);
T0* r139clone(T0* a1);
T6 r139is_windows(T139* C);
void r139make(T139* C);
void r139old_put_string(T0* a1);
T6 r139conforms_to(T139* C,T0* a1);
void r139put_integer(T2 a1);
void r139put_line(T0* a1);
T0* r139twin(T139* C);
T6 r238is_fully_abstract(T238* C);
void r238set_name_prefix(T238* C,T0* a1);
T6 r238is_equal(T238* C,T0* a1);
void r238set_subclusters(T238* C,T0* a1);
T6 r238se_assigned_from(T0* a1);
void r238merge_libraries(T238* C,T0* a1,T0* a2);
T0* r238full_pathname(T238* C);
void r238make(T238* C,T0* a1,T0* a2);
T6 r238conforms_to(T238* C,T0* a1);
T0* r238twin(T238* C);
void r238merge_externals(T238* C,T0* a1);
T0* r161current_working_directory(T161* C);
T6 r161is_equal(T161* C,T0* a1);
T6 r161se_assigned_from(T0* a1);
T0* r161clone(T0* a1);
T6 r161is_windows(T161* C);
void r161make(T161* C);
void r161old_put_string(T0* a1);
T6 r161conforms_to(T161* C,T0* a1);
void r161put_integer(T2 a1);
void r161put_line(T0* a1);
T0* r161twin(T161* C);
T0* r494out(T494* C);
T6 r494is_equal(T494* C,T0* a1);
T6 r494se_assigned_from(T0* a1);
T0* r494clone(T0* a1);
void r494make(T494* C,T0* a1,T2 a2,T2 a3,T2 a4);
T6 r494conforms_to(T494* C,T0* a1);
T0* r494twin(T494* C);
T6 r306is_equal(T306* C,T0* a1);
T6 r306se_assigned_from(T0* a1);
void r306make(T306* C,T0* a1,T0* a2,T0* a3,T0* a4);
T6 r306conforms_to(T306* C,T0* a1);
T0* r306twin(T306* C);
T6 r392is_equal(T392* C,T0* a1);
T6 r392se_assigned_from(T0* a1);
void r392make(T392* C,T0* a1,T0* a2);
T6 r392conforms_to(T392* C,T0* a1);
T0* r392twin(T392* C);
T6 r234is_equal(T234* C,T0* a1);
T0* r234item(T234* C,T0* a1);
T6 r234se_assigned_from(T0* a1);
T0* r234clone(T0* a1);
void r234make_empty(T234* C);
void r234merge_libraries(T234* C,T0* a1,T0* a2);
T6 r234equal(T0* a1,T0* a2);
void r234set_root(T234* C,T6 a1);
T6 r234conforms_to(T234* C,T0* a1);
T0* r234twin(T234* C);
void r234mount_libraries(T234* C,T0* a1);
void r234merge_externals(T234* C,T0* a1);
T0* r423next_open_composite(T0* a1);
void r423enable_position_table(T423* C);
T6 r423is_equal(T423* C,T0* a1);
void r423on_content(T423* C,T0* a1);
T6 r423se_assigned_from(T0* a1);
void r423_199Pparse_from_stream(T423* C,T0* a1);
void r423on_processing_instruction(T423* C,T0* a1,T0* a2);
void r423on_start_tag(T423* C,T0* a1,T0* a2,T0* a3);
void r423make_from_implementation_event(T423* C,T0* a1);
void r423make_from_implementation(T423* C,T0* a1);
void r423handle_position(T423* C,T0* a1);
void r423on_comment(T423* C,T0* a1);
void r423parse_from_stream(T423* C,T0* a1);
void r423on_end_tag(T423* C,T0* a1,T0* a2);
T6 r423conforms_to(T423* C,T0* a1);
void r423reset(T423* C);
T0* r423twin(T423* C);
T6 r198is_equal(T198* C,T0* a1);
T6 r198se_assigned_from(T0* a1);
T0* r198clone(T0* a1);
void r198make_from_implementation(T198* C,T0* a1);
T6 r198is_correct(T198* C);
T6 r198conforms_to(T198* C,T0* a1);
T0* r198last_error_extended_description(T198* C);
T0* r198twin(T198* C);
T6 r304is_equal(T304* C,T0* a1);
T6 r304se_assigned_from(T0* a1);
void r304make(T304* C);
void r304insert(T304* C,T2 a1,T0* a2,T2 a3,T2 a4);
void r304insert_code(T304* C,T2 a1,T2 a2);
void r304move(T304* C,T2 a1,T2 a2,T2 a3);
T6 r304conforms_to(T304* C,T0* a1);
void r304storage_ensure_capacity(T304* C,T2 a1);
T0* r304twin(T304* C);
void r232set_last_cell(T232* C,T0* a1);
void r232copy(T232* C,T0* a1);
void r232wipe_out(T232* C);
void r232remove_first(T232* C);
T0* r232cursor_item(T0* a1);
T6 r232cursor_is_last(T232* C,T0* a1);
void r232add_attributes(T232* C,T0* a1);
T6 r232is_equal(T232* C,T0* a1);
void r232remove_traversing_cursor(T232* C,T0* a1);
void r232make_root(T232* C,T0* a1,T0* a2);
void r232cursor_go_after(T232* C,T0* a1);
void r232move_all_cursors_after(T232* C);
T6 r232has_attribute_by_name(T232* C,T0* a1);
void r232add_traversing_cursor(T232* C,T0* a1);
T6 r232se_assigned_from(T0* a1);
void r232add_attribute(T232* C,T0* a1,T0* a2,T0* a3);
T0* r232attribute_by_name(T232* C,T0* a1);
void r232make_child(T232* C,T0* a1,T0* a2,T0* a3);
T6 r232same_type(T232* C,T0* a1);
T6 r232equal(T0* a1,T0* a2);
void r232remove_last(T232* C);
T6 r232cursor_after(T0* a1);
T6 r232conforms_to(T232* C,T0* a1);
void r232make_list(T232* C);
void r232cursor_forth(T232* C,T0* a1);
void r232move_last_cursors_after(T232* C);
void r232cursor_start(T232* C,T0* a1);
T0* r232twin(T232* C);
void r232force_last(T232* C,T0* a1);
T0* r232new_cursor(T232* C);
void r232make_composite(T232* C);
T6 r232has_element_by_name(T232* C,T0* a1);
T6 r232cursor_is_first(T232* C,T0* a1);
void r232remove_at_cursor(T232* C,T0* a1);
T0* r232element_by_name(T232* C,T0* a1);
void r232move_all_cursors(T232* C,T0* a1,T0* a2);
T6 r232cursor_off(T0* a1);
void r470yy_do_action(T470* C,T2 a1);
extern T0*oBC471yytable_template;
extern int fBC471yytable_template;
T0* r470yytable_template(void);
T0* r470empty_ucstring(void);
void r470make_parser_skeleton(T470* C);
T2 r470yy_at_beginning_of_line(T470* C);
void r470fatal_error(T0* a1);
extern T0*oBC37std;
T0* r470yytype1(T0* a1);
T6 r470yytype2(T0* a1);
T0* r470yytype3(T0* a1);
T0* r470yytype4(T0* a1);
T0* r470yytype5(T0* a1);
void r470handle_found_text(T470* C);
void r470parse(T470* C);
void r470set_input_buffer(T470* C,T0* a1);
T2 r470yy_translate(T470* C,T2 a1);
extern T0*oBC472yy_ec_template;
extern int fBC472yy_ec_template;
T0* r470yy_ec_template(void);
void r470yy_execute_action(T470* C,T2 a1);
extern T0*oBC471yytranslate_template;
extern int fBC471yytranslate_template;
T0* r470yytranslate_template(void);
void r470clear_stacks(T470* C);
extern T0*oBC472yy_def_template;
extern int fBC472yy_def_template;
T0* r470yy_def_template(void);
T3 r470text_item(T470* C,T2 a1);
void r470yy_load_input_buffer(T470* C);
extern T295 oBC471uc_collon;
extern int fBC471uc_collon;
T295 r470uc_collon(void);
extern T0*oBC471yyr1_template;
extern int fBC471yyr1_template;
T0* r470yyr1_template(void);
void r470make_with_buffer(T470* C,T0* a1);
T2 r470yy_null_trans_state(T470* C,T2 a1);
T0* r470position(T470* C);
extern T0*oBC472yy_accept_template;
extern int fBC472yy_accept_template;
T0* r470yy_accept_template(void);
void r470read_token(T470* C);
extern T0*oBC471yyr2_template;
extern int fBC471yyr2_template;
T0* r470yyr2_template(void);
T2 r470yy_previous_state(T470* C);
extern T0*oBC471yypgoto_template;
extern int fBC471yypgoto_template;
T0* r470yypgoto_template(void);
void r470yy_refill_input_buffer(T470* C);
T0* r470yy_fixed_array(T0* a1);
T6 r470conforms_to(T470* C,T0* a1);
extern T0*oBC472yy_meta_template;
extern int fBC472yy_meta_template;
T0* r470yy_meta_template(void);
extern T0*oBC472yy_base_template;
extern int fBC472yy_base_template;
T0* r470yy_base_template(void);
T0* r470twin(T470* C);
T2 r470text_count(T470* C);
T0* r470clone(T0* a1);
T0* r470new_file_buffer(T0* a1);
void r470yy_initialize(T470* C);
void r470reset(T470* C);
T0* r470text(T470* C);
extern T0*oBC472yy_nxt_template;
extern int fBC472yy_nxt_template;
T0* r470yy_nxt_template(void);
void r470parse_from_stream(T470* C,T0* a1);
void r470yy_set_line_column(T470* C);
void r470yy_build_parser_tables(T470* C);
T295 r470new_unicode_character(T3 a1);
T0* r470new_unicode_string(T0* a1);
T0* r470split_name_and_prefix(T0* a1);
T6 r470is_equal(T470* C,T0* a1);
void r470report_error(T470* C,T0* a1);
extern T0*oBC471yydefact_template;
extern int fBC471yydefact_template;
T0* r470yydefact_template(void);
extern T0*oBC472yy_chk_template;
extern int fBC472yy_chk_template;
T0* r470yy_chk_template(void);
extern T0*oBC471yycheck_template;
extern int fBC471yycheck_template;
T0* r470yycheck_template(void);
void r470make(T470* C);
T0* r470yyfixed_array(T0* a1);
void r470yy_clear_all(T470* C);
extern T0*oBC471yydefgoto_template;
extern int fBC471yydefgoto_template;
T0* r470yydefgoto_template(void);
void r470yy_set_content(T470* C,T0* a1);
extern T0*oBC471yypact_template;
extern int fBC471yypact_template;
T0* r470yypact_template(void);
void r470set_start_condition(T470* C,T2 a1);
T6 r470se_assigned_from(T0* a1);
void r470yy_build_tables(T470* C);
void r470less(T470* C,T2 a1);
T6 r237is_equal(T237* C,T0* a1);
T6 r237se_assigned_from(T0* a1);
void r237make(T237* C,T0* a1,T0* a2,T0* a3);
T6 r237conforms_to(T237* C,T0* a1);
T0* r237twin(T237* C);
T6 r68is_equal(T68* C,T0* a1);
extern T0*oBC1command_arguments;
extern int fBC1command_arguments;
T0* r68command_arguments(void);
T6 r68se_assigned_from(T0* a1);
T6 r68conforms_to(T68* C,T0* a1);
T0* r68twin(T68* C);
T0* r68argument(T2 a1);
T6 r374is_equal(T374* C,T0* a1);
T0* r374arguments(void);
T6 r374se_assigned_from(T0* a1);
void r374make(T374* C,T0* a1,T0* a2,T0* a3,T0* a4);
T0* r374message(T374* C,T0* a1);
T6 r374conforms_to(T374* C,T0* a1);
T0* r374twin(T374* C);
T0* r374default_message(T374* C);
T6 r419is_equal(T419* C,T0* a1);
extern T0*oBC419ep_event_fact;
T6 r419se_assigned_from(T0* a1);
void r419make(T419* C);
T6 r419conforms_to(T419* C,T0* a1);
extern T0*oBC419ef_event_fact;
T0* r419twin(T419* C);
void r34_35Preport_error(T34* C,T0* a1);
void r34report_missing_element_error(T34* C,T0* a1,T0* a2,T0* a3);
T6 r34is_equal(T34* C,T0* a1);
void r34report_no_parser_available_error(T34* C);
T6 r34se_assigned_from(T0* a1);
void r34report_missing_attribute_error(T34* C,T0* a1,T0* a2,T0* a3);
extern T0*oBC36null_output_stream;
extern int fBC36null_output_stream;
T0* r34null_output_stream(void);
void r34report_cannot_write_file_error(T34* C,T0* a1);
void r34make(T34* C);
void r34report_cannot_read_file_error(T34* C,T0* a1);
void r34report_parser_error(T34* C,T0* a1);
T0* r34message(T0* a1);
void r34report_invalid_expression_error(T34* C,T0* a1,T0* a2);
T6 r34conforms_to(T34* C,T0* a1);
void r34report_positive_integer_expected_error(T34* C,T0* a1,T0* a2,T0* a3,T0* a4);
void r34report_not_xace_file_error(T34* C,T0* a1);
void r34report_wrong_root_element_error(T34* C,T0* a1,T0* a2);
void r34report_unknown_element_error(T34* C,T0* a1,T0* a2,T0* a3);
void r34report_warning(T34* C,T0* a1);
void r34report_multiple_library_prefix_error(T34* C,T0* a1,T0* a2);
T0* r34twin(T34* C);
void r34report_wrong_attribute_value_error(T34* C,T0* a1,T0* a2,T0* a3,T0* a4,T0* a5);
void r34report_boolean_expected_error(T34* C,T0* a1,T0* a2,T0* a3,T0* a4);
void r34report_error(T34* C,T0* a1);
T6 r409is_expression_true(T409* C,T0* a1);
T6 r409should_strip_element(T409* C,T0* a1,T0* a2);
T6 r409is_equal(T409* C,T0* a1);
T6 r409se_assigned_from(T0* a1);
void r409preprocess_composite(T409* C,T0* a1,T0* a2);
T0* r409new_unicode_string_from_utf8(T0* a1);
extern T295 oBC194uc_equal;
extern int fBC194uc_equal;
T295 r409uc_equal(void);
T6 r409is_valid_expression(T0* a1);
T295 r409new_unicode_character(T3 a1);
extern T295 oBC194uc_closing_curly_brace;
extern int fBC194uc_closing_curly_brace;
T295 r409uc_closing_curly_brace(void);
void r409make(T409* C,T0* a1,T0* a2);
extern T0*oBC194uc_unless;
extern int fBC194uc_unless;
T0* r409uc_unless(void);
extern T0*oBC194uc_if;
extern int fBC194uc_if;
T0* r409uc_if(void);
T6 r409conforms_to(T409* C,T0* a1);
extern T295 oBC194uc_opening_curly_brace;
extern int fBC194uc_opening_curly_brace;
T295 r409uc_opening_curly_brace(void);
T0* r409twin(T409* C);
void r409expand_attribute_variables(T409* C,T0* a1);
T0* r409new_unicode_string(T0* a1);
extern T295 oBC194uc_dollar;
extern int fBC194uc_dollar;
T295 r409uc_dollar(void);
extern T0*oBC138error;
extern int fBC138error;
T0* r138error(void);
T6 r138is_equal(T138* C,T0* a1);
T6 r138se_assigned_from(T0* a1);
extern T0*oBC138input;
extern int fBC138input;
T0* r138input(void);
extern T0*oBC138output;
extern int fBC138output;
T0* r138output(void);
T6 r138conforms_to(T138* C,T0* a1);
T0* r138twin(T138* C);
T6 r499is_equal(T499* C,T0* a1);
T6 r499se_assigned_from(T0* a1);
T6 r499conforms_to(T499* C,T0* a1);
T0* r499twin(T499* C);
void r43raise(T43* C,T0* a1);
T6 r43is_equal(T43* C,T0* a1);
T6 r43se_assigned_from(T0* a1);
T6 r43conforms_to(T43* C,T0* a1);
T0* r43twin(T43* C);
extern T0*oBC44developer_exception_name_memory;
void r44raise(T44* C,T0* a1);
T6 r44is_equal(T44* C,T0* a1);
T6 r44se_assigned_from(T0* a1);
T6 r44conforms_to(T44* C,T0* a1);
T0* r44twin(T44* C);
T6 r39is_equal(T39* C,T0* a1);
T6 r39se_assigned_from(T0* a1);
T6 r39conforms_to(T39* C,T0* a1);
T6 r39_px_60(T39* C,T0* a1);
T0* r39twin(T39* C);
T6 r175is_equal(T175* C,T0* a1);
T6 r175se_assigned_from(T0* a1);
T6 r175conforms_to(T175* C,T0* a1);
T0* r175twin(T175* C);
T6 r338is_equal(T338* C,T0* a1);
T6 r338se_assigned_from(T0* a1);
T0* r338to_hexadecimal(T2 a1,T6 a2);
T6 r338conforms_to(T338* C,T0* a1);
T3 r338to_character(T2 a1);
T0* r338twin(T338* C);
void r338append_hexadecimal_integer(T0* a1,T2 a2,T6 a3);
extern T0*oBC300factory;
extern int fBC300factory;
T0* r300factory(void);
T6 r300is_equal(T300* C,T0* a1);
T6 r300se_assigned_from(T0* a1);
T6 r300conforms_to(T300* C,T0* a1);
T0* r300twin(T300* C);
T6 r526is_equal(T526* C,T0* a1);
T6 r526se_assigned_from(T0* a1);
T6 r526conforms_to(T526* C,T0* a1);
T0* r526twin(T526* C);
T6 r38is_equal(T38* C,T0* a1);
T6 r38se_assigned_from(T0* a1);
T6 r38conforms_to(T38* C,T0* a1);
T0* r38twin(T38* C);
T0* r335get_environment_variable(T0* a1);
T6 r193is_equal(T193* C,T0* a1);
T6 r193se_assigned_from(T0* a1);
T6 r193conforms_to(T193* C,T0* a1);
T0* r193twin(T193* C);
T6 r525is_equal(T525* C,T0* a1);
T6 r525se_assigned_from(T0* a1);
T6 r525conforms_to(T525* C,T0* a1);
T0* r525twin(T525* C);
T6 r454is_equal(T454* C,T0* a1);
T6 r454se_assigned_from(T0* a1);
T6 r454conforms_to(T454* C,T0* a1);
T0* r454twin(T454* C);
void r16process_cluster(T16* C);
T0* r16split_on_first(T0* a1,T3 a2);
T6 r16is_equal(T16* C,T0* a1);
void r16process_options(T16* C);
void r16process_arguments(T16* C);
T0* r16arguments(void);
T6 r16has_next_option_value(T16* C);
T6 r16se_assigned_from(T0* a1);
T0* r16clone(T0* a1);
void r16process_xace_file(T16* C,T0* a1);
T6 r16is_next_option_long_option(T16* C);
extern T0*oBC16usage_message;
extern int fBC16usage_message;
T0* r16usage_message(void);
T0* r16next_option_value(T16* C);
void r16make(T16* C);
void r16process_command(T16* C);
T6 r16is_valid_option_position(T2 a1);
void r16process_system(T16* C);
T6 r16conforms_to(T16* C,T0* a1);
extern T0*oBC20exceptions;
void r16process_define_string(T16* C,T0* a1);
void r16process_output(T16* C,T0* a1);
void r16process_validate(T16* C);
T0* r16next_option(T16* C);
T6 r16has_next_option(T16* C);
void r16process_library(T16* C);
T0* r16twin(T16* C);
void r16process_define(T16* C);
T0* r16split_string(T0* a1,T3 a2);
void r16process_compilers(T16* C,T0* a1,T0* a2);
T6 r16match_long_option(T16* C,T0* a1);
void r16consume_option(T16* C);
void r464connect_to_current_working_directory(T464* C);
void r464disconnect(T464* C);
extern T0*oBC464last_entry;
T6 r101is_equal(T101* C,T0* a1);
T6 r101se_assigned_from(T0* a1);
T6 r101is_integer(T0* a1);
T6 r101same_case_insensitive(T0* a1,T0* a2);
T0* r101make(T2 a1);
T6 r101conforms_to(T101* C,T0* a1);
T0* r101twin(T101* C);
T0* r295out(T295* C);
T6 r295is_equal(T295* C,T295 a1);
extern T0*oBC297integer_;
T3 r295as_character(T295* C);
extern T0*oBC298platform;
T6 r295_px_60(T295* C,T295 a1);
T6 r295_px_62(T295* C,T295 a1);
T0* r295as_hexadecimal(T295* C);
T3 r295code_to_character(T2 a1);
T6 r334is_equal(T334* C,T0* a1);
T0* r334variable_value(T0* a1);
T6 r334se_assigned_from(T0* a1);
extern T335 oBC334environment_impl;
T6 r334conforms_to(T334* C,T0* a1);
T0* r334interpreted_string(T0* a1);
T0* r334twin(T334* C);
T2 r337nr_of_following_octets(T3 a1);
T6 r337is_equal(T337* C,T0* a1);
T6 r337se_assigned_from(T0* a1);
void r337read_code(T337* C,T0* a1,T2 a2);
void r337read_following_octet(T337* C,T0* a1);
void r337put_code(T2 a1,T0* a2,T2 a3);
T6 r337conforms_to(T337* C,T0* a1);
T3 r337code_to_character(T2 a1);
T2 r337octet_size(T2 a1);
T0* r337twin(T337* C);
extern T0*oBC337specific;
T6 r337is_leading_octet(T3 a1);
T2 r337read_leading_octet(T337* C,T0* a1,T2 a2);
T6 r453is_equal(T453* C,T0* a1);
T6 r453se_assigned_from(T0* a1);
T0* r453new_event_parser_imp(void);
T6 r453conforms_to(T453* C,T0* a1);
T0* r453twin(T453* C);
T6 r78is_equal(T78* C,T0* a1);
T6 r78se_assigned_from(T0* a1);
T6 r78conforms_to(T78* C,T0* a1);
T6 r78_px_60(T78* C,T0* a1);
T0* r78twin(T78* C);
T6 r527is_equal(T527* C,T0* a1);
T6 r527se_assigned_from(T0* a1);
T6 r527conforms_to(T527* C,T0* a1);
T0* r527twin(T527* C);
T0* r142current_working_directory(T142* C);
T6 r142is_equal(T142* C,T0* a1);
T6 r142se_assigned_from(T0* a1);
T0* r142clone(T0* a1);
T6 r142is_windows(T142* C);
T6 r142conforms_to(T142* C,T0* a1);
T0* r142twin(T142* C);
extern T16*eiffel_root_object;
extern int se_argc;
extern char**se_argv;
#define SE_MAXID 528
extern T7* g[];
extern T7* t[];
void initialize_eiffel_runtime(int argc,char*argv[]);
extern T7*ms193_264596220;
extern T7*ms131_2071896;
extern T7*ms193_537250837;
extern T7*ms193_2250778;
extern T7*ms193_2246326;
extern T7*ms193_50458336;
extern T7*ms193_53099313;
extern T7*ms374_802821753;
extern T7*ms333_988446515;
extern T7*ms193_765701343;
extern T7*ms463_1606053737;
extern T7*ms193_1817115202;
extern T7*ms193_295494129;
extern T7*ms270_2131726096;
extern T7*ms193_78002;
extern T7*ms193_1831836695;
extern T7*ms193_2191641;
extern T7*ms193_39972254;
extern T7*ms193_78263;
extern T7*ms193_78331;
extern T7*ms193_78279;
extern T7*ms193_78490;
extern T7*ms193_78495;
extern T7*ms193_2185421;
extern T7*ms193_90041;
extern T7*ms193_1155828738;
extern T7*ms193_90141;
extern T7*ms193_722497341;
extern T7*ms414_1179444653;
extern T7*ms193_692313432;
extern T7*ms193_1619639801;
extern T7*ms193_9901966;
extern T7*ms32_1415324896;
extern T7*ms139_10;
extern T7*ms193_662126768;
extern T7*ms132_440790;
extern T7*ms132_440825;
extern T7*ms193_89216;
extern T7*ms193_1085709462;
extern T7*ms193_89771;
extern T7*ms193_89862;
extern T7*ms193_9786069;
extern T7*ms160_10;
extern T7*ms193_554402727;
extern T7*ms193_49076540;
extern T7*ms372_1003460429;
extern T7*ms107_431271;
extern T7*ms161_10;
extern T7*ms193_484842691;
extern T7*ms413_54177410;
extern T7*ms193_49483191;
extern T7*ms32_2045384695;
extern T7*ms193_1040155018;
extern T7*ms193_51843716;
extern T7*ms104_1515383187;
extern T7*ms193_1570582567;
extern T7*ms415_454072470;
extern T7*ms193_1991783165;
extern T7*ms193_17221;
extern T7*ms134_11272528;
extern T7*ms193_17176;
extern T7*ms193_10342028;
extern T7*ms332_229;
extern T7*ms193_440571;
extern T7*ms193_702131887;
extern T7*ms457_512683247;
extern T7*ms193_279458336;
extern T7*ms193_234165132;
extern T7*ms193_1994621;
extern T7*ms193_1183150341;
extern T7*ms193_19162620;
extern T7*ms193_1988096;
extern T7*ms193_388005040;
extern T7*ms192_79251;
extern T7*ms193_2141685;
extern T7*ms193_2040823781;
extern T7*ms193_48856070;
extern T7*ms193_1846843898;
extern T7*ms193_335219475;
extern T7*ms418_462378139;
extern T7*ms417_1214914019;
extern T7*ms193_9946191;
extern T7*ms416_820451542;
extern T7*ms193_1493399999;
extern T7*ms193_52771526;
extern T7*ms193_420169;
extern T7*ms193_1365755180;
extern T7*ms193_1962309625;
extern T7*ms193_10365093;
extern T7*ms373_105797387;
extern T7*ms107_1319327951;
extern T7*ms193_10030586;
extern T7*ms193_1957581;
extern T7*ms193_402346;
extern T7*ms193_3073;
extern T7*ms193_3139;
extern T7*ms193_3148;
extern T7*ms193_3226;
extern T7*ms193_3322;
extern T7*ms193_783353191;
extern T7*ms458_10;
extern T7*ms107_9702826;
extern T7*ms193_243833461;
extern T7*ms193_48929738;
extern T7*ms192_18036;
extern T7*ms133_10031271;
T7*se_ms(int c,char*e);
T7*se_string(char*e);
void se_msi1(void);
void se_msi2(void);
void se_msi3(void);
void*se_ma103(int argc,...);
void*se_ma305(int argc,...);
T0* X422new_event_parser_imp(T0*C);
T6 X422is_available(T0*C);
void X32execute(T0*C);
T0* X148item(T0*C);
T6 X148after(T0*C);
void X148forth(T0*C);
void X148start(T0*C);
T2 X149count(T0*C);
T0* X149cursor_item(T0*C,T0* a1);
T6 X149is_empty(T0*C);
T6 X149cursor_after(T0*C,T0* a1);
void X149cursor_forth(T0*C,T0* a1);
void X149cursor_start(T0*C,T0* a1);
T0* X149new_cursor(T0*C);
T0* X293cursor_item(T0*C,T0* a1);
T6 X293cursor_after(T0*C,T0* a1);
void X293cursor_forth(T0*C,T0* a1);
void X293cursor_start(T0*C,T0* a1);
T6 X10is_equal(T0*C,T0* a1);
T0* X10twin(T0*C);
T6 X1se_assigned_from(T0*C,T0* a1);
T6 X1conforms_to(T0*C,T0* a1);
void X483clear_all(T0*C,T0* a1);
T0* X483make(T0*C,T2 a1);
T0* X483resize(T0*C,T0* a1,T2 a2);
void X98put_new_line(T0*C);
void X98put_integer(T0*C,T2 a1);
void X98put_line(T0*C,T0* a1);
void X98put_character(T0*C,T3 a1);
void X98put_string(T0*C,T0* a1);
T0* X185name(T0*C);
T2 X185read_to_string(T0*C,T0* a1,T2 a2,T2 a3);
void X185read_character(T0*C);
T6 X185end_of_input(T0*C);
void X230force_last(T0*C,T0* a1);
T0* X230new_cursor(T0*C);
void X230remove_at_cursor(T0*C,T0* a1);
void X44raise(T0*C,T0* a1);
T2 X480count(T0*C);
T2 X480item(T0*C,T2 a1);
T2 X480lower(T0*C);
void X191parse_file(T0*C,T0* a1);
void X482put(T0*C,T0* a1,T2 a2);
T0* X482item(T0*C,T2 a1);
T486 X482storage(T0*C);
void X482set_all_with(T0*C,T0* a1);
void X482resize(T0*C,T2 a1);
T2 X294item_code(T0*C,T2 a1);
void X294insert(T0*C,T2 a1,T0* a2,T2 a3,T2 a4);
void X294insert_code(T0*C,T2 a1,T2 a2);
T0* X95default_message(T0*C);
T6 X142is_windows(T0*C);
void X81generate_library(T0*C,T0* a1);
void X81generate_system(T0*C,T0* a1);
T0* T2toT39(T2 source);
T2 T39toT2(T0* source);
T0* T6toT38(T6 source);

#ifdef __cplusplus
}
#endif
