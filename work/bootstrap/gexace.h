#ifdef __cplusplus
extern "C" {
#endif
/*
ANSI C code generated by SmallEiffel The GNU Eiffel Compiler
Release -0.74 Beta #21 (Wednesday April 10th 2002)
Copyright (C), 1994-2002 - LORIA - UHP - INRIA - FRANCE
Dominique COLNET and Suzanne COLLIN - SmallEiffel@loria.fr
http://SmallEiffel.loria.fr
C Compiler options used: -O2 -nologo -D"WIN32" -w
*/

/*
-- This file is  free  software, which  comes  along  with  SmallEiffel. This
-- software  is  distributed  in the hope that it will be useful, but WITHOUT
-- ANY  WARRANTY;  without  even  the  implied warranty of MERCHANTABILITY or
-- FITNESS  FOR A PARTICULAR PURPOSE. You can modify it as you want, provided
-- this header is kept unaltered, and a notification of the changes is added.
-- You  are  allowed  to  redistribute  it and sell it, alone or as a part of
-- another product.
--       Copyright (C) 1994-2002 LORIA - INRIA - U.H.P. Nancy 1 - FRANCE
--          Dominique COLNET and Suzanne COLLIN - SmallEiffel@loria.fr
--                       http://SmallEiffel.loria.fr
--
*/
/*
  This file (SmallEiffel/sys/runtime/base.h) contains all basic Eiffel
  type definitions.
  This file is automatically included in the header for all modes of
  compilation: -boost, -no_check, -require_check, -ensure_check, ...
  This file is also included in the header of any cecil file (when the
  -cecil option is used).
  This file is also included in the header file of C++ wrappers (when
  using the external "C++" clause).
*/
#include <stdio.h>
#include <string.h>
#include <math.h>
#include <stdlib.h>
#include <signal.h>
#include <stddef.h>
#include <stdarg.h>
#include <limits.h>
#include <float.h>
#include <setjmp.h>
#include <sys/types.h>
#include <sys/stat.h>
#include <fcntl.h>
#ifdef WIN32
#include <windows.h>
#else
#ifndef O_RDONLY
#include <sys/file.h>
#endif
#ifndef O_RDONLY
#define O_RDONLY 0000
#endif
#endif

/* Because ANSI C EXIT_* are not always defined: */
#ifndef EXIT_FAILURE
#define EXIT_FAILURE 1
#endif
#ifndef EXIT_SUCCESS
#define EXIT_SUCCESS 0
#endif

/*
   On Linux glibc systems, we need to use sig.* versions of jmp_buf,
   setjmp and longjmp to preserve the signal handling context.
   Currently, the way I figured to detect this is if _SIGSET_H_types has
   been defined in /usr/include/setjmp.h.
*/
#ifdef _SIGSET_H_types
#define JMP_BUF    sigjmp_buf
#define SETJMP(x)  sigsetjmp( (x), 1)
#define LONGJMP    siglongjmp
#else
#define JMP_BUF    jmp_buf
#define SETJMP(x)  setjmp( (x) )
#define LONGJMP    longjmp
#endif

/*
   Type to store reference objects Id:
 */
typedef int Tid;
typedef struct S0 T0;
struct S0{Tid id;};

/*
   The default channel used to print runtime error messages:
*/
#define SE_ERR stderr

/*
   Eiffel type INTEGER is #2:
*/
typedef int T2;
#define EIF_INTEGER T2
#define M2 (0)
#define EIF_INTEGER_BITS (CHAR_BIT*sizeof(int))
#define EIF_MINIMUM_INTEGER (INT_MIN)
#define EIF_MAXIMUM_INTEGER (INT_MAX)

/*
  Eiffel type CHARACTER is #3:
*/
typedef unsigned char T3;
#define EIF_CHARACTER T3
#define M3 (0)
#define EIF_CHARACTER_BITS (CHAR_BIT)
#define EIF_MINIMUM_CHARACTER_CODE (0)
#define EIF_MAXIMUM_CHARACTER_CODE (255)
#define T3code(x) ((T2)(x))
#define T3to_integer(x) ((T2)((char)(x)))
#define T3to_bit(x) (x)

/*
  Eiffel type REAL is #4:
*/
typedef float T4;
#define EIF_REAL T4
#define M4 (0.0)
#define EIF_REAL_BITS (CHAR_BIT*sizeof(float))
#define EIF_MINIMUM_REAL (-(FLT_MAX))
#define EIF_MAXIMUM_REAL (FLT_MAX)
#define T2toT4(x) ((T4)(x))

/*
  Eiffel type DOUBLE is #5:
*/
typedef double T5;
#define EIF_DOUBLE T5
#define M5 (0.0)
#define EIF_DOUBLE_BITS (CHAR_BIT*sizeof(double))
#define EIF_MINIMUM_DOUBLE (-(DBL_MAX))
#define EIF_MAXIMUM_DOUBLE (DBL_MAX)
#define T2toT5(x) ((T5)(x))
#define T4toT5(x) ((T5)(x))

/*
  Eiffel type BOOLEAN is #6:
*/
typedef char T6;
#define EIF_BOOLEAN T6
#define M6 (0)
#define EIF_BOOLEAN_BITS (CHAR_BIT)

/*
   Eiffel type POINTER is #8:
*/
typedef void* T8;
#define EIF_POINTER T8
#define M8 (NULL)
#define EIF_POINTER_BITS (CHAR_BIT*sizeof(void*))

/*
  To use type STRING on the C side:
*/
#define EIF_STRING T7*

/*
  Some Other EIF_* defined in ETL:
*/
#define eif_access(x) ((char*)(x))
#define EIF_REFERENCE T0*
#define EIF_OBJ T0*
#define EIF_OBJECT EIF_OBJ

/*
   Wrappers for `malloc' and `calloc':
*/
void* se_malloc(size_t size);
void* se_calloc(size_t nmemb, size_t size);

/*C Header Pass 1 :*/
typedef struct S491 T491;
typedef struct S344 T344;
typedef struct S306 T306;
typedef struct S331 T331;
typedef struct S337 T337;
typedef struct S397 T397;
typedef struct S400 T400;
typedef struct S105 T105;
typedef struct S157 T157;
typedef struct S402 T402;
typedef struct S246 T246;
typedef struct S176 T176;
typedef struct S391 T391;
typedef struct S320 T320;
typedef struct S399 T399;
typedef struct S357 T357;
typedef struct S295 T295;
typedef struct S190 T190;
typedef struct S260 T260;
typedef struct S216 T216;
typedef struct S232 T232;
typedef struct S221 T221;
typedef struct S138 T138;
typedef struct S272 T272;
typedef struct S220 T220;
typedef struct S230 T230;
typedef struct S369 T369;
typedef struct S376 T376;
typedef struct S479 T479;
typedef struct S43 T43;
typedef struct S372 T372;
typedef struct S353 T353;
typedef struct S189 T189;
typedef struct S463 T463;
typedef struct S44 T44;
typedef struct S209 T209;
typedef struct S319 T319;
typedef struct S125 T125;
typedef struct S191 T191;
typedef struct S92 T92;
typedef struct S477 T477;
typedef struct S134 T134;
typedef struct S168 T168;
typedef struct S472 T472;
typedef struct S39 T39;
typedef struct S468 T468;
typedef struct S144 T144;
typedef struct S494 T494;
typedef struct S336 T336;
typedef struct S388 T388;
typedef struct S175 T175;
typedef struct S301 T301;
typedef struct S329 T329;
typedef struct S33 T33;
typedef struct S438 T438;
typedef struct S226 T226;
typedef struct S317 T317;
typedef struct S375 T375;
typedef struct S131 T131;
typedef struct S419 T419;
typedef struct S300 T300;
typedef struct S227 T227;
typedef struct S267 T267;
typedef struct S506 T506;
typedef struct S502 T502;
typedef struct S108 T108;
typedef struct S217 T217;
typedef struct S137 T137;
typedef struct S104 T104;
typedef struct S478 T478;
typedef struct S107 T107;
typedef struct S249 T249;
typedef struct S499 T499;
typedef struct S222 T222;
typedef struct S160 T160;
typedef struct S393 T393;
typedef struct S427 T427;
typedef struct S443 T443;
typedef struct S38 T38;
typedef struct S351 T351;
typedef struct S155 T155;
typedef struct S75 T75;
typedef int T298;
typedef struct S193 T193;
typedef struct S136 T136;
typedef struct S67 T67;
typedef struct S7 T7;
typedef struct S395 T395;
typedef struct S208 T208;
typedef struct S133 T133;
typedef struct S505 T505;
typedef struct S396 T396;
typedef struct S355 T355;
typedef struct S436 T436;
typedef struct S437 T437;
typedef struct S394 T394;
typedef struct S431 T431;
typedef struct S16 T16;
typedef struct S270 T270;
typedef struct S210 T210;
typedef struct S444 T444;
typedef struct S132 T132;
typedef struct S476 T476;
typedef struct S101 T101;
typedef struct S263 T263;
typedef struct S269 T269;
typedef struct S215 T215;
typedef struct S296 T296;
typedef struct S218 T218;
typedef struct S278 T278;
typedef struct S413 T413;
typedef struct S398 T398;
typedef struct S121 T121;
typedef struct S273 T273;
typedef struct S118 T118;
typedef struct S79 T79;
typedef struct S297 T297;
typedef struct S500 T500;
typedef struct S299 T299;
typedef struct S497 T497;
typedef struct S145 T145;
typedef struct S471 T471;
typedef struct S139 T139;
typedef struct S435 T435;
typedef struct S161 T161;
typedef struct S474 T474;
typedef struct S279 T279;
typedef struct S374 T374;
typedef struct S127 T127;
typedef struct S103 T103;
typedef struct S430 T430;
typedef struct S462 T462;
typedef struct S405 T405;
typedef struct S198 T198;
typedef struct S271 T271;
typedef struct S213 T213;
typedef struct S78 T78;
typedef struct S358 T358;
typedef struct S450 T450;
typedef struct S87 T87;
typedef struct S130 T130;
typedef struct S507 T507;
typedef struct S142 T142;
typedef struct S293 T293;
typedef struct S290 T290;
typedef struct S68 T68;
typedef struct S356 T356;
typedef struct S401 T401;
typedef struct S34 T34;
typedef struct S63 T63;

/*C Header Pass 2 :*/
typedef T0**T449;
typedef T0**T229;
typedef T0**T234;
typedef T0**T77;
typedef T3*T9;
typedef T0**T434;
typedef T2*T123;
typedef T0**T466;

/*C Header Pass 3 :*/
struct S444{T8 _directory_stream;T8 _current_entry;};
int se_cmpT444(T444 o1,T444 o2);
struct S273{T2 _i_code;};
int se_cmpT273(T273 o1,T273 o2);

/*C Header Pass 4 :*/
struct S491{Tid id;T0* _container;T6 _after;T6 _before;T0* _current_cell;T0* _next_cursor;};
extern T491 M491;
struct S344{Tid id;};
extern T344 M344;
struct S306{Tid id;T0* _equality_tester;T2 _count;T2 _capacity;T2 _last_position;T2 _modulus;T2 _free_slot;T2 _position;T2 _slots_position;T2 _clashes_previous_position;T2 _found_position;T0* _internal_cursor;T0* _items;T0* _clashes;T0* _slots;T0* _fixed_item_array_;};
extern T306 M306;
struct S331{Tid id;T0* _item;T0* _right;};
extern T331 M331;
struct S337{Tid id;T0* _equality_tester;T0* _key_equality_tester;T2 _count;T2 _capacity;T2 _last_position;T2 _modulus;T2 _free_slot;T2 _position;T2 _slots_position;T2 _clashes_previous_position;T2 _found_position;T0* _internal_cursor;T0* _items;T0* _keys;T0* _clashes;T0* _slots;T0* _fixed_item_array_;T0* _fixed_key_array_;};
extern T337 M337;
struct S397{Tid id;T0* _parameters;};
extern T397 M397;
struct S400{Tid id;T0* _parameters;};
extern T400 M400;
struct S105{Tid id;T0* _item;T0* _right;};
extern T105 M105;
struct S157{Tid id;T0* _item;T0* _right;};
extern T157 M157;
struct S402{Tid id;T0* _event_parser_factory;};
extern T402 M402;
struct S246{Tid id;T0* _container;T2 _position;T0* _next_cursor;};
extern T246 M246;
struct S176{Tid id;T6 _push_back_flag;T0* _name;T0* _path;T8 _input_stream;T2 _memory;T3 _last_character;T6 _end_of_file;T0* _character_buffer;};
extern T176 M176;
struct S391{Tid id;T0* _variables;T0* _error_handler;};
extern T391 M391;
struct S320{Tid id;T0* _first;T0* _second;};
extern T320 M320;
struct S399{Tid id;T0* _parameters;};
extern T399 M399;
struct S357{Tid id;T0* _class_name;T0* _features;};
extern T357 M357;
struct S295{Tid id;T0* _ast_factory;T0* _error_handler;T0* _cluster_parser;T0* _xml_parser;T0* _xml_validator;T0* _xml_preprocessor;T0* _last_cluster;};
extern T295 M295;
struct S190{Tid id;T0* _ast_factory;T0* _error_handler;T0* _cluster_parser;T0* _xml_parser;T0* _xml_validator;T0* _xml_preprocessor;T0* _last_system;};
extern T190 M190;
struct S260{Tid id;T0* _container;T6 _after;T6 _before;T0* _current_cell;T0* _next_cursor;};
extern T260 M260;
struct S216{Tid id;T0* _clusters;};
extern T216 M216;
struct S232{Tid id;T234 _storage;T2 _capacity;T2 _upper;};
extern T232 M232;
struct S221{Tid id;T0* _declared_address_expression;T0* _declared_arguments;T0* _declared_array_optimization;T0* _declared_assertion;T0* _declared_case_insensitive;T0* _declared_check_vape;T0* _declared_clean;T0* _declared_component;T0* _declared_console_application;T0* _declared_create_keyword_extension;T0* _declared_dead_code_removal;T0* _declared_debug_option;T0* _declared_debug_tag;T0* _declared_debugger;T0* _declared_document;T0* _declared_dynamic_runtime;T0* _declared_exception_trace;T0* _declared_finalize;T0* _declared_flat_fst_optimization;T2 _declared_fst_expansion_factor;T0* _declared_fst_optimization;T0* _declared_garbage_collector;T0* _declared_gc_info;T2 _declared_heap_size;T0* _declared_inlining;T2 _declared_inlining_size;T0* _declared_jumps_optimization;T0* _declared_layout_optimization;T0* _declared_leaves_optimization;T0* _declared_line_generation;T0* _declared_linker;T0* _declared_linux_fpu_double_precision;T0* _declared_manifest_string_trace;T0* _declared_map;T0* _declared_multithreaded;T0* _declared_no_default_lib;T0* _declared_override_cluster;T0* _declared_portable_code_generation;T0* _declared_precompiled;T0* _declared_profile;T0* _declared_reloads_optimization;T0* _declared_shared_library_definition;T0* _declared_split;T2 _declared_stack_size;T0* _declared_storable_filename;T0* _declared_strip_option;T0* _declared_target;T0* _declared_trace;T0* _declared_verbose;T0* _declared_visible_filename;T0* _declared_warning;T0* _declared_wedit;};
extern T221 M221;
struct S138{Tid id;};
extern T138 M138;
struct S272{Tid id;T123 _storage;T2 _capacity;T2 _upper;T2 _lower;};
extern T272 M272;
struct S220{Tid id;T0* _exported_classes;T0* _include_directories;T0* _link_libraries;};
extern T220 M220;
struct S230{Tid id;T0* _equality_tester;T2 _count;T2 _capacity;T0* _storage;T0* _fixed_array_;T0* _internal_cursor;};
extern T230 M230;
struct S369{Tid id;T0* _container;T6 _after;T6 _before;T0* _current_cell;T0* _next_cursor;};
extern T369 M369;
struct S376{Tid id;T0* _item;T0* _right;};
extern T376 M376;
struct S479{Tid id;};
extern T479 M479;
struct S43{Tid id;};
extern T43 M43;
struct S372{Tid id;T0* _item;T0* _right;};
extern T372 M372;
struct S353{Tid id;T0* _parameters;};
extern T353 M353;
struct S189{Tid id;T0* _system_name;T0* _root_class_name;T0* _creation_procedure_name;T0* _options;T0* _clusters;T0* _mounted_clusters;T0* _externals;};
extern T189 M189;
struct S463{Tid id;};
extern T463 M463;
struct S44{Tid id;};
extern T44 M44;
struct S209{Tid id;T0* _table;};
extern T209 M209;
struct S319{Tid id;T0* _container;T6 _after;T6 _before;T0* _current_cell;T0* _next_cursor;};
extern T319 M319;
struct S125{Tid id;};
extern T125 M125;
struct S191{Tid id;T0* _ast_factory;T0* _error_handler;T0* _cluster_parser;T0* _xml_parser;T0* _xml_validator;T0* _xml_preprocessor;};
extern T191 M191;
struct S92{Tid id;T0* _container;T6 _after;T6 _before;T0* _current_cell;T0* _next_cursor;};
extern T92 M92;
struct S477{Tid id;T0* _first;T0* _second;};
extern T477 M477;
struct S134{Tid id;T0* _output_filename;T0* _variables;T0* _error_handler;};
extern T134 M134;
struct S168{Tid id;T2 _position;T0* _container;T0* _next_cursor;};
extern T168 M168;
struct S472{Tid id;T6 _push_back_flag;T444 _basic_directory;T2 _memory;T0* _name;T3 _last_character;T6 _end_of_file;T0* _character_buffer;};
extern T472 M472;
struct S39{Tid id;T2 _item;};
extern T39 M39;
struct S468{Tid id;T2 _count;T9 _area;T0* _area_string;};
extern T468 M468;
struct S144{Tid id;T0* _first;T0* _second;};
extern T144 M144;
struct S494{Tid id;T0* _item;T0* _right;};
extern T494 M494;
struct S336{Tid id;T3 _value;};
extern T336 M336;
struct S388{Tid id;T0* _container;T6 _after;T6 _before;T0* _current_cell;T0* _next_cursor;};
extern T388 M388;
struct S175{Tid id;T8 _item;};
extern T175 M175;
struct S301{Tid id;T0* _parameters;};
extern T301 M301;
struct S329{Tid id;T2 _count;T0* _first_cell;T0* _last_cell;T0* _internal_cursor;};
extern T329 M329;
struct S33{Tid id;T0* _container;T6 _after;T6 _before;T0* _current_cell;T0* _next_cursor;};
extern T33 M33;
struct S438{Tid id;T0* _name;T0* _path;T8 _output_stream;};
extern T438 M438;
struct S226{Tid id;T2 _count;T2 _capacity;T0* _storage;T0* _fixed_array_;T0* _internal_cursor;};
extern T226 M226;
struct S317{Tid id;T2 _position;T0* _container;T0* _next_cursor;};
extern T317 M317;
struct S375{Tid id;T2 _count;T0* _first_cell;T0* _last_cell;T0* _internal_cursor;};
extern T375 M375;
struct S131{Tid id;T0* _output_filename;T0* _variables;T0* _error_handler;};
extern T131 M131;
struct S419{Tid id;};
extern T419 M419;
struct S300{Tid id;};
extern T300 M300;
struct S227{Tid id;T229 _storage;T2 _capacity;T2 _upper;};
extern T227 M227;
struct S267{Tid id;};
extern T267 M267;
struct S506{Tid id;};
extern T506 M506;
struct S502{Tid id;T0* _parent;T0* _data;};
extern T502 M502;
struct S108{Tid id;T0* _defined_values;};
extern T108 M108;
struct S137{Tid id;T0* _xace_filename;T0* _variables;T0* _error_handler;};
extern T137 M137;
struct S104{Tid id;T0* _parameters;};
extern T104 M104;
struct S478{Tid id;T2 _count;T0* _first_cell;T0* _last_cell;T0* _internal_cursor;};
extern T478 M478;
struct S107{Tid id;T0* _output_filename;T0* _variables;T0* _error_handler;};
extern T107 M107;
struct S249{Tid id;};
extern T249 M249;
struct S499{Tid id;T0* _parent;T0* _content;};
extern T499 M499;
struct S160{Tid id;T0* _name;};
extern T160 M160;
struct S393{Tid id;T0* _item;};
extern T393 M393;
struct S427{Tid id;T2 _position;T0* _container;T0* _next_cursor;};
extern T427 M427;
struct S443{Tid id;T0* _parameters;};
extern T443 M443;
struct S38{Tid id;T6 _item;};
extern T38 M38;
struct S351{Tid id;T2 _position;T0* _container;T0* _next_cursor;};
extern T351 M351;
struct S155{Tid id;T0* _equality_tester;T2 _count;T0* _first_cell;T0* _last_cell;T0* _internal_cursor;};
extern T155 M155;
struct S75{Tid id;T77 _storage;T2 _capacity;T2 _upper;};
extern T75 M75;
extern T298 M298;
struct S193{Tid id;};
extern T193 M193;
struct S136{Tid id;T0* _xace_filename;T0* _variables;T0* _error_handler;T0* _generators;};
extern T136 M136;
struct S217{Tid id;T0* _pathname;T0* _excluded;T0* _clusters;};
extern T217 M217;
struct S67{Tid id;T0* _item;T0* _right;};
extern T67 M67;
struct S395{Tid id;T0* _parameters;};
extern T395 M395;
struct S208{Tid id;T0* _error_handler;T6 _has_error;};
extern T208 M208;
struct S133{Tid id;T0* _output_filename;T0* _variables;T0* _error_handler;};
extern T133 M133;
struct S505{Tid id;};
extern T505 M505;
struct S396{Tid id;T0* _parameters;};
extern T396 M396;
struct S355{Tid id;T0* _parameters;};
extern T355 M355;
struct S436{Tid id;};
extern T436 M436;
struct S7{Tid id;T9 _storage;T2 _count;T2 _capacity;};
extern T7 M7;
struct S437{Tid id;T0* _parameters;};
extern T437 M437;
struct S394{Tid id;};
extern T394 M394;
struct S431{Tid id;};
extern T431 M431;
struct S16{Tid id;T2 _next_option_position;T0* _commands;T0* _variables;T0* _error_handler;};
extern T16 M16;
struct S270{Tid id;T2 _count;T0* _storage;T2 _storage_count;T2 _last_index;T2 _last_storage_slice_start;T2 _storage_slice_start;};
extern T270 M270;
struct S210{Tid id;T0* _parent;T2 _count;T0* _first_cell;T0* _last_cell;T0* _internal_cursor;T0* _namespaces;T0* _root_element;};
extern T210 M210;
extern T444 M444;
struct S132{Tid id;T0* _output_filename;T0* _variables;T0* _error_handler;};
extern T132 M132;
struct S476{Tid id;T0* _first;T0* _second;};
extern T476 M476;
struct S101{Tid id;};
extern T101 M101;
struct S263{Tid id;T0* _item;T0* _right;};
extern T263 M263;
struct S269{Tid id;T2 _type;};
extern T269 M269;
struct S296{Tid id;T0* _parameters;};
extern T296 M296;
struct S218{Tid id;T0* _clusters;};
extern T218 M218;
struct S278{Tid id;};
extern T278 M278;
struct S413{Tid id;T0* _equality_tester;T0* _key_equality_tester;T2 _count;T2 _capacity;T2 _last_position;T2 _modulus;T2 _free_slot;T2 _position;T2 _slots_position;T2 _clashes_previous_position;T2 _found_position;T0* _internal_cursor;T0* _items;T0* _keys;T0* _clashes;T0* _slots;T0* _fixed_item_array_;T0* _fixed_key_array_;};
extern T413 M413;
struct S398{Tid id;T0* _parameters;};
extern T398 M398;
struct S121{Tid id;T123 _storage;T2 _capacity;T2 _upper;};
extern T121 M121;
struct S215{Tid id;T0* _i_representation;};
extern T215 M215;
extern T273 M273;
struct S118{Tid id;T0* _equality_tester;T0* _key_equality_tester;T2 _count;T2 _capacity;T2 _last_position;T2 _modulus;T2 _free_slot;T2 _position;T2 _slots_position;T2 _clashes_previous_position;T2 _found_position;T0* _internal_cursor;T0* _items;T0* _keys;T0* _clashes;T0* _slots;T0* _fixed_item_array_;T0* _fixed_key_array_;};
extern T118 M118;
struct S79{Tid id;T0* _xace_filename;T0* _variables;T0* _error_handler;T0* _generators;};
extern T79 M79;
struct S297{Tid id;};
extern T297 M297;
struct S500{Tid id;T0* _parent;T0* _target;T0* _data;};
extern T500 M500;
struct S299{Tid id;T2 _last_code;T2 _next_pos;};
extern T299 M299;
struct S497{Tid id;T0* _uri;};
extern T497 M497;
struct S145{Tid id;T0* _container;T6 _after;T6 _before;T0* _current_cell;T0* _next_cursor;};
extern T145 M145;
struct S471{Tid id;T0* _content;T2 _count;T2 _capacity;T2 _position;T2 _column;T2 _line;T2 _index;T6 _beginning_of_line;T6 _filled;T6 _interactive;T0* _file;T6 _end_of_file;};
extern T471 M471;
struct S139{Tid id;T444 _basic_directory;T0* _name;};
extern T139 M139;
struct S222{Tid id;T6 _is_abstract;T0* _name;T0* _pathname;T6 _is_mounted;T0* _parent;T0* _subclusters;T0* _mounted_parent;T0* _mounted_subclusters;T0* _options;T0* _externals;};
extern T222 M222;
struct S435{Tid id;};
extern T435 M435;
struct S161{Tid id;T444 _basic_directory;T0* _name;};
extern T161 M161;
struct S474{Tid id;T0* _source;T2 _byte_index;T2 _column;T2 _row;};
extern T474 M474;
struct S279{Tid id;T0* _parent;T0* _name;T0* _ns_prefix;T0* _value;};
extern T279 M279;
struct S374{Tid id;T0* _feature_name;T0* _external_name;};
extern T374 M374;
struct S127{Tid id;};
extern T127 M127;
struct S103{Tid id;T77 _storage;T2 _capacity;T2 _upper;T2 _lower;};
extern T103 M103;
struct S430{Tid id;T434 _storage;T2 _capacity;T2 _upper;};
extern T430 M430;
struct S462{Tid id;T466 _storage;T2 _capacity;T2 _upper;};
extern T462 M462;
struct S405{Tid id;T0* _event_implementation;T0* _document;T0* _last_position_table;T0* _current_node;T0* _current_open_composite;};
extern T405 M405;
struct S198{Tid id;T0* _implementation;};
extern T198 M198;
struct S271{Tid id;T2 _count;T0* _storage;};
extern T271 M271;
struct S213{Tid id;T0* _parent;T0* _ns_prefix;T0* _first_cell;T0* _last_cell;T0* _internal_cursor;T0* _namespaces;T0* _name;T2 _count;};
extern T213 M213;
struct S78{Tid id;T3 _item;};
extern T78 M78;
struct S358{Tid id;T2 _count;T0* _first_cell;T0* _last_cell;T0* _internal_cursor;};
extern T358 M358;
struct S450{Tid id;T2 _error_count;T0* _yyr1;T0* _yyr2;T0* _yydefact;T0* _yydefgoto;T0* _yypact;T0* _yypgoto;T0* _yytable;T0* _yycheck;T0* _yyvs;T0* _yyss;T2 _yyvsp;T2 _yyssp;T0* _yyval;T6 _yy_lookahead_needed;T2 _yyerrstatus;T0* _fixed_array_;T2 _position_nat_parser;T2 _yy_start_state;T0* _yy_content;T2 _yy_column;T2 _yy_last_accepting_state;T2 _yy_last_accepting_cpos;T0* _interface;T2 _last_token;T0* _input_buffer;T2 _line;T2 _column;T2 _yy_end;T2 _yy_start;T2 _yy_position;T2 _yy_more_len;T0* _yy_nxt;T0* _yy_chk;T0* _yy_base;T0* _yy_def;T0* _yy_ec;T0* _yy_meta;T0* _yy_accept;T0* _yy_acclist;T6 _yy_rejected;T2 _yy_state_count;T2 _yy_looking_for_trail_begin;T2 _yy_full_lp;T2 _yy_full_state;T0* _last_value;T0* _yytranslate;T2 _yy_parsing_status;T2 _yy_line;T6 _yy_more_flag;T0* _yy_state_stack;T2 _yy_full_match;T2 _yy_lp;T0* _tmp_uc_pair;T0* _source;T2 _last_error;T0* _last_error_description;};
extern T450 M450;
struct S87{Tid id;T2 _count;T0* _first_cell;T0* _last_cell;T0* _internal_cursor;};
extern T87 M87;
struct S130{Tid id;};
extern T130 M130;
struct S507{Tid id;T2 _i_code;};
extern T507 M507;
struct S142{Tid id;T444 _basic_directory;};
extern T142 M142;
struct S293{Tid id;};
extern T293 M293;
struct S290{Tid id;T0* _container;T2 _position;T0* _next_cursor;};
extern T290 M290;
struct S68{Tid id;T0* _program_name;};
extern T68 M68;
struct S356{Tid id;T0* _parameters;};
extern T356 M356;
struct S401{Tid id;T0* _te_ep_tree_fact;T0* _te_ef_tree_fact;};
extern T401 M401;
struct S34{Tid id;T0* _error_file;T0* _warning_file;T0* _message_file;T2 _error_count;};
extern T34 M34;
struct S63{Tid id;T2 _count;T0* _first_cell;T0* _last_cell;T0* _internal_cursor;};
extern T63 M63;
/*
-- This file is  free  software, which  comes  along  with  SmallEiffel. This
-- software  is  distributed  in the hope that it will be useful, but WITHOUT
-- ANY  WARRANTY;  without  even  the  implied warranty of MERCHANTABILITY or
-- FITNESS  FOR A PARTICULAR PURPOSE. You can modify it as you want, provided
-- this header is kept unaltered, and a notification of the changes is added.
-- You  are  allowed  to  redistribute  it and sell it, alone or as a part of
-- another product.
--       Copyright (C) 1994-2002 LORIA - INRIA - U.H.P. Nancy 1 - FRANCE
--          Dominique COLNET and Suzanne COLLIN - SmallEiffel@loria.fr
--                       http://SmallEiffel.loria.fr
--
*/

/*
  This file (SmallEiffel/sys/runtime/boost.h) is automatically included when
  `run_control.boost' is true (ie. only for mode -boost).
*/
#define SE_BOOST 1
void se_print_run_time_stack (void);
void se_signal_handler(int sig);
/*
-- This file is  free  software, which  comes  along  with  SmallEiffel. This
-- software  is  distributed  in the hope that it will be useful, but WITHOUT
-- ANY  WARRANTY;  without  even  the  implied warranty of MERCHANTABILITY or
-- FITNESS  FOR A PARTICULAR PURPOSE. You can modify it as you want, provided
-- this header is kept unaltered, and a notification of the changes is added.
-- You  are  allowed  to  redistribute  it and sell it, alone or as a part of
-- another product.
--       Copyright (C) 1994-2002 LORIA - INRIA - U.H.P. Nancy 1 - FRANCE
--          Dominique COLNET and Suzanne COLLIN - SmallEiffel@loria.fr
--                       http://SmallEiffel.loria.fr
--
*/
/*
  This file (SmallEiffel/sys/runtime/exception.h) is automatically included
  when exception handling is used somewhere in the live code.
*/

#define SE_EXCEPTIONS 1

/*
  Constants from Eiffel class EXCEPTIONS :
*/
#define Check_instruction 	  1
#define Class_invariant 	  2
#define Developer_exception 	  3
#define Incorrect_inspect_value   4
#define Loop_invariant 		  5
#define Loop_variant 		  6
#define No_more_memory  	  7
#define Postcondition 		  8
#define Precondition  		  9
#define Routine_failure  	  10
#define	Os_signal		  11
#define Void_attached_to_expanded 12
#define Void_call_target 	  13
#define System_level_type_error	  14

/*
   This will be the structure of rescue contexts.  A rescue context
   will be declared for every routine that has a rescue clause.

   The `next' pointer is the address of the next rescue context if there
   is one higher up the call chain, or NULL if there is no other
   context.
*/
struct rescue_context {
  JMP_BUF jb;
#ifdef SE_NO_CHECK
  /* To keep track of dump stack to unwind it safely
     before the LONGJMP :
  */
  struct _se_dump_stack * top_of_ds ;
#endif
  struct rescue_context *next;
};

extern struct rescue_context *rescue_context_top;
extern int internal_exception_number;
extern int original_internal_exception_number;
extern int signal_exception_number;
extern char *additional_error_message;

void setup_signal_handler(void);
void signal_exception_handler(int);
void internal_exception_handler(int);
void print_exception(void);
/*
-- This file is  free  software, which  comes  along  with  SmallEiffel. This
-- software  is  distributed  in the hope that it will be useful, but WITHOUT
-- ANY  WARRANTY;  without  even  the  implied warranty of MERCHANTABILITY or
-- FITNESS  FOR A PARTICULAR PURPOSE. You can modify it as you want, provided
-- this header is kept unaltered, and a notification of the changes is added.
-- You  are  allowed  to  redistribute  it and sell it, alone or as a part of
-- another product.
--       Copyright (C) 1994-2002 LORIA - INRIA - U.H.P. Nancy 1 - FRANCE
--          Dominique COLNET and Suzanne COLLIN - SmallEiffel@loria.fr
--                       http://SmallEiffel.loria.fr
--
*/
/*
  This file (SmallEiffel/sys/runtime/basic_directory.h) is automatically
  included when some external "SmallEiffel" feature of class BASIC_DIRECTORY
  is live.
*/
#ifndef WIN32
#include <dirent.h>
#endif
#ifndef WIN32
#include <unistd.h>
#endif

EIF_POINTER basic_directory_open(EIF_POINTER path);
EIF_POINTER basic_directory_read_entry(EIF_POINTER dirstream);
EIF_POINTER basic_directory_get_entry_name(EIF_POINTER entry);
EIF_BOOLEAN basic_directory_close(EIF_POINTER dirstream);
#define basic_directory_current_working_directory (basic_directory_cwd())
EIF_POINTER basic_directory_cwd(void);
EIF_BOOLEAN basic_directory_chdir(EIF_POINTER destination);
EIF_BOOLEAN basic_directory_mkdir(EIF_POINTER directory_path);
EIF_BOOLEAN basic_directory_rmdir(EIF_POINTER directory_path);
/*
-- This file is  free  software, which  comes  along  with  SmallEiffel. This
-- software  is  distributed  in the hope that it will be useful, but WITHOUT
-- ANY  WARRANTY;  without  even  the  implied warranty of MERCHANTABILITY or
-- FITNESS  FOR A PARTICULAR PURPOSE. You can modify it as you want, provided
-- this header is kept unaltered, and a notification of the changes is added.
-- You  are  allowed  to  redistribute  it and sell it, alone or as a part of
-- another product.
--       Copyright (C) 1994-2002 LORIA - INRIA - U.H.P. Nancy 1 - FRANCE
--          Dominique COLNET and Suzanne COLLIN - SmallEiffel@loria.fr
--                       http://SmallEiffel.loria.fr
--
*/
/*
  This file (SmallEiffel/sys/runtime/basic_io.h) is automatically
  included when some external "SmallEiffel" basic_io_* feature is used.
*/

#define basic_io_stdin (stdin)
#define basic_io_stdout (stdout)
#define basic_io_stderr (stderr)
#define basic_io_eof (EOF)
#define basic_io_text_file_read_open(p) (fopen(((char*)(p)),"r"))
#define basic_io_text_file_write_open(p) (fopen(((char*)(p)),"w"))
#define basic_io_text_file_write_append(p) (fopen(((char*)(p)),"a"))
#define basic_io_text_file_read_write_open(p) (fopen(((char*)(p)),"r+"))
#define basic_io_text_file_read_write_append(p) (fopen(((char*)(p)),"a+"))
#define basic_io_binary_file_read_open(p) (fopen(((char*)(p)),"rb"))
#define basic_io_binary_file_write_open(p) (fopen(((char*)(p)),"wb"))
#define basic_io_binary_file_write_append(p) (fopen(((char*)(p)),"ab"))
#define basic_io_fclose(p) (fclose((FILE*)(p)))
#define basic_io_flush(p) (fflush((FILE*)(p)))
#define basic_io_getc(f) (getc(((FILE*)(f))))
#define basic_io_putc(b, f) (putc((b),((FILE*)(f))))
#define basic_io_feof(f) (feof(((FILE*)(f))))
#define basic_io_rename(o, n) (rename(((char*)(o)),((char*)(n))))
#define basic_io_remove(f) (remove(((char*)(f))))
/*
-- This file is  free  software, which  comes  along  with  SmallEiffel. This
-- software  is  distributed  in the hope that it will be useful, but WITHOUT
-- ANY  WARRANTY;  without  even  the  implied warranty of MERCHANTABILITY or
-- FITNESS  FOR A PARTICULAR PURPOSE. You can modify it as you want, provided
-- this header is kept unaltered, and a notification of the changes is added.
-- You  are  allowed  to  redistribute  it and sell it, alone or as a part of
-- another product.
--       Copyright (C) 1994-2002 LORIA - INRIA - U.H.P. Nancy 1 - FRANCE
--          Dominique COLNET and Suzanne COLLIN - SmallEiffel@loria.fr
--                       http://SmallEiffel.loria.fr
--
*/
/*
  This file (SmallEiffel/sys/runtime/basic_getenv.h) is automatically
  included when the GENERAL.basic_getenv feature is used (ie. in live code).
*/

#define basic_getenv(v) (getenv((char*)v))
T6 r8is_null(T8 C);
extern T0*oBC8string_buffer;
void r8append_in(T8 C,T0* a1);
T6 r6_ix_not(T6 C);
T6 r6_px_or(T6 C,T6 a1);
T6 r6_px_and(T6 C,T6 a1);
T6 r3_px_6061(T3 C,T3 a1);
T6 r3is_digit(T3 C);
T6 r3is_separator(T3 C);
T6 r3_px_6261(T3 C,T3 a1);
T2 r3value(T3 C);
T6 r3_px_60(T3 C,T3 a1);
T2 r3decimal_value(T3 C);
T3 r3to_lower(T3 C);
T0* r2out(T2 C);
T2 r2max(T2 C,T2 a1);
T2 r2min(T2 C,T2 a1);
T3 r2digit(T2 C);
void r2append_in(T2 C,T0* a1);
extern T0*oBC1tagged_out_memory;
void r229clear_all(T229 C,T2 a1);
T229 r229realloc(T229 C,T2 a1,T2 a2);
void r229set_all_with(T229 C,T0* a1,T2 a2);
T6 r229fast_memcmp(T229 C,T229 a1,T2 a2);
void r229clear(T229 C,T2 a1,T2 a2);
void r229copy_from(T229 C,T229 a1,T2 a2);
void r234clear_all(T234 C,T2 a1);
T234 r234realloc(T234 C,T2 a1,T2 a2);
void r234set_all_with(T234 C,T0* a1,T2 a2);
T6 r234fast_memcmp(T234 C,T234 a1,T2 a2);
void r234clear(T234 C,T2 a1,T2 a2);
void r234copy_from(T234 C,T234 a1,T2 a2);
void r77clear_all(T77 C,T2 a1);
T77 r77realloc(T77 C,T2 a1,T2 a2);
T6 r77fast_memcmp(T77 C,T77 a1,T2 a2);
void r77set_all_with(T77 C,T0* a1,T2 a2);
void r77clear(T77 C,T2 a1,T2 a2);
void r77copy_from(T77 C,T77 a1,T2 a2);
void r9copy_slice(T9 C,T2 a1,T9 a2,T2 a3,T2 a4);
T9 r9realloc(T9 C,T2 a1,T2 a2);
void r9set_all_with(T9 C,T3 a1,T2 a2);
T6 r9fast_memcmp(T9 C,T9 a1,T2 a2);
void r9copy_at(T9 C,T2 a1,T9 a2,T2 a3);
void r9clear(T9 C,T2 a1,T2 a2);
void r9copy_from(T9 C,T9 a1,T2 a2);
void r434clear_all(T434 C,T2 a1);
T434 r434realloc(T434 C,T2 a1,T2 a2);
void r434set_all_with(T434 C,T0* a1,T2 a2);
T6 r434fast_memcmp(T434 C,T434 a1,T2 a2);
void r434clear(T434 C,T2 a1,T2 a2);
void r434copy_from(T434 C,T434 a1,T2 a2);
void r123clear_all(T123 C,T2 a1);
T123 r123realloc(T123 C,T2 a1,T2 a2);
void r123move(T123 C,T2 a1,T2 a2,T2 a3);
T6 r123fast_memcmp(T123 C,T123 a1,T2 a2);
void r123set_all_with(T123 C,T2 a1,T2 a2);
void r123clear(T123 C,T2 a1,T2 a2);
void r123copy_from(T123 C,T123 a1,T2 a2);
void r466clear_all(T466 C,T2 a1);
T466 r466realloc(T466 C,T2 a1,T2 a2);
T6 r466fast_memcmp(T466 C,T466 a1,T2 a2);
void r466set_all_with(T466 C,T0* a1,T2 a2);
void r466clear(T466 C,T2 a1,T2 a2);
void r466copy_from(T466 C,T466 a1,T2 a2);
void r7copy(T7* C,T0* a1);
T0* r7substring(T7* C,T2 a1,T2 a2);
T6 r7is_equal(T7* C,T0* a1);
T6 r7valid_index(T7* C,T2 a1);
void r7append(T7* C,T0* a1);
T6 r7se_assigned_from(T0* a1);
T2 r7index_of(T7* C,T3 a1,T2 a2);
void r7remove_tail(T7* C,T2 a1);
T6 r7is_integer(T7* C);
void r7make(T7* C,T2 a1);
void r7append_string(T7* C,T0* a1);
void r7make_filled(T7* C,T3 a1,T2 a2);
T0* r7_px_43(T7* C,T0* a1);
void r7extend(T7* C,T3 a1);
T2 r7hash_code(T7* C);
T6 r7conforms_to(T7* C,T0* a1);
T2 r7to_integer(T7* C);
void r7append_character(T7* C,T3 a1);
void r7resize(T7* C,T2 a1);
void r7from_external_copy(T7* C,T8 a1);
T8 r7to_external(T7* C);
T0* r7twin(T7* C);
void r7swap(T7* C,T2 a1,T2 a2);
void r232copy(T232* C,T0* a1);
T6 r232is_equal(T232* C,T0* a1);
T6 r232se_assigned_from(T0* a1);
void r232make(T232* C,T2 a1);
T6 r232conforms_to(T232* C,T0* a1);
void r232resize(T232* C,T2 a1);
T0* r232twin(T232* C);
void r272copy(T272* C,T0* a1);
T2 r272count(T272* C);
T6 r272is_equal(T272* C,T0* a1);
T2 r272item(T272* C,T2 a1);
T6 r272se_assigned_from(T0* a1);
void r272make(T272* C,T2 a1,T2 a2);
T6 r272conforms_to(T272* C,T0* a1);
void r272resize(T272* C,T2 a1,T2 a2);
T0* r272twin(T272* C);
void r227copy(T227* C,T0* a1);
T6 r227is_equal(T227* C,T0* a1);
T6 r227se_assigned_from(T0* a1);
void r227make(T227* C,T2 a1);
T6 r227conforms_to(T227* C,T0* a1);
void r227resize(T227* C,T2 a1);
T0* r227twin(T227* C);
void r75copy(T75* C,T0* a1);
T6 r75is_equal(T75* C,T0* a1);
T6 r75se_assigned_from(T0* a1);
void r75make(T75* C,T2 a1);
T6 r75conforms_to(T75* C,T0* a1);
void r75resize(T75* C,T2 a1);
T0* r75twin(T75* C);
void r121copy(T121* C,T0* a1);
T6 r121is_equal(T121* C,T0* a1);
T6 r121se_assigned_from(T0* a1);
void r121make(T121* C,T2 a1);
T6 r121conforms_to(T121* C,T0* a1);
void r121resize(T121* C,T2 a1);
T0* r121twin(T121* C);
void r121with_capacity(T121* C,T2 a1);
void r121from_collection(T121* C,T0* a1);
void r103copy(T103* C,T0* a1);
T2 r103count(T103* C);
T6 r103is_equal(T103* C,T0* a1);
T0* r103item(T103* C,T2 a1);
T6 r103valid_index(T103* C,T2 a1);
T6 r103se_assigned_from(T0* a1);
void r103make(T103* C,T2 a1,T2 a2);
T6 r103conforms_to(T103* C,T0* a1);
T0* r103twin(T103* C);
void r430copy(T430* C,T0* a1);
T6 r430is_equal(T430* C,T0* a1);
T6 r430se_assigned_from(T0* a1);
void r430make(T430* C,T2 a1);
T6 r430conforms_to(T430* C,T0* a1);
void r430resize(T430* C,T2 a1);
T0* r430twin(T430* C);
void r462copy(T462* C,T0* a1);
T2 r462count(T462* C);
T6 r462is_equal(T462* C,T0* a1);
T0* r462item(T462* C,T2 a1);
T6 r462se_assigned_from(T0* a1);
void r462make(T462* C,T2 a1);
T6 r462conforms_to(T462* C,T0* a1);
void r462resize(T462* C,T2 a1);
T0* r462twin(T462* C);
void r491copy(T491* C,T0* a1);
void r491set(T491* C,T0* a1,T6 a2,T6 a3);
T6 r491is_equal(T491* C,T0* a1);
T6 r491same_position(T491* C,T0* a1);
T6 r491se_assigned_from(T0* a1);
T6 r491same_type(T491* C,T0* a1);
void r491make(T491* C,T0* a1);
T6 r491conforms_to(T491* C,T0* a1);
void r491set_after(T491* C);
T0* r491twin(T491* C);
T6 r344is_equal(T344* C,T0* a1);
T6 r344se_assigned_from(T0* a1);
T6 r344conforms_to(T344* C,T0* a1);
T0* r344twin(T344* C);
T2 r306new_capacity(T2 a1);
void r306copy(T306* C,T0* a1);
void r306make_equal(T306* C,T2 a1);
void r306make_clashes(T306* C,T2 a1);
T0* r306cursor_item(T306* C,T0* a1);
void r306search_position(T306* C,T0* a1);
T6 r306is_equal(T306* C,T0* a1);
void r306remove_traversing_cursor(T306* C,T0* a1);
void r306clone_slots(T306* C);
void r306clone_clashes(T306* C);
void r306move_all_cursors_after(T306* C);
void r306make_items(T306* C,T2 a1);
void r306add_traversing_cursor(T306* C,T0* a1);
T6 r306se_assigned_from(T0* a1);
T0* r306clone(T0* a1);
T6 r306same_type(T306* C,T0* a1);
void r306put_new(T306* C,T0* a1);
void r306slots_wipe_out(T306* C);
void r306make(T306* C,T2 a1);
void r306clashes_wipe_out(T306* C);
T6 r306equal(T0* a1,T0* a2);
void r306clone_items(T306* C);
T6 r306same_equality_tester(T306* C,T0* a1);
T6 r306cursor_after(T0* a1);
T6 r306conforms_to(T306* C,T0* a1);
T6 r306has(T306* C,T0* a1);
T2 r306hash_position(T306* C,T0* a1);
void r306cursor_forth(T306* C,T0* a1);
extern T0*oBC112fixed_integer_array_;
void r306items_resize(T306* C,T2 a1);
void r306resize(T306* C,T2 a1);
T6 r306cursor_same_position(T0* a1,T0* a2);
void r306cursor_start(T306* C,T0* a1);
void r306clashes_resize(T306* C,T2 a1);
void r306slots_resize(T306* C,T2 a1);
T0* r306twin(T306* C);
void r306force_last(T306* C,T0* a1);
T0* r306new_cursor(T306* C);
void r306make_slots(T306* C,T2 a1);
void r306put_last(T306* C,T0* a1);
void r306move_all_cursors(T306* C,T2 a1,T2 a2);
T2 r306new_modulus(T2 a1);
T6 r306cursor_off(T0* a1);
void r306compress(T306* C);
T6 r331is_equal(T331* C,T0* a1);
T6 r331se_assigned_from(T0* a1);
T6 r331conforms_to(T331* C,T0* a1);
T0* r331twin(T331* C);
void r337copy(T337* C,T0* a1);
void r337make_equal(T337* C,T2 a1);
void r337make_clashes(T337* C,T2 a1);
void r337search_position(T337* C,T0* a1);
T6 r337is_equal(T337* C,T0* a1);
void r337remove_traversing_cursor(T337* C,T0* a1);
void r337clone_slots(T337* C);
T2 r337item(T337* C,T0* a1);
void r337clone_clashes(T337* C);
void r337move_all_cursors_after(T337* C);
void r337make_items(T337* C,T2 a1);
void r337add_traversing_cursor(T337* C,T0* a1);
T6 r337se_assigned_from(T0* a1);
T0* r337clone(T0* a1);
T6 r337same_type(T337* C,T0* a1);
void r337put_new(T337* C,T2 a1,T0* a2);
void r337clone_items(T337* C);
T6 r337conforms_to(T337* C,T0* a1);
T6 r337has(T337* C,T0* a1);
void r337make_keys(T337* C,T2 a1);
T2 r337hash_position(T337* C,T0* a1);
void r337clone_keys(T337* C);
T2 r337found_item(T337* C);
void r337make_with_equality_testers(T337* C,T2 a1,T0* a2,T0* a3);
T6 r337cursor_same_position(T0* a1,T0* a2);
T6 r337found(T337* C);
void r337search(T337* C,T0* a1);
T0* r337twin(T337* C);
T0* r337new_cursor(T337* C);
void r337make_slots(T337* C,T2 a1);
T2 r337new_modulus(T2 a1);
T6 r337cursor_off(T0* a1);
T6 r105is_equal(T105* C,T0* a1);
T6 r105se_assigned_from(T0* a1);
T6 r105conforms_to(T105* C,T0* a1);
T0* r105twin(T105* C);
T6 r157is_equal(T157* C,T0* a1);
T6 r157se_assigned_from(T0* a1);
T6 r157conforms_to(T157* C,T0* a1);
T0* r157twin(T157* C);
void r246copy(T246* C,T0* a1);
T6 r246is_equal(T246* C,T0* a1);
T0* r246item(T246* C);
T6 r246same_position(T246* C,T0* a1);
T6 r246se_assigned_from(T0* a1);
T6 r246after(T246* C);
T6 r246same_type(T246* C,T0* a1);
T2 r246index(T246* C);
T6 r246off(T246* C);
T6 r246conforms_to(T246* C,T0* a1);
T0* r246twin(T246* C);
T6 r320is_equal(T320* C,T0* a1);
T6 r320se_assigned_from(T0* a1);
void r320make(T320* C,T0* a1,T0* a2);
T6 r320conforms_to(T320* C,T0* a1);
T0* r320twin(T320* C);
void r260copy(T260* C,T0* a1);
void r260set(T260* C,T0* a1,T6 a2,T6 a3);
T6 r260is_equal(T260* C,T0* a1);
T6 r260same_position(T260* C,T0* a1);
T6 r260se_assigned_from(T0* a1);
T6 r260is_first(T260* C);
T6 r260is_last(T260* C);
T6 r260same_type(T260* C,T0* a1);
void r260make(T260* C,T0* a1);
void r260forth(T260* C);
T6 r260conforms_to(T260* C,T0* a1);
void r260start(T260* C);
void r260go_after(T260* C);
void r260set_after(T260* C);
T0* r260twin(T260* C);
T2 r230new_capacity(T2 a1);
void r230copy(T230* C,T0* a1);
void r230clear_items(T230* C,T2 a1,T2 a2);
T6 r230extendible(T230* C,T2 a1);
T0* r230cursor_item(T230* C,T0* a1);
T6 r230is_equal(T230* C,T0* a1);
void r230remove_traversing_cursor(T230* C,T0* a1);
void r230move_all_cursors_after(T230* C);
void r230add_traversing_cursor(T230* C,T0* a1);
T6 r230se_assigned_from(T0* a1);
T0* r230clone(T0* a1);
void r230move_left(T230* C,T2 a1,T2 a2);
T6 r230cursor_before(T0* a1);
T6 r230same_type(T230* C,T0* a1);
void r230make(T230* C,T2 a1);
void r230remove(T230* C,T2 a1);
void r230move_cursors_left(T230* C,T2 a1);
void r230remove_last(T230* C);
T6 r230cursor_after(T0* a1);
T6 r230conforms_to(T230* C,T0* a1);
T2 r230cursor_index(T230* C,T0* a1);
void r230cursor_forth(T230* C,T0* a1);
void r230resize(T230* C,T2 a1);
T6 r230cursor_same_position(T0* a1,T0* a2);
void r230move_last_cursors_after(T230* C);
void r230delete(T230* C,T0* a1);
void r230cursor_start(T230* C,T0* a1);
T0* r230twin(T230* C);
void r230force_last(T230* C,T0* a1);
T0* r230new_cursor(T230* C);
void r230put_last(T230* C,T0* a1);
T6 r230cursor_off(T0* a1);
void r369copy(T369* C,T0* a1);
void r369set(T369* C,T0* a1,T6 a2,T6 a3);
T6 r369is_equal(T369* C,T0* a1);
T6 r369same_position(T369* C,T0* a1);
T6 r369se_assigned_from(T0* a1);
T6 r369same_type(T369* C,T0* a1);
void r369make(T369* C,T0* a1);
T6 r369conforms_to(T369* C,T0* a1);
void r369set_after(T369* C);
T0* r369twin(T369* C);
T6 r376is_equal(T376* C,T0* a1);
T6 r376se_assigned_from(T0* a1);
T6 r376conforms_to(T376* C,T0* a1);
T0* r376twin(T376* C);
T6 r372is_equal(T372* C,T0* a1);
T6 r372se_assigned_from(T0* a1);
T6 r372conforms_to(T372* C,T0* a1);
T0* r372twin(T372* C);
void r463clear_all(T0* a1);
T6 r463is_equal(T463* C,T0* a1);
T6 r463se_assigned_from(T0* a1);
T0* r463make(T2 a1);
T6 r463conforms_to(T463* C,T0* a1);
T0* r463resize(T0* a1,T2 a2);
T0* r463twin(T463* C);
void r319copy(T319* C,T0* a1);
void r319set(T319* C,T0* a1,T6 a2,T6 a3);
T6 r319is_equal(T319* C,T0* a1);
T6 r319same_position(T319* C,T0* a1);
T6 r319se_assigned_from(T0* a1);
T6 r319same_type(T319* C,T0* a1);
void r319make(T319* C,T0* a1);
T6 r319conforms_to(T319* C,T0* a1);
void r319set_after(T319* C);
T0* r319twin(T319* C);
T6 r125is_equal(T125* C,T0* a1);
T6 r125se_assigned_from(T0* a1);
T0* r125to_fixed_array(T0* a1);
T0* r125make(T2 a1);
T0* r125make_from_array(T0* a1);
T6 r125conforms_to(T125* C,T0* a1);
T0* r125resize(T0* a1,T2 a2);
T0* r125twin(T125* C);
void r92copy(T92* C,T0* a1);
void r92set(T92* C,T0* a1,T6 a2,T6 a3);
T6 r92is_equal(T92* C,T0* a1);
T6 r92same_position(T92* C,T0* a1);
T6 r92se_assigned_from(T0* a1);
T6 r92same_type(T92* C,T0* a1);
void r92make(T92* C,T0* a1);
T6 r92conforms_to(T92* C,T0* a1);
void r92set_after(T92* C);
T0* r92twin(T92* C);
T6 r477is_equal(T477* C,T0* a1);
T6 r477se_assigned_from(T0* a1);
void r477make(T477* C,T0* a1,T0* a2);
T6 r477conforms_to(T477* C,T0* a1);
T0* r477twin(T477* C);
void r168copy(T168* C,T0* a1);
T6 r168is_equal(T168* C,T0* a1);
T0* r168item(T168* C);
T6 r168same_position(T168* C,T0* a1);
T6 r168se_assigned_from(T0* a1);
T6 r168after(T168* C);
T6 r168same_type(T168* C,T0* a1);
void r168make(T168* C,T0* a1);
T6 r168off(T168* C);
T6 r168conforms_to(T168* C,T0* a1);
T0* r168twin(T168* C);
T6 r144is_equal(T144* C,T0* a1);
T6 r144se_assigned_from(T0* a1);
void r144make(T144* C,T0* a1,T0* a2);
T6 r144conforms_to(T144* C,T0* a1);
T0* r144twin(T144* C);
T6 r494is_equal(T494* C,T0* a1);
T6 r494se_assigned_from(T0* a1);
T6 r494conforms_to(T494* C,T0* a1);
T0* r494twin(T494* C);
void r388copy(T388* C,T0* a1);
void r388set(T388* C,T0* a1,T6 a2,T6 a3);
T6 r388is_equal(T388* C,T0* a1);
T6 r388same_position(T388* C,T0* a1);
T6 r388se_assigned_from(T0* a1);
T6 r388is_last(T388* C);
T6 r388same_type(T388* C,T0* a1);
void r388make(T388* C,T0* a1);
T6 r388conforms_to(T388* C,T0* a1);
void r388set_after(T388* C);
T0* r388twin(T388* C);
void r329copy(T329* C,T0* a1);
T6 r329is_equal(T329* C,T0* a1);
void r329remove_traversing_cursor(T329* C,T0* a1);
void r329move_all_cursors_after(T329* C);
void r329add_traversing_cursor(T329* C,T0* a1);
T6 r329se_assigned_from(T0* a1);
T6 r329same_type(T329* C,T0* a1);
void r329make(T329* C);
T6 r329conforms_to(T329* C,T0* a1);
void r329cursor_forth(T329* C,T0* a1);
void r329cursor_start(T329* C,T0* a1);
T0* r329twin(T329* C);
T0* r329new_cursor(T329* C);
void r329put_last(T329* C,T0* a1);
T6 r329cursor_off(T0* a1);
void r33copy(T33* C,T0* a1);
void r33set(T33* C,T0* a1,T6 a2,T6 a3);
T6 r33is_equal(T33* C,T0* a1);
T6 r33same_position(T33* C,T0* a1);
T6 r33se_assigned_from(T0* a1);
T6 r33same_type(T33* C,T0* a1);
void r33make(T33* C,T0* a1);
T6 r33conforms_to(T33* C,T0* a1);
void r33set_after(T33* C);
T0* r33twin(T33* C);
T2 r226new_capacity(T2 a1);
void r226copy(T226* C,T0* a1);
T6 r226extendible(T226* C,T2 a1);
T6 r226is_equal(T226* C,T0* a1);
void r226remove_traversing_cursor(T226* C,T0* a1);
void r226move_all_cursors_after(T226* C);
void r226add_traversing_cursor(T226* C,T0* a1);
T6 r226se_assigned_from(T0* a1);
T0* r226clone(T0* a1);
T6 r226cursor_before(T0* a1);
T6 r226same_type(T226* C,T0* a1);
void r226make(T226* C,T2 a1);
T6 r226cursor_after(T0* a1);
T6 r226conforms_to(T226* C,T0* a1);
void r226resize(T226* C,T2 a1);
T6 r226cursor_same_position(T0* a1,T0* a2);
T0* r226twin(T226* C);
void r226force_last(T226* C,T0* a1);
T0* r226new_cursor(T226* C);
void r226put_last(T226* C,T0* a1);
T6 r226cursor_off(T0* a1);
void r317copy(T317* C,T0* a1);
T6 r317is_equal(T317* C,T0* a1);
T0* r317item(T317* C);
T6 r317same_position(T317* C,T0* a1);
T6 r317se_assigned_from(T0* a1);
T6 r317after(T317* C);
T6 r317same_type(T317* C,T0* a1);
void r317make(T317* C,T0* a1);
T6 r317off(T317* C);
T6 r317conforms_to(T317* C,T0* a1);
T0* r317twin(T317* C);
void r375copy(T375* C,T0* a1);
T6 r375cursor_is_last(T375* C,T0* a1);
T6 r375is_equal(T375* C,T0* a1);
void r375remove_traversing_cursor(T375* C,T0* a1);
void r375move_all_cursors_after(T375* C);
void r375add_traversing_cursor(T375* C,T0* a1);
T6 r375se_assigned_from(T0* a1);
T6 r375same_type(T375* C,T0* a1);
void r375make(T375* C);
T6 r375conforms_to(T375* C,T0* a1);
void r375cursor_forth(T375* C,T0* a1);
void r375cursor_start(T375* C,T0* a1);
T0* r375twin(T375* C);
void r375force_last(T375* C,T0* a1);
T0* r375new_cursor(T375* C);
T6 r375cursor_off(T0* a1);
T6 r419is_equal(T419* C,T0* a1);
T6 r419se_assigned_from(T0* a1);
T6 r419conforms_to(T419* C,T0* a1);
T6 r419test(T0* a1,T0* a2);
T0* r419twin(T419* C);
void r478copy(T478* C,T0* a1);
T0* r478cursor_item(T0* a1);
T6 r478is_equal(T478* C,T0* a1);
void r478remove_traversing_cursor(T478* C,T0* a1);
void r478move_all_cursors_after(T478* C);
void r478add_traversing_cursor(T478* C,T0* a1);
T6 r478se_assigned_from(T0* a1);
T6 r478cursor_before(T0* a1);
T6 r478same_type(T478* C,T0* a1);
void r478make(T478* C);
T6 r478cursor_after(T0* a1);
T6 r478conforms_to(T478* C,T0* a1);
void r478cursor_forth(T478* C,T0* a1);
void r478cursor_start(T478* C,T0* a1);
T0* r478twin(T478* C);
T0* r478new_cursor(T478* C);
void r478put_last(T478* C,T0* a1);
T6 r478cursor_off(T0* a1);
T6 r249is_equal(T249* C,T0* a1);
T6 r249se_assigned_from(T0* a1);
T0* r249make(T2 a1);
T6 r249conforms_to(T249* C,T0* a1);
T0* r249resize(T0* a1,T2 a2);
T0* r249twin(T249* C);
T6 r393is_equal(T393* C,T0* a1);
T6 r393se_assigned_from(T0* a1);
T6 r393conforms_to(T393* C,T0* a1);
T0* r393twin(T393* C);
void r427copy(T427* C,T0* a1);
T6 r427is_equal(T427* C,T0* a1);
T6 r427same_position(T427* C,T0* a1);
T6 r427se_assigned_from(T0* a1);
T6 r427same_type(T427* C,T0* a1);
void r427make(T427* C,T0* a1);
T6 r427off(T427* C);
T6 r427conforms_to(T427* C,T0* a1);
T0* r427twin(T427* C);
void r351copy(T351* C,T0* a1);
T6 r351is_equal(T351* C,T0* a1);
T6 r351same_position(T351* C,T0* a1);
T6 r351se_assigned_from(T0* a1);
T6 r351same_type(T351* C,T0* a1);
void r351make(T351* C,T0* a1);
T6 r351off(T351* C);
T6 r351conforms_to(T351* C,T0* a1);
T0* r351twin(T351* C);
void r155copy(T155* C,T0* a1);
void r155append_last(T155* C,T0* a1);
T0* r155cursor_item(T0* a1);
T6 r155cursor_is_last(T155* C,T0* a1);
T6 r155is_equal(T155* C,T0* a1);
void r155remove_traversing_cursor(T155* C,T0* a1);
void r155move_all_cursors_after(T155* C);
void r155add_traversing_cursor(T155* C,T0* a1);
T6 r155se_assigned_from(T0* a1);
T6 r155same_type(T155* C,T0* a1);
void r155make(T155* C);
T6 r155cursor_after(T0* a1);
T6 r155conforms_to(T155* C,T0* a1);
void r155cursor_forth(T155* C,T0* a1);
void r155make_from_linear(T155* C,T0* a1);
void r155cursor_start(T155* C,T0* a1);
T0* r155twin(T155* C);
void r155force_last(T155* C,T0* a1);
T0* r155new_cursor(T155* C);
void r155put_last(T155* C,T0* a1);
T6 r155cursor_off(T0* a1);
T6 r67is_equal(T67* C,T0* a1);
T6 r67se_assigned_from(T0* a1);
T6 r67conforms_to(T67* C,T0* a1);
T0* r67twin(T67* C);
T6 r431is_equal(T431* C,T0* a1);
T6 r431se_assigned_from(T0* a1);
T0* r431make(T2 a1);
T6 r431conforms_to(T431* C,T0* a1);
T0* r431resize(T0* a1,T2 a2);
T0* r431twin(T431* C);
T6 r476is_equal(T476* C,T0* a1);
T6 r476se_assigned_from(T0* a1);
void r476make(T476* C,T0* a1,T0* a2);
T6 r476conforms_to(T476* C,T0* a1);
T0* r476twin(T476* C);
T6 r263is_equal(T263* C,T0* a1);
T6 r263se_assigned_from(T0* a1);
T6 r263conforms_to(T263* C,T0* a1);
T0* r263twin(T263* C);
T2 r118new_capacity(T2 a1);
void r118copy(T118* C,T0* a1);
void r118force(T118* C,T0* a1,T0* a2);
void r118make_clashes(T118* C,T2 a1);
T0* r118cursor_item(T118* C,T0* a1);
void r118search_position(T118* C,T0* a1);
T6 r118is_equal(T118* C,T0* a1);
void r118remove_traversing_cursor(T118* C,T0* a1);
void r118clone_slots(T118* C);
void r118keys_resize(T118* C,T2 a1);
T0* r118item(T118* C,T0* a1);
void r118clone_clashes(T118* C);
void r118move_all_cursors_after(T118* C);
void r118make_items(T118* C,T2 a1);
void r118add_traversing_cursor(T118* C,T0* a1);
T6 r118se_assigned_from(T0* a1);
T0* r118clone(T0* a1);
T6 r118same_type(T118* C,T0* a1);
void r118make(T118* C,T2 a1);
void r118clone_items(T118* C);
T6 r118cursor_after(T0* a1);
T6 r118conforms_to(T118* C,T0* a1);
T6 r118has(T118* C,T0* a1);
void r118make_keys(T118* C,T2 a1);
T2 r118hash_position(T118* C,T0* a1);
void r118cursor_forth(T118* C,T0* a1);
void r118items_resize(T118* C,T2 a1);
void r118clone_keys(T118* C);
void r118make_with_equality_testers(T118* C,T2 a1,T0* a2,T0* a3);
void r118resize(T118* C,T2 a1);
T6 r118cursor_same_position(T0* a1,T0* a2);
void r118cursor_start(T118* C,T0* a1);
void r118clashes_resize(T118* C,T2 a1);
void r118slots_resize(T118* C,T2 a1);
T0* r118twin(T118* C);
T0* r118new_cursor(T118* C);
void r118make_slots(T118* C,T2 a1);
T2 r118new_modulus(T2 a1);
T6 r118cursor_off(T0* a1);
void r145copy(T145* C,T0* a1);
void r145set(T145* C,T0* a1,T6 a2,T6 a3);
T6 r145is_equal(T145* C,T0* a1);
T6 r145same_position(T145* C,T0* a1);
T6 r145se_assigned_from(T0* a1);
T6 r145is_last(T145* C);
T6 r145same_type(T145* C,T0* a1);
void r145make(T145* C,T0* a1);
T6 r145conforms_to(T145* C,T0* a1);
void r145set_after(T145* C);
T0* r145twin(T145* C);
T6 r127is_equal(T127* C,T0* a1);
T6 r127se_assigned_from(T0* a1);
T0* r127make(T2 a1);
T6 r127conforms_to(T127* C,T0* a1);
T0* r127resize(T0* a1,T2 a2);
T0* r127twin(T127* C);
void r358copy(T358* C,T0* a1);
void r358append_last(T358* C,T0* a1);
T0* r358cursor_item(T0* a1);
T6 r358is_equal(T358* C,T0* a1);
void r358remove_traversing_cursor(T358* C,T0* a1);
void r358cursor_go_after(T358* C,T0* a1);
void r358move_all_cursors_after(T358* C);
void r358add_traversing_cursor(T358* C,T0* a1);
T6 r358se_assigned_from(T0* a1);
T6 r358same_type(T358* C,T0* a1);
void r358make(T358* C);
T6 r358cursor_after(T0* a1);
T6 r358conforms_to(T358* C,T0* a1);
void r358cursor_forth(T358* C,T0* a1);
void r358make_from_linear(T358* C,T0* a1);
void r358cursor_start(T358* C,T0* a1);
T0* r358twin(T358* C);
void r358force_last(T358* C,T0* a1);
T0* r358new_cursor(T358* C);
T6 r358cursor_off(T0* a1);
void r87copy(T87* C,T0* a1);
T0* r87cursor_item(T0* a1);
T6 r87is_equal(T87* C,T0* a1);
void r87remove_traversing_cursor(T87* C,T0* a1);
void r87move_all_cursors_after(T87* C);
void r87add_traversing_cursor(T87* C,T0* a1);
T6 r87se_assigned_from(T0* a1);
T6 r87same_type(T87* C,T0* a1);
void r87make(T87* C);
T6 r87cursor_after(T0* a1);
T6 r87conforms_to(T87* C,T0* a1);
void r87cursor_forth(T87* C,T0* a1);
void r87cursor_start(T87* C,T0* a1);
T0* r87twin(T87* C);
void r87force_last(T87* C,T0* a1);
T0* r87new_cursor(T87* C);
T6 r87cursor_off(T0* a1);
T6 r130is_equal(T130* C,T0* a1);
T6 r130se_assigned_from(T0* a1);
T6 r130conforms_to(T130* C,T0* a1);
T6 r130test(T0* a1,T0* a2);
T0* r130twin(T130* C);
T6 r293is_equal(T293* C,T0* a1);
T6 r293se_assigned_from(T0* a1);
T0* r293make(T2 a1);
T6 r293conforms_to(T293* C,T0* a1);
T0* r293resize(T0* a1,T2 a2);
T0* r293twin(T293* C);
void r290copy(T290* C,T0* a1);
T6 r290is_equal(T290* C,T0* a1);
T6 r290same_position(T290* C,T0* a1);
T6 r290se_assigned_from(T0* a1);
T6 r290same_type(T290* C,T0* a1);
T6 r290off(T290* C);
T6 r290conforms_to(T290* C,T0* a1);
T0* r290twin(T290* C);
void r63copy(T63* C,T0* a1);
T6 r63is_equal(T63* C,T0* a1);
void r63remove_traversing_cursor(T63* C,T0* a1);
void r63move_all_cursors_after(T63* C);
void r63add_traversing_cursor(T63* C,T0* a1);
T6 r63se_assigned_from(T0* a1);
T6 r63same_type(T63* C,T0* a1);
void r63make(T63* C);
T6 r63conforms_to(T63* C,T0* a1);
void r63cursor_forth(T63* C,T0* a1);
void r63cursor_start(T63* C,T0* a1);
T0* r63twin(T63* C);
void r63force_last(T63* C,T0* a1);
T0* r63new_cursor(T63* C);
T6 r63cursor_off(T0* a1);
extern T0*oBC97string_;
T6 r397is_equal(T397* C,T0* a1);
extern T0*oBC23arguments;
extern int fBC23arguments;
T0* r397arguments(void);
T6 r397se_assigned_from(T0* a1);
void r397make(T397* C,T0* a1,T0* a2,T0* a3);
T0* r397message(T397* C,T0* a1);
T6 r397conforms_to(T397* C,T0* a1);
T0* r397twin(T397* C);
T0* r397default_message(T397* C);
T6 r400is_equal(T400* C,T0* a1);
T0* r400arguments(void);
T6 r400se_assigned_from(T0* a1);
void r400make(T400* C,T0* a1,T0* a2,T0* a3);
T0* r400message(T400* C,T0* a1);
T6 r400conforms_to(T400* C,T0* a1);
T0* r400twin(T400* C);
T0* r400default_message(T400* C);
T6 r402is_equal(T402* C,T0* a1);
T0* r402new_tree_parser(T402* C);
T6 r402se_assigned_from(T0* a1);
T0* r402new_tree_parser_imp(T402* C);
T6 r402conforms_to(T402* C,T0* a1);
T0* r402twin(T402* C);
T6 r402is_available(T402* C);
T6 r176is_closed(T176* C);
void r176old_close(T176* C);
T6 r176is_equal(T176* C,T0* a1);
T2 r176read_to_string(T176* C,T0* a1,T2 a2,T2 a3);
void r176open_read(T176* C);
T6 r176se_assigned_from(T0* a1);
void r176old_read_character(T176* C);
T6 r176old_end_of_file(T176* C);
void r176read_character(T176* C);
void r176close(T176* C);
void r176make(T176* C,T0* a1);
T6 r176conforms_to(T176* C,T0* a1);
void r176connect_to(T176* C,T0* a1);
T0* r176twin(T176* C);
extern T0*oBC194uc_optimize;
extern int fBC194uc_optimize;
T0* r295uc_optimize(void);
extern T0*oBC194uc_check;
extern int fBC194uc_check;
T0* r295uc_check(void);
extern T0*oBC194uc_external;
extern int fBC194uc_external;
T0* r295uc_external(void);
extern T0*oBC194uc_exclude;
extern int fBC194uc_exclude;
T0* r295uc_exclude(void);
T0* r295new_cluster(T295* C,T0* a1,T0* a2);
T0* r295new_exported_feature(T295* C,T0* a1,T0* a2);
T6 r295is_equal(T295* C,T0* a1);
T0* r295new_export(T295* C,T0* a1,T0* a2);
extern T0*oBC194uc_invariant;
extern int fBC194uc_invariant;
T0* r295uc_invariant(void);
T6 r295se_assigned_from(T0* a1);
T0* r295new_options(T295* C,T0* a1,T0* a2);
T6 r295is_false(T0* a1);
void r295make_with_variables(T295* C,T0* a1,T0* a2);
extern T0*oBC19execution_environment;
extern T0*oBC194uc_mount;
extern int fBC194uc_mount;
T0* r295uc_mount(void);
extern T0*oBC194uc_value;
extern int fBC194uc_value;
T0* r295uc_value(void);
T0* r295new_system(T295* C,T0* a1,T0* a2);
extern T0*oBC194uc_debug;
extern int fBC194uc_debug;
T0* r295uc_debug(void);
extern T0*oBC193option_codes;
extern int fBC193option_codes;
T0* r295option_codes(void);
extern T0*oBC194uc_option;
extern int fBC194uc_option;
T0* r295uc_option(void);
extern T0*oBC194uc_root;
extern int fBC194uc_root;
T0* r295uc_root(void);
extern T0*oBC194uc_feature;
extern int fBC194uc_feature;
T0* r295uc_feature(void);
extern T0*oBC194uc_class;
extern int fBC194uc_class;
T0* r295uc_class(void);
extern T0*oBC194uc_loop;
extern int fBC194uc_loop;
T0* r295uc_loop(void);
T6 r295conforms_to(T295* C,T0* a1);
extern T0*oBC194uc_abstract;
extern int fBC194uc_abstract;
T0* r295uc_abstract(void);
T0* r295new_externals(T295* C,T0* a1,T0* a2);
extern T0*oBC194uc_alias;
extern int fBC194uc_alias;
T0* r295uc_alias(void);
extern T0*oBC194uc_cluster;
extern int fBC194uc_cluster;
T0* r295uc_cluster(void);
extern T0*oBC194uc_enable;
extern int fBC194uc_enable;
T0* r295uc_enable(void);
extern T0*oBC194uc_export;
extern int fBC194uc_export;
T0* r295uc_export(void);
extern T0*oBC194uc_link_library;
extern int fBC194uc_link_library;
T0* r295uc_link_library(void);
void r295parse_file(T295* C,T0* a1);
T6 r295is_true(T0* a1);
extern T0*oBC194uc_include_dir;
extern int fBC194uc_include_dir;
T0* r295uc_include_dir(void);
extern T0*oBC194uc_location;
extern int fBC194uc_location;
T0* r295uc_location(void);
void r295fill_system(T295* C,T0* a1,T0* a2,T0* a3);
T0* r295twin(T295* C);
T0* r295new_mount(T295* C,T0* a1,T0* a2);
extern T0*oBC194uc_system;
extern int fBC194uc_system;
T0* r295uc_system(void);
void r295make_with_variables_and_factory(T295* C,T0* a1,T0* a2,T0* a3);
extern T0*oBC194uc_creation;
extern int fBC194uc_creation;
T0* r295uc_creation(void);
extern T0*oBC194uc_require;
extern int fBC194uc_require;
T0* r295uc_require(void);
extern T0*oBC194uc_name;
extern int fBC194uc_name;
T0* r295uc_name(void);
T0* r295new_unicode_string(T0* a1);
void r295fill_options(T295* C,T0* a1,T0* a2,T0* a3);
extern T0*oBC194uc_ensure;
extern int fBC194uc_ensure;
T0* r295uc_ensure(void);
T6 r399is_equal(T399* C,T0* a1);
T0* r399arguments(void);
T6 r399se_assigned_from(T0* a1);
void r399make(T399* C);
T0* r399message(T399* C,T0* a1);
T6 r399conforms_to(T399* C,T0* a1);
T0* r399twin(T399* C);
T0* r399default_message(T399* C);
T6 r357is_equal(T357* C,T0* a1);
T6 r357se_assigned_from(T0* a1);
void r357make(T357* C,T0* a1);
T6 r357conforms_to(T357* C,T0* a1);
T0* r357twin(T357* C);
T0* r190uc_optimize(void);
T0* r190uc_check(void);
T0* r190uc_external(void);
T0* r190uc_exclude(void);
T0* r190new_cluster(T190* C,T0* a1,T0* a2);
T0* r190new_exported_feature(T190* C,T0* a1,T0* a2);
T6 r190is_equal(T190* C,T0* a1);
T0* r190new_export(T190* C,T0* a1,T0* a2);
T0* r190uc_invariant(void);
T6 r190se_assigned_from(T0* a1);
T0* r190new_options(T190* C,T0* a1,T0* a2);
T6 r190is_false(T0* a1);
void r190make_with_variables(T190* C,T0* a1,T0* a2);
T0* r190uc_mount(void);
T0* r190uc_value(void);
T0* r190new_system(T190* C,T0* a1,T0* a2);
T0* r190uc_debug(void);
T0* r190option_codes(void);
T0* r190uc_option(void);
T0* r190uc_root(void);
T0* r190uc_feature(void);
T0* r190uc_class(void);
T0* r190uc_loop(void);
T6 r190conforms_to(T190* C,T0* a1);
T0* r190uc_abstract(void);
T0* r190new_externals(T190* C,T0* a1,T0* a2);
T0* r190uc_alias(void);
T0* r190uc_cluster(void);
T0* r190uc_enable(void);
T0* r190uc_export(void);
T0* r190uc_link_library(void);
void r190parse_file(T190* C,T0* a1);
T6 r190is_true(T0* a1);
T0* r190uc_include_dir(void);
T0* r190uc_location(void);
void r190fill_system(T190* C,T0* a1,T0* a2,T0* a3);
T0* r190twin(T190* C);
T0* r190new_mount(T190* C,T0* a1,T0* a2);
T0* r190uc_system(void);
void r190make_with_variables_and_factory(T190* C,T0* a1,T0* a2,T0* a3);
T0* r190uc_creation(void);
T0* r190uc_require(void);
T0* r190uc_name(void);
T0* r190new_unicode_string(T0* a1);
void r190fill_options(T190* C,T0* a1,T0* a2,T0* a3);
T0* r190uc_ensure(void);
T6 r216is_equal(T216* C,T0* a1);
T6 r216se_assigned_from(T0* a1);
void r216unmount_root(T216* C,T0* a1);
void r216make(T216* C,T0* a1);
void r216mount(T216* C,T0* a1);
T6 r216conforms_to(T216* C,T0* a1);
void r216unmount(T216* C);
T0* r216twin(T216* C);
void r216mount_root(T216* C,T0* a1);
T6 r221is_address_expression_declared(T221* C);
void r221set_layout_optimization(T221* C,T6 a1);
T6 r221portable_code_generation(T221* C);
T0* r221arguments(T221* C);
void r221set_map(T221* C,T6 a1);
T6 r221profile(T221* C);
T6 r221is_linux_fpu_double_precision_declared(T221* C);
void r221set_gc_info(T221* C,T6 a1);
T6 r221dynamic_runtime(T221* C);
extern T0*oBC221valid_assertion;
extern int fBC221valid_assertion;
T0* r221valid_assertion(void);
T6 r221is_no_default_lib_declared(T221* C);
T6 r221debug_option(T221* C);
void r221set_exception_trace(T221* C,T6 a1);
extern T0*oBC221default_assertion;
extern int fBC221default_assertion;
T0* r221default_assertion(void);
T0* r221warning(T221* C);
void r221set_wedit(T221* C,T6 a1);
extern T0*oBC221default_warning;
extern int fBC221default_warning;
T0* r221default_warning(void);
void r221set_finalize(T221* C,T6 a1);
extern T0*oBC221default_linker;
extern int fBC221default_linker;
T0* r221default_linker(void);
void r221set_dynamic_runtime(T221* C,T6 a1);
extern T0*oBC221default_override_cluster;
void r221set_verbose(T221* C,T6 a1);
extern T0*oBC221default_precompiled;
T6 r221exception_trace(T221* C);
void r221set_trace(T221* C,T6 a1);
T6 r221is_inlining_declared(T221* C);
void r221set_clean(T221* C,T6 a1);
T0* r221linker(T221* C);
extern T0*oBC221default_visible_filename;
T6 r221is_check_vape_declared(T221* C);
T6 r221is_debug_tag_declared(T221* C);
T0* r221component(T221* C);
T6 r221is_gc_info_declared(T221* C);
extern T0*oBC221default_garbage_collector;
extern int fBC221default_garbage_collector;
T0* r221default_garbage_collector(void);
T6 r221is_trace_declared(T221* C);
T6 r221is_layout_optimization_declared(T221* C);
void r221set_array_optimization(T221* C,T6 a1);
void r221set_line_generation(T221* C,T6 a1);
T0* r221inlining(T221* C);
extern T0*oBC221valid_target;
extern int fBC221valid_target;
T0* r221valid_target(void);
T6 r221is_portable_code_generation_declared(T221* C);
void r221set_debug_tag(T221* C,T0* a1);
T6 r221is_profile_declared(T221* C);
T6 r221is_strip_option_declared(T221* C);
T0* r221dead_code_removal(T221* C);
T6 r221is_dynamic_runtime_declared(T221* C);
T6 r221line_generation(T221* C);
T6 r221check_vape(T221* C);
T6 r221reloads_optimization(T221* C);
extern T0*oBC82options;
extern T0*oBC221default_inlining;
extern int fBC221default_inlining;
T0* r221default_inlining(void);
void r221set_console_application(T221* C,T6 a1);
T6 r221case_insensitive(T221* C);
extern T0*oBC221valid_warning;
extern int fBC221valid_warning;
T0* r221valid_warning(void);
extern T0*oBC221valid_dead_code_removal;
extern int fBC221valid_dead_code_removal;
T0* r221valid_dead_code_removal(void);
T6 r221multithreaded(T221* C);
void r221set_reloads_optimization(T221* C,T6 a1);
T6 r221strip_option(T221* C);
void r221set_manifest_string_trace(T221* C,T6 a1);
extern T0*oBC221default_arguments;
extern int fBC221default_arguments;
T0* r221default_arguments(void);
void r221set_check_vape(T221* C,T6 a1);
T6 r221is_map_declared(T221* C);
T6 r221layout_optimization(T221* C);
void r221set_portable_code_generation(T221* C,T6 a1);
T6 r221is_wedit_declared(T221* C);
T6 r221split(T221* C);
void r221set_leaves_optimization(T221* C,T6 a1);
T6 r221leaves_optimization(T221* C);
T6 r221linux_fpu_double_precision(T221* C);
T6 r221is_fst_optimization_declared(T221* C);
void r221set_address_expression(T221* C,T6 a1);
T0* r221debug_tag(T221* C);
void r221set_strip_option(T221* C,T6 a1);
T0* r221shared_library_definition(T221* C);
void r221set_create_keyword_extension(T221* C,T6 a1);
extern T0*oBC221default_component;
T6 r221array_optimization(T221* C);
void r221set_inlining(T221* C,T0* a1);
T6 r221jumps_optimization(T221* C);
T6 r221is_create_keyword_extension_declared(T221* C);
void r221set_case_insensitive(T221* C,T6 a1);
extern T0*oBC221default_dead_code_removal;
extern int fBC221default_dead_code_removal;
T0* r221default_dead_code_removal(void);
T6 r221conforms_to(T221* C,T0* a1);
void r221set_profile(T221* C,T6 a1);
T6 r221is_exception_trace_declared(T221* C);
T6 r221is_dead_code_removal_declared(T221* C);
T6 r221is_jumps_optimization_declared(T221* C);
T6 r221map(T221* C);
T6 r221is_verbose_declared(T221* C);
void r221set_no_default_lib(T221* C,T6 a1);
T0* r221garbage_collector(T221* C);
T6 r221console_application(T221* C);
T0* r221twin(T221* C);
T6 r221gc_info(T221* C);
T6 r221finalize(T221* C);
void r221set_dead_code_removal(T221* C,T0* a1);
T0* r221target(T221* C);
T0* r221visible_filename(T221* C);
T6 r221is_array_optimization_declared(T221* C);
void r221set_assertion(T221* C,T0* a1);
extern T0*oBC221default_storable_filename;
T6 r221is_case_insensitive_declared(T221* C);
T0* r221document(T221* C);
T6 r221verbose(T221* C);
T6 r221is_arguments_declared(T221* C);
T2 r221inlining_size(T221* C);
extern T0*oBC221default_target;
extern int fBC221default_target;
T0* r221default_target(void);
extern T0*oBC221valid_linker;
extern int fBC221valid_linker;
T0* r221valid_linker(void);
T0* r221override_cluster(T221* C);
void r221set_debugger(T221* C,T6 a1);
extern T0*oBC221default_debug_tag;
extern int fBC221default_debug_tag;
T0* r221default_debug_tag(void);
extern T0*oBC221default_document;
void r221set_split(T221* C,T6 a1);
T6 r221flat_fst_optimization(T221* C);
T6 r221is_reloads_optimization_declared(T221* C);
void r221set_jumps_optimization(T221* C,T6 a1);
T0* r221storable_filename(T221* C);
T6 r221wedit(T221* C);
T6 r221is_manifest_string_trace_declared(T221* C);
T6 r221is_equal(T221* C,T0* a1);
T2 r221fst_expansion_factor(T221* C);
T0* r221precompiled(T221* C);
T6 r221is_flat_fst_optimization_declared(T221* C);
T0* r221assertion(T221* C);
T6 r221is_console_application_declared(T221* C);
T6 r221trace(T221* C);
T6 r221is_clean_declared(T221* C);
T6 r221clean(T221* C);
extern T0*oBC221valid_inlining;
extern int fBC221valid_inlining;
T0* r221valid_inlining(void);
T6 r221is_assertion_declared(T221* C);
void r221set_multithreaded(T221* C,T6 a1);
T6 r221fst_optimization(T221* C);
void r221set_arguments(T221* C,T0* a1);
T6 r221is_debugger_declared(T221* C);
T6 r221is_leaves_optimization_declared(T221* C);
T2 r221stack_size(T221* C);
void r221make(T221* C);
T6 r221address_expression(T221* C);
void r221set_linux_fpu_double_precision(T221* C,T6 a1);
T6 r221is_line_generation_declared(T221* C);
T6 r221create_keyword_extension(T221* C);
T6 r221manifest_string_trace(T221* C);
T6 r221no_default_lib(T221* C);
T6 r221se_assigned_from(T0* a1);
extern T0*oBC221valid_garbage_collector;
extern int fBC221valid_garbage_collector;
T0* r221valid_garbage_collector(void);
T2 r221heap_size(T221* C);
void r221set_debug_option(T221* C,T6 a1);
void r221set_fst_optimization(T221* C,T6 a1);
T6 r221is_debug_option_declared(T221* C);
T6 r221is_split_declared(T221* C);
extern T0*oBC221default_shared_library_definition;
T6 r221is_multithreaded_declared(T221* C);
void r221set_flat_fst_optimization(T221* C,T6 a1);
T6 r221debugger(T221* C);
T6 r221is_finalize_declared(T221* C);
T6 r220has_exported_features(T220* C);
T6 r220is_equal(T220* C,T0* a1);
T6 r220se_assigned_from(T0* a1);
void r220merge(T220* C,T0* a1);
void r220make(T220* C);
T6 r220is_empty(T220* C);
T6 r220conforms_to(T220* C,T0* a1);
T0* r220cloned_externals(T220* C);
T6 r220has_include_directories(T220* C);
T6 r220has_link_libraries(T220* C);
T0* r220twin(T220* C);
T6 r353is_equal(T353* C,T0* a1);
T0* r353arguments(void);
T6 r353se_assigned_from(T0* a1);
void r353make(T353* C,T0* a1,T0* a2,T0* a3,T0* a4);
T0* r353message(T353* C,T0* a1);
T6 r353conforms_to(T353* C,T0* a1);
T0* r353twin(T353* C);
T0* r353default_message(T353* C);
T6 r189is_equal(T189* C,T0* a1);
T6 r189se_assigned_from(T0* a1);
T6 r189conforms_to(T189* C,T0* a1);
void r189set_mounted_clusters(T189* C,T0* a1);
T0* r189twin(T189* C);
void r189merge_externals(T189* C);
void r209put(T209* C,T0* a1,T0* a2);
T6 r209is_equal(T209* C,T0* a1);
T0* r209item(T209* C,T0* a1);
T6 r209se_assigned_from(T0* a1);
void r209make(T209* C);
T6 r209conforms_to(T209* C,T0* a1);
T0* r209twin(T209* C);
T0* r191uc_optimize(void);
T0* r191uc_check(void);
T0* r191uc_external(void);
T0* r191uc_exclude(void);
T0* r191new_cluster(T191* C,T0* a1,T0* a2);
T0* r191new_exported_feature(T191* C,T0* a1,T0* a2);
T6 r191is_equal(T191* C,T0* a1);
T0* r191new_export(T191* C,T0* a1,T0* a2);
T0* r191uc_invariant(void);
T6 r191se_assigned_from(T0* a1);
T0* r191new_options(T191* C,T0* a1,T0* a2);
T6 r191is_false(T0* a1);
void r191make_with_variables(T191* C,T0* a1,T0* a2);
T0* r191uc_mount(void);
T0* r191uc_value(void);
T0* r191new_system(T191* C,T0* a1,T0* a2);
T0* r191uc_debug(void);
T0* r191option_codes(void);
T0* r191uc_option(void);
T0* r191uc_root(void);
T0* r191uc_feature(void);
T0* r191uc_class(void);
T0* r191uc_loop(void);
T6 r191conforms_to(T191* C,T0* a1);
T0* r191uc_abstract(void);
T0* r191new_externals(T191* C,T0* a1,T0* a2);
T0* r191uc_alias(void);
T0* r191uc_cluster(void);
T0* r191uc_enable(void);
T0* r191uc_export(void);
T0* r191uc_link_library(void);
void r191parse_file(T191* C,T0* a1);
T6 r191is_true(T0* a1);
T0* r191uc_include_dir(void);
T0* r191uc_location(void);
void r191fill_system(T191* C,T0* a1,T0* a2,T0* a3);
T0* r191twin(T191* C);
T0* r191new_mount(T191* C,T0* a1,T0* a2);
T0* r191uc_system(void);
void r191make_with_variables_and_factory(T191* C,T0* a1,T0* a2,T0* a3);
T0* r191uc_creation(void);
T0* r191uc_require(void);
T0* r191uc_name(void);
T0* r191new_unicode_string(T0* a1);
void r191fill_options(T191* C,T0* a1,T0* a2,T0* a3);
T0* r191uc_ensure(void);
void r134print_cluster(T134* C,T0* a1,T2 a2,T0* a3);
T6 r134is_equal(T134* C,T0* a1);
void r134print_externals(T0* a1,T2 a2,T0* a3);
void r134print_xml_cluster_file(T134* C,T0* a1,T0* a2);
T6 r134se_assigned_from(T0* a1);
void r134print_exported_class(T0* a1,T2 a2,T0* a3);
void r134make(T134* C,T0* a1,T0* a2);
void r134print_clusters(T134* C,T0* a1,T2 a2,T0* a3);
T6 r134conforms_to(T134* C,T0* a1);
void r134generate_cluster(T134* C,T0* a1);
T0* r134twin(T134* C);
void r134print_options(T0* a1,T2 a2,T0* a3);
void r134print_indentation(T2 a1,T0* a2);
void r134print_link_libraries(T0* a1,T2 a2,T0* a3);
void r134generate_system(T134* C,T0* a1);
void r134print_xml_system_file(T134* C,T0* a1,T0* a2);
void r134print_include_directories(T0* a1,T2 a2,T0* a3);
T0* r472current_working_directory(T472* C);
T6 r472is_equal(T472* C,T0* a1);
T2 r472read_to_string(T472* C,T0* a1,T2 a2,T2 a3);
T6 r472se_assigned_from(T0* a1);
void r472old_read_character(T472* C);
T0* r472clone(T0* a1);
extern T6 oBC142is_windows;
extern int fBC142is_windows;
T6 r472is_windows(T472* C);
T6 r472old_end_of_file(T472* C);
void r472read_character(T472* C);
void r472make(T472* C);
T6 r472conforms_to(T472* C,T0* a1);
T0* r472twin(T472* C);
T0* r468substring(T468* C,T2 a1,T2 a2);
T6 r468is_equal(T468* C,T0* a1);
T2 r468fill_from_stream(T468* C,T0* a1,T2 a2,T2 a3);
T6 r468se_assigned_from(T0* a1);
void r468move_left(T468* C,T2 a1,T2 a2,T2 a3);
void r468make(T468* C,T2 a1);
T6 r468conforms_to(T468* C,T0* a1);
void r468resize(T468* C,T2 a1);
T0* r468twin(T468* C);
T6 r336is_equal(T336* C,T0* a1);
T6 r336se_assigned_from(T0* a1);
T6 r336conforms_to(T336* C,T0* a1);
T6 r336is_undefined(T336* C);
T0* r336twin(T336* C);
T6 r301is_equal(T301* C,T0* a1);
T0* r301arguments(void);
T6 r301se_assigned_from(T0* a1);
void r301make(T301* C,T0* a1);
T0* r301message(T301* C,T0* a1);
T6 r301conforms_to(T301* C,T0* a1);
T0* r301twin(T301* C);
T0* r301default_message(T301* C);
T6 r438is_closed(T438* C);
void r438old_close(T438* C);
T6 r438is_equal(T438* C,T0* a1);
T6 r438se_assigned_from(T0* a1);
void r438close(T438* C);
void r438make(T438* C,T0* a1);
void r438old_put_string(T438* C,T0* a1);
T6 r438conforms_to(T438* C,T0* a1);
void r438connect_to(T438* C,T0* a1);
void r438put_integer(T438* C,T2 a1);
void r438put_line(T438* C,T0* a1);
T0* r438twin(T438* C);
void r438open_write(T438* C);
void r131print_cluster(T131* C,T0* a1,T0* a2);
T6 r131is_equal(T131* C,T0* a1);
T0* r131replace_all_characters(T0* a1,T3 a2,T3 a3);
T6 r131se_assigned_from(T0* a1);
T0* r131clone(T0* a1);
T6 r131is_windows(T131* C);
void r131print_ace_file(T131* C,T0* a1,T0* a2);
void r131print_exported_class(T0* a1,T2 a2,T0* a3);
void r131make(T131* C,T0* a1,T0* a2);
extern T0*oBC18operating_system;
void r131print_clusters(T131* C,T0* a1,T0* a2);
T6 r131conforms_to(T131* C,T0* a1);
void r131print_precompile_ace_file(T131* C,T0* a1,T0* a2);
void r131generate_cluster(T131* C,T0* a1);
T0* r131twin(T131* C);
void r131print_options(T0* a1,T2 a2,T0* a3);
void r131print_indentation(T2 a1,T0* a2);
void r131print_link_libraries(T131* C,T0* a1,T0* a2);
void r131generate_system(T131* C,T0* a1);
void r131print_include_directories(T131* C,T0* a1,T0* a2);
T6 r502is_equal(T502* C,T0* a1);
T6 r502se_assigned_from(T0* a1);
void r502make(T502* C,T0* a1,T0* a2);
T6 r502conforms_to(T502* C,T0* a1);
T0* r502twin(T502* C);
extern T0*oBC109template_expander;
T6 r108is_equal(T108* C,T0* a1);
T6 r108se_assigned_from(T0* a1);
void r108make(T108* C);
T6 r108conforms_to(T108* C,T0* a1);
T0* r108twin(T108* C);
T0* r108expanded_variables(T108* C,T0* a1);
T6 r137is_equal(T137* C,T0* a1);
T6 r137se_assigned_from(T0* a1);
void r137make(T137* C,T0* a1,T0* a2);
T6 r137conforms_to(T137* C,T0* a1);
void r137execute(T137* C);
T0* r137twin(T137* C);
T6 r104is_equal(T104* C,T0* a1);
T0* r104arguments(void);
T6 r104se_assigned_from(T0* a1);
void r104make(T104* C,T0* a1);
T0* r104message(T104* C,T0* a1);
T6 r104conforms_to(T104* C,T0* a1);
T0* r104twin(T104* C);
T0* r104default_message(T104* C);
void r107print_cluster(T107* C,T0* a1,T0* a2);
void r107print_loadpath_clusters(T107* C,T0* a1,T0* a2);
T6 r107is_equal(T107* C,T0* a1);
T6 r107se_assigned_from(T0* a1);
void r107print_loadpath_cluster(T107* C,T0* a1,T0* a2);
void r107print_ace_file(T107* C,T0* a1,T0* a2);
void r107generate_cecil_file(T107* C,T0* a1);
void r107print_exported_class(T0* a1,T0* a2);
void r107make(T107* C,T0* a1,T0* a2);
void r107print_clusters(T107* C,T0* a1,T0* a2);
T6 r107conforms_to(T107* C,T0* a1);
void r107print_generate(T0* a1,T2 a2,T0* a3);
void r107generate_cluster(T107* C,T0* a1);
T0* r107twin(T107* C);
void r107print_options(T0* a1,T2 a2,T0* a3);
void r107print_exported_classes(T0* a1,T0* a2);
void r107print_indentation(T2 a1,T0* a2);
void r107print_link_libraries(T0* a1,T0* a2);
void r107generate_system(T107* C,T0* a1);
void r107print_include_directories(T0* a1,T0* a2);
T6 r499is_equal(T499* C,T0* a1);
T6 r499se_assigned_from(T0* a1);
void r499make(T499* C,T0* a1,T0* a2);
T6 r499conforms_to(T499* C,T0* a1);
T0* r499twin(T499* C);
T6 r160is_equal(T160* C,T0* a1);
T6 r160se_assigned_from(T0* a1);
T6 r160conforms_to(T160* C,T0* a1);
void r160put_integer(T2 a1);
void r160put_line(T0* a1);
T0* r160twin(T160* C);
T6 r443is_equal(T443* C,T0* a1);
T0* r443arguments(void);
T6 r443se_assigned_from(T0* a1);
void r443make(T443* C,T0* a1);
T0* r443message(T443* C,T0* a1);
T6 r443conforms_to(T443* C,T0* a1);
T0* r443twin(T443* C);
T0* r443default_message(T443* C);
T6 r136is_equal(T136* C,T0* a1);
T6 r136se_assigned_from(T0* a1);
void r136execute_generators(T136* C,T0* a1);
void r136make(T136* C,T0* a1,T0* a2);
T6 r136conforms_to(T136* C,T0* a1);
void r136execute(T136* C);
T0* r136twin(T136* C);
T6 r217is_equal(T217* C,T0* a1);
T6 r217se_assigned_from(T0* a1);
void r217unmount_root(T217* C,T0* a1);
void r217make(T217* C,T0* a1,T0* a2);
void r217mount(T217* C,T0* a1);
T6 r217conforms_to(T217* C,T0* a1);
void r217unmount(T217* C);
T0* r217twin(T217* C);
void r217set_excluded(T217* C,T0* a1);
void r217mount_root(T217* C,T0* a1);
T6 r395is_equal(T395* C,T0* a1);
T0* r395arguments(void);
T6 r395se_assigned_from(T0* a1);
void r395make(T395* C,T0* a1,T0* a2);
T0* r395message(T395* C,T0* a1);
T6 r395conforms_to(T395* C,T0* a1);
T0* r395twin(T395* C);
T0* r395default_message(T395* C);
T0* r208uc_optimize(void);
void r208validate_named_cluster(T208* C,T0* a1,T0* a2);
T0* r208uc_check(void);
void r208validate_root(T208* C,T0* a1,T0* a2);
T0* r208uc_external(void);
void r208validate_external(T208* C,T0* a1,T0* a2);
T0* r208uc_exclude(void);
void r208validate_mount(T208* C,T0* a1,T0* a2);
T6 r208is_equal(T208* C,T0* a1);
void r208validate_system_doc(T208* C,T0* a1,T0* a2);
T0* r208uc_invariant(void);
T6 r208se_assigned_from(T0* a1);
void r208validate_cluster(T208* C,T0* a1,T0* a2);
extern T0*oBC194uc_description;
extern int fBC194uc_description;
T0* r208uc_description(void);
T0* r208uc_mount(void);
T0* r208uc_value(void);
T0* r208uc_debug(void);
T0* r208uc_option(void);
T0* r208uc_root(void);
void r208validate_system(T208* C,T0* a1,T0* a2);
T0* r208uc_feature(void);
T0* r208uc_class(void);
T0* r208uc_loop(void);
T6 r208conforms_to(T208* C,T0* a1);
void r208validate_cluster_doc(T208* C,T0* a1,T0* a2);
void r208validate_export(T208* C,T0* a1,T0* a2);
T0* r208uc_cluster(void);
void r208validate_exclude(T208* C,T0* a1,T0* a2);
T0* r208uc_export(void);
T0* r208uc_link_library(void);
T0* r208uc_include_dir(void);
T0* r208uc_location(void);
T0* r208twin(T208* C);
T0* r208uc_system(void);
T0* r208uc_creation(void);
T0* r208uc_require(void);
T0* r208uc_name(void);
void r208validate_option(T208* C,T0* a1,T0* a2);
T0* r208new_unicode_string(T0* a1);
T0* r208uc_ensure(void);
void r133print_cluster(T133* C,T0* a1,T2 a2,T0* a3);
T6 r133is_equal(T133* C,T0* a1);
T0* r133replace_all_characters(T0* a1,T3 a2,T3 a3);
T6 r133se_assigned_from(T0* a1);
T0* r133clone(T0* a1);
T6 r133is_lace_keyword(T0* a1);
T6 r133is_windows(T133* C);
void r133print_ace_file(T133* C,T0* a1,T0* a2);
void r133print_exported_class(T0* a1,T2 a2,T0* a3);
T6 r133print_component(T133* C,T0* a1,T6 a2,T0* a3);
void r133make(T133* C,T0* a1,T0* a2);
void r133print_clusters(T133* C,T0* a1,T2 a2,T0* a3);
T6 r133conforms_to(T133* C,T0* a1);
void r133print_precompile_ace_file(T133* C,T0* a1,T0* a2);
void r133generate_cluster(T133* C,T0* a1);
T0* r133twin(T133* C);
T6 r133print_components(T133* C,T0* a1,T6 a2,T0* a3);
void r133print_options(T0* a1,T2 a2,T0* a3);
extern T0*oBC133lace_keywords;
void r133print_indentation(T2 a1,T0* a2);
void r133print_link_libraries(T133* C,T0* a1,T0* a2);
void r133generate_system(T133* C,T0* a1);
void r133print_include_directories(T133* C,T0* a1,T0* a2);
T6 r396is_equal(T396* C,T0* a1);
T0* r396arguments(void);
T6 r396se_assigned_from(T0* a1);
void r396make(T396* C,T0* a1,T0* a2,T0* a3);
T0* r396message(T396* C,T0* a1);
T6 r396conforms_to(T396* C,T0* a1);
T0* r396twin(T396* C);
T0* r396default_message(T396* C);
T6 r355is_equal(T355* C,T0* a1);
T0* r355arguments(void);
T6 r355se_assigned_from(T0* a1);
void r355make(T355* C,T0* a1,T0* a2,T0* a3,T0* a4,T0* a5);
T0* r355message(T355* C,T0* a1);
T6 r355conforms_to(T355* C,T0* a1);
T0* r355twin(T355* C);
T0* r355default_message(T355* C);
T6 r437is_equal(T437* C,T0* a1);
T0* r437arguments(void);
T6 r437se_assigned_from(T0* a1);
void r437make(T437* C,T0* a1);
T0* r437message(T437* C,T0* a1);
T6 r437conforms_to(T437* C,T0* a1);
T0* r437twin(T437* C);
T0* r437default_message(T437* C);
T6 r394is_equal(T394* C,T0* a1);
T6 r394se_assigned_from(T0* a1);
T6 r394conforms_to(T394* C,T0* a1);
T0* r394expand_from_hash_table(T0* a1,T0* a2);
T0* r394twin(T394* C);
extern T0*oBC270utils;
T2 r270item_code(T270* C,T2 a1);
T6 r270is_equal(T270* C,T0* a1);
T6 r270se_assigned_from(T0* a1);
void r270make(T270* C);
void r270insert(T270* C,T2 a1,T0* a2,T2 a3,T2 a4);
void r270add_to_storage_count(T270* C,T2 a1);
void r270insert_code(T270* C,T2 a1,T2 a2);
T6 r270conforms_to(T270* C,T0* a1);
extern T6 oBC270optimize_access;
void r270storage_move(T270* C,T2 a1,T2 a2,T2 a3);
T0* r270twin(T270* C);
void r270find_position(T270* C,T2 a1);
void r210set_last_cell(T210* C,T0* a1);
void r210copy(T210* C,T0* a1);
void r210wipe_out(T210* C);
void r210remove_first(T210* C);
T0* r210cursor_item(T0* a1);
T6 r210cursor_is_last(T210* C,T0* a1);
T6 r210is_equal(T210* C,T0* a1);
void r210remove_traversing_cursor(T210* C,T0* a1);
void r210cursor_go_after(T210* C,T0* a1);
void r210move_all_cursors_after(T210* C);
void r210add_traversing_cursor(T210* C,T0* a1);
T6 r210se_assigned_from(T0* a1);
T6 r210same_type(T210* C,T0* a1);
void r210remove_last(T210* C);
T6 r210cursor_after(T0* a1);
T6 r210conforms_to(T210* C,T0* a1);
void r210make_list(T210* C);
void r210cursor_forth(T210* C,T0* a1);
void r210move_last_cursors_after(T210* C);
void r210cursor_start(T210* C,T0* a1);
T0* r210twin(T210* C);
void r210force_last(T210* C,T0* a1);
T0* r210new_cursor(T210* C);
void r210make_composite(T210* C);
T6 r210cursor_is_first(T210* C,T0* a1);
void r210remove_at_cursor(T210* C,T0* a1);
void r210move_all_cursors(T210* C,T0* a1,T0* a2);
T6 r210cursor_off(T0* a1);
void r210set_root_element(T210* C,T0* a1);
void r132print_cluster(T132* C,T0* a1,T0* a2);
void r132print_esd_file(T132* C,T0* a1,T0* a2);
T6 r132is_equal(T132* C,T0* a1);
T6 r132se_assigned_from(T0* a1);
T0* r132clone(T0* a1);
void r132make(T132* C,T0* a1,T0* a2);
void r132print_clusters(T132* C,T0* a1,T0* a2);
T0* r132remove_all_characters(T0* a1,T3 a2);
T6 r132conforms_to(T132* C,T0* a1);
void r132print_eld_file(T132* C,T0* a1,T0* a2);
void r132generate_cluster(T132* C,T0* a1);
T0* r132twin(T132* C);
void r132print_options(T0* a1,T2 a2,T0* a3);
void r132print_indentation(T2 a1,T0* a2);
void r132print_link_libraries(T0* a1,T0* a2);
void r132generate_system(T132* C,T0* a1);
T0* r269create_representation(T269* C);
T6 r269is_equal(T269* C,T0* a1);
T6 r269se_assigned_from(T0* a1);
T6 r269conforms_to(T269* C,T0* a1);
T0* r269twin(T269* C);
T6 r296is_equal(T296* C,T0* a1);
T0* r296arguments(void);
T6 r296se_assigned_from(T0* a1);
void r296make(T296* C,T0* a1);
T0* r296message(T296* C,T0* a1);
T6 r296conforms_to(T296* C,T0* a1);
T0* r296twin(T296* C);
T0* r296default_message(T296* C);
T0* r278new_cluster(T0* a1,T0* a2);
T0* r278new_exported_feature(T0* a1,T0* a2);
T6 r278is_equal(T278* C,T0* a1);
T6 r278se_assigned_from(T0* a1);
T0* r278new_options(void);
T0* r278new_mounted_cluster(T0* a1,T0* a2);
T0* r278new_system(T0* a1);
T0* r278new_exported_class(T0* a1);
T6 r278conforms_to(T278* C,T0* a1);
T0* r278new_externals(void);
T0* r278new_mounted_clusters(T0* a1);
T0* r278new_clusters(T0* a1);
T0* r278twin(T278* C);
void r413copy(T413* C,T0* a1);
void r413make_clashes(T413* C,T2 a1);
void r413search_position(T413* C,T0* a1);
T6 r413is_equal(T413* C,T0* a1);
void r413remove_traversing_cursor(T413* C,T0* a1);
void r413clone_slots(T413* C);
T0* r413item(T413* C,T0* a1);
void r413clone_clashes(T413* C);
void r413move_all_cursors_after(T413* C);
void r413make_items(T413* C,T2 a1);
void r413add_traversing_cursor(T413* C,T0* a1);
T6 r413se_assigned_from(T0* a1);
T0* r413clone(T0* a1);
T6 r413same_type(T413* C,T0* a1);
void r413make(T413* C,T2 a1);
void r413clone_items(T413* C);
T6 r413conforms_to(T413* C,T0* a1);
T6 r413has(T413* C,T0* a1);
void r413make_keys(T413* C,T2 a1);
T2 r413hash_position(T413* C,T0* a1);
void r413clone_keys(T413* C);
void r413make_with_equality_testers(T413* C,T2 a1,T0* a2,T0* a3);
T6 r413cursor_same_position(T0* a1,T0* a2);
T0* r413twin(T413* C);
T0* r413new_cursor(T413* C);
void r413make_slots(T413* C,T2 a1);
T2 r413new_modulus(T2 a1);
T6 r413cursor_off(T0* a1);
T6 r398is_equal(T398* C,T0* a1);
T0* r398arguments(void);
T6 r398se_assigned_from(T0* a1);
void r398make(T398* C,T0* a1,T0* a2);
T0* r398message(T398* C,T0* a1);
T6 r398conforms_to(T398* C,T0* a1);
T0* r398twin(T398* C);
T0* r398default_message(T398* C);
T0* r215out(T215* C);
void r215copy(T215* C,T0* a1);
T0* r215substring(T215* C,T2 a1,T2 a2);
T2 r215occurrences(T215* C,T273 a1);
T2 r215count(T215* C);
T2 r215item_code(T215* C,T2 a1);
T6 r215is_equal(T215* C,T0* a1);
T273 r215item(T215* C,T2 a1);
extern T0*oBC215utf8utils;
void r215append_uc_string(T215* C,T0* a1);
T6 r215se_assigned_from(T0* a1);
void r215make_from_string(T215* C,T0* a1);
T2 r215index_of(T215* C,T273 a1,T2 a2);
void r215make(T215* C,T2 a1);
void r215append_string(T215* C,T0* a1);
T2 r215hash_code(T215* C);
T6 r215conforms_to(T215* C,T0* a1);
void r215append_ucc_code(T215* C,T2 a1);
T6 r215empty(T215* C);
T0* r215twin(T215* C);
T0* r215to_utf8(T215* C);
T2 r215three_way_comparison(T215* C,T0* a1);
extern T0*oBC215i_settings;
void r215make_from_utf8(T215* C,T0* a1);
T6 r79is_equal(T79* C,T0* a1);
T6 r79se_assigned_from(T0* a1);
void r79execute_generators(T79* C,T0* a1);
void r79make(T79* C,T0* a1,T0* a2);
T6 r79conforms_to(T79* C,T0* a1);
void r79execute(T79* C);
T0* r79twin(T79* C);
T6 r500is_equal(T500* C,T0* a1);
T6 r500se_assigned_from(T0* a1);
void r500make(T500* C,T0* a1,T0* a2);
T6 r500conforms_to(T500* C,T0* a1);
T0* r500twin(T500* C);
T0* r497out(T497* C);
T6 r497is_equal(T497* C,T0* a1);
T6 r497se_assigned_from(T0* a1);
T0* r497clone(T0* a1);
void r497out_in_tagged_out_memory(T497* C);
T6 r497conforms_to(T497* C,T0* a1);
T0* r497twin(T497* C);
void r471fill(T471* C);
void r471compact_left(T471* C);
void r471set_position(T471* C,T2 a1,T2 a2,T2 a3);
T6 r471is_equal(T471* C,T0* a1);
T6 r471se_assigned_from(T0* a1);
T6 r471conforms_to(T471* C,T0* a1);
void r471resize(T471* C);
void r471make_with_size(T471* C,T0* a1,T2 a2);
T0* r471twin(T471* C);
void r471set_file(T471* C,T0* a1);
void r471flush(T471* C);
T0* r139current_working_directory(T139* C);
T6 r139is_equal(T139* C,T0* a1);
T6 r139se_assigned_from(T0* a1);
T0* r139clone(T0* a1);
T6 r139is_windows(T139* C);
void r139make(T139* C);
void r139old_put_string(T0* a1);
T6 r139conforms_to(T139* C,T0* a1);
void r139put_integer(T2 a1);
void r139put_line(T0* a1);
T0* r139twin(T139* C);
T0* r222full_name(T222* C,T3 a1);
void r222set_mounted_subclusters(T222* C,T0* a1);
T6 r222is_fully_abstract(T222* C);
T6 r222is_equal(T222* C,T0* a1);
void r222remove_cluster(T222* C,T0* a1);
void r222set_subclusters(T222* C,T0* a1);
T6 r222se_assigned_from(T0* a1);
T6 r222is_full_pathname_meaningful(T222* C);
void r222unmount_root(T222* C,T0* a1);
T0* r222full_pathname(T222* C);
void r222make(T222* C,T0* a1,T0* a2);
void r222mount(T222* C,T0* a1);
T6 r222conforms_to(T222* C,T0* a1);
void r222unmount(T222* C);
T0* r222twin(T222* C);
void r222merge_externals(T222* C,T0* a1);
void r222mount_root(T222* C,T0* a1);
T0* r161current_working_directory(T161* C);
T6 r161is_equal(T161* C,T0* a1);
T6 r161se_assigned_from(T0* a1);
T0* r161clone(T0* a1);
T6 r161is_windows(T161* C);
void r161make(T161* C);
void r161old_put_string(T0* a1);
T6 r161conforms_to(T161* C,T0* a1);
void r161put_integer(T2 a1);
void r161put_line(T0* a1);
T0* r161twin(T161* C);
T0* r474out(T474* C);
T6 r474is_equal(T474* C,T0* a1);
T6 r474se_assigned_from(T0* a1);
T0* r474clone(T0* a1);
void r474make(T474* C,T0* a1,T2 a2,T2 a3,T2 a4);
T6 r474conforms_to(T474* C,T0* a1);
T0* r474twin(T474* C);
T6 r279is_equal(T279* C,T0* a1);
T6 r279se_assigned_from(T0* a1);
void r279make(T279* C,T0* a1,T0* a2,T0* a3,T0* a4);
T6 r279conforms_to(T279* C,T0* a1);
T0* r279twin(T279* C);
T6 r374is_equal(T374* C,T0* a1);
T6 r374se_assigned_from(T0* a1);
void r374make(T374* C,T0* a1,T0* a2);
T6 r374conforms_to(T374* C,T0* a1);
T0* r374twin(T374* C);
T0* r405next_open_composite(T0* a1);
void r405enable_position_table(T405* C);
T6 r405is_equal(T405* C,T0* a1);
void r405on_content(T405* C,T0* a1);
T6 r405se_assigned_from(T0* a1);
void r405_199Pparse_from_stream(T405* C,T0* a1);
void r405on_processing_instruction(T405* C,T0* a1,T0* a2);
void r405on_start_tag(T405* C,T0* a1,T0* a2,T0* a3);
void r405make_from_implementation_event(T405* C,T0* a1);
void r405make_from_implementation(T405* C,T0* a1);
void r405handle_position(T405* C,T0* a1);
void r405on_comment(T405* C,T0* a1);
void r405parse_from_stream(T405* C,T0* a1);
void r405on_end_tag(T405* C,T0* a1,T0* a2);
T6 r405conforms_to(T405* C,T0* a1);
void r405reset(T405* C);
T0* r405twin(T405* C);
T6 r198is_equal(T198* C,T0* a1);
T6 r198se_assigned_from(T0* a1);
T0* r198clone(T0* a1);
void r198make_from_implementation(T198* C,T0* a1);
T6 r198is_correct(T198* C);
T6 r198conforms_to(T198* C,T0* a1);
T0* r198last_error_extended_description(T198* C);
T0* r198twin(T198* C);
T6 r271is_equal(T271* C,T0* a1);
T6 r271se_assigned_from(T0* a1);
void r271make(T271* C);
void r271insert(T271* C,T2 a1,T0* a2,T2 a3,T2 a4);
void r271insert_code(T271* C,T2 a1,T2 a2);
void r271move(T271* C,T2 a1,T2 a2,T2 a3);
T6 r271conforms_to(T271* C,T0* a1);
void r271storage_ensure_capacity(T271* C,T2 a1);
T0* r271twin(T271* C);
void r213set_last_cell(T213* C,T0* a1);
void r213copy(T213* C,T0* a1);
void r213wipe_out(T213* C);
void r213remove_first(T213* C);
T0* r213cursor_item(T0* a1);
T6 r213cursor_is_last(T213* C,T0* a1);
void r213add_attributes(T213* C,T0* a1);
T6 r213is_equal(T213* C,T0* a1);
void r213remove_traversing_cursor(T213* C,T0* a1);
void r213make_root(T213* C,T0* a1,T0* a2);
void r213cursor_go_after(T213* C,T0* a1);
void r213move_all_cursors_after(T213* C);
T6 r213has_attribute_by_name(T213* C,T0* a1);
void r213add_traversing_cursor(T213* C,T0* a1);
T6 r213se_assigned_from(T0* a1);
void r213add_attribute(T213* C,T0* a1,T0* a2,T0* a3);
T0* r213attribute_by_name(T213* C,T0* a1);
void r213make_child(T213* C,T0* a1,T0* a2,T0* a3);
T6 r213same_type(T213* C,T0* a1);
T6 r213equal(T0* a1,T0* a2);
void r213remove_last(T213* C);
T6 r213cursor_after(T0* a1);
T6 r213conforms_to(T213* C,T0* a1);
void r213make_list(T213* C);
void r213cursor_forth(T213* C,T0* a1);
void r213move_last_cursors_after(T213* C);
void r213cursor_start(T213* C,T0* a1);
T0* r213twin(T213* C);
void r213force_last(T213* C,T0* a1);
T0* r213new_cursor(T213* C);
void r213make_composite(T213* C);
T6 r213has_element_by_name(T213* C,T0* a1);
T6 r213cursor_is_first(T213* C,T0* a1);
void r213remove_at_cursor(T213* C,T0* a1);
T0* r213element_by_name(T213* C,T0* a1);
void r213move_all_cursors(T213* C,T0* a1,T0* a2);
T6 r213cursor_off(T0* a1);
void r450yy_do_action(T450* C,T2 a1);
extern T0*oBC451yytable_template;
extern int fBC451yytable_template;
T0* r450yytable_template(void);
T0* r450empty_ucstring(void);
void r450make_parser_skeleton(T450* C);
T2 r450yy_at_beginning_of_line(T450* C);
void r450fatal_error(T0* a1);
extern T0*oBC37std;
T0* r450yytype1(T0* a1);
T6 r450yytype2(T0* a1);
T0* r450yytype3(T0* a1);
T0* r450yytype4(T0* a1);
T0* r450yytype5(T0* a1);
void r450handle_found_text(T450* C);
void r450parse(T450* C);
void r450set_input_buffer(T450* C,T0* a1);
T2 r450yy_translate(T450* C,T2 a1);
extern T0*oBC452yy_ec_template;
extern int fBC452yy_ec_template;
T0* r450yy_ec_template(void);
void r450yy_execute_action(T450* C,T2 a1);
extern T0*oBC451yytranslate_template;
extern int fBC451yytranslate_template;
T0* r450yytranslate_template(void);
void r450clear_stacks(T450* C);
extern T0*oBC452yy_def_template;
extern int fBC452yy_def_template;
T0* r450yy_def_template(void);
T3 r450text_item(T450* C,T2 a1);
void r450yy_load_input_buffer(T450* C);
extern T273 oBC451uc_collon;
extern int fBC451uc_collon;
T273 r450uc_collon(void);
extern T0*oBC451yyr1_template;
extern int fBC451yyr1_template;
T0* r450yyr1_template(void);
void r450make_with_buffer(T450* C,T0* a1);
T2 r450yy_null_trans_state(T450* C,T2 a1);
T0* r450position(T450* C);
extern T0*oBC452yy_accept_template;
extern int fBC452yy_accept_template;
T0* r450yy_accept_template(void);
void r450read_token(T450* C);
extern T0*oBC451yyr2_template;
extern int fBC451yyr2_template;
T0* r450yyr2_template(void);
T2 r450yy_previous_state(T450* C);
extern T0*oBC451yypgoto_template;
extern int fBC451yypgoto_template;
T0* r450yypgoto_template(void);
void r450yy_refill_input_buffer(T450* C);
T0* r450yy_fixed_array(T0* a1);
T6 r450conforms_to(T450* C,T0* a1);
extern T0*oBC452yy_meta_template;
extern int fBC452yy_meta_template;
T0* r450yy_meta_template(void);
extern T0*oBC452yy_base_template;
extern int fBC452yy_base_template;
T0* r450yy_base_template(void);
T0* r450twin(T450* C);
T2 r450text_count(T450* C);
T0* r450clone(T0* a1);
T0* r450new_file_buffer(T0* a1);
void r450yy_initialize(T450* C);
void r450reset(T450* C);
T0* r450text(T450* C);
extern T0*oBC452yy_nxt_template;
extern int fBC452yy_nxt_template;
T0* r450yy_nxt_template(void);
void r450parse_from_stream(T450* C,T0* a1);
void r450yy_set_line_column(T450* C);
void r450yy_build_parser_tables(T450* C);
T273 r450new_unicode_character(T3 a1);
T0* r450new_unicode_string(T0* a1);
T0* r450split_name_and_prefix(T0* a1);
T6 r450is_equal(T450* C,T0* a1);
void r450report_error(T450* C,T0* a1);
extern T0*oBC451yydefact_template;
extern int fBC451yydefact_template;
T0* r450yydefact_template(void);
extern T0*oBC452yy_chk_template;
extern int fBC452yy_chk_template;
T0* r450yy_chk_template(void);
extern T0*oBC451yycheck_template;
extern int fBC451yycheck_template;
T0* r450yycheck_template(void);
void r450make(T450* C);
T0* r450yyfixed_array(T0* a1);
void r450yy_clear_all(T450* C);
extern T0*oBC451yydefgoto_template;
extern int fBC451yydefgoto_template;
T0* r450yydefgoto_template(void);
void r450yy_set_content(T450* C,T0* a1);
extern T0*oBC451yypact_template;
extern int fBC451yypact_template;
T0* r450yypact_template(void);
void r450set_start_condition(T450* C,T2 a1);
T6 r450se_assigned_from(T0* a1);
void r450yy_build_tables(T450* C);
void r450less(T450* C,T2 a1);
T6 r68is_equal(T68* C,T0* a1);
extern T0*oBC1command_arguments;
extern int fBC1command_arguments;
T0* r68command_arguments(void);
T6 r68se_assigned_from(T0* a1);
T6 r68conforms_to(T68* C,T0* a1);
T0* r68twin(T68* C);
T0* r68argument(T2 a1);
T6 r356is_equal(T356* C,T0* a1);
T0* r356arguments(void);
T6 r356se_assigned_from(T0* a1);
void r356make(T356* C,T0* a1,T0* a2,T0* a3,T0* a4);
T0* r356message(T356* C,T0* a1);
T6 r356conforms_to(T356* C,T0* a1);
T0* r356twin(T356* C);
T0* r356default_message(T356* C);
T6 r401is_equal(T401* C,T0* a1);
extern T0*oBC401ep_event_fact;
T6 r401se_assigned_from(T0* a1);
void r401make(T401* C);
T6 r401conforms_to(T401* C,T0* a1);
extern T0*oBC401ef_event_fact;
T0* r401twin(T401* C);
void r34_35Preport_error(T34* C,T0* a1);
void r34report_missing_element_error(T34* C,T0* a1,T0* a2,T0* a3);
T6 r34is_equal(T34* C,T0* a1);
void r34report_no_parser_available_error(T34* C);
T6 r34se_assigned_from(T0* a1);
void r34report_missing_attribute_error(T34* C,T0* a1,T0* a2,T0* a3);
extern T0*oBC36null_output_stream;
extern int fBC36null_output_stream;
T0* r34null_output_stream(void);
void r34report_cannot_write_file_error(T34* C,T0* a1);
void r34make(T34* C);
void r34report_cannot_read_file_error(T34* C,T0* a1);
void r34report_parser_error(T34* C,T0* a1);
T0* r34message(T0* a1);
void r34report_invalid_expression_error(T34* C,T0* a1,T0* a2);
T6 r34conforms_to(T34* C,T0* a1);
void r34report_positive_integer_expected_error(T34* C,T0* a1,T0* a2,T0* a3,T0* a4);
void r34report_not_xace_file_error(T34* C,T0* a1);
void r34report_wrong_root_element_error(T34* C,T0* a1,T0* a2);
void r34report_unknown_element_error(T34* C,T0* a1,T0* a2,T0* a3);
void r34report_warning(T34* C,T0* a1);
T0* r34twin(T34* C);
void r34report_wrong_attribute_value_error(T34* C,T0* a1,T0* a2,T0* a3,T0* a4,T0* a5);
void r34report_boolean_expected_error(T34* C,T0* a1,T0* a2,T0* a3,T0* a4);
void r34report_error(T34* C,T0* a1);
T6 r391is_expression_true(T391* C,T0* a1);
T6 r391should_strip_element(T391* C,T0* a1,T0* a2);
T6 r391is_equal(T391* C,T0* a1);
T6 r391se_assigned_from(T0* a1);
void r391preprocess_composite(T391* C,T0* a1,T0* a2);
T0* r391new_unicode_string_from_utf8(T0* a1);
extern T273 oBC194uc_equal;
extern int fBC194uc_equal;
T273 r391uc_equal(void);
T6 r391is_valid_expression(T0* a1);
T273 r391new_unicode_character(T3 a1);
extern T273 oBC194uc_closing_curly_brace;
extern int fBC194uc_closing_curly_brace;
T273 r391uc_closing_curly_brace(void);
void r391make(T391* C,T0* a1,T0* a2);
extern T0*oBC194uc_unless;
extern int fBC194uc_unless;
T0* r391uc_unless(void);
extern T0*oBC194uc_if;
extern int fBC194uc_if;
T0* r391uc_if(void);
T6 r391conforms_to(T391* C,T0* a1);
extern T273 oBC194uc_opening_curly_brace;
extern int fBC194uc_opening_curly_brace;
T273 r391uc_opening_curly_brace(void);
T0* r391twin(T391* C);
void r391expand_attribute_variables(T391* C,T0* a1);
T0* r391new_unicode_string(T0* a1);
extern T273 oBC194uc_dollar;
extern int fBC194uc_dollar;
T273 r391uc_dollar(void);
T0* r218split_on_first(T0* a1,T3 a2);
T6 r218is_equal(T218* C,T0* a1);
void r218remove_cluster(T218* C,T0* a1);
T6 r218se_assigned_from(T0* a1);
T0* r218clone(T0* a1);
void r218make_empty(T218* C);
void r218make(T218* C,T0* a1);
void r218set_parent(T218* C,T0* a1);
T6 r218conforms_to(T218* C,T0* a1);
T0* r218twin(T218* C);
T0* r218split_string(T0* a1,T3 a2);
void r218merge_externals(T218* C,T0* a1);
extern T0*oBC138error;
extern int fBC138error;
T0* r138error(void);
T6 r138is_equal(T138* C,T0* a1);
T6 r138se_assigned_from(T0* a1);
extern T0*oBC138input;
extern int fBC138input;
T0* r138input(void);
extern T0*oBC138output;
extern int fBC138output;
T0* r138output(void);
T6 r138conforms_to(T138* C,T0* a1);
T0* r138twin(T138* C);
T6 r479is_equal(T479* C,T0* a1);
T6 r479se_assigned_from(T0* a1);
T6 r479conforms_to(T479* C,T0* a1);
T0* r479twin(T479* C);
void r43raise(T43* C,T0* a1);
T6 r43is_equal(T43* C,T0* a1);
T6 r43se_assigned_from(T0* a1);
T6 r43conforms_to(T43* C,T0* a1);
T0* r43twin(T43* C);
extern T0*oBC44developer_exception_name_memory;
void r44raise(T44* C,T0* a1);
T6 r44is_equal(T44* C,T0* a1);
T6 r44se_assigned_from(T0* a1);
T6 r44conforms_to(T44* C,T0* a1);
T0* r44twin(T44* C);
T6 r39is_equal(T39* C,T0* a1);
T6 r39se_assigned_from(T0* a1);
T6 r39conforms_to(T39* C,T0* a1);
T6 r39_px_60(T39* C,T0* a1);
T0* r39twin(T39* C);
T6 r175is_equal(T175* C,T0* a1);
T6 r175se_assigned_from(T0* a1);
T6 r175conforms_to(T175* C,T0* a1);
T0* r175twin(T175* C);
T6 r300is_equal(T300* C,T0* a1);
T6 r300se_assigned_from(T0* a1);
T0* r300to_hexadecimal(T2 a1,T6 a2);
T6 r300conforms_to(T300* C,T0* a1);
T3 r300to_character(T2 a1);
T0* r300twin(T300* C);
void r300append_hexadecimal_integer(T0* a1,T2 a2,T6 a3);
extern T0*oBC267factory;
extern int fBC267factory;
T0* r267factory(void);
T6 r267is_equal(T267* C,T0* a1);
T6 r267se_assigned_from(T0* a1);
T6 r267conforms_to(T267* C,T0* a1);
T0* r267twin(T267* C);
T6 r506is_equal(T506* C,T0* a1);
T6 r506se_assigned_from(T0* a1);
T6 r506conforms_to(T506* C,T0* a1);
T0* r506twin(T506* C);
T6 r38is_equal(T38* C,T0* a1);
T6 r38se_assigned_from(T0* a1);
T6 r38conforms_to(T38* C,T0* a1);
T0* r38twin(T38* C);
T0* r298get_environment_variable(T0* a1);
T6 r193is_equal(T193* C,T0* a1);
T6 r193se_assigned_from(T0* a1);
T6 r193conforms_to(T193* C,T0* a1);
T0* r193twin(T193* C);
T6 r505is_equal(T505* C,T0* a1);
T6 r505se_assigned_from(T0* a1);
T6 r505conforms_to(T505* C,T0* a1);
T0* r505twin(T505* C);
T6 r436is_equal(T436* C,T0* a1);
T6 r436se_assigned_from(T0* a1);
T6 r436conforms_to(T436* C,T0* a1);
T0* r436twin(T436* C);
void r16process_cluster(T16* C);
T0* r16split_on_first(T0* a1,T3 a2);
T6 r16is_equal(T16* C,T0* a1);
void r16process_options(T16* C);
void r16process_arguments(T16* C);
T0* r16arguments(void);
T6 r16has_next_option_value(T16* C);
T6 r16se_assigned_from(T0* a1);
T0* r16clone(T0* a1);
void r16process_xace_file(T16* C,T0* a1);
T6 r16is_next_option_long_option(T16* C);
extern T0*oBC16usage_message;
extern int fBC16usage_message;
T0* r16usage_message(void);
T0* r16next_option_value(T16* C);
void r16make(T16* C);
void r16process_command(T16* C);
T6 r16is_valid_option_position(T2 a1);
void r16process_system(T16* C);
T6 r16conforms_to(T16* C,T0* a1);
extern T0*oBC20exceptions;
void r16process_define_string(T16* C,T0* a1);
void r16process_output(T16* C,T0* a1);
void r16process_validate(T16* C);
T0* r16next_option(T16* C);
T6 r16has_next_option(T16* C);
T0* r16twin(T16* C);
void r16process_define(T16* C);
T0* r16split_string(T0* a1,T3 a2);
void r16process_compilers(T16* C,T0* a1,T0* a2);
T6 r16match_long_option(T16* C,T0* a1);
void r16consume_option(T16* C);
void r444connect_to_current_working_directory(T444* C);
void r444disconnect(T444* C);
extern T0*oBC444last_entry;
T6 r101is_equal(T101* C,T0* a1);
T6 r101se_assigned_from(T0* a1);
T6 r101is_integer(T0* a1);
T6 r101same_case_insensitive(T0* a1,T0* a2);
T0* r101make(T2 a1);
T6 r101conforms_to(T101* C,T0* a1);
T0* r101twin(T101* C);
T0* r273out(T273* C);
T6 r273is_equal(T273* C,T273 a1);
extern T0*oBC275integer_;
T3 r273as_character(T273* C);
extern T0*oBC276platform;
T6 r273_px_60(T273* C,T273 a1);
T6 r273_px_62(T273* C,T273 a1);
T0* r273as_hexadecimal(T273* C);
T3 r273code_to_character(T2 a1);
T6 r297is_equal(T297* C,T0* a1);
T0* r297variable_value(T0* a1);
T6 r297se_assigned_from(T0* a1);
extern T298 oBC297environment_impl;
T6 r297conforms_to(T297* C,T0* a1);
T0* r297interpreted_string(T0* a1);
T0* r297twin(T297* C);
T2 r299nr_of_following_octets(T3 a1);
T6 r299is_equal(T299* C,T0* a1);
T6 r299se_assigned_from(T0* a1);
void r299read_code(T299* C,T0* a1,T2 a2);
void r299read_following_octet(T299* C,T0* a1);
void r299put_code(T2 a1,T0* a2,T2 a3);
T6 r299conforms_to(T299* C,T0* a1);
T3 r299code_to_character(T2 a1);
T2 r299octet_size(T2 a1);
T0* r299twin(T299* C);
extern T0*oBC299specific;
T6 r299is_leading_octet(T3 a1);
T2 r299read_leading_octet(T299* C,T0* a1,T2 a2);
T6 r435is_equal(T435* C,T0* a1);
T6 r435se_assigned_from(T0* a1);
T0* r435new_event_parser_imp(void);
T6 r435conforms_to(T435* C,T0* a1);
T0* r435twin(T435* C);
T6 r78is_equal(T78* C,T0* a1);
T6 r78se_assigned_from(T0* a1);
T6 r78conforms_to(T78* C,T0* a1);
T6 r78_px_60(T78* C,T0* a1);
T0* r78twin(T78* C);
T6 r507is_equal(T507* C,T0* a1);
T6 r507se_assigned_from(T0* a1);
T6 r507conforms_to(T507* C,T0* a1);
T0* r507twin(T507* C);
T0* r142current_working_directory(T142* C);
T6 r142is_equal(T142* C,T0* a1);
T6 r142se_assigned_from(T0* a1);
T0* r142clone(T0* a1);
T6 r142is_windows(T142* C);
T6 r142conforms_to(T142* C,T0* a1);
T0* r142twin(T142* C);
extern T16*eiffel_root_object;
extern int se_argc;
extern char**se_argv;
#define SE_MAXID 508
extern T7* g[];
extern T7* t[];
void initialize_eiffel_runtime(int argc,char*argv[]);
extern T7*ms193_264596220;
extern T7*ms131_2071896;
extern T7*ms193_537250837;
extern T7*ms193_2250778;
extern T7*ms193_2246326;
extern T7*ms193_50458336;
extern T7*ms437_512683247;
extern T7*ms193_53099313;
extern T7*ms193_765701343;
extern T7*ms193_1817115202;
extern T7*ms193_295494129;
extern T7*ms193_78002;
extern T7*ms193_1831836695;
extern T7*ms193_2191641;
extern T7*ms193_39972254;
extern T7*ms193_78263;
extern T7*ms193_78331;
extern T7*ms193_78279;
extern T7*ms193_78490;
extern T7*ms193_78495;
extern T7*ms193_2185421;
extern T7*ms193_90041;
extern T7*ms193_1155828738;
extern T7*ms193_90141;
extern T7*ms193_722497341;
extern T7*ms193_692313432;
extern T7*ms193_1619639801;
extern T7*ms353_1003460429;
extern T7*ms193_9901966;
extern T7*ms32_1415324896;
extern T7*ms139_10;
extern T7*ms193_662126768;
extern T7*ms132_440790;
extern T7*ms132_440825;
extern T7*ms193_89216;
extern T7*ms296_988446515;
extern T7*ms400_462378139;
extern T7*ms193_1085709462;
extern T7*ms193_89771;
extern T7*ms193_89862;
extern T7*ms399_1214914019;
extern T7*ms193_9786069;
extern T7*ms160_10;
extern T7*ms193_554402727;
extern T7*ms193_49076540;
extern T7*ms107_431271;
extern T7*ms161_10;
extern T7*ms193_484842691;
extern T7*ms193_49483191;
extern T7*ms395_54177410;
extern T7*ms193_1040155018;
extern T7*ms193_51843716;
extern T7*ms104_1515383187;
extern T7*ms193_1570582567;
extern T7*ms193_1991783165;
extern T7*ms193_17221;
extern T7*ms134_11272528;
extern T7*ms193_17176;
extern T7*ms193_10342028;
extern T7*ms397_454072470;
extern T7*ms193_440571;
extern T7*ms193_702131887;
extern T7*ms193_279458336;
extern T7*ms193_234165132;
extern T7*ms193_1994621;
extern T7*ms193_1183150341;
extern T7*ms193_19162620;
extern T7*ms193_1988096;
extern T7*ms193_388005040;
extern T7*ms443_1606053737;
extern T7*ms192_79251;
extern T7*ms355_105797387;
extern T7*ms193_2141685;
extern T7*ms193_2040823781;
extern T7*ms193_48856070;
extern T7*ms32_1878185725;
extern T7*ms193_1846843898;
extern T7*ms193_335219475;
extern T7*ms193_9946191;
extern T7*ms193_1493399999;
extern T7*ms438_10;
extern T7*ms193_52771526;
extern T7*ms398_820451542;
extern T7*ms193_420169;
extern T7*ms193_1365755180;
extern T7*ms193_1962309625;
extern T7*ms193_10365093;
extern T7*ms396_1179444653;
extern T7*ms107_1319327951;
extern T7*ms193_10030586;
extern T7*ms301_229;
extern T7*ms356_802821753;
extern T7*ms193_1957581;
extern T7*ms193_402346;
extern T7*ms193_3073;
extern T7*ms193_3139;
extern T7*ms193_3148;
extern T7*ms193_3226;
extern T7*ms193_3322;
extern T7*ms193_783353191;
extern T7*ms107_9702826;
extern T7*ms193_243833461;
extern T7*ms193_48929738;
extern T7*ms192_18036;
extern T7*ms133_10031271;
T7*se_ms(int c,char*e);
T7*se_string(char*e);
void se_msi1(void);
void se_msi2(void);
void se_msi3(void);
void*se_ma272(int argc,...);
void*se_ma103(int argc,...);
T0* X404new_event_parser_imp(T0*C);
T6 X404is_available(T0*C);
void X32execute(T0*C);
T0* X148item(T0*C);
T6 X148after(T0*C);
void X148forth(T0*C);
void X148start(T0*C);
T2 X149count(T0*C);
T0* X149cursor_item(T0*C,T0* a1);
T6 X149is_empty(T0*C);
T6 X149cursor_after(T0*C,T0* a1);
void X149cursor_forth(T0*C,T0* a1);
void X149cursor_start(T0*C,T0* a1);
T0* X149new_cursor(T0*C);
T0* X254cursor_item(T0*C,T0* a1);
T6 X254cursor_after(T0*C,T0* a1);
void X254cursor_forth(T0*C,T0* a1);
void X254cursor_start(T0*C,T0* a1);
T6 X10is_equal(T0*C,T0* a1);
T0* X10twin(T0*C);
T6 X1se_assigned_from(T0*C,T0* a1);
T6 X1conforms_to(T0*C,T0* a1);
void X463clear_all(T0*C,T0* a1);
T0* X463make(T0*C,T2 a1);
T0* X463resize(T0*C,T0* a1,T2 a2);
void X98put_new_line(T0*C);
void X98put_integer(T0*C,T2 a1);
void X98put_line(T0*C,T0* a1);
void X98put_character(T0*C,T3 a1);
void X98put_string(T0*C,T0* a1);
T0* X185name(T0*C);
T2 X185read_to_string(T0*C,T0* a1,T2 a2,T2 a3);
void X185read_character(T0*C);
T6 X185end_of_input(T0*C);
void X211force_last(T0*C,T0* a1);
T0* X211new_cursor(T0*C);
void X211remove_at_cursor(T0*C,T0* a1);
void X44raise(T0*C,T0* a1);
T2 X460count(T0*C);
T2 X460item(T0*C,T2 a1);
T2 X460lower(T0*C);
void X191parse_file(T0*C,T0* a1);
void X462put(T0*C,T0* a1,T2 a2);
T0* X462item(T0*C,T2 a1);
T466 X462storage(T0*C);
void X462set_all_with(T0*C,T0* a1);
void X462resize(T0*C,T2 a1);
T2 X266item_code(T0*C,T2 a1);
void X266insert(T0*C,T2 a1,T0* a2,T2 a3,T2 a4);
void X266insert_code(T0*C,T2 a1,T2 a2);
T0* X95default_message(T0*C);
T6 X142is_windows(T0*C);
void X81generate_cluster(T0*C,T0* a1);
void X81generate_system(T0*C,T0* a1);
T0* T2toT39(T2 source);
T2 T39toT2(T0* source);
T0* T6toT38(T6 source);

#ifdef __cplusplus
}
#endif
