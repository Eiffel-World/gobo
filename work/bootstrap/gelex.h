#ifdef __cplusplus
extern "C" {
#endif
/*
ANSI C code generated by SmartEiffel The GNU Eiffel Compiler, Eiffel tools and libraries
Release 1.0 (Friday December 6th 2002)
Copyright (C), 1994-2002 - LORIA - UHP - INRIA - FRANCE
Dominique COLNET and Suzanne COLLIN - SmartEiffel@loria.fr
http://SmartEiffel.loria.fr
C Compiler options used: 
*/

/*
-- This file is  free  software, which  comes  along  with  SmartEiffel. This
-- software  is  distributed  in the hope that it will be useful, but WITHOUT
-- ANY  WARRANTY;  without  even  the  implied warranty of MERCHANTABILITY or
-- FITNESS  FOR A PARTICULAR PURPOSE. You can modify it as you want, provided
-- this header is kept unaltered, and a notification of the changes is added.
-- You  are  allowed  to  redistribute  it and sell it, alone or as a part of
-- another product.
--       Copyright (C) 1994-2002 LORIA - INRIA - U.H.P. Nancy 1 - FRANCE
--          Dominique COLNET and Suzanne COLLIN - SmartEiffel@loria.fr
--                       http://SmartEiffel.loria.fr
--
*/
/*
  This file (SmartEiffel/sys/runtime/base.h) contains all basic Eiffel
  type definitions.
  This file is automatically included in the header for all modes of
  compilation: -boost, -no_check, -require_check, -ensure_check, ...
  This file is also included in the header of any cecil file (when the
  -cecil option is used).
  This file is also included in the header file of C++ wrappers (when
  using the external "C++" clause).
*/
#if defined(_MSC_VER) && (_MSC_VER >= 1400)       // VC8+
# ifndef _CRT_SECURE_NO_DEPRECATE
#  define _CRT_SECURE_NO_DEPRECATE
# endif
# ifndef _CRT_NONSTDC_NO_DEPRECATE
#  define _CRT_NONSTDC_NO_DEPRECATE
# endif
#endif   // VC8+

#include <stdio.h>
#include <string.h>
#include <math.h>
#include <stdlib.h>
#include <signal.h>
#include <stddef.h>
#include <stdarg.h>
#include <limits.h>
#include <float.h>
#include <setjmp.h>
#include <sys/types.h>
#include <sys/stat.h>
#include <fcntl.h>
#if defined __USE_POSIX || defined __unix__ || defined _POSIX_C_SOURCE
#  include <unistd.h>
#endif
#if !defined(WIN32) && \
       (defined(WINVER) || defined(_WIN32_WINNT) || defined(_WIN32) || \
	defined(__WIN32__) || defined(__TOS_WIN__) || defined(_MSC_VER))
#  define WIN32 1
#endif
#ifdef WIN32
#  include <windows.h>
#else
#  ifndef O_RDONLY
#    include <sys/file.h>
#  endif
#  ifndef O_RDONLY
#    define O_RDONLY 0000
#  endif
#endif

#if defined(_MSC_VER) /* MSVC */
typedef signed char int8_t;
typedef signed short int16_t;
typedef signed int int32_t;
typedef signed __int64 int64_t;
#  define PRId8 "d"
#  define PRId16 "d"
#  define PRId32 "d"
#  define PRId64 "I64d"
#  define INT8_C(c) c
#  define INT16_C(c) c
#  define INT32_C(c) c
#  define INT64_C(c) c ## i64
#elif defined(__WATCOMC__) && (__WATCOMC__ <= 1100) /* WATCOM 11 or lower */
typedef signed char int8_t;
typedef signed short int16_t;
typedef signed long int int32_t;
typedef signed __int64 int64_t;
#  define PRId8 "d"
#  define PRId16 "d"
#  define PRId32 "d"
#  define PRId64 "Ld"
#  define INT8_C(c) c
#  define INT16_C(c) c
#  define INT32_C(c) c ## L
#  define INT64_C(c) c ## i64
#elif defined(__BORLANDC__) && (__BORLANDC__ < 0x600) /* Borland before 6.0 */
typedef signed char int8_t;
typedef signed short int16_t;
typedef signed long int int32_t;
typedef signed __int64 int64_t;
#  define PRId8 "d"
#  define PRId16 "d"
#  define PRId32 "Ld"
#  define PRId64 "I64Ld"
#  define INT8_C(c) c
#  define INT16_C(c) c
#  define INT32_C(c) c ## L
#  define INT64_C(c) c ## i64
#elif defined(__FreeBSD__) && (__FreeBSD__ < 5) /* FreeBSD before 5.0 */ && !defined (_SYS_INTTYPES_H_)
typedef signed char int8_t;
typedef signed short int16_t;
typedef signed long int int32_t;
typedef signed long long int int64_t;
#elif defined(__CYGWIN__) && defined(__BIT_TYPES_DEFINED__) /* Cygwin defines intxx_t in sys/types.h instead of inttypes.h */
#else
#  include <inttypes.h>
#  if !defined(INT8_MAX) && defined(INT16_MAX)
/* int8_t is not mandatory */
typedef int_least8_t int8_t;
#  endif
#endif

#if !defined(PRId16)
#  define PRId8 "d"
#  define PRId16 "d"
#  define PRId32 "ld"
#  define PRId64 "lld"
#elif !defined(PRId8)
#  define PRId8 "d"
#endif
#if !defined(INT16_C)
#  define INT8_C(c) c
#  define INT16_C(c) c
#  define INT32_C(c) c ## L
#  define INT64_C(c) c ## LL
#elif !defined(INT8_C)
#  define INT8_C(c) c
#endif
#if !defined(INT16_MIN)
#  define INT8_MIN (-INT8_C(127)-1)
#  define INT8_MAX (INT8_C(127))
#  define INT16_MIN (-INT16_C(32767)-1)
#  define INT16_MAX (INT16_C(32767))
#  define INT32_MIN (-INT32_C(2147483647)-1)
#  define INT32_MAX (INT32_C(2147483647))
#  define INT64_MIN (-INT64_C(9223372036854775807)-1)
#  define INT64_MAX (INT64_C(9223372036854775807))
#elif !defined(INT8_MIN)
#  define INT8_MIN (-INT8_C(127)-1)
#endif

/* Because ANSI C EXIT_* are not always defined: */
#ifndef EXIT_FAILURE
#  define EXIT_FAILURE 1
#endif
#ifndef EXIT_SUCCESS
#  define EXIT_SUCCESS 0
#endif

/*
   On Linux glibc systems, we need to use sig.* versions of jmp_buf,
   setjmp and longjmp to preserve the signal handling context.
   Currently, the way I figured to detect this is if _SIGSET_H_types has
   been defined in /usr/include/setjmp.h.
*/
#ifdef _SIGSET_H_types
#  define JMP_BUF    sigjmp_buf
#  define SETJMP(x)  sigsetjmp( (x), 1)
#  define LONGJMP    siglongjmp
#else
#  define JMP_BUF    jmp_buf
#  define SETJMP(x)  setjmp( (x) )
#  define LONGJMP    longjmp
#endif

/*
   Type to store reference objects Id:
 */
typedef int Tid;
typedef struct S0 T0;
struct S0{Tid id;};

/*
   The default channel used to print runtime error messages:
*/
#define SE_ERR stderr

/*
   Eiffel type INTEGER_8 is #1:
*/
typedef int8_t T1;
#define EIF_INTEGER_8 T1
#define M1 (INT8_C(0))
#define EIF_INTEGER_8_BITS (CHAR_BIT)
#define EIF_MINIMUM_INTEGER_8 (INT8_MIN)
#define EIF_MAXIMUM_INTEGER_8 (INT8_MAX)

/*
  Eiffel type INTEGER_16 is #10:
*/
typedef int16_t T10;
#define EIF_INTEGER_16 T10
#define M10 (INT16_C(0))
#define EIF_INTEGER_16_BITS (CHAR_BIT*sizeof(T10t))
#define EIF_MINIMUM_INTEGER_16 (INT16_MIN) /*-32768*/
#define EIF_MAXIMUM_INTEGER_16 (INT16_MAX) /*+32767*/

/*
  Eiffel type INTEGER or INTEGER_32 is #2:
*/
typedef int32_t T2;
#define EIF_INTEGER T2
#define EIF_INTEGER_32 T2
#define M2 (INT32_C(0))
#define EIF_INTEGER_BITS ((T2)(CHAR_BIT*sizeof(T2)))
#define EIF_INTEGER_32_BITS EIF_INTEGER_BITS
#define EIF_MINIMUM_INTEGER (INT32_MIN)
#define EIF_MAXIMUM_INTEGER (INT32_MAX)

/*
  Eiffel type INTEGER_64 is #11:
*/
typedef int64_t T11;
#define EIF_INTEGER_64 T11
#define M11 (INT64_C(0))
#define EIF_INTEGER_64_BITS (CHAR_BIT*sizeof(T11))
#define EIF_MINIMUM_INTEGER_64 (INT64_MIN)
#define EIF_MAXIMUM_INTEGER_64 (INT64_MAX)

/*
  Eiffel type CHARACTER is #3:
*/
typedef unsigned char T3;
#define EIF_CHARACTER T3
#define M3 (0)
#define EIF_CHARACTER_BITS (CHAR_BIT)
#define EIF_MINIMUM_CHARACTER_CODE (0)
#define EIF_MAXIMUM_CHARACTER_CODE (255)
#define T3code(x) ((T2)(x))
#define T3to_integer(x) ((T2)((signed char)(x)))
#define T3to_bit(x) (x)

/*
  Eiffel type REAL is #4:
*/
typedef float T4;
#define EIF_REAL T4
#define M4 (0.0)
#define EIF_REAL_BITS (CHAR_BIT*sizeof(float))
#define EIF_MINIMUM_REAL (-(FLT_MAX))
#define EIF_MAXIMUM_REAL (FLT_MAX)

/*
  Eiffel type DOUBLE is #5:
*/
typedef double T5;
#define EIF_DOUBLE T5
#define M5 (0.0)
#define EIF_DOUBLE_BITS (CHAR_BIT*sizeof(double))
#define EIF_MINIMUM_DOUBLE (-(DBL_MAX))
#define EIF_MAXIMUM_DOUBLE (DBL_MAX)

/*
  Eiffel type BOOLEAN is #6:
*/
typedef char T6;
#define EIF_BOOLEAN T6
#define M6 (0)
#define EIF_BOOLEAN_BITS (CHAR_BIT)

/*
   Eiffel type POINTER is #8:
*/
typedef void* T8;
#define EIF_POINTER T8
#define M8 (NULL)
#define EIF_POINTER_BITS (CHAR_BIT*sizeof(void*))

/*
  To use type STRING on the C side:
*/
#define EIF_STRING T7*

/*
  Some Other EIF_* defined in ETL:
*/
#define eif_access(x) ((char*)(x))
#define EIF_REFERENCE T0*
#define EIF_OBJ T0*
#define EIF_OBJECT EIF_OBJ

/*
   Wrappers for `malloc' and `calloc':
*/
void* se_malloc(size_t size);
void* se_calloc(size_t nmemb, size_t size);
#define SE_BOOST 1
#define SE_EXCEPTIONS 1

/*C Header Pass 1 :*/
typedef struct S340 T340;
typedef struct S250 T250;
typedef struct S12 T12;
typedef struct S218 T218;
typedef struct S401 T401;
typedef struct S227 T227;
typedef void*T405;
typedef struct S216 T216;
typedef struct S231 T231;
typedef struct S271 T271;
typedef struct S81 T81;
typedef struct S225 T225;
typedef struct S375 T375;
typedef struct S481 T481;
typedef void*T421;
typedef struct S187 T187;
typedef struct S92 T92;
typedef struct S96 T96;
typedef struct S397 T397;
typedef struct S268 T268;
typedef struct S360 T360;
typedef struct S321 T321;
typedef struct S230 T230;
typedef struct S220 T220;
typedef struct S519 T519;
typedef struct S514 T514;
typedef void*T524;
typedef void*T175;
typedef struct S463 T463;
typedef void*T254;
typedef void*T523;
typedef struct S88 T88;
typedef void*T433;
typedef struct S447 T447;
typedef void*T500;
typedef struct S358 T358;
typedef void*T527;
typedef void*T149;
typedef struct S269 T269;
typedef struct S482 T482;
typedef struct S443 T443;
typedef void*T373;
typedef struct S484 T484;
typedef void*T126;
typedef void*T249;
typedef struct S121 T121;
typedef struct S511 T511;
typedef struct S496 T496;
typedef struct S151 T151;
typedef struct S495 T495;
typedef struct S322 T322;
typedef struct S428 T428;
typedef struct S449 T449;
typedef void*T108;
typedef struct S343 T343;
typedef void*T290;
typedef struct S242 T242;
typedef struct S74 T74;
typedef struct S256 T256;
typedef void*T521;
typedef void*T164;
typedef struct S85 T85;
typedef struct S198 T198;
typedef void*T179;
typedef struct S494 T494;
typedef struct S72 T72;
typedef struct S27 T27;
typedef void*T168;
typedef void*T526;
typedef struct S444 T444;
typedef struct S436 T436;
typedef void*T83;
typedef struct S270 T270;
typedef struct S427 T427;
typedef struct S223 T223;
typedef struct S267 T267;
typedef struct S20 T20;
typedef void*T407;
typedef struct S513 T513;
typedef struct S426 T426;
typedef struct S46 T46;
typedef struct S450 T450;
typedef void*T522;
typedef struct S477 T477;
typedef struct S424 T424;
typedef struct S485 T485;
typedef struct S24 T24;
typedef struct S80 T80;
typedef struct S515 T515;
typedef void*T214;
typedef struct S127 T127;
typedef struct S448 T448;
typedef struct S529 T529;
typedef struct S174 T174;
typedef struct S478 T478;
typedef struct S7 T7;
typedef void*T266;
typedef struct S442 T442;
typedef struct S325 T325;
typedef struct S516 T516;
typedef struct S73 T73;
typedef struct S344 T344;
typedef void*T362;
typedef void*T319;
typedef struct S489 T489;
typedef struct S262 T262;
typedef struct S324 T324;
typedef struct S384 T384;
typedef struct S306 T306;
typedef struct S320 T320;
typedef void*T255;
typedef struct S480 T480;
typedef struct S410 T410;
typedef struct S184 T184;
typedef struct S275 T275;
typedef struct S472 T472;
typedef struct S371 T371;
typedef struct S490 T490;
typedef struct S93 T93;
typedef struct S441 T441;
typedef void*T461;
typedef struct S479 T479;
typedef struct S446 T446;
typedef struct S188 T188;
typedef void*T153;
typedef struct S217 T217;
typedef void*T476;
typedef struct S419 T419;
typedef struct S237 T237;
typedef struct S374 T374;
typedef struct S418 T418;
typedef struct S59 T59;
typedef struct S420 T420;
typedef struct S156 T156;
typedef struct S228 T228;
typedef struct S200 T200;
typedef struct S429 T429;
typedef struct S219 T219;
typedef struct S212 T212;
typedef struct S409 T409;
typedef struct S176 T176;
typedef struct S445 T445;
typedef struct S416 T416;
typedef struct S169 T169;
typedef void*T293;
typedef struct S147 T147;
typedef void*T114;
typedef struct S286 T286;
typedef struct S434 T434;
typedef struct S118 T118;
typedef struct S493 T493;
typedef struct S185 T185;
typedef struct S221 T221;
typedef void*T146;
typedef void*T406;
typedef struct S437 T437;
typedef struct S329 T329;
typedef struct S177 T177;
typedef void*T241;
typedef struct S109 T109;
typedef struct S408 T408;
typedef struct S491 T491;
typedef struct S172 T172;
typedef struct S91 T91;
typedef struct S142 T142;
typedef struct S435 T435;
typedef struct S316 T316;

/*C Header Pass 2 :*/
typedef T0**T233;
typedef T0**T203;
typedef T0**T400;
typedef T0**T278;
typedef T6*T82;
typedef T0**T274;
typedef T0**T531;
typedef T0**T171;
typedef T0**T130;
typedef T0**T120;
typedef T0**T328;
typedef T3*T9;
typedef T2*T90;
typedef T0**T87;
typedef T0**T404;

/*C Header Pass 3 :*/

/*C Header Pass 4 :*/
struct S340{T0* _item;T0* _right;};
extern T340 M340;
struct S250{T0* _comparator;};
extern T250 M250;
struct S12{T0* _description;T0* _error_handler;T0* _dfa;};
extern T12 M12;
struct S218{Tid id;T0* _parameters;};
extern T218 M218;
struct S401{T404 _storage;T2 _capacity;T2 _upper;};
extern T401 M401;
struct S227{Tid id;T2 _count;T0* _storage;T0* _symbols;};
extern T227 M227;
struct S216{Tid id;T2 _count;T2 _capacity;T0* _storage;T0* _special_routines;T0* _internal_cursor;};
extern T216 M216;
struct S271{T274 _storage;T2 _capacity;T2 _upper;};
extern T271 M271;
struct S81{Tid id;T2 _count;T0* _storage;};
extern T81 M81;
struct S225{Tid id;T0* _yy_accept;T0* _yy_ec;T0* _yy_rules;T0* _yy_eof_rules;T0* _yy_start_conditions;T2 _yynb_rules;T2 _yyend_of_buffer;T2 _yynull_equiv_class;T6 _yyline_used;T6 _yyposition_used;T0* _states;T0* _input_filename;T0* _eiffel_header;T6 _bol_needed;T6 _pre_action_used;T6 _post_action_used;T6 _post_eof_action_used;T0* _yy_nxt;T6 _yybacking_up;T2 _start_states_count;T2 _maximum_symbol;T2 _backing_up_count;T0* _partitions;T0* _eiffel_code;T6 _pre_eof_action_used;T6 _line_pragma;T2 _characters_count;T2 _array_size;T6 _actions_separated;T6 _inspect_used;T2 _yynb_rows;T2 _minimum_symbol;};
extern T225 M225;
struct S375{Tid id;T0* _name;T0* _string_name;T3 _last_character;T6 _end_of_file;T0* _character_buffer;T0* _path;T3 _old_last_character;T6 _old_end_of_file;T6 _push_back_flag;T8 _input_stream;T9 _buffer;T6 _end_reached;T2 _buffer_position;T2 _buffer_size;T2 _capacity;};
extern T375 M375;
struct S481{Tid id;T0* _parameters;};
extern T481 M481;
struct S231{T2 _item;T0* _right;T0* _left;};
extern T231 M231;
struct S92{Tid id;T0* _transition;T0* _epsilon_transition;T0* _accepted_rule;T2 _id;T6 _in_trail_context;};
extern T92 M92;
struct S96{T90 _storage;T2 _capacity;T2 _upper;};
extern T96 M96;
struct S397{T400 _storage;T2 _capacity;T2 _upper;};
extern T397 M397;
struct S268{T0* _equality_tester;T2 _count;T2 _capacity;T0* _storage;T0* _special_routines;T0* _internal_cursor;};
extern T268 M268;
struct S321{T2 _count;T0* _first_cell;T0* _last_cell;T0* _internal_cursor;T0* _meta_equiv_classes;};
extern T321 M321;
struct S230{T233 _storage;T2 _capacity;T2 _upper;T2 _lower;};
extern T230 M230;
struct S220{Tid id;T0* _parameters;};
extern T220 M220;
struct S519{Tid id;T0* _container;};
extern T519 M519;
struct S514{Tid id;T0* _parameters;};
extern T514 M514;
extern T175 M175;
struct S463{Tid id;T0* _target;T0* _label;};
extern T463 M463;
struct S88{T90 _storage;T2 _capacity;T2 _upper;T2 _lower;};
extern T88 M88;
struct S447{Tid id;T0* _parameters;};
extern T447 M447;
struct S358{T0* _item;T0* _right;T0* _left;};
extern T358 M358;
extern T527 M527;
extern T149 M149;
struct S482{Tid id;T0* _parameters;};
extern T482 M482;
struct S443{Tid id;T0* _parameters;};
extern T443 M443;
struct S484{Tid id;T0* _target;T2 _label;};
extern T484 M484;
struct S187{T0* _first;T0* _second;};
extern T187 M187;
struct S511{Tid id;T2 _position;T0* _container;};
extern T511 M511;
struct S496{Tid id;T6 _push_back_flag;T3 _old_last_character;T6 _old_end_of_file;T9 _buffer;T6 _end_reached;T2 _buffer_position;T2 _buffer_size;T2 _capacity;T0* _name;T3 _last_character;T6 _end_of_file;T0* _character_buffer;};
extern T496 M496;
struct S151{T0* _error_file;T0* _warning_file;T0* _info_file;};
extern T151 M151;
struct S495{T2 _count;T9 _area;T0* _area_string;};
extern T495 M495;
struct S322{T2 _count;T0* _last_cell;T0* _internal_cursor;T0* _first_cell;};
extern T322 M322;
struct S428{Tid id;T0* _parameters;};
extern T428 M428;
struct S449{Tid id;T0* _parameters;};
extern T449 M449;
struct S343{T0* _transitions;T2 _state_id;T0* _common_state;};
extern T343 M343;
struct S242{T0* _comparator;};
extern T242 M242;
struct S74{Tid id;T0* _equality_tester;T2 _count;T2 _capacity;T0* _storage;T0* _special_routines;T0* _internal_cursor;};
extern T74 M74;
struct S256{Tid id;T0* _container;T2 _position;T0* _next_cursor;};
extern T256 M256;
extern T164 M164;
struct S85{Tid id;T87 _storage;T2 _capacity;T2 _upper;T2 _lower;};
extern T85 M85;
struct S198{T0* _item;T0* _right;};
extern T198 M198;
extern T179 M179;
struct S494{Tid id;T0* _parameters;};
extern T494 M494;
struct S72{T0* _equality_tester;T2 _count;T2 _capacity;T0* _storage;T0* _special_routines;T0* _internal_cursor;};
extern T72 M72;
struct S27{Tid id;T0* _name;T0* _string_name;T0* _path;T9 _buffer;T2 _buffer_position;T2 _capacity;T8 _output_stream;};
extern T27 M27;
extern T168 M168;
extern T526 M526;
struct S360{Tid id;T0* _equality_tester;T2 _count;T2 _capacity;T0* _storage;T0* _special_routines;T0* _internal_cursor;T6 _negated;T6 _sort_needed;};
extern T360 M360;
struct S444{Tid id;T0* _parameters;};
extern T444 M444;
struct S436{Tid id;T0* _parameters;};
extern T436 M436;
extern T83 M83;
struct S270{Tid id;T2 _count;T2 _capacity;T0* _storage;T0* _special_routines;T0* _internal_cursor;};
extern T270 M270;
struct S427{Tid id;T0* _parameters;};
extern T427 M427;
struct S223{T120 _storage;T2 _capacity;T2 _upper;};
extern T223 M223;
struct S121{Tid id;T0* _states;T6 _in_trail_context;};
extern T121 M121;
struct S267{T0* _text;};
extern T267 M267;
struct S20{T0* _error_handler;};
extern T20 M20;
struct S513{Tid id;T0* _parameters;};
extern T513 M513;
struct S426{Tid id;T0* _parameters;};
extern T426 M426;
struct S46{T2 _array_size;T6 _backing_up_report;T0* _backing_up_filename;T6 _case_insensitive;T2 _characters_count;T6 _debug_mode;T6 _equiv_classes_used;T6 _meta_equiv_classes_used;T6 _full_table;T6 _no_default_rule;T6 _no_warning;T6 _actions_separated;T6 _inspect_used;T6 _reject_used;T6 _line_used;T6 _position_used;T6 _pre_action_used;T6 _post_action_used;T6 _pre_eof_action_used;T6 _post_eof_action_used;T6 _line_pragma;T0* _input_filename;T0* _output_filename;T0* _start_conditions;T0* _rules;T0* _eof_rules;T0* _equiv_classes;T6 _bol_needed;T6 _variable_trail_context;T0* _eiffel_code;T0* _eiffel_header;};
extern T46 M46;
struct S450{T2 _position;T0* _container;T0* _next_cursor;};
extern T450 M450;
struct S477{Tid id;T0* _parameters;};
extern T477 M477;
struct S424{Tid id;T0* _container;};
extern T424 M424;
struct S485{Tid id;T0* _parameters;};
extern T485 M485;
struct S24{Tid id;T0* _parameters;};
extern T24 M24;
struct S80{T82 _storage;T2 _capacity;T2 _upper;T2 _lower;};
extern T80 M80;
struct S515{Tid id;T0* _parameters;};
extern T515 M515;
struct S127{T130 _storage;T2 _capacity;T2 _upper;};
extern T127 M127;
struct S448{Tid id;T0* _parameters;};
extern T448 M448;
struct S529{T531 _storage;T2 _capacity;T2 _upper;T2 _lower;};
extern T529 M529;
struct S174{T171 _storage;T2 _capacity;T2 _upper;};
extern T174 M174;
struct S269{T2 _id;T0* _name;T0* _patterns;T0* _bol_patterns;T6 _is_exclusive;T6 _has_eof;};
extern T269 M269;
struct S478{Tid id;T0* _parameters;};
extern T478 M478;
struct S442{Tid id;T0* _parameters;};
extern T442 M442;
struct S325{T328 _storage;T2 _capacity;T2 _upper;};
extern T325 M325;
struct S516{Tid id;T0* _parameters;};
extern T516 M516;
struct S73{T2 _id;T0* _action;T0* _pattern;T2 _line_nb;T2 _trail_count;T2 _head_count;T2 _line_count;T2 _column_count;T6 _is_useful;T6 _has_trail_context;};
extern T73 M73;
struct S344{T6 _after;T6 _before;T0* _container;T0* _current_cell;T0* _next_cursor;};
extern T344 M344;
struct S489{T2 _count;T2 _capacity;T0* _storage;T0* _special_;};
extern T489 M489;
struct S262{T0* _container;T2 _position;T0* _next_cursor;};
extern T262 M262;
struct S324{T2 _count;T2 _capacity;T0* _storage;T0* _special_routines;T0* _internal_cursor;};
extern T324 M324;
struct S384{T2 _yy_start_state;T2 _yy_column;T0* _yytable;T0* _yycheck;T0* _yytypes1;T0* _yytypes2;T6 _yy_lookahead_needed;T2 _yyerrstatus;T2 _column;T0* _yy_content;T2 _yy_last_accepting_state;T2 _yy_last_accepting_cpos;T0* _yydefgoto;T0* _yy_content_area;T2 _yy_start;T0* _yydefact;T2 _yy_more_len;T0* _yyss;T2 _yyssp;T2 _position;T0* _yyr1;T0* _yypact;T0* _yypgoto;T0* _input_buffer;T2 _yy_end;T2 _yy_position;T2 _error_count;T2 _last_token;T2 _line;T0* _yytranslate;T2 _yy_line;T6 _yy_more_flag;T2 _yy_parsing_status;T0* _yy_nxt;T0* _yy_chk;T0* _yy_def;T0* _yy_ec;T0* _yy_accept;T0* _yy_acclist;T2 _yy_state_count;T2 _yy_looking_for_trail_begin;T0* _error_handler;T2 _line_nb;T2 _nb_open_brackets;T0* _pending_rules;T0* _action_factory;T0* _options_overrider;T0* _rule;T6 _has_trail_context;T2 _singleton_line;T2 _singleton_column;T2 _singleton_count;T0* _old_singleton_lines;T0* _old_singleton_counts;T2 _series_line;T2 _series_count;T0* _old_regexp_columns;T2 _head_column;T2 _trail_count;T0* _last_string_value;T0* _yy_base;T6 _yy_rejected;T2 _yy_full_state;T6 _successful;T0* _description;T0* _last_string;T2 _regexp_line;T0* _old_regexp_lines;T0* _last_any_value;T0* _yy_meta;T2 _yy_lp;T2 _yy_full_lp;T0* _character_classes;T0* _start_condition_stack;T6 _in_trail_context;T0* _old_singleton_columns;T2 _series_column;T2 _regexp_column;T2 _regexp_count;T0* _old_regexp_counts;T2 _head_line;T2 _head_count;T0* _last_lx_symbol_class_value;T0* _yy_state_stack;T2 _yy_full_match;T2 _rule_line_nb;T0* _name_definitions;T0* _yyvs1;T2 _yyvsc1;T2 _yyvsp1;T0* _yyspecial_routines1;T0* _yyvs2;T2 _yyvsc2;T2 _yyvsp2;T0* _yyspecial_routines2;T0* _yyvs3;T2 _yyvsc3;T2 _yyvsp3;T0* _yyspecial_routines3;T0* _yyvs4;T2 _yyvsc4;T2 _yyvsp4;T0* _yyspecial_routines4;T0* _yyvs5;T2 _yyvsc5;T2 _yyvsp5;T0* _yyspecial_routines5;T2 _last_integer_value;};
extern T384 M384;
struct S306{Tid id;T2 _position;T0* _container;};
extern T306 M306;
struct S7{Tid id;T9 _storage;T2 _count;T2 _capacity;};
extern T7 M7;
struct S480{Tid id;T0* _parameters;};
extern T480 M480;
struct S410{Tid id;T0* _content;T2 _count;T2 _capacity;T2 _position;T2 _column;T2 _line;T2 _index;T6 _beginning_of_line;T6 _filled;};
extern T410 M410;
struct S184{Tid id;T0* _container;T6 _after;T6 _before;T0* _current_cell;T0* _next_cursor;};
extern T184 M184;
struct S275{T278 _storage;T2 _capacity;T2 _upper;};
extern T275 M275;
struct S472{T0* _container;T2 _position;T0* _next_cursor;};
extern T472 M472;
struct S371{T0* _container;};
extern T371 M371;
struct S490{Tid id;T0* _parameters;};
extern T490 M490;
struct S93{Tid id;T0* _equality_tester;T2 _count;T2 _capacity;T0* _storage;T0* _special_routines;T0* _internal_cursor;};
extern T93 M93;
struct S441{Tid id;T0* _parameters;};
extern T441 M441;
extern T461 M461;
struct S479{Tid id;T0* _parameters;};
extern T479 M479;
struct S446{Tid id;T0* _parameters;};
extern T446 M446;
struct S188{T2 _count;T2 _capacity;T0* _storage;T0* _special_routines;T0* _internal_cursor;};
extern T188 M188;
extern T153 M153;
struct S217{T171 _storage;T2 _capacity;T2 _upper;};
extern T217 M217;
struct S419{Tid id;T0* _parameters;};
extern T419 M419;
struct S237{Tid id;T0* _target;};
extern T237 M237;
struct S374{Tid id;T0* _parameters;};
extern T374 M374;
struct S418{Tid id;T0* _parameters;};
extern T418 M418;
struct S59{Tid id;T2 _id;T0* _states;T0* _accepted_rules;T0* _accepted_head_rules;T0* _transitions;T2 _code;};
extern T59 M59;
struct S420{Tid id;T0* _parameters;};
extern T420 M420;
struct S156{Tid id;T9 _storage;T2 _count;T2 _capacity;T2 _byte_count;T2 _last_byte_index_input;T2 _last_byte_index_result;};
extern T156 M156;
struct S228{Tid id;T2 _count;T0* _storage;};
extern T228 M228;
struct S200{T203 _storage;T2 _capacity;T2 _upper;};
extern T200 M200;
struct S429{Tid id;T0* _equality_tester;T2 _count;T2 _capacity;T2 _last_position;T2 _modulus;T2 _free_slot;T2 _position;T2 _slots_position;T2 _clashes_previous_position;T2 _found_position;T0* _internal_cursor;T0* _key_equality_tester;T0* _items;T0* _keys;T0* _clashes;T0* _slots;T0* _special_item_routines;T0* _special_key_routines;};
extern T429 M429;
struct S219{Tid id;T0* _parameters;};
extern T219 M219;
struct S212{T0* _container;};
extern T212 M212;
struct S409{Tid id;T0* _content;T2 _count;T2 _capacity;T2 _position;T2 _column;T2 _line;T2 _index;T6 _beginning_of_line;T6 _filled;T6 _interactive;T0* _file;T6 _end_of_file;};
extern T409 M409;
struct S176{Tid id;T2 _buffer_position;T9 _buffer;T2 _capacity;T0* _name;};
extern T176 M176;
struct S445{Tid id;T0* _parameters;};
extern T445 M445;
struct S416{Tid id;T0* _name;};
extern T416 M416;
struct S169{T171 _storage;T2 _capacity;T2 _upper;T2 _lower;};
extern T169 M169;
struct S147{T87 _storage;T2 _capacity;T2 _upper;};
extern T147 M147;
struct S286{Tid id;T0* _equality_tester;T2 _count;T2 _capacity;T2 _last_position;T2 _modulus;T2 _free_slot;T2 _position;T2 _slots_position;T2 _clashes_previous_position;T2 _found_position;T0* _internal_cursor;T0* _key_equality_tester;T0* _items;T0* _keys;T0* _clashes;T0* _slots;T0* _special_item_routines;T0* _special_key_routines;};
extern T286 M286;
struct S434{Tid id;T0* _parameters;};
extern T434 M434;
struct S118{T120 _storage;T2 _capacity;T2 _upper;T2 _lower;};
extern T118 M118;
struct S320{T2 _state_id;T2 _symbol;T2 _target_id;T2 _default_id;};
extern T320 M320;
struct S493{Tid id;T0* _comparator;};
extern T493 M493;
struct S185{Tid id;T2 _count;T0* _first_cell;T0* _last_cell;T0* _internal_cursor;};
extern T185 M185;
struct S221{Tid id;T0* _yy_accept;T0* _yy_ec;T0* _yy_rules;T0* _yy_eof_rules;T0* _yy_start_conditions;T2 _yynb_rules;T2 _yyend_of_buffer;T2 _yynull_equiv_class;T6 _yyline_used;T6 _yyposition_used;T0* _states;T0* _input_filename;T0* _eiffel_header;T6 _bol_needed;T6 _pre_action_used;T6 _post_action_used;T6 _post_eof_action_used;T0* _yy_nxt;T0* _yy_chk;T0* _yy_def;T0* _yy_acclist;T2 _yyjam_state;T2 _yyjam_base;T2 _start_states_count;T2 _maximum_symbol;T2 _backing_up_count;T0* _yy_base;T6 _yyreject_used;T0* _partitions;T0* _eiffel_code;T6 _pre_eof_action_used;T6 _line_pragma;T2 _characters_count;T2 _array_size;T6 _actions_separated;T6 _inspect_used;T2 _yytemplate_mark;T6 _yyvariable_trail_context;T2 _minimum_symbol;T0* _yy_meta;T0* _meta_equiv_classes;T6 _meta_equiv_classes_used;T0* _protos;T0* _templates;T0* _singletons;T2 _first_free;T2 _table_end;T2 _templates_count;};
extern T221 M221;
struct S437{T0* _equality_tester;T2 _count;T2 _capacity;T2 _last_position;T2 _modulus;T2 _free_slot;T2 _position;T2 _slots_position;T2 _clashes_previous_position;T2 _found_position;T0* _internal_cursor;T0* _key_equality_tester;T0* _items;T0* _keys;T0* _clashes;T0* _slots;T0* _special_item_routines;T0* _special_key_routines;};
extern T437 M437;
struct S329{T0* _container;T6 _after;T6 _before;T0* _current_cell;T0* _next_cursor;};
extern T329 M329;
struct S177{T2 _buffer_position;T9 _buffer;T2 _capacity;};
extern T177 M177;
struct S109{Tid id;T0* _comparator;};
extern T109 M109;
struct S408{Tid id;T0* _parameters;};
extern T408 M408;
struct S491{Tid id;T0* _parameters;};
extern T491 M491;
struct S172{T0* _program_name;};
extern T172 M172;
struct S91{Tid id;T0* _equality_tester;T2 _count;T2 _capacity;T0* _storage;T0* _special_routines;T0* _internal_cursor;};
extern T91 M91;
struct S142{T0* _container;};
extern T142 M142;
struct S435{Tid id;T0* _parameters;};
extern T435 M435;
struct S316{T0* _container;T2 _position;T0* _next_cursor;};
extern T316 M316;
/*
-- This file is  free  software, which  comes  along  with  SmartEiffel. This
-- software  is  distributed  in the hope that it will be useful, but WITHOUT
-- ANY  WARRANTY;  without  even  the  implied warranty of MERCHANTABILITY or
-- FITNESS  FOR A PARTICULAR PURPOSE. You can modify it as you want, provided
-- this header is kept unaltered, and a notification of the changes is added.
-- You  are  allowed  to  redistribute  it and sell it, alone or as a part of
-- another product.
--       Copyright (C) 1994-2002 LORIA - INRIA - U.H.P. Nancy 1 - FRANCE
--          Dominique COLNET and Suzanne COLLIN - SmartEiffel@loria.fr
--                       http://SmartEiffel.loria.fr
--
*/

/*
  This file (SmartEiffel/sys/runtime/boost.h) is automatically included when
  `run_control.boost' is true (ie. only for mode -boost).
*/
#define SE_BOOST 1
void se_print_run_time_stack (void);
void se_signal_handler(int sig);
/*
-- This file is  free  software, which  comes  along  with  SmartEiffel. This
-- software  is  distributed  in the hope that it will be useful, but WITHOUT
-- ANY  WARRANTY;  without  even  the  implied warranty of MERCHANTABILITY or
-- FITNESS  FOR A PARTICULAR PURPOSE. You can modify it as you want, provided
-- this header is kept unaltered, and a notification of the changes is added.
-- You  are  allowed  to  redistribute  it and sell it, alone or as a part of
-- another product.
--       Copyright (C) 1994-2002 LORIA - INRIA - U.H.P. Nancy 1 - FRANCE
--          Dominique COLNET and Suzanne COLLIN - SmartEiffel@loria.fr
--                       http://SmartEiffel.loria.fr
--
*/
/*
  This file (SmartEiffel/sys/runtime/exception.h) is automatically included
  when exception handling is used somewhere in the live code.
*/

#define SE_EXCEPTIONS 1

/*
  Constants from Eiffel class EXCEPTIONS :
*/
#define Check_instruction 	  1
#define Class_invariant 	  2
#define Developer_exception 	  3
#define Incorrect_inspect_value   4
#define Loop_invariant 		  5
#define Loop_variant 		  6
#define No_more_memory  	  7
#define Postcondition 		  8
#define Precondition  		  9
#define Routine_failure  	  10
#define	Os_signal		  11
#define Void_attached_to_expanded 12
#define Void_call_target 	  13
#define System_level_type_error	  14

/*
   This will be the structure of rescue contexts.  A rescue context
   will be declared for every routine that has a rescue clause.

   The `next' pointer is the address of the next rescue context if there
   is one higher up the call chain, or NULL if there is no other
   context.
*/
struct rescue_context {
  JMP_BUF jb;
#ifndef SE_BOOST
    /* To keep track of dump stack to unwind it safely
       before the LONGJMP :
    */
    struct _se_dump_stack * top_of_ds ;
#endif
  struct rescue_context *next;
};

extern struct rescue_context *rescue_context_top;
extern int internal_exception_number;
extern int original_internal_exception_number;
extern int signal_exception_number;
extern char *additional_error_message;

void setup_signal_handler(void);
void signal_exception_handler(int);
void internal_exception_handler(int);
void print_exception(void);
/*
-- This file is  free  software, which  comes  along  with  SmartEiffel. This
-- software  is  distributed  in the hope that it will be useful, but WITHOUT
-- ANY  WARRANTY;  without  even  the  implied warranty of MERCHANTABILITY or
-- FITNESS  FOR A PARTICULAR PURPOSE. You can modify it as you want, provided
-- this header is kept unaltered, and a notification of the changes is added.
-- You  are  allowed  to  redistribute  it and sell it, alone or as a part of
-- another product.
--       Copyright (C) 1994-2002 LORIA - INRIA - U.H.P. Nancy 1 - FRANCE
--          Dominique COLNET and Suzanne COLLIN - SmartEiffel@loria.fr
--                       http://SmartEiffel.loria.fr
--
*/
/*
  This file (SmartEiffel/sys/runtime/basic_io.h) is automatically
  included when some external "SmartEiffel" basic_io_* feature is used.
*/

#define basic_io_stdin (stdin)
#define basic_io_stdout (stdout)
#define basic_io_stderr (stderr)
#define basic_io_eof (EOF)
#define basic_io_text_file_read_open(p) (fopen(((char*)(p)),"r"))
#define basic_io_text_file_write_open(p) (fopen(((char*)(p)),"w"))
#define basic_io_text_file_write_append(p) (fopen(((char*)(p)),"a"))
#define basic_io_text_file_read_write_open(p) (fopen(((char*)(p)),"r+"))
#define basic_io_text_file_read_write_append(p) (fopen(((char*)(p)),"a+"))
#define basic_io_binary_file_read_open(p) (fopen(((char*)(p)),"rb"))
#define basic_io_binary_file_write_open(p) (fopen(((char*)(p)),"wb"))
#define basic_io_binary_file_write_append(p) (fopen(((char*)(p)),"ab"))
#define basic_io_fclose(p) (fclose((FILE*)(p)))
#define basic_io_flush(p) (fflush((FILE*)(p)))
#define basic_io_getc(f) (getc(((FILE*)(f))))
#define basic_io_putc(b, f) (putc((b),((FILE*)(f))))
#define basic_io_fread(b, n, f) (fread((void *)(b),(size_t)(1), (size_t)(n),(FILE*)(f)))
#define basic_io_fwrite(b, n, f) (fwrite((void *)(b),(size_t)(1), (size_t)(n),(FILE*)(f)))
#define basic_io_feof(f) (feof(((FILE*)(f))))
#define basic_io_rename(o, n) (rename(((char*)(o)),((char*)(n))))
#define basic_io_remove(f) (remove(((char*)(f))))

#if defined __USE_POSIX || defined __unix__ || defined _POSIX_C_SOURCE
#  define basic_io_read_stdin(b, s) (read(STDIN_FILENO, b, s))
#else
  extern int basic_io_read_stdin(char *buffer, int size);
#endif

/*
-- This file is  free  software, which  comes  along  with  SmartEiffel. This
-- software  is  distributed  in the hope that it will be useful, but WITHOUT
-- ANY  WARRANTY;  without  even  the  implied warranty of MERCHANTABILITY or
-- FITNESS  FOR A PARTICULAR PURPOSE. You can modify it as you want, provided
-- this header is kept unaltered, and a notification of the changes is added.
-- You  are  allowed  to  redistribute  it and sell it, alone or as a part of
-- another product.
--       Copyright (C) 1994-2002 LORIA - INRIA - U.H.P. Nancy 1 - FRANCE
--          Dominique COLNET and Suzanne COLLIN - SmartEiffel@loria.fr
--                       http://SmartEiffel.loria.fr
--
*/
/*
  This file (SmartEiffel/sys/runtime/basic_sprintf.h) is automatically
  included when the external "SmartEiffel" basic_sprintf feature is used.
*/

#define basic_sprintf_pointer(buffer, pointer) sprintf((char*)(buffer),"%p",pointer)

void basic_sprintf_double(EIF_CHARACTER* b, int f, double d);
extern T0*oBC8string_buffer;
/*POINTER*/
void r8append_in(T8 C,T0* a1);
/*BOOLEAN*/
T6 r6_ix_and(T6 C,T6 a1);
/*BOOLEAN*/
T6 r6_px_not(T6 C);
/*BOOLEAN*/
T6 r6_ix_or(T6 C,T6 a1);
/*CHARACTER*/
T0* r3out(T3 C);
/*CHARACTER*/
T6 r3is_digit(T3 C);
/*CHARACTER*/
T6 r3is_separator(T3 C);
/*CHARACTER*/
void r3out_in_tagged_out_memory(T3 C);
/*CHARACTER*/
T6 r3_ix_6061(T3 C,T3 a1);
/*CHARACTER*/
T1 r3value(T3 C);
/*CHARACTER*/
T1 r3decimal_value(T3 C);
/*CHARACTER*/
T6 r3_ix_6261(T3 C,T3 a1);
/*CHARACTER*/
T3 r3to_lower(T3 C);
/*CHARACTER*/
T6 r3_ix_60(T3 C,T3 a1);
/*CHARACTER*/
T6 r3_ix_62(T3 C,T3 a1);
extern T0*oBC19tagged_out_memory;
/*INTEGER*/
T0* r2out(T2 C);
/*INTEGER*/
T2 r2max(T2 C,T2 a1);
/*INTEGER*/
T2 r2min(T2 C,T2 a1);
/*INTEGER*/
T2 r2hash_code(T2 C);
/*INTEGER*/
void r2append_in(T2 C,T0* a1);
/*INTEGER_64*/
T3 r11digit(T11 C);
/*NATIVE_ARRAY[DS_BILINKABLE[INTEGER]]*/
void r233set_all_with(T233 C,T0* a1,T2 a2);
/*NATIVE_ARRAY[DS_PAIR[DP_COMMAND,DS_LINKED_LIST[LX_RULE]]]*/
void r203clear(T203 C,T2 a1,T2 a2);
/*NATIVE_ARRAY[LX_SYMBOL_CLASS]*/
T400 r400realloc(T400 C,T2 a1,T2 a2);
/*NATIVE_ARRAY[LX_SYMBOL_CLASS]*/
void r400set_all_with(T400 C,T0* a1,T2 a2);
/*NATIVE_ARRAY[LX_SYMBOL_CLASS]*/
void r400clear(T400 C,T2 a1,T2 a2);
/*NATIVE_ARRAY[LX_SYMBOL_CLASS]*/
void r400copy_from(T400 C,T400 a1,T2 a2);
/*NATIVE_ARRAY[LX_START_CONDITION]*/
T278 r278realloc(T278 C,T2 a1,T2 a2);
/*NATIVE_ARRAY[LX_START_CONDITION]*/
void r278clear(T278 C,T2 a1,T2 a2);
/*NATIVE_ARRAY[LX_START_CONDITION]*/
void r278copy_from(T278 C,T278 a1,T2 a2);
/*NATIVE_ARRAY[BOOLEAN]*/
void r82set_all_with(T82 C,T6 a1,T2 a2);
/*NATIVE_ARRAY[LX_NFA]*/
T274 r274realloc(T274 C,T2 a1,T2 a2);
/*NATIVE_ARRAY[LX_NFA]*/
void r274set_all_with(T274 C,T0* a1,T2 a2);
/*NATIVE_ARRAY[LX_NFA]*/
void r274clear(T274 C,T2 a1,T2 a2);
/*NATIVE_ARRAY[LX_NFA]*/
void r274copy_from(T274 C,T274 a1,T2 a2);
/*NATIVE_ARRAY[STRING]*/
T171 r171realloc(T171 C,T2 a1,T2 a2);
/*NATIVE_ARRAY[STRING]*/
void r171set_all_with(T171 C,T0* a1,T2 a2);
/*NATIVE_ARRAY[STRING]*/
void r171clear(T171 C,T2 a1,T2 a2);
/*NATIVE_ARRAY[STRING]*/
void r171copy_from(T171 C,T171 a1,T2 a2);
/*NATIVE_ARRAY[LX_NFA_STATE]*/
T130 r130realloc(T130 C,T2 a1,T2 a2);
/*NATIVE_ARRAY[LX_NFA_STATE]*/
void r130clear(T130 C,T2 a1,T2 a2);
/*NATIVE_ARRAY[LX_NFA_STATE]*/
void r130copy_from(T130 C,T130 a1,T2 a2);
/*NATIVE_ARRAY[LX_RULE]*/
T120 r120realloc(T120 C,T2 a1,T2 a2);
/*NATIVE_ARRAY[LX_RULE]*/
void r120set_all_with(T120 C,T0* a1,T2 a2);
/*NATIVE_ARRAY[LX_RULE]*/
void r120clear(T120 C,T2 a1,T2 a2);
/*NATIVE_ARRAY[LX_RULE]*/
void r120copy_from(T120 C,T120 a1,T2 a2);
/*NATIVE_ARRAY[LX_SINGLETON]*/
void r328clear(T328 C,T2 a1,T2 a2);
/*NATIVE_ARRAY[CHARACTER]*/
void r9copy_slice(T9 C,T2 a1,T9 a2,T2 a3,T2 a4);
/*NATIVE_ARRAY[CHARACTER]*/
T9 r9realloc(T9 C,T2 a1,T2 a2);
/*NATIVE_ARRAY[CHARACTER]*/
T2 r9fast_occurrences(T9 C,T3 a1,T2 a2);
/*NATIVE_ARRAY[CHARACTER]*/
void r9set_all_with(T9 C,T3 a1,T2 a2);
/*NATIVE_ARRAY[CHARACTER]*/
T6 r9fast_memcmp(T9 C,T9 a1,T2 a2);
/*NATIVE_ARRAY[CHARACTER]*/
void r9copy_at(T9 C,T2 a1,T9 a2,T2 a3);
/*NATIVE_ARRAY[CHARACTER]*/
void r9clear(T9 C,T2 a1,T2 a2);
/*NATIVE_ARRAY[CHARACTER]*/
void r9copy_from(T9 C,T9 a1,T2 a2);
/*NATIVE_ARRAY[INTEGER]*/
T90 r90realloc(T90 C,T2 a1,T2 a2);
/*NATIVE_ARRAY[INTEGER]*/
void r90move(T90 C,T2 a1,T2 a2,T2 a3);
/*NATIVE_ARRAY[INTEGER]*/
void r90set_all_with(T90 C,T2 a1,T2 a2);
/*NATIVE_ARRAY[INTEGER]*/
void r90clear(T90 C,T2 a1,T2 a2);
/*NATIVE_ARRAY[INTEGER]*/
void r90copy_from(T90 C,T90 a1,T2 a2);
/*NATIVE_ARRAY[LX_DFA_STATE]*/
T87 r87realloc(T87 C,T2 a1,T2 a2);
/*NATIVE_ARRAY[LX_DFA_STATE]*/
void r87set_all_with(T87 C,T0* a1,T2 a2);
/*NATIVE_ARRAY[LX_DFA_STATE]*/
void r87clear(T87 C,T2 a1,T2 a2);
/*NATIVE_ARRAY[LX_DFA_STATE]*/
void r87copy_from(T87 C,T87 a1,T2 a2);
/*NATIVE_ARRAY[ANY]*/
T404 r404realloc(T404 C,T2 a1,T2 a2);
/*NATIVE_ARRAY[ANY]*/
void r404set_all_with(T404 C,T0* a1,T2 a2);
/*NATIVE_ARRAY[ANY]*/
void r404clear(T404 C,T2 a1,T2 a2);
/*NATIVE_ARRAY[ANY]*/
void r404copy_from(T404 C,T404 a1,T2 a2);
/*STRING*/
void r7copy(T7* C,T0* a1);
/*STRING*/
T0* r7substring(T7* C,T2 a1,T2 a2);
/*STRING*/
T2 r7occurrences(T7* C,T3 a1);
/*STRING*/
T2 r7item_code(T7* C,T2 a1);
/*STRING*/
T6 r7is_equal(T7* C,T0* a1);
/*STRING*/
T3 r7item(T7* C,T2 a1);
/*STRING*/
T6 r7valid_index(T7* C,T2 a1);
/*STRING*/
void r7append(T7* C,T0* a1);
/*STRING*/
T6 r7se_assigned_from(T0* a1);
/*STRING*/
void r7make_from_string(T7* C,T0* a1);
/*STRING*/
T6 r7same_type(T7* C,T0* a1);
/*STRING*/
void r7remove_tail(T7* C,T2 a1);
/*STRING*/
void r7make(T7* C,T2 a1);
/*STRING*/
void r7append_string(T7* C,T0* a1);
/*STRING*/
void r7make_filled(T7* C,T3 a1,T2 a2);
/*STRING*/
T0* r7string(T7* C);
/*STRING*/
void r7extend(T7* C,T3 a1);
/*STRING*/
T2 r7hash_code(T7* C);
/*STRING*/
T6 r7conforms_to(T7* C,T0* a1);
/*STRING*/
T0* r7as_lower(T7* C);
/*STRING*/
T2 r7to_integer(T7* C);
/*STRING*/
void r7append_character(T7* C,T3 a1);
/*STRING*/
void r7resize(T7* C,T2 a1);
/*STRING*/
T8 r7to_external(T7* C);
/*STRING*/
void r7to_lower(T7* C);
/*STRING*/
T0* r7twin(T7* C);
/*STRING*/
T0* r7_ix_43(T7* C,T0* a1);
/*STRING*/
void r7swap(T7* C,T2 a1,T2 a2);
/*ARRAY[DS_BILINKABLE[INTEGER]]*/
T2 r230count(T230* C);
/*ARRAY[DS_BILINKABLE[INTEGER]]*/
T0* r230item(T230* C,T2 a1);
/*ARRAY[DS_BILINKABLE[INTEGER]]*/
T6 r230valid_index(T230* C,T2 a1);
/*ARRAY[DS_BILINKABLE[INTEGER]]*/
void r230make(T230* C,T2 a1,T2 a2);
/*ARRAY[INTEGER]*/
T2 r88count(T88* C);
/*ARRAY[INTEGER]*/
T2 r88item(T88* C,T2 a1);
/*ARRAY[INTEGER]*/
T6 r88valid_index(T88* C,T2 a1);
/*ARRAY[INTEGER]*/
void r88make(T88* C,T2 a1,T2 a2);
/*ARRAY[INTEGER]*/
void r88resize(T88* C,T2 a1,T2 a2);
/*ARRAY[LX_DFA_STATE]*/
void r85copy(T85* C,T0* a1);
/*ARRAY[LX_DFA_STATE]*/
T2 r85count(T85* C);
/*ARRAY[LX_DFA_STATE]*/
T0* r85item(T85* C,T2 a1);
/*ARRAY[LX_DFA_STATE]*/
T6 r85valid_index(T85* C,T2 a1);
/*ARRAY[LX_DFA_STATE]*/
void r85make(T85* C,T2 a1,T2 a2);
/*ARRAY[LX_DFA_STATE]*/
T0* r85twin(T85* C);
/*ARRAY[BOOLEAN]*/
T6 r80item(T80* C,T2 a1);
/*ARRAY[BOOLEAN]*/
T6 r80valid_index(T80* C,T2 a1);
/*ARRAY[BOOLEAN]*/
void r80make(T80* C,T2 a1,T2 a2);
/*ARRAY[ARRAY[INTEGER]]*/
T0* r529item(T529* C,T2 a1);
/*FIXED_ARRAY[STRING]*/
T6 r174valid_index(T174* C,T2 a1);
/*FIXED_ARRAY[STRING]*/
void r174make(T174* C,T2 a1);
/*ARRAY[STRING]*/
T2 r169count(T169* C);
/*ARRAY[STRING]*/
T0* r169item(T169* C,T2 a1);
/*ARRAY[STRING]*/
T6 r169valid_index(T169* C,T2 a1);
/*ARRAY[STRING]*/
void r169make(T169* C,T2 a1,T2 a2);
/*ARRAY[LX_RULE]*/
T2 r118count(T118* C);
/*ARRAY[LX_RULE]*/
T0* r118item(T118* C,T2 a1);
/*ARRAY[LX_RULE]*/
T6 r118valid_index(T118* C,T2 a1);
/*ARRAY[LX_RULE]*/
void r118make(T118* C,T2 a1,T2 a2);
/*DS_BUBBLE_SORTER[LX_NFA_STATE]*/
void r250subsort_with_comparator(T0* a1,T0* a2,T2 a3,T2 a4);
/*DS_BUBBLE_SORTER[LX_NFA_STATE]*/
void r250sort_with_comparator(T0* a1,T0* a2);
/*SPECIAL[ANY]*/
T6 r401valid_index(T401* C,T2 a1);
/*SPECIAL[ANY]*/
void r401make(T401* C,T2 a1);
/*SPECIAL[ANY]*/
T0* r401resize(T401* C,T2 a1);
/*SPECIAL[ANY]*/
void r401array_resize(T401* C,T2 a1);
/*KL_SPECIAL_ROUTINES[ANY]*/
T0* r405make(T2 a1);
/*KL_SPECIAL_ROUTINES[ANY]*/
T0* r405resize(T0* a1,T2 a2);
/*DS_ARRAYED_LIST[STRING]*/
T2 r216new_capacity(T2 a1);
/*DS_ARRAYED_LIST[STRING]*/
T6 r216extendible(T216* C,T2 a1);
/*DS_ARRAYED_LIST[STRING]*/
void r216make(T216* C,T2 a1);
/*DS_ARRAYED_LIST[STRING]*/
void r216resize(T216* C,T2 a1);
/*DS_ARRAYED_LIST[STRING]*/
void r216force_last(T216* C,T0* a1);
/*DS_ARRAYED_LIST[STRING]*/
T0* r216new_cursor(T216* C);
/*SPECIAL[LX_NFA]*/
T6 r271valid_index(T271* C,T2 a1);
/*SPECIAL[LX_NFA]*/
void r271make(T271* C,T2 a1);
/*SPECIAL[LX_NFA]*/
T0* r271resize(T271* C,T2 a1);
/*SPECIAL[LX_NFA]*/
void r271array_resize(T271* C,T2 a1);
/*LX_TRANSITION_TABLE[LX_DFA_STATE]*/
T2 r81maximum_label(T81* C);
/*LX_TRANSITION_TABLE[LX_DFA_STATE]*/
void r81copy(T81* C,T0* a1);
/*LX_TRANSITION_TABLE[LX_DFA_STATE]*/
T2 r81minimum_label(T81* C);
/*LX_TRANSITION_TABLE[LX_DFA_STATE]*/
void r81set_target(T81* C,T0* a1,T2 a2);
/*LX_TRANSITION_TABLE[LX_DFA_STATE]*/
T0* r81clone(T0* a1);
/*LX_TRANSITION_TABLE[LX_DFA_STATE]*/
void r81make(T81* C,T2 a1,T2 a2);
/*LX_TRANSITION_TABLE[LX_DFA_STATE]*/
T0* r81twin(T81* C);
/*LX_TRANSITION_TABLE[LX_DFA_STATE]*/
T0* r81difference(T81* C,T0* a1,T0* a2);
/*DS_BILINKABLE[INTEGER]*/
void r231put_left(T231* C,T0* a1);
/*DS_BILINKABLE[INTEGER]*/
void r231put_right(T231* C,T0* a1);
/*KL_SPECIAL_ROUTINES[LX_START_CONDITION]*/
T0* r421make(T2 a1);
/*KL_SPECIAL_ROUTINES[LX_START_CONDITION]*/
T0* r421resize(T0* a1,T2 a2);
/*SPECIAL[INTEGER]*/
T6 r96valid_index(T96* C,T2 a1);
/*SPECIAL[INTEGER]*/
void r96make(T96* C,T2 a1);
/*SPECIAL[INTEGER]*/
T0* r96resize(T96* C,T2 a1);
/*SPECIAL[INTEGER]*/
void r96array_resize(T96* C,T2 a1);
/*SPECIAL[INTEGER]*/
void r96with_capacity(T96* C,T2 a1);
/*SPECIAL[INTEGER]*/
void r96from_collection(T96* C,T0* a1);
/*SPECIAL[LX_SYMBOL_CLASS]*/
T6 r397valid_index(T397* C,T2 a1);
/*SPECIAL[LX_SYMBOL_CLASS]*/
void r397make(T397* C,T2 a1);
/*SPECIAL[LX_SYMBOL_CLASS]*/
T0* r397resize(T397* C,T2 a1);
/*SPECIAL[LX_SYMBOL_CLASS]*/
void r397array_resize(T397* C,T2 a1);
/*LX_SYMBOL_CLASS_TRANSITION[LX_NFA_STATE]*/
T6 r463labeled(T463* C,T2 a1);
/*LX_SYMBOL_CLASS_TRANSITION[LX_NFA_STATE]*/
T6 r463recordable(T463* C,T0* a1);
/*LX_SYMBOL_CLASS_TRANSITION[LX_NFA_STATE]*/
void r463make(T463* C,T0* a1,T0* a2);
/*LX_SYMBOL_CLASS_TRANSITION[LX_NFA_STATE]*/
T0* r463twin(T463* C);
/*LX_SYMBOL_CLASS_TRANSITION[LX_NFA_STATE]*/
void r463record(T463* C,T0* a1);
/*KL_SPECIAL_ROUTINES[LX_NFA_STATE]*/
T0* r254make(T2 a1);
/*KL_SPECIAL_ROUTINES[LX_NFA_STATE]*/
T0* r254resize(T0* a1,T2 a2);
/*KL_EQUALITY_TESTER[STRING]*/
T6 r433test(T0* a1,T0* a2);
/*DS_BILINKABLE[LX_PROTO]*/
void r358put_right(T358* C,T0* a1);
/*KL_SPECIAL_ROUTINES[LX_SINGLETON]*/
T0* r373make(T2 a1);
/*LX_SYMBOL_TRANSITION[LX_NFA_STATE]*/
T6 r484recordable(T484* C,T0* a1);
/*LX_SYMBOL_TRANSITION[LX_NFA_STATE]*/
void r484make(T484* C,T2 a1,T0* a2);
/*LX_SYMBOL_TRANSITION[LX_NFA_STATE]*/
T0* r484twin(T484* C);
/*LX_SYMBOL_TRANSITION[LX_NFA_STATE]*/
void r484record(T484* C,T0* a1);
/*KL_EQUALITY_TESTER[LX_NFA_STATE]*/
T6 r126test(T0* a1,T0* a2);
/*DS_PAIR[DP_COMMAND,DS_LINKED_LIST[LX_RULE]]*/
void r187make(T187* C,T0* a1,T0* a2);
/*KL_COMPARABLE_COMPARATOR[LX_NFA_STATE]*/
T6 r249less_than(T0* a1,T0* a2);
/*DS_HASH_TABLE_CURSOR[STRING,STRING]*/
void r511make(T511* C,T0* a1);
/*KL_COMPARABLE_COMPARATOR[INTEGER]*/
T6 r108less_than(T2 a1,T2 a2);
/*KL_SPECIAL_ROUTINES[LX_NFA]*/
T0* r290make(T2 a1);
/*KL_SPECIAL_ROUTINES[LX_NFA]*/
T0* r290resize(T0* a1,T2 a2);
/*DS_BUBBLE_SORTER[LX_RULE]*/
void r242subsort_with_comparator(T0* a1,T0* a2,T2 a3,T2 a4);
/*DS_BUBBLE_SORTER[LX_RULE]*/
void r242sort_with_comparator(T0* a1,T0* a2);
/*DS_ARRAYED_LIST[LX_RULE]*/
T2 r74new_capacity(T2 a1);
/*DS_ARRAYED_LIST[LX_RULE]*/
void r74clear_items(T74* C,T2 a1,T2 a2);
/*DS_ARRAYED_LIST[LX_RULE]*/
T6 r74extendible(T74* C,T2 a1);
/*DS_ARRAYED_LIST[LX_RULE]*/
void r74wipe_out(T74* C);
/*DS_ARRAYED_LIST[LX_RULE]*/
void r74move_cursors_right(T74* C,T2 a1,T2 a2);
/*DS_ARRAYED_LIST[LX_RULE]*/
void r74put(T74* C,T0* a1,T2 a2);
/*DS_ARRAYED_LIST[LX_RULE]*/
void r74move_all_cursors_after(T74* C);
/*DS_ARRAYED_LIST[LX_RULE]*/
void r74force_first(T74* C,T0* a1);
/*DS_ARRAYED_LIST[LX_RULE]*/
void r74make(T74* C,T2 a1);
/*DS_ARRAYED_LIST[LX_RULE]*/
T6 r74has(T74* C,T0* a1);
/*DS_ARRAYED_LIST[LX_RULE]*/
void r74move_right(T74* C,T2 a1,T2 a2);
/*DS_ARRAYED_LIST[LX_RULE]*/
void r74resize(T74* C,T2 a1);
/*DS_ARRAYED_LIST[LX_RULE]*/
void r74force_last(T74* C,T0* a1);
/*DS_ARRAYED_LIST[LX_RULE]*/
T0* r74new_cursor(T74* C);
/*DS_ARRAYED_LIST[LX_RULE]*/
void r74put_last(T74* C,T0* a1);
/*DS_ARRAYED_LIST_CURSOR[LX_RULE]*/
T6 r256valid_position(T256* C,T2 a1);
/*DS_ARRAYED_LIST[LX_DFA_STATE]*/
T6 r72valid_cursor(T72* C,T0* a1);
/*DS_ARRAYED_LIST[LX_DFA_STATE]*/
T6 r72extendible(T72* C,T2 a1);
/*DS_ARRAYED_LIST[LX_DFA_STATE]*/
void r72remove_traversing_cursor(T72* C,T0* a1);
/*DS_ARRAYED_LIST[LX_DFA_STATE]*/
void r72cursor_go_after(T72* C,T0* a1);
/*DS_ARRAYED_LIST[LX_DFA_STATE]*/
void r72add_traversing_cursor(T72* C,T0* a1);
/*DS_ARRAYED_LIST[LX_DFA_STATE]*/
T6 r72cursor_before(T0* a1);
/*DS_ARRAYED_LIST[LX_DFA_STATE]*/
void r72make(T72* C,T2 a1);
/*DS_ARRAYED_LIST[LX_DFA_STATE]*/
T6 r72cursor_after(T0* a1);
/*DS_ARRAYED_LIST[LX_DFA_STATE]*/
T2 r72cursor_index(T72* C,T0* a1);
/*DS_ARRAYED_LIST[LX_DFA_STATE]*/
void r72cursor_search_forth(T72* C,T0* a1,T0* a2);
/*DS_ARRAYED_LIST[LX_DFA_STATE]*/
void r72resize(T72* C,T2 a1);
/*DS_ARRAYED_LIST[LX_DFA_STATE]*/
void r72cursor_start(T72* C,T0* a1);
/*DS_ARRAYED_LIST[LX_DFA_STATE]*/
T0* r72new_cursor(T72* C);
/*DS_ARRAYED_LIST[LX_DFA_STATE]*/
T6 r72is_full(T72* C);
/*DS_ARRAYED_LIST[LX_DFA_STATE]*/
void r72put_last(T72* C,T0* a1);
/*DS_ARRAYED_LIST[LX_DFA_STATE]*/
T6 r72cursor_off(T0* a1);
/*DS_ARRAYED_LIST[LX_NFA]*/
T2 r270new_capacity(T2 a1);
/*DS_ARRAYED_LIST[LX_NFA]*/
T6 r270extendible(T270* C,T2 a1);
/*DS_ARRAYED_LIST[LX_NFA]*/
void r270make(T270* C,T2 a1);
/*DS_ARRAYED_LIST[LX_NFA]*/
void r270resize(T270* C,T2 a1);
/*DS_ARRAYED_LIST[LX_NFA]*/
void r270force_last(T270* C,T0* a1);
/*DS_ARRAYED_LIST[LX_NFA]*/
T0* r270new_cursor(T270* C);
/*SPECIAL[LX_RULE]*/
T6 r223valid_index(T223* C,T2 a1);
/*SPECIAL[LX_RULE]*/
void r223make(T223* C,T2 a1);
/*SPECIAL[LX_RULE]*/
T0* r223resize(T223* C,T2 a1);
/*SPECIAL[LX_RULE]*/
void r223array_resize(T223* C,T2 a1);
/*KL_SPECIAL_ROUTINES[LX_SYMBOL_CLASS]*/
T0* r407make(T2 a1);
/*KL_SPECIAL_ROUTINES[LX_SYMBOL_CLASS]*/
T0* r407resize(T0* a1,T2 a2);
/*DS_HASH_TABLE_CURSOR[LX_SYMBOL_CLASS,STRING]*/
T6 r450valid_position(T450* C,T2 a1);
/*DS_HASH_TABLE_CURSOR[LX_SYMBOL_CLASS,STRING]*/
T0* r450item(T450* C);
/*DS_HASH_TABLE_CURSOR[LX_SYMBOL_CLASS,STRING]*/
T6 r450after(T450* C);
/*DS_HASH_TABLE_CURSOR[LX_SYMBOL_CLASS,STRING]*/
void r450make(T450* C,T0* a1);
/*KL_SPECIAL_ROUTINES[DS_PAIR[DP_COMMAND,DS_LINKED_LIST[LX_RULE]]]*/
T0* r214make(T2 a1);
/*SPECIAL[LX_NFA_STATE]*/
T6 r127valid_index(T127* C,T2 a1);
/*SPECIAL[LX_NFA_STATE]*/
void r127make(T127* C,T2 a1);
/*SPECIAL[LX_NFA_STATE]*/
T0* r127resize(T127* C,T2 a1);
/*SPECIAL[LX_NFA_STATE]*/
void r127array_resize(T127* C,T2 a1);
/*KL_SPECIAL_ROUTINES[LX_DFA_STATE]*/
T0* r266make(T2 a1);
/*KL_SPECIAL_ROUTINES[LX_DFA_STATE]*/
T0* r266resize(T0* a1,T2 a2);
/*SPECIAL[LX_SINGLETON]*/
T6 r325valid_index(T325* C,T2 a1);
/*SPECIAL[LX_SINGLETON]*/
void r325make(T325* C,T2 a1);
/*DS_BILINKED_LIST_CURSOR[LX_PROTO]*/
void r344set(T344* C,T0* a1,T6 a2,T6 a3);
/*DS_BILINKED_LIST_CURSOR[LX_PROTO]*/
T6 r344is_first(T344* C);
/*DS_BILINKED_LIST_CURSOR[LX_PROTO]*/
T6 r344is_last(T344* C);
/*DS_BILINKED_LIST_CURSOR[LX_PROTO]*/
void r344make(T344* C,T0* a1);
/*DS_BILINKED_LIST_CURSOR[LX_PROTO]*/
void r344set_after(T344* C);
/*KL_EQUALITY_TESTER[LX_DFA_STATE]*/
T6 r362test(T0* a1,T0* a2);
/*KL_EQUALITY_TESTER[LX_RULE]*/
T6 r319test(T0* a1,T0* a2);
/*DS_ARRAYED_STACK[INTEGER]*/
T2 r489new_capacity(T2 a1);
/*DS_ARRAYED_STACK[INTEGER]*/
T6 r489extendible(T489* C,T2 a1);
/*DS_ARRAYED_STACK[INTEGER]*/
void r489force(T489* C,T2 a1);
/*DS_ARRAYED_STACK[INTEGER]*/
T2 r489item(T489* C);
/*DS_ARRAYED_STACK[INTEGER]*/
void r489make(T489* C,T2 a1);
/*DS_ARRAYED_STACK[INTEGER]*/
void r489remove(T489* C);
/*DS_ARRAYED_STACK[INTEGER]*/
void r489resize(T489* C,T2 a1);
/*DS_ARRAYED_LIST_CURSOR[LX_NFA_STATE]*/
T6 r262valid_position(T262* C,T2 a1);
/*DS_ARRAYED_LIST_CURSOR[LX_NFA_STATE]*/
T0* r262item(T262* C);
/*DS_ARRAYED_LIST_CURSOR[LX_NFA_STATE]*/
T6 r262after(T262* C);
/*DS_ARRAYED_LIST_CURSOR[LX_NFA_STATE]*/
T6 r262off(T262* C);
/*DS_ARRAYED_LIST[LX_SINGLETON]*/
T6 r324extendible(T324* C,T2 a1);
/*DS_ARRAYED_LIST[LX_SINGLETON]*/
void r324make(T324* C,T2 a1);
/*DS_ARRAYED_LIST[LX_SINGLETON]*/
T0* r324new_cursor(T324* C);
/*DS_ARRAYED_LIST[LX_SINGLETON]*/
void r324put_last(T324* C,T0* a1);
/*DS_ARRAYED_LIST[LX_SINGLETON]*/
T6 r324is_full(T324* C);
/*DS_HASH_TABLE_CURSOR[LX_NFA,INTEGER]*/
void r306make(T306* C,T0* a1);
/*KL_SPECIAL_ROUTINES[LX_RULE]*/
T0* r255make(T2 a1);
/*KL_SPECIAL_ROUTINES[LX_RULE]*/
T0* r255resize(T0* a1,T2 a2);
/*DS_LINKED_LIST_CURSOR[LX_RULE]*/
void r184set(T184* C,T0* a1,T6 a2,T6 a3);
/*DS_LINKED_LIST_CURSOR[LX_RULE]*/
void r184make(T184* C,T0* a1);
/*SPECIAL[LX_START_CONDITION]*/
T6 r275valid_index(T275* C,T2 a1);
/*SPECIAL[LX_START_CONDITION]*/
void r275make(T275* C,T2 a1);
/*SPECIAL[LX_START_CONDITION]*/
T0* r275resize(T275* C,T2 a1);
/*SPECIAL[LX_START_CONDITION]*/
void r275array_resize(T275* C,T2 a1);
/*DS_ARRAYED_LIST_CURSOR[LX_START_CONDITION]*/
T6 r472valid_position(T472* C,T2 a1);
/*DS_ARRAYED_LIST[LX_NFA_STATE]*/
T2 r93new_capacity(T2 a1);
/*DS_ARRAYED_LIST[LX_NFA_STATE]*/
T6 r93valid_cursor(T93* C,T0* a1);
/*DS_ARRAYED_LIST[LX_NFA_STATE]*/
T6 r93extendible(T93* C,T2 a1);
/*DS_ARRAYED_LIST[LX_NFA_STATE]*/
void r93append_last(T93* C,T0* a1);
/*DS_ARRAYED_LIST[LX_NFA_STATE]*/
void r93move_cursors_right(T93* C,T2 a1,T2 a2);
/*DS_ARRAYED_LIST[LX_NFA_STATE]*/
T0* r93last(T93* C);
/*DS_ARRAYED_LIST[LX_NFA_STATE]*/
void r93put(T93* C,T0* a1,T2 a2);
/*DS_ARRAYED_LIST[LX_NFA_STATE]*/
T0* r93cursor_item(T93* C,T0* a1);
/*DS_ARRAYED_LIST[LX_NFA_STATE]*/
T6 r93is_equal(T93* C,T0* a1);
/*DS_ARRAYED_LIST[LX_NFA_STATE]*/
void r93remove_traversing_cursor(T93* C,T0* a1);
/*DS_ARRAYED_LIST[LX_NFA_STATE]*/
void r93add_traversing_cursor(T93* C,T0* a1);
/*DS_ARRAYED_LIST[LX_NFA_STATE]*/
T6 r93se_assigned_from(T0* a1);
/*DS_ARRAYED_LIST[LX_NFA_STATE]*/
T6 r93cursor_before(T0* a1);
/*DS_ARRAYED_LIST[LX_NFA_STATE]*/
T6 r93same_type(T93* C,T0* a1);
/*DS_ARRAYED_LIST[LX_NFA_STATE]*/
void r93make(T93* C,T2 a1);
/*DS_ARRAYED_LIST[LX_NFA_STATE]*/
T6 r93cursor_after(T0* a1);
/*DS_ARRAYED_LIST[LX_NFA_STATE]*/
T6 r93conforms_to(T93* C,T0* a1);
/*DS_ARRAYED_LIST[LX_NFA_STATE]*/
T6 r93has(T93* C,T0* a1);
/*DS_ARRAYED_LIST[LX_NFA_STATE]*/
void r93move_right(T93* C,T2 a1,T2 a2);
/*DS_ARRAYED_LIST[LX_NFA_STATE]*/
void r93cursor_forth(T93* C,T0* a1);
/*DS_ARRAYED_LIST[LX_NFA_STATE]*/
void r93resize(T93* C,T2 a1);
/*DS_ARRAYED_LIST[LX_NFA_STATE]*/
void r93cursor_start(T93* C,T0* a1);
/*DS_ARRAYED_LIST[LX_NFA_STATE]*/
void r93force_last(T93* C,T0* a1);
/*DS_ARRAYED_LIST[LX_NFA_STATE]*/
T0* r93new_cursor(T93* C);
/*DS_ARRAYED_LIST[LX_NFA_STATE]*/
void r93extend_last(T93* C,T0* a1);
/*DS_ARRAYED_LIST[LX_NFA_STATE]*/
void r93put_last(T93* C,T0* a1);
/*DS_ARRAYED_LIST[LX_NFA_STATE]*/
T6 r93cursor_off(T0* a1);
/*DS_ARRAYED_LIST[DS_PAIR[DP_COMMAND,DS_LINKED_LIST[LX_RULE]]]*/
T6 r188extendible(T188* C,T2 a1);
/*DS_ARRAYED_LIST[DS_PAIR[DP_COMMAND,DS_LINKED_LIST[LX_RULE]]]*/
void r188make(T188* C,T2 a1);
/*DS_ARRAYED_LIST[DS_PAIR[DP_COMMAND,DS_LINKED_LIST[LX_RULE]]]*/
T0* r188new_cursor(T188* C);
/*DS_ARRAYED_LIST[DS_PAIR[DP_COMMAND,DS_LINKED_LIST[LX_RULE]]]*/
void r188put_last(T188* C,T0* a1);
/*SPECIAL[STRING]*/
T6 r217valid_index(T217* C,T2 a1);
/*SPECIAL[STRING]*/
void r217make(T217* C,T2 a1);
/*SPECIAL[STRING]*/
T0* r217resize(T217* C,T2 a1);
/*SPECIAL[STRING]*/
void r217array_resize(T217* C,T2 a1);
/*KL_EQUALITY_TESTER[LX_START_CONDITION]*/
T6 r476test(T0* a1,T0* a2);
/*LX_EPSILON_TRANSITION[LX_NFA_STATE]*/
T0* r237twin(T237* C);
/*SPECIAL[DS_PAIR[DP_COMMAND,DS_LINKED_LIST[LX_RULE]]]*/
T6 r200valid_index(T200* C,T2 a1);
/*SPECIAL[DS_PAIR[DP_COMMAND,DS_LINKED_LIST[LX_RULE]]]*/
void r200make(T200* C,T2 a1);
/*DS_HASH_TABLE[STRING,STRING]*/
T2 r429new_capacity(T2 a1);
/*DS_HASH_TABLE[STRING,STRING]*/
void r429force(T429* C,T0* a1,T0* a2);
/*DS_HASH_TABLE[STRING,STRING]*/
void r429make_clashes(T429* C,T2 a1);
/*DS_HASH_TABLE[STRING,STRING]*/
void r429search_position(T429* C,T0* a1);
/*DS_HASH_TABLE[STRING,STRING]*/
void r429keys_resize(T429* C,T2 a1);
/*DS_HASH_TABLE[STRING,STRING]*/
T0* r429item(T429* C,T0* a1);
/*DS_HASH_TABLE[STRING,STRING]*/
void r429make_items(T429* C,T2 a1);
/*DS_HASH_TABLE[STRING,STRING]*/
void r429make(T429* C,T2 a1);
extern T0*oBC281special_integer_;
/*DS_HASH_TABLE[STRING,STRING]*/
T6 r429has(T429* C,T0* a1);
/*DS_HASH_TABLE[STRING,STRING]*/
void r429make_keys(T429* C,T2 a1);
/*DS_HASH_TABLE[STRING,STRING]*/
T2 r429hash_position(T429* C,T0* a1);
/*DS_HASH_TABLE[STRING,STRING]*/
void r429items_resize(T429* C,T2 a1);
/*DS_HASH_TABLE[STRING,STRING]*/
void r429make_with_equality_testers(T429* C,T2 a1,T0* a2,T0* a3);
/*DS_HASH_TABLE[STRING,STRING]*/
void r429resize(T429* C,T2 a1);
/*DS_HASH_TABLE[STRING,STRING]*/
void r429make_sparse_container(T429* C,T2 a1);
/*DS_HASH_TABLE[STRING,STRING]*/
void r429clashes_resize(T429* C,T2 a1);
/*DS_HASH_TABLE[STRING,STRING]*/
void r429slots_resize(T429* C,T2 a1);
/*DS_HASH_TABLE[STRING,STRING]*/
T0* r429new_cursor(T429* C);
/*DS_HASH_TABLE[STRING,STRING]*/
void r429make_slots(T429* C,T2 a1);
/*DS_HASH_TABLE[STRING,STRING]*/
T2 r429new_modulus(T2 a1);
/*SPECIAL[LX_DFA_STATE]*/
T6 r147valid_index(T147* C,T2 a1);
/*SPECIAL[LX_DFA_STATE]*/
void r147make(T147* C,T2 a1);
/*SPECIAL[LX_DFA_STATE]*/
T0* r147resize(T147* C,T2 a1);
/*SPECIAL[LX_DFA_STATE]*/
void r147array_resize(T147* C,T2 a1);
/*KL_EQUALITY_TESTER[INTEGER]*/
T6 r114test(T2 a1,T2 a2);
/*DS_HASH_TABLE[LX_NFA,INTEGER]*/
T2 r286new_capacity(T2 a1);
/*DS_HASH_TABLE[LX_NFA,INTEGER]*/
void r286force(T286* C,T0* a1,T2 a2);
/*DS_HASH_TABLE[LX_NFA,INTEGER]*/
void r286make_clashes(T286* C,T2 a1);
/*DS_HASH_TABLE[LX_NFA,INTEGER]*/
void r286search_position(T286* C,T2 a1);
/*DS_HASH_TABLE[LX_NFA,INTEGER]*/
void r286keys_resize(T286* C,T2 a1);
/*DS_HASH_TABLE[LX_NFA,INTEGER]*/
T0* r286item(T286* C,T2 a1);
/*DS_HASH_TABLE[LX_NFA,INTEGER]*/
void r286make_items(T286* C,T2 a1);
/*DS_HASH_TABLE[LX_NFA,INTEGER]*/
void r286make(T286* C,T2 a1);
/*DS_HASH_TABLE[LX_NFA,INTEGER]*/
T6 r286has(T286* C,T2 a1);
/*DS_HASH_TABLE[LX_NFA,INTEGER]*/
void r286make_keys(T286* C,T2 a1);
/*DS_HASH_TABLE[LX_NFA,INTEGER]*/
T2 r286hash_position(T286* C,T2 a1);
/*DS_HASH_TABLE[LX_NFA,INTEGER]*/
void r286items_resize(T286* C,T2 a1);
/*DS_HASH_TABLE[LX_NFA,INTEGER]*/
void r286make_with_equality_testers(T286* C,T2 a1,T0* a2,T0* a3);
/*DS_HASH_TABLE[LX_NFA,INTEGER]*/
void r286resize(T286* C,T2 a1);
/*DS_HASH_TABLE[LX_NFA,INTEGER]*/
void r286make_sparse_container(T286* C,T2 a1);
/*DS_HASH_TABLE[LX_NFA,INTEGER]*/
void r286clashes_resize(T286* C,T2 a1);
/*DS_HASH_TABLE[LX_NFA,INTEGER]*/
void r286slots_resize(T286* C,T2 a1);
/*DS_HASH_TABLE[LX_NFA,INTEGER]*/
T0* r286new_cursor(T286* C);
/*DS_HASH_TABLE[LX_NFA,INTEGER]*/
void r286make_slots(T286* C,T2 a1);
/*DS_HASH_TABLE[LX_NFA,INTEGER]*/
T2 r286new_modulus(T2 a1);
/*DS_SHELL_SORTER[INTEGER]*/
void r493subsort_with_comparator(T0* a1,T0* a2,T2 a3,T2 a4);
/*DS_SHELL_SORTER[INTEGER]*/
void r493sort_with_comparator(T0* a1,T0* a2);
/*DS_LINKED_LIST[LX_RULE]*/
T6 r185valid_cursor(T185* C,T0* a1);
/*DS_LINKED_LIST[LX_RULE]*/
void r185remove_traversing_cursor(T185* C,T0* a1);
/*DS_LINKED_LIST[LX_RULE]*/
void r185add_traversing_cursor(T185* C,T0* a1);
/*DS_LINKED_LIST[LX_RULE]*/
void r185make(T185* C);
/*DS_LINKED_LIST[LX_RULE]*/
T6 r185cursor_after(T0* a1);
/*DS_LINKED_LIST[LX_RULE]*/
void r185cursor_forth(T185* C,T0* a1);
/*DS_LINKED_LIST[LX_RULE]*/
void r185cursor_start(T185* C,T0* a1);
/*DS_LINKED_LIST[LX_RULE]*/
T0* r185new_cursor(T185* C);
/*DS_LINKED_LIST[LX_RULE]*/
void r185put_last(T185* C,T0* a1);
/*DS_LINKED_LIST[LX_RULE]*/
T6 r185cursor_off(T0* a1);
/*KL_SPECIAL_ROUTINES[INTEGER]*/
T0* r146make(T2 a1);
/*KL_SPECIAL_ROUTINES[INTEGER]*/
T0* r146make_from_array(T0* a1);
/*KL_SPECIAL_ROUTINES[INTEGER]*/
T0* r146resize(T0* a1,T2 a2);
/*KL_SPECIAL_ROUTINES[INTEGER]*/
T0* r146to_special(T0* a1);
/*KL_SPECIAL_ROUTINES[STRING]*/
T0* r406make(T2 a1);
/*KL_SPECIAL_ROUTINES[STRING]*/
T0* r406resize(T0* a1,T2 a2);
/*DS_HASH_TABLE[LX_SYMBOL_CLASS,STRING]*/
T2 r437new_capacity(T2 a1);
/*DS_HASH_TABLE[LX_SYMBOL_CLASS,STRING]*/
T6 r437valid_cursor(T437* C,T0* a1);
/*DS_HASH_TABLE[LX_SYMBOL_CLASS,STRING]*/
void r437force(T437* C,T0* a1,T0* a2);
/*DS_HASH_TABLE[LX_SYMBOL_CLASS,STRING]*/
void r437make_clashes(T437* C,T2 a1);
/*DS_HASH_TABLE[LX_SYMBOL_CLASS,STRING]*/
T6 r437valid_slot(T437* C,T2 a1);
/*DS_HASH_TABLE[LX_SYMBOL_CLASS,STRING]*/
T6 r437valid_position(T437* C,T2 a1);
/*DS_HASH_TABLE[LX_SYMBOL_CLASS,STRING]*/
T0* r437cursor_item(T437* C,T0* a1);
/*DS_HASH_TABLE[LX_SYMBOL_CLASS,STRING]*/
void r437search_position(T437* C,T0* a1);
/*DS_HASH_TABLE[LX_SYMBOL_CLASS,STRING]*/
void r437remove_traversing_cursor(T437* C,T0* a1);
/*DS_HASH_TABLE[LX_SYMBOL_CLASS,STRING]*/
void r437keys_resize(T437* C,T2 a1);
/*DS_HASH_TABLE[LX_SYMBOL_CLASS,STRING]*/
T0* r437item(T437* C,T0* a1);
/*DS_HASH_TABLE[LX_SYMBOL_CLASS,STRING]*/
void r437make_items(T437* C,T2 a1);
/*DS_HASH_TABLE[LX_SYMBOL_CLASS,STRING]*/
void r437add_traversing_cursor(T437* C,T0* a1);
/*DS_HASH_TABLE[LX_SYMBOL_CLASS,STRING]*/
void r437make(T437* C,T2 a1);
/*DS_HASH_TABLE[LX_SYMBOL_CLASS,STRING]*/
T6 r437cursor_after(T0* a1);
/*DS_HASH_TABLE[LX_SYMBOL_CLASS,STRING]*/
T6 r437has(T437* C,T0* a1);
/*DS_HASH_TABLE[LX_SYMBOL_CLASS,STRING]*/
void r437make_keys(T437* C,T2 a1);
/*DS_HASH_TABLE[LX_SYMBOL_CLASS,STRING]*/
T2 r437hash_position(T437* C,T0* a1);
/*DS_HASH_TABLE[LX_SYMBOL_CLASS,STRING]*/
void r437cursor_forth(T437* C,T0* a1);
/*DS_HASH_TABLE[LX_SYMBOL_CLASS,STRING]*/
void r437items_resize(T437* C,T2 a1);
/*DS_HASH_TABLE[LX_SYMBOL_CLASS,STRING]*/
void r437make_with_equality_testers(T437* C,T2 a1,T0* a2,T0* a3);
/*DS_HASH_TABLE[LX_SYMBOL_CLASS,STRING]*/
void r437resize(T437* C,T2 a1);
/*DS_HASH_TABLE[LX_SYMBOL_CLASS,STRING]*/
void r437make_sparse_container(T437* C,T2 a1);
/*DS_HASH_TABLE[LX_SYMBOL_CLASS,STRING]*/
void r437cursor_start(T437* C,T0* a1);
/*DS_HASH_TABLE[LX_SYMBOL_CLASS,STRING]*/
void r437clashes_resize(T437* C,T2 a1);
/*DS_HASH_TABLE[LX_SYMBOL_CLASS,STRING]*/
void r437slots_resize(T437* C,T2 a1);
/*DS_HASH_TABLE[LX_SYMBOL_CLASS,STRING]*/
T0* r437new_cursor(T437* C);
/*DS_HASH_TABLE[LX_SYMBOL_CLASS,STRING]*/
void r437make_slots(T437* C,T2 a1);
/*DS_HASH_TABLE[LX_SYMBOL_CLASS,STRING]*/
T2 r437new_modulus(T2 a1);
/*DS_HASH_TABLE[LX_SYMBOL_CLASS,STRING]*/
T6 r437cursor_off(T0* a1);
/*DS_LINKED_LIST_CURSOR[LX_TRANSITION_TABLE[LX_DFA_STATE]]*/
void r329set(T329* C,T0* a1,T6 a2,T6 a3);
/*DS_LINKED_LIST_CURSOR[LX_TRANSITION_TABLE[LX_DFA_STATE]]*/
void r329make(T329* C,T0* a1);
/*KL_COMPARABLE_COMPARATOR[LX_RULE]*/
T6 r241less_than(T0* a1,T0* a2);
/*DS_BUBBLE_SORTER[INTEGER]*/
void r109subsort_with_comparator(T0* a1,T0* a2,T2 a3,T2 a4);
/*DS_BUBBLE_SORTER[INTEGER]*/
void r109sort_with_comparator(T0* a1,T0* a2);
/*DS_ARRAYED_LIST[INTEGER]*/
T6 r91extendible(T91* C,T2 a1);
/*DS_ARRAYED_LIST[INTEGER]*/
T2 r91item(T91* C,T2 a1);
/*DS_ARRAYED_LIST[INTEGER]*/
void r91sort(T91* C,T0* a1);
/*DS_ARRAYED_LIST[INTEGER]*/
void r91make(T91* C,T2 a1);
/*DS_ARRAYED_LIST[INTEGER]*/
T6 r91has(T91* C,T2 a1);
/*DS_ARRAYED_LIST[INTEGER]*/
T0* r91new_cursor(T91* C);
/*DS_ARRAYED_LIST[INTEGER]*/
void r91put_last(T91* C,T2 a1);
/*DS_ARRAYED_LIST_CURSOR[LX_DFA_STATE]*/
T6 r316valid_position(T316* C,T2 a1);
/*DS_ARRAYED_LIST_CURSOR[LX_DFA_STATE]*/
T6 r316after(T316* C);
/*DS_ARRAYED_LIST_CURSOR[LX_DFA_STATE]*/
T2 r316index(T316* C);
/*DS_ARRAYED_LIST_CURSOR[LX_DFA_STATE]*/
T6 r316off(T316* C);
extern T0*oBC21string_;
extern T0*oBC13arguments;
extern int fBC13arguments;
/*LX_DEFAULT_RULE_CAN_BE_MATCHED_ERROR*/
T0* r218arguments(void);
/*LX_DEFAULT_RULE_CAN_BE_MATCHED_ERROR*/
void r218make(T218* C,T0* a1);
/*LX_DEFAULT_RULE_CAN_BE_MATCHED_ERROR*/
T0* r218message(T218* C,T0* a1);
/*LX_DEFAULT_RULE_CAN_BE_MATCHED_ERROR*/
T0* r218default_message(T218* C);
/*LX_SYMBOL_PARTITIONS*/
void r227build(T227* C);
/*LX_SYMBOL_PARTITIONS*/
T2 r227previous_symbol(T227* C,T2 a1);
/*LX_SYMBOL_PARTITIONS*/
void r227_228Pinitialize(T227* C);
/*LX_SYMBOL_PARTITIONS*/
void r227_228Pput(T227* C,T2 a1);
/*LX_SYMBOL_PARTITIONS*/
void r227put(T227* C,T2 a1);
/*LX_SYMBOL_PARTITIONS*/
T6 r227valid_symbol_class(T227* C,T0* a1);
/*LX_SYMBOL_PARTITIONS*/
void r227_228Pmake(T227* C,T2 a1,T2 a2);
/*LX_SYMBOL_PARTITIONS*/
T0* r227to_array(T227* C,T2 a1,T2 a2);
/*LX_SYMBOL_PARTITIONS*/
void r227make(T227* C,T2 a1,T2 a2);
/*LX_SYMBOL_PARTITIONS*/
T2 r227equivalence_class(T227* C,T2 a1);
/*LX_SYMBOL_PARTITIONS*/
void r227_228Padd(T227* C,T0* a1);
/*LX_SYMBOL_PARTITIONS*/
void r227add(T227* C,T0* a1);
/*LX_SYMBOL_PARTITIONS*/
T6 r227is_representative(T227* C,T2 a1);
/*LX_SYMBOL_PARTITIONS*/
void r227initialize(T227* C);
/*LX_FULL_DFA*/
void r225build(T225* C);
/*LX_FULL_DFA*/
void r225build_accept_table(T225* C);
/*LX_FULL_DFA*/
void r225print_constants(T225* C,T0* a1);
/*LX_FULL_DFA*/
void r225print_action_routine(T225* C,T0* a1,T0* a2);
extern T0*oBC53array_formatter_;
/*LX_FULL_DFA*/
void r225initialize_dfa(T225* C,T0* a1,T2 a2,T2 a3);
/*LX_FULL_DFA*/
void r225print_eiffel_array(T225* C,T0* a1,T0* a2,T0* a3);
/*LX_FULL_DFA*/
void r225print_scanner(T225* C,T0* a1);
/*LX_FULL_DFA*/
void r225print_inspect_actions(T225* C,T0* a1);
/*LX_FULL_DFA*/
void r225_52Pprint_backing_up_report(T225* C,T0* a1);
extern T0*oBC54integer_;
/*LX_FULL_DFA*/
T0* r225clone(T0* a1);
/*LX_FULL_DFA*/
void r225print_status_report_routines(T225* C,T0* a1);
/*LX_FULL_DFA*/
void r225print_eiffel_header(T225* C,T0* a1);
/*LX_FULL_DFA*/
void r225print_eiffel_tables(T225* C,T0* a1);
/*LX_FULL_DFA*/
void r225put_start_condition(T225* C,T0* a1);
/*LX_FULL_DFA*/
void r225set_nfa_state_ids(T0* a1);
/*LX_FULL_DFA*/
void r225make(T225* C,T0* a1);
/*LX_FULL_DFA*/
void r225print_transitions(T225* C,T0* a1,T0* a2);
extern T0*oBC52integer_sorter;
extern int fBC52integer_sorter;
/*LX_FULL_DFA*/
T0* r225integer_sorter(void);
/*LX_FULL_DFA*/
void r225build_eof_rules(T225* C,T0* a1,T2 a2,T2 a3);
extern T0*oBC53boolean_formatter_;
/*LX_FULL_DFA*/
void r225print_binary_search_actions(T225* C,T0* a1,T2 a2,T2 a3);
/*LX_FULL_DFA*/
void r225print_readable_character(T2 a1,T0* a2);
/*LX_FULL_DFA*/
void r225print_action_call(T225* C,T0* a1,T0* a2);
/*LX_FULL_DFA*/
void r225print_rule_line_numbers(T225* C,T0* a1,T0* a2);
/*LX_FULL_DFA*/
void r225print_eiffel_code(T225* C,T0* a1);
/*LX_FULL_DFA*/
void r225print_action_body(T225* C,T0* a1,T0* a2);
/*LX_FULL_DFA*/
void r225_52Pprint_constants(T225* C,T0* a1);
/*LX_FULL_DFA*/
void r225print_backing_up_report(T225* C,T0* a1);
/*LX_FULL_DFA*/
void r225print_actions(T225* C,T0* a1);
/*LX_FULL_DFA*/
void r225print_build_tables(T225* C,T0* a1);
/*LX_FULL_DFA*/
void r225print_eof_actions(T225* C,T0* a1);
/*LX_FULL_DFA*/
void r225build_transitions(T225* C,T0* a1);
/*LX_FULL_DFA*/
void r225initialize(T225* C,T0* a1);
/*LX_FULL_DFA*/
void r225put_eob_state(T225* C);
/*LX_FULL_DFA*/
void r225build_rules(T225* C,T0* a1);
/*LX_FULL_DFA*/
void r225build_nxt_table(T225* C);
/*LX_FULL_DFA*/
T0* r225new_state(T225* C,T0* a1);
/*KL_TEXT_INPUT_FILE*/
T6 r375is_closed(T375* C);
/*KL_TEXT_INPUT_FILE*/
void r375old_close(T375* C);
/*KL_TEXT_INPUT_FILE*/
T2 r375read_to_string(T375* C,T0* a1,T2 a2,T2 a3);
/*KL_TEXT_INPUT_FILE*/
void r375open_read(T375* C);
/*KL_TEXT_INPUT_FILE*/
void r375old_read_character(T375* C);
/*KL_TEXT_INPUT_FILE*/
void r375read_character(T375* C);
/*KL_TEXT_INPUT_FILE*/
void r375fill_buffer(T375* C);
/*KL_TEXT_INPUT_FILE*/
void r375close(T375* C);
/*KL_TEXT_INPUT_FILE*/
void r375make(T375* C,T0* a1);
/*KL_TEXT_INPUT_FILE*/
T2 r375read_to_buffer(T375* C,T0* a1,T2 a2,T2 a3);
/*KL_TEXT_INPUT_FILE*/
void r375connect_to(T375* C,T0* a1);
/*KL_TEXT_INPUT_FILE*/
T2 r375_381Pread_to_buffer(T375* C,T0* a1,T2 a2,T2 a3);
/*KL_TEXT_INPUT_FILE*/
void r375old_open_read(T375* C);
/*LX_MULTIPLE_EOF_RULES_ERROR*/
T0* r481arguments(void);
/*LX_MULTIPLE_EOF_RULES_ERROR*/
void r481make(T481* C,T0* a1,T2 a2,T0* a3);
/*LX_MULTIPLE_EOF_RULES_ERROR*/
T0* r481message(T481* C,T0* a1);
/*LX_MULTIPLE_EOF_RULES_ERROR*/
T0* r481default_message(T481* C);
/*LX_NFA_STATE*/
T6 r92is_equal(T92* C,T0* a1);
/*LX_NFA_STATE*/
T6 r92has_transition(T92* C);
/*LX_NFA_STATE*/
T6 r92is_accepting_head(T92* C);
/*LX_NFA_STATE*/
T0* r92twin(T92* C);
/*LX_NFA_STATE*/
void r92set_beginning_as_normal(T92* C);
/*LX_NFA_STATE*/
T6 r92_ix_60(T92* C,T0* a1);
/*LX_START_CONDITIONS*/
T2 r268new_capacity(T2 a1);
/*LX_START_CONDITIONS*/
void r268clear_items(T268* C,T2 a1,T2 a2);
/*LX_START_CONDITIONS*/
T6 r268extendible(T268* C,T2 a1);
/*LX_START_CONDITIONS*/
void r268move_cursors_right(T268* C,T2 a1,T2 a2);
/*LX_START_CONDITIONS*/
void r268put(T268* C,T0* a1,T2 a2);
/*LX_START_CONDITIONS*/
T6 r268has_start_condition(T268* C,T0* a1);
/*LX_START_CONDITIONS*/
void r268move_all_cursors_after(T268* C);
/*LX_START_CONDITIONS*/
void r268keep_first(T268* C,T2 a1);
/*LX_START_CONDITIONS*/
void r268make_with_initial(T268* C,T2 a1);
/*LX_START_CONDITIONS*/
void r268add_bol_nfa_to_all(T268* C,T0* a1);
/*LX_START_CONDITIONS*/
T0* r268start_condition(T268* C,T0* a1);
/*LX_START_CONDITIONS*/
T0* r268names(T268* C);
/*LX_START_CONDITIONS*/
void r268add_nfa_to_non_exclusive(T268* C,T0* a1);
/*LX_START_CONDITIONS*/
void r268add_bol_nfa_to_non_exclusive(T268* C,T0* a1);
/*LX_START_CONDITIONS*/
void r268make(T268* C,T2 a1);
/*LX_START_CONDITIONS*/
T6 r268has(T268* C,T0* a1);
/*LX_START_CONDITIONS*/
void r268append_start_conditions(T268* C,T0* a1);
/*LX_START_CONDITIONS*/
void r268move_right(T268* C,T2 a1,T2 a2);
/*LX_START_CONDITIONS*/
void r268add_nfa_to_all(T268* C,T0* a1);
/*LX_START_CONDITIONS*/
void r268resize(T268* C,T2 a1);
/*LX_START_CONDITIONS*/
void r268append_non_eof_start_conditions(T268* C,T0* a1);
/*LX_START_CONDITIONS*/
void r268force_new_start_condition(T268* C,T0* a1,T6 a2);
/*LX_START_CONDITIONS*/
void r268force_last(T268* C,T0* a1);
/*LX_START_CONDITIONS*/
T0* r268new_cursor(T268* C);
/*LX_START_CONDITIONS*/
void r268put_last(T268* C,T0* a1);
/*LX_TEMPLATE_LIST*/
T6 r321valid_cursor(T321* C,T0* a1);
/*LX_TEMPLATE_LIST*/
void r321put(T321* C,T0* a1,T0* a2);
/*LX_TEMPLATE_LIST*/
void r321remove_traversing_cursor(T321* C,T0* a1);
/*LX_TEMPLATE_LIST*/
void r321add_traversing_cursor(T321* C,T0* a1);
/*LX_TEMPLATE_LIST*/
void r321make(T321* C,T0* a1);
/*LX_TEMPLATE_LIST*/
T6 r321cursor_after(T0* a1);
/*LX_TEMPLATE_LIST*/
void r321make_list(T321* C);
/*LX_TEMPLATE_LIST*/
void r321cursor_forth(T321* C,T0* a1);
/*LX_TEMPLATE_LIST*/
void r321cursor_start(T321* C,T0* a1);
/*LX_TEMPLATE_LIST*/
T0* r321new_cursor(T321* C);
/*LX_TEMPLATE_LIST*/
T0* r321equiv_template(T321* C,T0* a1);
/*LX_TEMPLATE_LIST*/
void r321put_last(T321* C,T0* a1);
/*LX_TEMPLATE_LIST*/
T6 r321cursor_off(T0* a1);
/*LX_DANGEROUS_TRAILING_CONTEXT_ERROR*/
T0* r220arguments(void);
/*LX_DANGEROUS_TRAILING_CONTEXT_ERROR*/
void r220make(T220* C,T0* a1,T2 a2);
/*LX_DANGEROUS_TRAILING_CONTEXT_ERROR*/
T0* r220message(T220* C,T0* a1);
/*LX_DANGEROUS_TRAILING_CONTEXT_ERROR*/
T0* r220default_message(T220* C);
/*UT_VERSION_NUMBER*/
T0* r514arguments(void);
/*UT_VERSION_NUMBER*/
void r514make(T514* C,T0* a1);
/*UT_VERSION_NUMBER*/
T0* r514message(T514* C,T0* a1);
/*UT_VERSION_NUMBER*/
T0* r514default_message(T514* C);
/*LX_FULL_AND_REJECT_ERROR*/
T0* r447arguments(void);
/*LX_FULL_AND_REJECT_ERROR*/
void r447make(T447* C);
/*LX_FULL_AND_REJECT_ERROR*/
T0* r447message(T447* C,T0* a1);
/*LX_FULL_AND_REJECT_ERROR*/
T0* r447default_message(T447* C);
/*LX_UNRECOGNIZED_RULE_ERROR*/
T0* r482arguments(void);
/*LX_UNRECOGNIZED_RULE_ERROR*/
void r482make(T482* C,T0* a1,T2 a2);
/*LX_UNRECOGNIZED_RULE_ERROR*/
T0* r482message(T482* C,T0* a1);
/*LX_UNRECOGNIZED_RULE_ERROR*/
T0* r482default_message(T482* C);
/*LX_BAD_CHARACTER_IN_BRACKETS_ERROR*/
T0* r443arguments(void);
/*LX_BAD_CHARACTER_IN_BRACKETS_ERROR*/
void r443make(T443* C,T0* a1,T2 a2);
/*LX_BAD_CHARACTER_IN_BRACKETS_ERROR*/
T0* r443message(T443* C,T0* a1);
/*LX_BAD_CHARACTER_IN_BRACKETS_ERROR*/
T0* r443default_message(T443* C);
/*KL_STDIN_FILE*/
T2 r496read_to_string(T496* C,T0* a1,T2 a2,T2 a3);
/*KL_STDIN_FILE*/
void r496old_read_character(T496* C);
/*KL_STDIN_FILE*/
void r496read_character(T496* C);
/*KL_STDIN_FILE*/
void r496fill_buffer(T496* C);
/*KL_STDIN_FILE*/
void r496make(T496* C);
/*KL_STDIN_FILE*/
T2 r496read_to_buffer(T496* C,T0* a1,T2 a2,T2 a3);
extern T0*oBC19std_output;
/*KL_STDIN_FILE*/
T2 r496_381Pread_to_buffer(T496* C,T0* a1,T2 a2,T2 a3);
/*KL_STDIN_FILE*/
void r496old_make(T496* C);
/*UT_ERROR_HANDLER*/
void r151report_warning_message(T151* C,T0* a1);
extern T0*oBC15std;
/*UT_ERROR_HANDLER*/
T0* r151message(T0* a1);
/*UT_ERROR_HANDLER*/
void r151report_info_message(T151* C,T0* a1);
/*UT_ERROR_HANDLER*/
void r151make_standard(T151* C);
/*UT_ERROR_HANDLER*/
void r151report_error_message(T151* C,T0* a1);
/*KL_CHARACTER_BUFFER*/
T0* r495substring(T495* C,T2 a1,T2 a2);
/*KL_CHARACTER_BUFFER*/
void r495fill_from_string(T495* C,T0* a1,T2 a2);
/*KL_CHARACTER_BUFFER*/
T2 r495fill_from_stream(T495* C,T0* a1,T2 a2,T2 a3);
/*KL_CHARACTER_BUFFER*/
void r495move_left(T495* C,T2 a1,T2 a2,T2 a3);
/*KL_CHARACTER_BUFFER*/
void r495make(T495* C,T2 a1);
/*KL_CHARACTER_BUFFER*/
void r495move_right(T495* C,T2 a1,T2 a2,T2 a3);
/*KL_CHARACTER_BUFFER*/
void r495resize(T495* C,T2 a1);
/*LX_PROTO_QUEUE*/
void r322set_last_cell(T322* C,T0* a1);
/*LX_PROTO_QUEUE*/
T6 r322valid_cursor(T322* C,T0* a1);
/*LX_PROTO_QUEUE*/
void r322wipe_out(T322* C);
/*LX_PROTO_QUEUE*/
void r322remove_first(T322* C);
/*LX_PROTO_QUEUE*/
void r322put(T322* C,T2 a1,T0* a2,T0* a3);
/*LX_PROTO_QUEUE*/
T6 r322cursor_is_last(T322* C,T0* a1);
/*LX_PROTO_QUEUE*/
void r322remove_traversing_cursor(T322* C,T0* a1);
/*LX_PROTO_QUEUE*/
void r322cursor_go_after(T322* C,T0* a1);
/*LX_PROTO_QUEUE*/
void r322move_all_cursors_after(T322* C);
/*LX_PROTO_QUEUE*/
void r322add_traversing_cursor(T322* C,T0* a1);
/*LX_PROTO_QUEUE*/
void r322make(T322* C);
/*LX_PROTO_QUEUE*/
void r322set_first_cell(T322* C,T0* a1);
/*LX_PROTO_QUEUE*/
void r322cursor_go_to(T322* C,T0* a1,T0* a2);
/*LX_PROTO_QUEUE*/
void r322remove_last(T322* C);
/*LX_PROTO_QUEUE*/
T6 r322cursor_after(T0* a1);
/*LX_PROTO_QUEUE*/
void r322cursor_forth(T322* C,T0* a1);
/*LX_PROTO_QUEUE*/
void r322move_last_cursors_after(T322* C);
/*LX_PROTO_QUEUE*/
void r322put_first(T322* C,T0* a1);
/*LX_PROTO_QUEUE*/
void r322move_to_front(T322* C,T0* a1);
/*LX_PROTO_QUEUE*/
void r322cursor_start(T322* C,T0* a1);
/*LX_PROTO_QUEUE*/
T0* r322new_cursor(T322* C);
/*LX_PROTO_QUEUE*/
T6 r322cursor_is_first(T322* C,T0* a1);
/*LX_PROTO_QUEUE*/
void r322remove_at_cursor(T322* C,T0* a1);
/*LX_PROTO_QUEUE*/
void r322move_all_cursors(T322* C,T0* a1,T0* a2);
/*LX_PROTO_QUEUE*/
T6 r322cursor_off(T0* a1);
/*LX_MISSING_QUOTE_ERROR*/
T0* r428arguments(void);
/*LX_MISSING_QUOTE_ERROR*/
void r428make(T428* C,T0* a1,T2 a2);
/*LX_MISSING_QUOTE_ERROR*/
T0* r428message(T428* C,T0* a1);
/*LX_MISSING_QUOTE_ERROR*/
T0* r428default_message(T428* C);
/*LX_FULL_AND_META_ERROR*/
T0* r449arguments(void);
/*LX_FULL_AND_META_ERROR*/
void r449make(T449* C);
/*LX_FULL_AND_META_ERROR*/
T0* r449message(T449* C,T0* a1);
/*LX_FULL_AND_META_ERROR*/
T0* r449default_message(T449* C);
/*LX_PROTO*/
void r343make(T343* C,T2 a1,T0* a2,T0* a3);
/*LX_NEGATIVE_RANGE_IN_CHARACTER_CLASS_ERROR*/
T0* r494arguments(void);
/*LX_NEGATIVE_RANGE_IN_CHARACTER_CLASS_ERROR*/
void r494make(T494* C,T0* a1,T2 a2);
/*LX_NEGATIVE_RANGE_IN_CHARACTER_CLASS_ERROR*/
T0* r494message(T494* C,T0* a1);
/*LX_NEGATIVE_RANGE_IN_CHARACTER_CLASS_ERROR*/
T0* r494default_message(T494* C);
/*KL_TEXT_OUTPUT_FILE*/
T6 r27is_closed(T27* C);
/*KL_TEXT_OUTPUT_FILE*/
void r27old_close(T27* C);
/*KL_TEXT_OUTPUT_FILE*/
void r27old_open_write(T27* C);
/*KL_TEXT_OUTPUT_FILE*/
void r27close(T27* C);
/*KL_TEXT_OUTPUT_FILE*/
void r27make(T27* C,T0* a1);
/*KL_TEXT_OUTPUT_FILE*/
void r27old_put_string(T27* C,T0* a1);
/*KL_TEXT_OUTPUT_FILE*/
void r27old_put_character(T27* C,T3 a1);
/*KL_TEXT_OUTPUT_FILE*/
void r27connect_to(T27* C,T0* a1);
/*KL_TEXT_OUTPUT_FILE*/
void r27put_integer(T27* C,T2 a1);
/*KL_TEXT_OUTPUT_FILE*/
void r27put_line(T27* C,T0* a1);
/*KL_TEXT_OUTPUT_FILE*/
void r27old_make(T27* C);
/*KL_TEXT_OUTPUT_FILE*/
void r27open_write(T27* C);
/*KL_TEXT_OUTPUT_FILE*/
void r27write_buffer(T27* C);
/*LX_SYMBOL_CLASS*/
T2 r360new_capacity(T2 a1);
/*LX_SYMBOL_CLASS*/
T6 r360extendible(T360* C,T2 a1);
/*LX_SYMBOL_CLASS*/
void r360arrayed_sort(T360* C,T0* a1);
/*LX_SYMBOL_CLASS*/
T2 r360last(T360* C);
/*LX_SYMBOL_CLASS*/
void r360put(T360* C,T2 a1);
/*LX_SYMBOL_CLASS*/
void r360sort(T360* C);
/*LX_SYMBOL_CLASS*/
T6 r360arrayed_has(T360* C,T2 a1);
/*LX_SYMBOL_CLASS*/
void r360make(T360* C,T2 a1);
/*LX_SYMBOL_CLASS*/
void r360convert_to_equivalence(T360* C,T0* a1);
extern T0*oBC360sorter;
extern int fBC360sorter;
/*LX_SYMBOL_CLASS*/
T0* r360sorter(void);
/*LX_SYMBOL_CLASS*/
T6 r360has(T360* C,T2 a1);
/*LX_SYMBOL_CLASS*/
void r360resize(T360* C,T2 a1);
/*LX_SYMBOL_CLASS*/
void r360force_last(T360* C,T2 a1);
/*LX_SYMBOL_CLASS*/
T0* r360new_cursor(T360* C);
/*LX_SYMBOL_CLASS*/
void r360put_last(T360* C,T2 a1);
/*LX_MISSING_BRACKET_ERROR*/
T0* r444arguments(void);
/*LX_MISSING_BRACKET_ERROR*/
void r444make(T444* C,T0* a1,T2 a2);
/*LX_MISSING_BRACKET_ERROR*/
T0* r444message(T444* C,T0* a1);
/*LX_MISSING_BRACKET_ERROR*/
T0* r444default_message(T444* C);
/*LX_UNDEFINED_DEFINITION_ERROR*/
T0* r436arguments(void);
/*LX_UNDEFINED_DEFINITION_ERROR*/
void r436make(T436* C,T0* a1,T2 a2,T0* a3);
/*LX_UNDEFINED_DEFINITION_ERROR*/
T0* r436message(T436* C,T0* a1);
/*LX_UNDEFINED_DEFINITION_ERROR*/
T0* r436default_message(T436* C);
/*LX_UNRECOGNIZED_OPTION_ERROR*/
T0* r427arguments(void);
/*LX_UNRECOGNIZED_OPTION_ERROR*/
void r427make(T427* C,T0* a1,T2 a2,T0* a3);
/*LX_UNRECOGNIZED_OPTION_ERROR*/
T0* r427message(T427* C,T0* a1);
/*LX_UNRECOGNIZED_OPTION_ERROR*/
T0* r427default_message(T427* C);
/*LX_NFA*/
void r121copy(T121* C,T0* a1);
/*LX_NFA*/
void r121build_closure(T121* C);
/*LX_NFA*/
void r121build_unbounded_iteration(T121* C,T2 a1);
/*LX_NFA*/
T0* r121clone(T0* a1);
/*LX_NFA*/
void r121build_bounded_iteration(T121* C,T2 a1,T2 a2);
/*LX_NFA*/
void r121make_symbol(T121* C,T2 a1,T6 a2);
/*LX_NFA*/
void r121build_optional(T121* C);
/*LX_NFA*/
void r121build_positive_closure(T121* C);
/*LX_NFA*/
T0* r121twin(T121* C);
/*LX_NFA*/
void r121build_concatenation(T121* C,T0* a1);
/*LX_NFA*/
void r121make_epsilon(T121* C,T6 a1);
/*LX_NFA*/
void r121build_iteration(T121* C,T2 a1);
/*LX_NFA*/
void r121make_symbol_class(T121* C,T0* a1,T6 a2);
/*LX_NFA*/
void r121build_union(T121* C,T0* a1);
/*LX_ACTION*/
void r267out_in_tagged_out_memory(T267* C);
/*GELEX_COMMAND_LINE*/
void r20read_options(T20* C,T0* a1);
/*GELEX_COMMAND_LINE*/
T0* r20arguments(void);
/*GELEX_COMMAND_LINE*/
void r20report_separated_flag_error(T20* C,T0* a1);
/*GELEX_COMMAND_LINE*/
void r20report_usage_message(T20* C);
extern T0*oBC20usage_message;
extern int fBC20usage_message;
/*GELEX_COMMAND_LINE*/
T0* r20usage_message(void);
/*GELEX_COMMAND_LINE*/
void r20report_unknown_flag_error(T20* C,T0* a1);
extern T0*oBC14exceptions;
/*GELEX_COMMAND_LINE*/
void r20report_version_number(T20* C);
/*GELEX_COMMAND_LINE*/
void r20report_usage_error(T20* C);
/*UT_USAGE_MESSAGE*/
T0* r513arguments(void);
/*UT_USAGE_MESSAGE*/
void r513make(T513* C,T0* a1);
/*UT_USAGE_MESSAGE*/
T0* r513message(T513* C,T0* a1);
/*UT_USAGE_MESSAGE*/
T0* r513default_message(T513* C);
/*LX_START_CONDITION_EXPECTED_ERROR*/
T0* r426arguments(void);
/*LX_START_CONDITION_EXPECTED_ERROR*/
void r426make(T426* C,T0* a1,T2 a2);
/*LX_START_CONDITION_EXPECTED_ERROR*/
T0* r426message(T426* C,T0* a1);
/*LX_START_CONDITION_EXPECTED_ERROR*/
T0* r426default_message(T426* C);
/*LX_DESCRIPTION*/
void r46make(T46* C);
/*LX_DESCRIPTION*/
void r46create_equiv_classes(T46* C);
/*LX_START_CONDITION_SPECIFIED_TWICE_ERROR*/
T0* r477arguments(void);
/*LX_START_CONDITION_SPECIFIED_TWICE_ERROR*/
void r477make(T477* C,T0* a1,T2 a2,T0* a3);
/*LX_START_CONDITION_SPECIFIED_TWICE_ERROR*/
T0* r477message(T477* C,T0* a1);
/*LX_START_CONDITION_SPECIFIED_TWICE_ERROR*/
T0* r477default_message(T477* C);
/*LX_TRAILING_CONTEXT_USED_TWICE_ERROR*/
T0* r485arguments(void);
/*LX_TRAILING_CONTEXT_USED_TWICE_ERROR*/
void r485make(T485* C,T0* a1,T2 a2);
/*LX_TRAILING_CONTEXT_USED_TWICE_ERROR*/
T0* r485message(T485* C,T0* a1);
/*LX_TRAILING_CONTEXT_USED_TWICE_ERROR*/
T0* r485default_message(T485* C);
/*UT_CANNOT_WRITE_TO_FILE_ERROR*/
T0* r24arguments(void);
/*UT_CANNOT_WRITE_TO_FILE_ERROR*/
void r24make(T24* C,T0* a1);
/*UT_CANNOT_WRITE_TO_FILE_ERROR*/
T0* r24message(T24* C,T0* a1);
/*UT_CANNOT_WRITE_TO_FILE_ERROR*/
T0* r24default_message(T24* C);
/*UT_SEPARATED_FLAG_ERROR*/
T0* r515arguments(void);
/*UT_SEPARATED_FLAG_ERROR*/
void r515make(T515* C,T0* a1);
/*UT_SEPARATED_FLAG_ERROR*/
T0* r515message(T515* C,T0* a1);
/*UT_SEPARATED_FLAG_ERROR*/
T0* r515default_message(T515* C);
/*LX_FULL_AND_VARIABLE_TRAILING_CONTEXT_ERROR*/
T0* r448arguments(void);
/*LX_FULL_AND_VARIABLE_TRAILING_CONTEXT_ERROR*/
void r448make(T448* C);
/*LX_FULL_AND_VARIABLE_TRAILING_CONTEXT_ERROR*/
T0* r448message(T448* C,T0* a1);
/*LX_FULL_AND_VARIABLE_TRAILING_CONTEXT_ERROR*/
T0* r448default_message(T448* C);
/*LX_START_CONDITION*/
void r269make(T269* C,T0* a1,T2 a2,T6 a3);
/*LX_UNDECLARED_START_CONDITION_ERROR*/
T0* r478arguments(void);
/*LX_UNDECLARED_START_CONDITION_ERROR*/
void r478make(T478* C,T0* a1,T2 a2,T0* a3);
/*LX_UNDECLARED_START_CONDITION_ERROR*/
T0* r478message(T478* C,T0* a1);
/*LX_UNDECLARED_START_CONDITION_ERROR*/
T0* r478default_message(T478* C);
/*LX_BAD_START_CONDITION_ERROR*/
T0* r442arguments(void);
/*LX_BAD_START_CONDITION_ERROR*/
void r442make(T442* C,T0* a1,T2 a2,T0* a3);
/*LX_BAD_START_CONDITION_ERROR*/
T0* r442message(T442* C,T0* a1);
/*LX_BAD_START_CONDITION_ERROR*/
T0* r442default_message(T442* C);
/*UT_UNKNOWN_FLAG_ERROR*/
T0* r516arguments(void);
/*UT_UNKNOWN_FLAG_ERROR*/
void r516make(T516* C,T0* a1);
/*UT_UNKNOWN_FLAG_ERROR*/
T0* r516message(T516* C,T0* a1);
/*UT_UNKNOWN_FLAG_ERROR*/
T0* r516default_message(T516* C);
/*LX_RULE*/
void r73make_default(T73* C,T2 a1);
/*LX_RULE*/
T6 r73is_equal(T73* C,T0* a1);
/*LX_RULE*/
T6 r73variable_trail(T73* C);
extern T0*oBC73dummy_pattern;
extern int fBC73dummy_pattern;
/*LX_RULE*/
T0* r73dummy_pattern(void);
extern T0*oBC73dummy_action;
extern int fBC73dummy_action;
/*LX_RULE*/
T0* r73dummy_action(void);
/*LX_RULE*/
T6 r73_ix_60(T73* C,T0* a1);
/*LX_LEX_PARSER*/
void r384report_iteration_not_positive_error(T384* C);
/*LX_LEX_PARSER*/
void r384report_bad_start_condition_list_error(T384* C);
/*LX_LEX_PARSER*/
void r384process_default_rule(T384* C);
/*LX_LEX_PARSER*/
void r384yy_do_action(T384* C,T2 a1);
/*LX_LEX_PARSER*/
void r384report_unrecognized_directive_error(T384* C);
/*LX_LEX_PARSER*/
void r384process_escaped_character(T384* C);
/*LX_LEX_PARSER*/
void r384report_bad_character_error(T384* C,T0* a1);
extern T0*oBC384yytable_template;
extern int fBC384yytable_template;
/*LX_LEX_PARSER*/
T0* r384yytable_template(void);
/*LX_LEX_PARSER*/
void r384make_parser_skeleton(T384* C);
/*LX_LEX_PARSER*/
T0* r384append_character_set_to_character_class(T384* C,T2 a1,T2 a2,T0* a3);
/*LX_LEX_PARSER*/
void r384process_regexp_or_series(T384* C);
/*LX_LEX_PARSER*/
T0* r384append_trail_context_to_regexp(T384* C,T0* a1,T0* a2);
/*LX_LEX_PARSER*/
void r384report_undeclared_start_condition_error(T384* C,T0* a1);
/*LX_LEX_PARSER*/
void r384report_bad_character_in_brackets_error(T384* C);
/*LX_LEX_PARSER*/
void r384process_singleton_dot(T384* C);
/*LX_LEX_PARSER*/
T0* r384new_iteration_nfa(T384* C,T0* a1,T2 a2);
/*LX_LEX_PARSER*/
void r384report_unrecognized_rule_error(T384* C);
/*LX_LEX_PARSER*/
void r384report_start_condition_expected_error(T384* C);
/*LX_LEX_PARSER*/
void r384report_bad_iteration_values_error(T384* C);
/*LX_LEX_PARSER*/
void r384fatal_error(T0* a1);
/*LX_LEX_PARSER*/
void r384report_name_defined_twice_error(T384* C,T0* a1);
/*LX_LEX_PARSER*/
void r384process_singleton_empty_string(T384* C);
/*LX_LEX_PARSER*/
T2 r384start_condition(T384* C);
/*LX_LEX_PARSER*/
void r384yy_do_error_action(T384* C,T2 a1);
/*LX_LEX_PARSER*/
void r384unread_character(T384* C,T3 a1);
/*LX_LEX_PARSER*/
T0* r384new_nfa_from_character(T384* C,T2 a1);
/*LX_LEX_PARSER*/
void r384parse_file(T384* C,T0* a1);
/*LX_LEX_PARSER*/
void r384parse(T384* C);
/*LX_LEX_PARSER*/
void r384check_options(T384* C);
/*LX_LEX_PARSER*/
void r384report_missing_quote_error(T384* C);
/*LX_LEX_PARSER*/
void r384set_input_buffer(T384* C,T0* a1);
extern T0*oBC385yy_ec_template;
extern int fBC385yy_ec_template;
/*LX_LEX_PARSER*/
T0* r384yy_ec_template(void);
/*LX_LEX_PARSER*/
T0* r384text_substring(T384* C,T2 a1,T2 a2);
/*LX_LEX_PARSER*/
void r384yy_execute_action(T384* C,T2 a1);
extern T0*oBC384yytranslate_template;
extern int fBC384yytranslate_template;
/*LX_LEX_PARSER*/
T0* r384yytranslate_template(void);
/*LX_LEX_PARSER*/
void r384report_all_start_conditions_eof_warning(T384* C);
extern T0*oBC385yy_def_template;
extern int fBC385yy_def_template;
/*LX_LEX_PARSER*/
T0* r384yy_def_template(void);
/*LX_LEX_PARSER*/
void r384report_full_and_meta_equiv_classes_error(T384* C);
/*LX_LEX_PARSER*/
T3 r384text_item(T384* C,T2 a1);
/*LX_LEX_PARSER*/
void r384yy_push_last_value(T384* C,T2 a1);
/*LX_LEX_PARSER*/
void r384yy_load_input_buffer(T384* C);
/*LX_LEX_PARSER*/
void r384yy_push_error_value(T384* C);
/*LX_LEX_PARSER*/
void r384process_name_definition(T384* C,T0* a1,T0* a2);
extern T0*oBC384yyr1_template;
extern int fBC384yyr1_template;
/*LX_LEX_PARSER*/
T0* r384yyr1_template(void);
/*LX_LEX_PARSER*/
void r384make_with_buffer(T384* C,T0* a1);
/*LX_LEX_PARSER*/
void r384process_singleton_unbounded_iteration(T384* C,T2 a1);
/*LX_LEX_PARSER*/
void r384process_rule(T384* C,T0* a1);
extern T0*oBC384yytypes1_template;
extern int fBC384yytypes1_template;
/*LX_LEX_PARSER*/
T0* r384yytypes1_template(void);
/*LX_LEX_PARSER*/
void r384process_character(T384* C,T2 a1);
/*LX_LEX_PARSER*/
T2 r384yy_null_trans_state(T384* C,T2 a1);
/*LX_LEX_PARSER*/
void r384put_back_string(T384* C,T0* a1);
/*LX_LEX_PARSER*/
void r384process_singleton_bounded_iteration(T384* C,T2 a1,T2 a2);
/*LX_LEX_PARSER*/
T0* r384dot_character_class(T384* C);
/*LX_LEX_PARSER*/
void r384report_incomplete_name_definition_error(T384* C);
/*LX_LEX_PARSER*/
void r384report_negative_range_in_character_class_error(T384* C);
/*LX_LEX_PARSER*/
void r384report_full_and_variable_trailing_context_error(T384* C);
extern T0*oBC385yy_accept_template;
extern int fBC385yy_accept_template;
/*LX_LEX_PARSER*/
T0* r384yy_accept_template(void);
/*LX_LEX_PARSER*/
void r384read_token(T384* C);
/*LX_LEX_PARSER*/
void r384report_start_condition_specified_twice_warning(T384* C,T0* a1);
/*LX_LEX_PARSER*/
void r384yy_init_value_stacks(T384* C);
/*LX_LEX_PARSER*/
void r384add_new_start_condition(T384* C,T0* a1,T6 a2);
/*LX_LEX_PARSER*/
T2 r384yy_previous_state(T384* C);
extern T0*oBC384yypgoto_template;
extern int fBC384yypgoto_template;
/*LX_LEX_PARSER*/
T0* r384yypgoto_template(void);
/*LX_LEX_PARSER*/
void r384yy_refill_input_buffer(T384* C);
extern T0*oBC384yytypes2_template;
extern int fBC384yytypes2_template;
/*LX_LEX_PARSER*/
T0* r384yytypes2_template(void);
/*LX_LEX_PARSER*/
T0* r384yy_fixed_array(T0* a1);
extern T0*oBC385yy_meta_template;
extern int fBC385yy_meta_template;
/*LX_LEX_PARSER*/
T0* r384yy_meta_template(void);
/*LX_LEX_PARSER*/
void r384report_character_out_of_range_error(T384* C,T0* a1);
/*LX_LEX_PARSER*/
void r384process_singleton_series(T384* C);
/*LX_LEX_PARSER*/
void r384process_bol_rule(T384* C,T0* a1);
/*LX_LEX_PARSER*/
T0* r384new_epsilon_nfa(T384* C);
extern T0*oBC385yy_base_template;
extern int fBC385yy_base_template;
/*LX_LEX_PARSER*/
T0* r384yy_base_template(void);
/*LX_LEX_PARSER*/
T0* r384append_eol_to_regexp(T384* C,T0* a1);
/*LX_LEX_PARSER*/
void r384report_full_and_reject_error(T384* C);
/*LX_LEX_PARSER*/
T0* r384append_character_to_character_class(T384* C,T2 a1,T0* a2);
/*LX_LEX_PARSER*/
T2 r384text_count(T384* C);
/*LX_LEX_PARSER*/
T0* r384new_file_buffer(T0* a1);
/*LX_LEX_PARSER*/
void r384report_multiple_eof_rules_error(T384* C,T0* a1);
/*LX_LEX_PARSER*/
void r384process_singleton_plus(T384* C);
/*LX_LEX_PARSER*/
void r384yy_initialize(T384* C);
/*LX_LEX_PARSER*/
void r384push_start_condition(T384* C,T0* a1,T0* a2);
/*LX_LEX_PARSER*/
T0* r384text(T384* C);
/*LX_LEX_PARSER*/
void r384build_eof_action(T384* C,T0* a1);
/*LX_LEX_PARSER*/
void r384report_missing_bracket_error(T384* C);
/*LX_LEX_PARSER*/
T0* r384new_symbol_nfa(T384* C,T2 a1);
/*LX_LEX_PARSER*/
void r384process_singleton_symbol_class(T384* C,T0* a1);
extern T0*oBC392eof_nfa;
extern int fBC392eof_nfa;
/*LX_LEX_PARSER*/
T0* r384eof_nfa(void);
/*LX_LEX_PARSER*/
void r384report_undefined_definition_error(T384* C,T0* a1);
/*LX_LEX_PARSER*/
void r384yy_clear_value_stacks(T384* C);
extern T0*oBC385yy_nxt_template;
extern int fBC385yy_nxt_template;
/*LX_LEX_PARSER*/
T0* r384yy_nxt_template(void);
/*LX_LEX_PARSER*/
void r384report_unrecognized_option_error(T384* C,T0* a1);
/*LX_LEX_PARSER*/
void r384yy_set_line_column(T384* C);
/*LX_LEX_PARSER*/
void r384yy_build_parser_tables(T384* C);
/*LX_LEX_PARSER*/
void r384report_directive_expected_error(T384* C);
/*LX_LEX_PARSER*/
void r384process_singleton_string(T384* C,T2 a1);
/*LX_LEX_PARSER*/
void r384build_equiv_classes(T384* C);
/*LX_LEX_PARSER*/
T0* r384new_symbol_class_nfa(T384* C,T0* a1);
/*LX_LEX_PARSER*/
T6 r384valid_start_condition(T2 a1);
/*LX_LEX_PARSER*/
void r384set_action(T384* C,T0* a1);
/*LX_LEX_PARSER*/
T0* r384new_unbounded_iteration_nfa(T384* C,T0* a1,T2 a2);
/*LX_LEX_PARSER*/
void r384yy_set_beginning_of_line(T384* C);
/*LX_LEX_PARSER*/
void r384override_options(T384* C);
/*LX_LEX_PARSER*/
T0* r384new_bounded_iteration_nfa(T384* C,T0* a1,T2 a2,T2 a3);
/*LX_LEX_PARSER*/
void r384process_singleton_optional(T384* C);
/*LX_LEX_PARSER*/
void r384report_trailing_context_used_twice_error(T384* C);
extern T0*oBC391empty_buffer;
extern int fBC391empty_buffer;
/*LX_LEX_PARSER*/
T0* r384empty_buffer(void);
/*LX_LEX_PARSER*/
void r384report_error(T384* C,T0* a1);
/*LX_LEX_PARSER*/
T0* r384append_character_to_string(T384* C,T2 a1,T0* a2);
/*LX_LEX_PARSER*/
void r384process_singleton_star(T384* C);
/*LX_LEX_PARSER*/
void r384process_singleton_fixed_iteration(T384* C,T2 a1);
extern T0*oBC384yydefact_template;
extern int fBC384yydefact_template;
/*LX_LEX_PARSER*/
T0* r384yydefact_template(void);
/*LX_LEX_PARSER*/
void r384process_eof_rule(T384* C);
extern T0*oBC385yy_chk_template;
extern int fBC385yy_chk_template;
/*LX_LEX_PARSER*/
T0* r384yy_chk_template(void);
/*LX_LEX_PARSER*/
T0* r384new_nfa_from_character_class(T384* C,T0* a1);
extern T0*oBC384yycheck_template;
extern int fBC384yycheck_template;
/*LX_LEX_PARSER*/
T0* r384yycheck_template(void);
/*LX_LEX_PARSER*/
T0* r384new_character_class(T384* C);
/*LX_LEX_PARSER*/
T0* r384filename(T384* C);
/*LX_LEX_PARSER*/
void r384report_start_condition_declared_twice_error(T384* C,T0* a1);
/*LX_LEX_PARSER*/
T0* r384yyfixed_array(T0* a1);
/*LX_LEX_PARSER*/
void r384process_singleton_char(T384* C,T2 a1);
extern T0*oBC384yydefgoto_template;
extern int fBC384yydefgoto_template;
/*LX_LEX_PARSER*/
T0* r384yydefgoto_template(void);
/*LX_LEX_PARSER*/
void r384yy_pop_last_value(T384* C,T2 a1);
/*LX_LEX_PARSER*/
void r384yy_set_content(T384* C,T0* a1);
extern T0*oBC384yypact_template;
extern int fBC384yypact_template;
/*LX_LEX_PARSER*/
T0* r384yypact_template(void);
/*LX_LEX_PARSER*/
void r384set_start_condition(T384* C,T2 a1);
/*LX_LEX_PARSER*/
void r384yy_build_tables(T384* C);
/*LX_LEX_PARSER*/
void r384make_lex_scanner_from_description(T384* C,T0* a1,T0* a2);
/*LX_LEX_PARSER*/
void r384report_bad_start_condition_error(T384* C,T0* a1);
/*LX_LEX_PARSER*/
void r384less(T384* C,T2 a1);
/*LX_LEX_PARSER*/
void r384report_bad_character_class_error(T384* C);
/*LX_LEX_PARSER*/
void r384make_from_description(T384* C,T0* a1,T0* a2);
/*LX_ALL_START_CONDITIONS_EOF_ERROR*/
T0* r480arguments(void);
/*LX_ALL_START_CONDITIONS_EOF_ERROR*/
void r480make(T480* C,T0* a1,T2 a2);
/*LX_ALL_START_CONDITIONS_EOF_ERROR*/
T0* r480message(T480* C,T0* a1);
/*LX_ALL_START_CONDITIONS_EOF_ERROR*/
T0* r480default_message(T480* C);
/*YY_BUFFER*/
void r410set_position(T410* C,T2 a1,T2 a2,T2 a3);
extern T2 oBC410default_capacity;
/*YY_BUFFER*/
void r410make(T410* C,T0* a1);
/*YY_BUFFER*/
void r410make_from_buffer(T410* C,T0* a1);
/*YY_BUFFER*/
void r410resize(T410* C);
/*YY_BUFFER*/
void r410compact_right(T410* C);
/*YY_BUFFER*/
T0* r410new_default_buffer(T2 a1);
/*LX_BAD_ITERATION_VALUES_ERROR*/
T0* r490arguments(void);
/*LX_BAD_ITERATION_VALUES_ERROR*/
void r490make(T490* C,T0* a1,T2 a2);
/*LX_BAD_ITERATION_VALUES_ERROR*/
T0* r490message(T490* C,T0* a1);
/*LX_BAD_ITERATION_VALUES_ERROR*/
T0* r490default_message(T490* C);
/*LX_CHARACTER_OUT_OF_RANGE_ERROR*/
T0* r441arguments(void);
/*LX_CHARACTER_OUT_OF_RANGE_ERROR*/
void r441make(T441* C,T0* a1,T2 a2,T0* a3);
/*LX_CHARACTER_OUT_OF_RANGE_ERROR*/
T0* r441message(T441* C,T0* a1);
/*LX_CHARACTER_OUT_OF_RANGE_ERROR*/
T0* r441default_message(T441* C);
/*LX_ACTION_FACTORY*/
T0* r461new_action(T0* a1);
/*LX_BAD_START_CONDITION_LIST_ERROR*/
T0* r479arguments(void);
/*LX_BAD_START_CONDITION_LIST_ERROR*/
void r479make(T479* C,T0* a1,T2 a2);
/*LX_BAD_START_CONDITION_LIST_ERROR*/
T0* r479message(T479* C,T0* a1);
/*LX_BAD_START_CONDITION_LIST_ERROR*/
T0* r479default_message(T479* C);
/*LX_BAD_CHARACTER_ERROR*/
T0* r446arguments(void);
/*LX_BAD_CHARACTER_ERROR*/
void r446make(T446* C,T0* a1,T2 a2,T0* a3);
/*LX_BAD_CHARACTER_ERROR*/
T0* r446message(T446* C,T0* a1);
/*LX_BAD_CHARACTER_ERROR*/
T0* r446default_message(T446* C);
/*LX_DIRECTIVE_EXPECTED_ERROR*/
T0* r419arguments(void);
/*LX_DIRECTIVE_EXPECTED_ERROR*/
void r419make(T419* C,T0* a1,T2 a2);
/*LX_DIRECTIVE_EXPECTED_ERROR*/
T0* r419message(T419* C,T0* a1);
/*LX_DIRECTIVE_EXPECTED_ERROR*/
T0* r419default_message(T419* C);
/*UT_CANNOT_READ_FILE_ERROR*/
T0* r374arguments(void);
/*UT_CANNOT_READ_FILE_ERROR*/
void r374make(T374* C,T0* a1);
/*UT_CANNOT_READ_FILE_ERROR*/
T0* r374message(T374* C,T0* a1);
/*UT_CANNOT_READ_FILE_ERROR*/
T0* r374default_message(T374* C);
/*LX_UNRECOGNIZED_DIRECTIVE_ERROR*/
T0* r418arguments(void);
/*LX_UNRECOGNIZED_DIRECTIVE_ERROR*/
void r418make(T418* C,T0* a1,T2 a2);
/*LX_UNRECOGNIZED_DIRECTIVE_ERROR*/
T0* r418message(T418* C,T0* a1);
/*LX_UNRECOGNIZED_DIRECTIVE_ERROR*/
T0* r418default_message(T418* C);
/*LX_DFA_STATE*/
T6 r59is_equal(T59* C,T0* a1);
extern T0*oBC59rule_sorter;
extern int fBC59rule_sorter;
/*LX_DFA_STATE*/
T0* r59rule_sorter(void);
/*LX_DFA_STATE*/
T6 r59se_assigned_from(T0* a1);
extern T0*oBC59bubble_sorter;
extern int fBC59bubble_sorter;
/*LX_DFA_STATE*/
T0* r59bubble_sorter(void);
/*LX_DFA_STATE*/
T6 r59same_type(T59* C,T0* a1);
/*LX_DFA_STATE*/
void r59make(T59* C,T0* a1,T2 a2,T2 a3);
/*LX_DFA_STATE*/
void r59partition(T59* C,T0* a1);
/*LX_DFA_STATE*/
T6 r59conforms_to(T59* C,T0* a1);
/*LX_DFA_STATE*/
T6 r59is_accepting(T59* C);
/*LX_DFA_STATE*/
T6 r59is_accepting_head(T59* C);
/*LX_DFA_STATE*/
T0* r59new_state(T59* C,T2 a1);
/*LX_START_CONDITION_DECLARED_TWICE_ERROR*/
T0* r420arguments(void);
/*LX_START_CONDITION_DECLARED_TWICE_ERROR*/
void r420make(T420* C,T0* a1,T2 a2,T0* a3);
/*LX_START_CONDITION_DECLARED_TWICE_ERROR*/
T0* r420message(T420* C,T0* a1);
/*LX_START_CONDITION_DECLARED_TWICE_ERROR*/
T0* r420default_message(T420* C);
/*UC_STRING*/
void r156copy(T156* C,T0* a1);
/*UC_STRING*/
T0* r156substring(T156* C,T2 a1,T2 a2);
/*UC_STRING*/
T2 r156occurrences(T156* C,T3 a1);
/*UC_STRING*/
void r156reset_byte_index_cache(T156* C);
/*UC_STRING*/
void r156wipe_out(T156* C);
/*UC_STRING*/
T2 r156item_code(T156* C,T2 a1);
/*UC_STRING*/
T3 r156character_item_at_byte_index(T156* C,T2 a1);
/*UC_STRING*/
void r156_7Pmake(T156* C,T2 a1);
/*UC_STRING*/
void r156put(T156* C,T3 a1,T2 a2);
/*UC_STRING*/
T6 r156is_equal(T156* C,T0* a1);
/*UC_STRING*/
T3 r156item(T156* C,T2 a1);
/*UC_STRING*/
void r156resize_byte_storage(T156* C,T2 a1);
/*UC_STRING*/
T6 r156valid_index(T156* C,T2 a1);
/*UC_STRING*/
void r156append(T156* C,T0* a1);
/*UC_STRING*/
T6 r156se_assigned_from(T0* a1);
/*UC_STRING*/
T2 r156byte_index(T156* C,T2 a1);
/*UC_STRING*/
T0* r156clone(T0* a1);
/*UC_STRING*/
void r156make_from_string(T156* C,T0* a1);
/*UC_STRING*/
void r156move_bytes_right(T156* C,T2 a1,T2 a2);
/*UC_STRING*/
void r156set_count(T156* C,T2 a1);
/*UC_STRING*/
T2 r156next_byte_index(T156* C,T2 a1);
/*UC_STRING*/
T6 r156same_type(T156* C,T0* a1);
/*UC_STRING*/
void r156remove_tail(T156* C,T2 a1);
extern T0*oBC156dummy_uc_string;
extern int fBC156dummy_uc_string;
/*UC_STRING*/
T0* r156dummy_uc_string(void);
/*UC_STRING*/
void r156make(T156* C,T2 a1);
/*UC_STRING*/
void r156append_string(T156* C,T0* a1);
/*UC_STRING*/
T2 r156code_occurrences(T156* C,T2 a1);
/*UC_STRING*/
void r156make_filled(T156* C,T3 a1,T2 a2);
/*UC_STRING*/
void r156append_substring(T156* C,T0* a1,T2 a2,T2 a3);
/*UC_STRING*/
T2 r156item_code_at_byte_index(T156* C,T2 a1);
/*UC_STRING*/
T0* r156string(T156* C);
extern T0*oBC84platform;
/*UC_STRING*/
void r156extend(T156* C,T3 a1);
/*UC_STRING*/
T2 r156hash_code(T156* C);
/*UC_STRING*/
T0* r156prefixed_string(T156* C,T0* a1);
/*UC_STRING*/
T6 r156conforms_to(T156* C,T0* a1);
/*UC_STRING*/
void r156keep_head(T156* C,T2 a1);
/*UC_STRING*/
T2 r156to_integer(T156* C);
/*UC_STRING*/
T0* r156as_lower(T156* C);
/*UC_STRING*/
T0* r156new_empty_string(T2 a1);
/*UC_STRING*/
void r156append_character(T156* C,T3 a1);
/*UC_STRING*/
void r156make_from_substring(T156* C,T0* a1,T2 a2,T2 a3);
/*UC_STRING*/
void r156put_code_at_byte_index(T156* C,T2 a1,T2 a2,T2 a3);
/*UC_STRING*/
void r156fill_with(T156* C,T3 a1);
/*UC_STRING*/
void r156put_character_at_byte_index(T156* C,T3 a1,T2 a2,T2 a3);
/*UC_STRING*/
void r156_7Pappend_string(T156* C,T0* a1);
/*UC_STRING*/
void r156resize(T156* C,T2 a1);
/*UC_STRING*/
void r156put_substring_at_byte_index(T156* C,T0* a1,T2 a2,T2 a3,T2 a4,T2 a5);
extern T0*oBC158utf8;
/*UC_STRING*/
void r156move_bytes_left(T156* C,T2 a1,T2 a2);
/*UC_STRING*/
T8 r156to_external(T156* C);
/*UC_STRING*/
void r156to_lower(T156* C);
/*UC_STRING*/
T0* r156twin(T156* C);
/*UC_STRING*/
T0* r156to_utf8(T156* C);
/*UC_STRING*/
T0* r156_ix_43(T156* C,T0* a1);
extern T0*oBC154unicode;
/*UC_STRING*/
T2 r156_7Phash_code(T156* C);
/*UC_STRING*/
void r156swap(T156* C,T2 a1,T2 a2);
/*LX_EQUIVALENCE_CLASSES*/
void r228build(T228* C);
/*LX_EQUIVALENCE_CLASSES*/
void r228put(T228* C,T2 a1);
/*LX_EQUIVALENCE_CLASSES*/
T2 r228upper(T228* C);
/*LX_EQUIVALENCE_CLASSES*/
T2 r228lower(T228* C);
/*LX_EQUIVALENCE_CLASSES*/
T6 r228valid_symbol_class(T228* C,T0* a1);
/*LX_EQUIVALENCE_CLASSES*/
T2 r228capacity(T228* C);
/*LX_EQUIVALENCE_CLASSES*/
T0* r228to_array(T228* C,T2 a1,T2 a2);
/*LX_EQUIVALENCE_CLASSES*/
void r228make(T228* C,T2 a1,T2 a2);
/*LX_EQUIVALENCE_CLASSES*/
T6 r228valid_symbol(T228* C,T2 a1);
/*LX_EQUIVALENCE_CLASSES*/
T2 r228equivalence_class(T228* C,T2 a1);
/*LX_EQUIVALENCE_CLASSES*/
void r228add(T228* C,T0* a1);
/*LX_EQUIVALENCE_CLASSES*/
T6 r228is_representative(T228* C,T2 a1);
/*LX_EQUIVALENCE_CLASSES*/
void r228initialize(T228* C);
/*LX_RULE_CANNOT_BE_MATCHED_ERROR*/
T0* r219arguments(void);
/*LX_RULE_CANNOT_BE_MATCHED_ERROR*/
void r219make(T219* C,T0* a1,T2 a2);
/*LX_RULE_CANNOT_BE_MATCHED_ERROR*/
T0* r219message(T219* C,T0* a1);
/*LX_RULE_CANNOT_BE_MATCHED_ERROR*/
T0* r219default_message(T219* C);
/*YY_FILE_BUFFER*/
void r409fill(T409* C);
/*YY_FILE_BUFFER*/
void r409compact_left(T409* C);
/*YY_FILE_BUFFER*/
void r409set_position(T409* C,T2 a1,T2 a2,T2 a3);
/*YY_FILE_BUFFER*/
void r409make_from_string(T409* C,T0* a1);
/*YY_FILE_BUFFER*/
void r409make_from_buffer(T409* C,T0* a1);
/*YY_FILE_BUFFER*/
void r409resize(T409* C);
/*YY_FILE_BUFFER*/
void r409compact_right(T409* C);
/*YY_FILE_BUFFER*/
T0* r409new_default_buffer(T2 a1);
/*YY_FILE_BUFFER*/
void r409make_with_size(T409* C,T0* a1,T2 a2);
/*YY_FILE_BUFFER*/
void r409set_file(T409* C,T0* a1);
/*YY_FILE_BUFFER*/
void r409flush(T409* C);
/*KL_STDOUT_FILE*/
void r176make(T176* C);
/*KL_STDOUT_FILE*/
void r176old_put_string(T176* C,T0* a1);
/*KL_STDOUT_FILE*/
void r176old_put_character(T176* C,T3 a1);
/*KL_STDOUT_FILE*/
void r176put_integer(T176* C,T2 a1);
/*KL_STDOUT_FILE*/
void r176put_line(T176* C,T0* a1);
/*KL_STDOUT_FILE*/
void r176old_make(T176* C);
/*KL_STDOUT_FILE*/
void r176write_buffer(T176* C);
/*KL_STDOUT_FILE*/
void r176put_string(T176* C,T0* a1);
/*LX_BAD_CHARACTER_CLASS_ERROR*/
T0* r445arguments(void);
/*LX_BAD_CHARACTER_CLASS_ERROR*/
void r445make(T445* C,T0* a1,T2 a2);
/*LX_BAD_CHARACTER_CLASS_ERROR*/
T0* r445message(T445* C,T0* a1);
/*LX_BAD_CHARACTER_CLASS_ERROR*/
T0* r445default_message(T445* C);
/*KL_STDERR_FILE*/
void r416make(T416* C);
/*KL_STDERR_FILE*/
void r416old_put_string(T0* a1);
/*KL_STDERR_FILE*/
void r416put_integer(T2 a1);
/*KL_STDERR_FILE*/
void r416put_line(T0* a1);
/*KL_STDERR_FILE*/
void r416put_string(T0* a1);
/*LX_NAME_DEFINED_TWICE_ERROR*/
T0* r434arguments(void);
/*LX_NAME_DEFINED_TWICE_ERROR*/
void r434make(T434* C,T0* a1,T2 a2,T0* a3);
/*LX_NAME_DEFINED_TWICE_ERROR*/
T0* r434message(T434* C,T0* a1);
/*LX_NAME_DEFINED_TWICE_ERROR*/
T0* r434default_message(T434* C);
/*LX_SINGLETON*/
void r320make(T320* C,T2 a1,T2 a2,T2 a3,T2 a4);
/*LX_COMPRESSED_DFA*/
void r221put_entry(T221* C,T2 a1,T2 a2,T0* a3);
/*LX_COMPRESSED_DFA*/
void r221build(T221* C);
/*LX_COMPRESSED_DFA*/
void r221put_singletons(T221* C);
/*LX_COMPRESSED_DFA*/
void r221print_constants(T221* C,T0* a1);
/*LX_COMPRESSED_DFA*/
void r221print_action_routine(T221* C,T0* a1,T0* a2);
/*LX_COMPRESSED_DFA*/
void r221initialize_dfa(T221* C,T0* a1,T2 a2,T2 a3);
/*LX_COMPRESSED_DFA*/
T0* r221dangerous_variable_trail_rules(T221* C);
/*LX_COMPRESSED_DFA*/
void r221build_base_def_tables(T221* C);
/*LX_COMPRESSED_DFA*/
void r221build_accept_tables(T221* C);
/*LX_COMPRESSED_DFA*/
void r221print_eiffel_array(T221* C,T0* a1,T0* a2,T0* a3);
/*LX_COMPRESSED_DFA*/
void r221print_scanner(T221* C,T0* a1);
/*LX_COMPRESSED_DFA*/
void r221put_jam_state(T221* C);
extern T0*oBC221rule_sorter;
extern int fBC221rule_sorter;
/*LX_COMPRESSED_DFA*/
T0* r221rule_sorter(void);
/*LX_COMPRESSED_DFA*/
void r221print_inspect_actions(T221* C,T0* a1);
/*LX_COMPRESSED_DFA*/
void r221_52Pprint_backing_up_report(T221* C,T0* a1);
/*LX_COMPRESSED_DFA*/
T0* r221clone(T0* a1);
/*LX_COMPRESSED_DFA*/
void r221print_status_report_routines(T221* C,T0* a1);
/*LX_COMPRESSED_DFA*/
void r221print_eiffel_header(T221* C,T0* a1);
/*LX_COMPRESSED_DFA*/
void r221print_eiffel_tables(T221* C,T0* a1);
/*LX_COMPRESSED_DFA*/
void r221put_start_condition(T221* C,T0* a1);
/*LX_COMPRESSED_DFA*/
void r221put_templates(T221* C);
/*LX_COMPRESSED_DFA*/
void r221set_nfa_state_ids(T0* a1);
/*LX_COMPRESSED_DFA*/
void r221make(T221* C,T0* a1);
/*LX_COMPRESSED_DFA*/
void r221print_transitions(T221* C,T0* a1,T0* a2);
/*LX_COMPRESSED_DFA*/
T0* r221integer_sorter(void);
/*LX_COMPRESSED_DFA*/
void r221build_eof_rules(T221* C,T0* a1,T2 a2,T2 a3);
/*LX_COMPRESSED_DFA*/
void r221print_binary_search_actions(T221* C,T0* a1,T2 a2,T2 a3);
/*LX_COMPRESSED_DFA*/
void r221build_nxt_chk_tables(T221* C);
/*LX_COMPRESSED_DFA*/
void r221print_readable_character(T2 a1,T0* a2);
/*LX_COMPRESSED_DFA*/
void r221print_action_call(T221* C,T0* a1,T0* a2);
/*LX_COMPRESSED_DFA*/
void r221print_rule_line_numbers(T221* C,T0* a1,T0* a2);
/*LX_COMPRESSED_DFA*/
void r221print_eiffel_code(T221* C,T0* a1);
/*LX_COMPRESSED_DFA*/
void r221resize(T221* C,T2 a1);
/*LX_COMPRESSED_DFA*/
void r221put_singleton(T221* C,T0* a1);
/*LX_COMPRESSED_DFA*/
void r221print_action_body(T221* C,T0* a1,T0* a2);
/*LX_COMPRESSED_DFA*/
void r221put_state(T221* C,T0* a1);
/*LX_COMPRESSED_DFA*/
void r221_52Pprint_constants(T221* C,T0* a1);
/*LX_COMPRESSED_DFA*/
void r221print_backing_up_report(T221* C,T0* a1);
/*LX_COMPRESSED_DFA*/
void r221print_actions(T221* C,T0* a1);
extern T0*oBC221null_state;
extern int fBC221null_state;
/*LX_COMPRESSED_DFA*/
T0* r221null_state(T221* C);
/*LX_COMPRESSED_DFA*/
void r221print_build_tables(T221* C,T0* a1);
/*LX_COMPRESSED_DFA*/
void r221print_eof_actions(T221* C,T0* a1);
/*LX_COMPRESSED_DFA*/
void r221build_transitions(T221* C,T0* a1);
/*LX_COMPRESSED_DFA*/
void r221initialize(T221* C,T0* a1);
/*LX_COMPRESSED_DFA*/
void r221put_eob_state(T221* C);
/*LX_COMPRESSED_DFA*/
void r221build_rules(T221* C,T0* a1);
/*LX_COMPRESSED_DFA*/
T0* r221new_state(T221* C,T0* a1);
/*STD_OUTPUT*/
void r177make(T177* C);
/*STD_OUTPUT*/
void r177flush(T177* C);
/*STD_OUTPUT*/
void r177write_buffer(T177* C);
/*UT_SYNTAX_ERROR*/
T0* r408arguments(void);
/*UT_SYNTAX_ERROR*/
void r408make(T408* C,T0* a1,T2 a2);
/*UT_SYNTAX_ERROR*/
T0* r408message(T408* C,T0* a1);
/*UT_SYNTAX_ERROR*/
T0* r408default_message(T408* C);
/*LX_ITERATION_NOT_POSITIVE_ERROR*/
T0* r491arguments(void);
/*LX_ITERATION_NOT_POSITIVE_ERROR*/
void r491make(T491* C,T0* a1,T2 a2);
/*LX_ITERATION_NOT_POSITIVE_ERROR*/
T0* r491message(T491* C,T0* a1);
/*LX_ITERATION_NOT_POSITIVE_ERROR*/
T0* r491default_message(T491* C);
extern T0*oBC19command_arguments;
extern int fBC19command_arguments;
/*KL_ARGUMENTS*/
T0* r172command_arguments(void);
/*KL_ARGUMENTS*/
T0* r172argument(T2 a1);
/*LX_INCOMPLETE_NAME_DEFINITION_ERROR*/
T0* r435arguments(void);
/*LX_INCOMPLETE_NAME_DEFINITION_ERROR*/
void r435make(T435* C,T0* a1,T2 a2);
/*LX_INCOMPLETE_NAME_DEFINITION_ERROR*/
T0* r435message(T435* C,T0* a1);
/*LX_INCOMPLETE_NAME_DEFINITION_ERROR*/
T0* r435default_message(T435* C);
/*GELEX*/
void r12build_dfa(T12* C);
/*GELEX*/
void r12print_scanner(T12* C);
/*GELEX*/
T0* r12arguments(void);
/*GELEX*/
void r12override_description(T12* C,T0* a1);
/*GELEX*/
void r12parse_input_file(T12* C);
/*GELEX*/
void r12execute(T12* C);
/*GELEX*/
void r12print_backing_up_report(T12* C);
extern T0*oBC175error;
extern int fBC175error;
/*KL_STANDARD_FILES*/
T0* r175error(void);
extern T0*oBC175input;
extern int fBC175input;
/*KL_STANDARD_FILES*/
T0* r175input(void);
extern T0*oBC175output;
extern int fBC175output;
/*KL_STANDARD_FILES*/
T0* r175output(void);
extern T2 oBC527maximum_character_code;
extern int fBC527maximum_character_code;
/*KL_PLATFORM*/
T2 r527maximum_character_code(T527* C);
extern T0*oBC165lowercase_24;
extern int fBC165lowercase_24;
/*UC_UNICODE_ROUTINES*/
T0* r164lowercase_24(void);
extern T0*oBC165lowercase_21;
extern int fBC165lowercase_21;
/*UC_UNICODE_ROUTINES*/
T0* r164lowercase_21(void);
extern T0*oBC165lowercase_06;
extern int fBC165lowercase_06;
/*UC_UNICODE_ROUTINES*/
T0* r164lowercase_06(void);
extern T0*oBC165lowercase_05;
extern int fBC165lowercase_05;
/*UC_UNICODE_ROUTINES*/
T0* r164lowercase_05(void);
extern T0*oBC165lowercase_04;
extern int fBC165lowercase_04;
/*UC_UNICODE_ROUTINES*/
T0* r164lowercase_04(void);
extern T0*oBC165lowercase_03;
extern int fBC165lowercase_03;
/*UC_UNICODE_ROUTINES*/
T0* r164lowercase_03(void);
extern T0*oBC165lowercase_02;
extern int fBC165lowercase_02;
/*UC_UNICODE_ROUTINES*/
T0* r164lowercase_02(void);
extern T0*oBC165lowercase_01;
extern int fBC165lowercase_01;
/*UC_UNICODE_ROUTINES*/
T0* r164lowercase_01(void);
extern T0*oBC165lowercase_00;
extern int fBC165lowercase_00;
/*UC_UNICODE_ROUTINES*/
T0* r164lowercase_00(void);
extern T0*oBC165lowercase_ff;
extern int fBC165lowercase_ff;
/*UC_UNICODE_ROUTINES*/
T0* r164lowercase_ff(void);
/*UC_UNICODE_ROUTINES*/
T2 r164lower_code(T2 a1);
/*UC_UNICODE_ROUTINES*/
T6 r164valid_code(T2 a1);
extern T0*oBC165lowercase_1f;
extern int fBC165lowercase_1f;
/*UC_UNICODE_ROUTINES*/
T0* r164lowercase_1f(void);
extern T0*oBC165lowercase_1e;
extern int fBC165lowercase_1e;
/*UC_UNICODE_ROUTINES*/
T0* r164lowercase_1e(void);
extern T0*oBC165lowercase;
extern int fBC165lowercase;
/*UC_UNICODE_ROUTINES*/
T0* r164lowercase(void);
/*UT_BOOLEAN_FORMATTER*/
void r179put_eiffel_boolean(T0* a1,T6 a2);
/*UC_UTF8_ROUTINES*/
T2 r168encoded_next_value(T3 a1);
/*UC_UTF8_ROUTINES*/
T2 r168character_byte_count(T3 a1);
/*UC_UTF8_ROUTINES*/
T2 r168encoded_first_value(T3 a1);
/*UC_UTF8_ROUTINES*/
T2 r168code_byte_count(T2 a1);
/*UC_UTF8_ROUTINES*/
T2 r168encoded_byte_count(T3 a1);
/*UC_UTF8_ROUTINES*/
T2 r168substring_byte_count(T0* a1,T2 a2,T2 a3);
/*UT_ARRAY_FORMATTER*/
void r526put_integer_array(T0* a1,T0* a2,T2 a3,T2 a4);
/*KL_INTEGER_ROUTINES*/
T3 r83to_character(T2 a1);
/*KL_STRING_ROUTINES*/
T0* r153as_string(T0* a1);
/*KL_STRING_ROUTINES*/
T0* r153clone(T0* a1);
/*KL_STRING_ROUTINES*/
T0* r153appended_string(T0* a1,T0* a2);
/*KL_STRING_ROUTINES*/
T6 r153is_integer(T0* a1);
/*KL_STRING_ROUTINES*/
T0* r153appended_substring(T0* a1,T0* a2,T2 a3,T2 a4);
/*KL_STRING_ROUTINES*/
T0* r153new_empty_string(T0* a1,T2 a2);
/*KL_STRING_ROUTINES*/
T0* r153concat(T0* a1,T0* a2);
/*KL_STRING_ROUTINES*/
void r153append_substring_to_string(T0* a1,T0* a2,T2 a3,T2 a4);
extern T12*eiffel_root_object;
extern int se_argc;
extern char**se_argv;
#define SE_MAXID 534
extern T7* g[];
extern T7* t[];
void std_output_flush(void);
void initialize_eiffel_runtime(int argc,char*argv[]);
extern T7*ms426_479216981;
extern T7*ms420_155215853;
extern T7*ms419_1711904633;
extern T7*ms24_1606053737;
extern T7*ms448_1520688928;
extern T7*ms52_1338085634;
extern T7*ms435_1257878695;
extern T7*ms514_1158552108;
extern T7*ms179_18036;
extern T7*ms490_1753741984;
extern T7*ms449_1531431095;
extern T7*ms441_645257649;
extern T7*ms480_1308094803;
extern T7*ms485_596994766;
extern T7*ms408_1449702436;
extern T7*ms482_280487577;
extern T7*ms447_1686894687;
extern T7*ms427_927760026;
extern T7*ms416_10;
extern T7*ms526_192;
extern T7*ms526_279;
extern T7*ms526_4992;
extern T7*ms526_992;
extern T7*ms32_250860571;
extern T7*ms478_1692988587;
extern T7*ms176_10;
extern T7*ms428_1203377682;
extern T7*ms446_215272365;
extern T7*ms23_1556;
extern T7*ms436_135699103;
extern T7*ms513_1515383187;
extern T7*ms153_0;
extern T7*ms156_0;
extern T7*ms220_241860809;
extern T7*ms218_1868436966;
extern T7*ms374_988446515;
extern T7*ms168_0;
extern T7*ms219_679509108;
extern T7*ms52_279;
extern T7*ms443_19730319;
extern T7*ms491_465236511;
extern T7*ms442_178164711;
extern T7*ms444_111876583;
extern T7*ms494_823229232;
extern T7*ms418_1428321107;
extern T7*ms434_1062665526;
extern T7*ms445_1086870388;
extern T7*ms479_1083157669;
extern T7*ms516_1633989132;
extern T7*ms477_1231359120;
extern T7*ms515_1103229751;
extern T7*ms27_10;
extern T7*ms481_792132570;
extern T7*ms179_79251;
T7*se_ms(int c,char*e);
T7*se_string(char*e);
/*
-- This file is  free  software, which  comes  along  with  SmartEiffel. This
-- software  is  distributed  in the hope that it will be useful, but WITHOUT
-- ANY  WARRANTY;  without  even  the  implied warranty of MERCHANTABILITY or
-- FITNESS  FOR A PARTICULAR PURPOSE. You can modify it as you want, provided
-- this header is kept unaltered, and a notification of the changes is added.
-- You  are  allowed  to  redistribute  it and sell it, alone or as a part of
-- another product.
--       Copyright (C) 1994-2002 LORIA - INRIA - U.H.P. Nancy 1 - FRANCE
--          Dominique COLNET and Suzanne COLLIN - SmartEiffel@loria.fr
--                       http://SmartEiffel.loria.fr
--
*/
/*
  This file (SmartEiffel/sys/runtime/manifest_string_trace.h) is automatically
  included when the -manifest_string_trace command line flag is used.
*/

EIF_STRING se_ms_trace(int count, char* c_string, int li, int co, char* path);
void se_msi1(void);
void se_msi2(void);
void*se_ma88(int argc,...);
void*se_ma529(int argc,...);
void X228put(T0*C,T2 a1);
T0* X228to_array(T0*C,T2 a1,T2 a2);
void X228add(T0*C,T0* a1);
void X91sort(T0*C,T0* a1);
T6 X91has(T0*C,T2 a1);
void X99sort(T0*C,T0* a1);
T0* X7substring(T0*C,T2 a1,T2 a2);
T2 X7occurrences(T0*C,T3 a1);
void X7wipe_out(T0*C);
T2 X7item_code(T0*C,T2 a1);
void X7put(T0*C,T3 a1,T2 a2);
T6 X7is_equal(T0*C,T0* a1);
T3 X7item(T0*C,T2 a1);
void X7append(T0*C,T0* a1);
void X7set_count(T0*C,T2 a1);
T6 X7same_type(T0*C,T0* a1);
void X7remove_tail(T0*C,T2 a1);
void X7append_string(T0*C,T0* a1);
T0* X7string(T0*C);
void X7extend(T0*C,T3 a1);
T2 X7hash_code(T0*C);
T0* X7as_lower(T0*C);
T2 X7to_integer(T0*C);
void X7append_character(T0*C,T3 a1);
void X7resize(T0*C,T2 a1);
T8 X7to_external(T0*C);
void X7to_lower(T0*C);
T0* X7twin(T0*C);
T0* X7_ix_43(T0*C,T0* a1);
void X7swap(T0*C,T2 a1,T2 a2);
T0* X17twin(T0*C);
T6 X19se_assigned_from(T0*C,T0* a1);
T6 X19conforms_to(T0*C,T0* a1);
void X43put_new_line(T0*C);
void X43put_integer(T0*C,T2 a1);
void X43put_line(T0*C,T0* a1);
void X43put_character(T0*C,T3 a1);
void X43put_string(T0*C,T0* a1);
T0* X380name(T0*C);
T2 X380read_to_string(T0*C,T0* a1,T2 a2,T2 a3);
void X380read_character(T0*C);
T2 X380read_to_buffer(T0*C,T0* a1,T2 a2,T2 a3);
T6 X380end_of_input(T0*C);
T3 X380last_character(T0*C);
void X410fill(T0*C);
void X52print_scanner(T0*C,T0* a1);
void X52print_backing_up_report(T0*C,T0* a1);
T6 X235labeled(T0*C,T2 a1);
void X235record(T0*C,T0* a1);
void X40put_string(T0*C,T0* a1);
T2 X102item(T0*C,T2 a1);
T6 X102is_empty(T0*C);
void X102replace(T0*C,T2 a1,T2 a2);
T0* X25default_message(T0*C);

#ifdef __cplusplus
}
#endif
