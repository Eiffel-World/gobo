#ifdef __cplusplus
extern "C" {
#endif
/*
ANSI C code generated by SmartEiffel The GNU Eiffel Compiler, Eiffel tools and libraries
Release 1.0 (Friday December 6th 2002)
Copyright (C), 1994-2002 - LORIA - UHP - INRIA - FRANCE
Dominique COLNET and Suzanne COLLIN - SmartEiffel@loria.fr
http://SmartEiffel.loria.fr
C Compiler options used: 
*/

/*
-- This file is  free  software, which  comes  along  with  SmartEiffel. This
-- software  is  distributed  in the hope that it will be useful, but WITHOUT
-- ANY  WARRANTY;  without  even  the  implied warranty of MERCHANTABILITY or
-- FITNESS  FOR A PARTICULAR PURPOSE. You can modify it as you want, provided
-- this header is kept unaltered, and a notification of the changes is added.
-- You  are  allowed  to  redistribute  it and sell it, alone or as a part of
-- another product.
--       Copyright (C) 1994-2002 LORIA - INRIA - U.H.P. Nancy 1 - FRANCE
--          Dominique COLNET and Suzanne COLLIN - SmartEiffel@loria.fr
--                       http://SmartEiffel.loria.fr
--
*/
/*
  This file (SmartEiffel/sys/runtime/base.h) contains all basic Eiffel
  type definitions.
  This file is automatically included in the header for all modes of
  compilation: -boost, -no_check, -require_check, -ensure_check, ...
  This file is also included in the header of any cecil file (when the
  -cecil option is used).
  This file is also included in the header file of C++ wrappers (when
  using the external "C++" clause).
*/
#include <stdio.h>
#include <string.h>
#include <math.h>
#include <stdlib.h>
#include <signal.h>
#include <stddef.h>
#include <stdarg.h>
#include <limits.h>
#include <float.h>
#include <setjmp.h>
#include <sys/types.h>
#include <sys/stat.h>
#include <fcntl.h>
#if defined __USE_POSIX || defined __unix__ || defined _POSIX_C_SOURCE
#  include <unistd.h>
#endif
#if !defined(WIN32) && \
       (defined(WINVER) || defined(_WIN32_WINNT) || defined(_WIN32) || \
	defined(__WIN32__) || defined(__TOS_WIN__) || defined(_MSC_VER))
#  define WIN32 1
#endif
#ifdef WIN32
#  include <windows.h>
#else
#  ifndef O_RDONLY
#    include <sys/file.h>
#  endif
#  ifndef O_RDONLY
#    define O_RDONLY 0000
#  endif
#endif

#if defined(_MSC_VER) /* MSVC */
typedef signed char int8_t;
typedef signed short int16_t;
typedef signed int int32_t;
typedef signed __int64 int64_t;
#  define PRId8 "d"
#  define PRId16 "d"
#  define PRId32 "d"
#  define PRId64 "I64d"
#  define INT8_C(c) c
#  define INT16_C(c) c
#  define INT32_C(c) c
#  define INT64_C(c) c ## i64
#elif defined(__WATCOMC__) && (__WATCOMC__ <= 1100) /* WATCOM 11 or lower */
typedef signed char int8_t;
typedef signed short int16_t;
typedef signed long int int32_t;
typedef signed __int64 int64_t;
#  define PRId8 "d"
#  define PRId16 "d"
#  define PRId32 "d"
#  define PRId64 "Ld"
#  define INT8_C(c) c
#  define INT16_C(c) c
#  define INT32_C(c) c ## L
#  define INT64_C(c) c ## i64
#elif defined(__BORLANDC__) && (__BORLANDC__ < 0x600) /* Borland before 6.0 */
typedef signed char int8_t;
typedef signed short int16_t;
typedef signed long int int32_t;
typedef signed __int64 int64_t;
#  define PRId8 "d"
#  define PRId16 "d"
#  define PRId32 "Ld"
#  define PRId64 "I64Ld"
#  define INT8_C(c) c
#  define INT16_C(c) c
#  define INT32_C(c) c ## L
#  define INT64_C(c) c ## i64
#elif defined(__FreeBSD__) && (__FreeBSD__ < 5) /* FreeBSD before 5.0 */ && !defined (_SYS_INTTYPES_H_)
typedef signed char int8_t;
typedef signed short int16_t;
typedef signed long int int32_t;
typedef signed long long int int64_t;
#elif defined(__CYGWIN__) && defined(__BIT_TYPES_DEFINED__) /* Cygwin defines intxx_t in sys/types.h instead of inttypes.h */
#else
#  include <inttypes.h>
#  if !defined(INT8_MAX) && defined(INT16_MAX)
/* int8_t is not mandatory */
typedef int_least8_t int8_t;
#  endif
#endif

#if !defined(PRId16)
#  define PRId8 "d"
#  define PRId16 "d"
#  define PRId32 "ld"
#  define PRId64 "lld"
#elif !defined(PRId8)
#  define PRId8 "d"
#endif
#if !defined(INT16_C)
#  define INT8_C(c) c
#  define INT16_C(c) c
#  define INT32_C(c) c ## L
#  define INT64_C(c) c ## LL
#elif !defined(INT8_C)
#  define INT8_C(c) c
#endif
#if !defined(INT16_MIN)
#  define INT8_MIN (-INT8_C(127)-1)
#  define INT8_MAX (INT8_C(127))
#  define INT16_MIN (-INT16_C(32767)-1)
#  define INT16_MAX (INT16_C(32767))
#  define INT32_MIN (-INT32_C(2147483647)-1)
#  define INT32_MAX (INT32_C(2147483647))
#  define INT64_MIN (-INT64_C(9223372036854775807)-1)
#  define INT64_MAX (INT64_C(9223372036854775807))
#elif !defined(INT8_MIN)
#  define INT8_MIN (-INT8_C(127)-1)
#endif

/* Because ANSI C EXIT_* are not always defined: */
#ifndef EXIT_FAILURE
#  define EXIT_FAILURE 1
#endif
#ifndef EXIT_SUCCESS
#  define EXIT_SUCCESS 0
#endif

/*
   On Linux glibc systems, we need to use sig.* versions of jmp_buf,
   setjmp and longjmp to preserve the signal handling context.
   Currently, the way I figured to detect this is if _SIGSET_H_types has
   been defined in /usr/include/setjmp.h.
*/
#ifdef _SIGSET_H_types
#  define JMP_BUF    sigjmp_buf
#  define SETJMP(x)  sigsetjmp( (x), 1)
#  define LONGJMP    siglongjmp
#else
#  define JMP_BUF    jmp_buf
#  define SETJMP(x)  setjmp( (x) )
#  define LONGJMP    longjmp
#endif

/*
   Type to store reference objects Id:
 */
typedef int Tid;
typedef struct S0 T0;
struct S0{Tid id;};

/*
   The default channel used to print runtime error messages:
*/
#define SE_ERR stderr

/*
   Eiffel type INTEGER_8 is #1:
*/
typedef int8_t T1;
#define EIF_INTEGER_8 T1
#define M1 (INT8_C(0))
#define EIF_INTEGER_8_BITS (CHAR_BIT)
#define EIF_MINIMUM_INTEGER_8 (INT8_MIN)
#define EIF_MAXIMUM_INTEGER_8 (INT8_MAX)

/*
  Eiffel type INTEGER_16 is #10:
*/
typedef int16_t T10;
#define EIF_INTEGER_16 T10
#define M10 (INT16_C(0))
#define EIF_INTEGER_16_BITS (CHAR_BIT*sizeof(T10t))
#define EIF_MINIMUM_INTEGER_16 (INT16_MIN) /*-32768*/
#define EIF_MAXIMUM_INTEGER_16 (INT16_MAX) /*+32767*/

/*
  Eiffel type INTEGER or INTEGER_32 is #2:
*/
typedef int32_t T2;
#define EIF_INTEGER T2
#define EIF_INTEGER_32 T2
#define M2 (INT32_C(0))
#define EIF_INTEGER_BITS ((T2)(CHAR_BIT*sizeof(T2)))
#define EIF_INTEGER_32_BITS EIF_INTEGER_BITS
#define EIF_MINIMUM_INTEGER (INT32_MIN)
#define EIF_MAXIMUM_INTEGER (INT32_MAX)

/*
  Eiffel type INTEGER_64 is #11:
*/
typedef int64_t T11;
#define EIF_INTEGER_64 T11
#define M11 (INT64_C(0))
#define EIF_INTEGER_64_BITS (CHAR_BIT*sizeof(T11))
#define EIF_MINIMUM_INTEGER_64 (INT64_MIN)
#define EIF_MAXIMUM_INTEGER_64 (INT64_MAX)

/*
  Eiffel type CHARACTER is #3:
*/
typedef unsigned char T3;
#define EIF_CHARACTER T3
#define M3 (0)
#define EIF_CHARACTER_BITS (CHAR_BIT)
#define EIF_MINIMUM_CHARACTER_CODE (0)
#define EIF_MAXIMUM_CHARACTER_CODE (255)
#define T3code(x) ((T2)(x))
#define T3to_integer(x) ((T2)((signed char)(x)))
#define T3to_bit(x) (x)

/*
  Eiffel type REAL is #4:
*/
typedef float T4;
#define EIF_REAL T4
#define M4 (0.0)
#define EIF_REAL_BITS (CHAR_BIT*sizeof(float))
#define EIF_MINIMUM_REAL (-(FLT_MAX))
#define EIF_MAXIMUM_REAL (FLT_MAX)

/*
  Eiffel type DOUBLE is #5:
*/
typedef double T5;
#define EIF_DOUBLE T5
#define M5 (0.0)
#define EIF_DOUBLE_BITS (CHAR_BIT*sizeof(double))
#define EIF_MINIMUM_DOUBLE (-(DBL_MAX))
#define EIF_MAXIMUM_DOUBLE (DBL_MAX)

/*
  Eiffel type BOOLEAN is #6:
*/
typedef char T6;
#define EIF_BOOLEAN T6
#define M6 (0)
#define EIF_BOOLEAN_BITS (CHAR_BIT)

/*
   Eiffel type POINTER is #8:
*/
typedef void* T8;
#define EIF_POINTER T8
#define M8 (NULL)
#define EIF_POINTER_BITS (CHAR_BIT*sizeof(void*))

/*
  To use type STRING on the C side:
*/
#define EIF_STRING T7*

/*
  Some Other EIF_* defined in ETL:
*/
#define eif_access(x) ((char*)(x))
#define EIF_REFERENCE T0*
#define EIF_OBJ T0*
#define EIF_OBJECT EIF_OBJ

/*
   Wrappers for `malloc' and `calloc':
*/
void* se_malloc(size_t size);
void* se_calloc(size_t nmemb, size_t size);
#define SE_BOOST 1
#define SE_EXCEPTIONS 1

/*C Header Pass 1 :*/
typedef void*T135;
typedef struct S574 T574;
typedef struct S73 T73;
typedef struct S450 T450;
typedef struct S519 T519;
typedef struct S167 T167;
typedef struct S449 T449;
typedef struct S536 T536;
typedef void*T523;
typedef struct S178 T178;
typedef struct S369 T369;
typedef void*T642;
typedef struct S383 T383;
typedef struct S538 T538;
typedef struct S213 T213;
typedef struct S246 T246;
typedef struct S492 T492;
typedef struct S343 T343;
typedef struct S559 T559;
typedef struct S301 T301;
typedef struct S535 T535;
typedef struct S113 T113;
typedef struct S212 T212;
typedef struct S168 T168;
typedef void*T639;
typedef struct S303 T303;
typedef struct S474 T474;
typedef struct S634 T634;
typedef void*T396;
typedef struct S638 T638;
typedef void*T400;
typedef void*T589;
typedef void*T206;
typedef struct S599 T599;
typedef void*T477;
typedef struct S78 T78;
typedef struct S351 T351;
typedef void*T549;
typedef struct S442 T442;
typedef void*T173;
typedef struct S350 T350;
typedef void*T648;
typedef void*T183;
typedef struct S570 T570;
typedef void*T402;
typedef void*T643;
typedef struct S287 T287;
typedef struct S541 T541;
typedef struct S607 T607;
typedef struct S65 T65;
typedef struct S185 T185;
typedef struct S429 T429;
typedef struct S606 T606;
typedef struct S244 T244;
typedef void*T331;
typedef void*T247;
typedef struct S434 T434;
typedef void*T198;
typedef void*T641;
typedef struct S314 T314;
typedef struct S89 T89;
typedef void*T289;
typedef struct S22 T22;
typedef struct S490 T490;
typedef struct S515 T515;
typedef struct S404 T404;
typedef void*T202;
typedef void*T76;
typedef struct S67 T67;
typedef struct S243 T243;
typedef struct S604 T604;
typedef struct S619 T619;
typedef struct S587 T587;
typedef struct S605 T605;
typedef struct S537 T537;
typedef struct S316 T316;
typedef void*T420;
typedef struct S88 T88;
typedef void*T197;
typedef struct S245 T245;
typedef struct S80 T80;
typedef struct S501 T501;
typedef struct S595 T595;
typedef struct S169 T169;
typedef struct S624 T624;
typedef struct S329 T329;
typedef struct S372 T372;
typedef struct S361 T361;
typedef struct S305 T305;
typedef struct S637 T637;
typedef struct S539 T539;
typedef struct S82 T82;
typedef struct S231 T231;
typedef void*T390;
typedef struct S304 T304;
typedef void*T597;
typedef struct S138 T138;
typedef struct S42 T42;
typedef struct S564 T564;
typedef struct S612 T612;
typedef struct S210 T210;
typedef struct S571 T571;
typedef struct S416 T416;
typedef struct S602 T602;
typedef struct S39 T39;
typedef struct S276 T276;
typedef struct S320 T320;
typedef struct S552 T552;
typedef struct S274 T274;
typedef struct S543 T543;
typedef struct S578 T578;
typedef struct S650 T650;
typedef struct S110 T110;
typedef void*T176;
typedef struct S540 T540;
typedef struct S180 T180;
typedef void*T443;
typedef struct S563 T563;
typedef struct S403 T403;
typedef struct S601 T601;
typedef struct S7 T7;
typedef struct S577 T577;
typedef void*T215;
typedef struct S340 T340;
typedef void*T336;
typedef struct S273 T273;
typedef struct S551 T551;
typedef struct S109 T109;
typedef struct S45 T45;
typedef struct S216 T216;
typedef struct S408 T408;
typedef struct S92 T92;
typedef void*T566;
typedef struct S399 T399;
typedef void*T558;
typedef struct S421 T421;
typedef struct S81 T81;
typedef struct S556 T556;
typedef struct S315 T315;
typedef struct S380 T380;
typedef struct S487 T487;
typedef struct S84 T84;
typedef struct S12 T12;
typedef struct S235 T235;
typedef struct S527 T527;
typedef struct S397 T397;
typedef struct S550 T550;
typedef struct S275 T275;
typedef struct S603 T603;
typedef void*T187;
typedef struct S91 T91;
typedef struct S179 T179;
typedef struct S363 T363;
typedef void*T294;
typedef struct S491 T491;
typedef struct S545 T545;
typedef void*T598;
typedef void*T370;
typedef struct S573 T573;
typedef struct S600 T600;
typedef struct S189 T189;
typedef struct S46 T46;
typedef void*T640;
typedef struct S572 T572;
typedef void*T431;
typedef struct S526 T526;
typedef struct S207 T207;
typedef struct S337 T337;
typedef void*T295;
typedef struct S533 T533;
typedef void*T455;
typedef void*T230;
typedef void*T175;
typedef struct S542 T542;
typedef struct S476 T476;
typedef struct S203 T203;
typedef void*T137;
typedef struct S151 T151;
typedef struct S391 T391;
typedef struct S557 T557;
typedef struct S150 T150;
typedef struct S568 T568;
typedef struct S576 T576;
typedef void*T615;
typedef void*T415;
typedef void*T134;
typedef void*T117;
typedef void*T524;
typedef struct S427 T427;
typedef struct S465 T465;
typedef void*T489;
typedef struct S208 T208;
typedef struct S463 T463;
typedef struct S248 T248;
typedef struct S525 T525;
typedef struct S204 T204;
typedef struct S211 T211;
typedef struct S129 T129;
typedef void*T644;
typedef struct S260 T260;
typedef struct S341 T341;
typedef struct S575 T575;

/*C Header Pass 2 :*/
typedef T0**T172;
typedef T0**T480;
typedef T0**T308;
typedef T0**T518;
typedef T0**T257;
typedef T0**T319;
typedef T0**T652;
typedef T0**T446;
typedef T0**T182;
typedef T0**T141;
typedef T0**T279;
typedef T0**T132;
typedef T0**T411;
typedef T3*T9;
typedef T0**T87;
typedef T0**T238;
typedef T0**T394;
typedef T0**T219;
typedef T2*T79;
typedef T0**T522;
typedef T0**T75;

/*C Header Pass 3 :*/

/*C Header Pass 4 :*/
struct S574{Tid id;T0* _parameters;};
extern T574 M574;
struct S73{T75 _storage;T2 _capacity;T2 _upper;};
extern T73 M73;
struct S450{T0* _item;T0* _right;};
extern T450 M450;
struct S519{T522 _storage;T2 _capacity;T2 _upper;};
extern T519 M519;
struct S449{Tid id;T0* _equality_tester;T2 _count;T0* _first_cell;T0* _last_cell;T0* _internal_cursor;};
extern T449 M449;
struct S536{Tid id;T0* _parameters;};
extern T536 M536;
struct S178{T2 _count;T2 _capacity;T0* _storage;T0* _special_routines;T0* _internal_cursor;};
extern T178 M178;
struct S369{T2 _count;T2 _capacity;T0* _storage;T0* _special_;};
extern T369 M369;
struct S383{T0* _equality_tester;T2 _count;T2 _capacity;T0* _storage;T0* _special_;};
extern T383 M383;
struct S538{Tid id;T0* _parameters;};
extern T538 M538;
struct S246{T0* _equality_tester;T2 _count;T0* _first_cell;T0* _last_cell;T0* _internal_cursor;};
extern T246 M246;
struct S492{Tid id;T0* _name;T0* _string_name;T3 _last_character;T6 _end_of_file;T0* _character_buffer;T0* _path;T3 _old_last_character;T6 _old_end_of_file;T6 _push_back_flag;T8 _input_stream;T9 _buffer;T6 _end_reached;T2 _buffer_position;T2 _buffer_size;T2 _capacity;};
extern T492 M492;
struct S343{Tid id;T0* _container;T6 _after;T6 _before;T0* _current_cell;T0* _next_cursor;};
extern T343 M343;
struct S559{Tid id;T0* _equality_tester;T2 _count;T2 _capacity;T2 _last_position;T2 _modulus;T2 _free_slot;T2 _position;T2 _slots_position;T2 _clashes_previous_position;T2 _found_position;T0* _internal_cursor;T0* _key_equality_tester;T0* _items;T0* _keys;T0* _clashes;T0* _slots;T0* _special_item_routines;T0* _special_key_routines;};
extern T559 M559;
struct S301{Tid id;T0* _container;T2 _position;T0* _next_cursor;};
extern T301 M301;
struct S535{Tid id;T0* _parameters;};
extern T535 M535;
struct S113{T79 _storage;T2 _capacity;T2 _upper;};
extern T113 M113;
struct S212{T2 _count;T2 _capacity;T0* _storage;T0* _special_routines;T0* _internal_cursor;};
extern T212 M212;
struct S168{Tid id;T0* _equality_tester;T2 _count;T2 _capacity;T0* _storage;T0* _special_routines;T0* _internal_cursor;};
extern T168 M168;
struct S474{T0* _container;T2 _position;T0* _next_cursor;};
extern T474 M474;
struct S634{T0* _container;};
extern T634 M634;
struct S638{Tid id;T0* _parameters;};
extern T638 M638;
struct S213{Tid id;T0* _equality_tester;T2 _count;T2 _capacity;T0* _storage;T0* _special_routines;T0* _internal_cursor;};
extern T213 M213;
extern T206 M206;
struct S599{Tid id;T0* _text;};
extern T599 M599;
struct S78{T79 _storage;T2 _capacity;T2 _upper;T2 _lower;};
extern T78 M78;
struct S351{T0* _item;T0* _right;};
extern T351 M351;
struct S442{T446 _storage;T2 _capacity;T2 _upper;};
extern T442 M442;
extern T173 M173;
struct S350{T2 _count;T0* _first_cell;T0* _last_cell;T0* _internal_cursor;};
extern T350 M350;
extern T648 M648;
extern T183 M183;
struct S570{Tid id;T0* _parameters;};
extern T570 M570;
struct S287{T0* _container;};
extern T287 M287;
struct S541{T172 _storage;T2 _capacity;T2 _upper;T2 _lower;};
extern T541 M541;
struct S607{Tid id;T6 _push_back_flag;T3 _old_last_character;T6 _old_end_of_file;T9 _buffer;T6 _end_reached;T2 _buffer_position;T2 _buffer_size;T2 _capacity;T0* _name;T3 _last_character;T6 _end_of_file;T0* _character_buffer;};
extern T607 M607;
struct S65{Tid id;T6 _is_used;T0* _name;T2 _id;};
extern T65 M65;
struct S185{T0* _error_file;T0* _warning_file;T0* _info_file;};
extern T185 M185;
struct S429{T0* _item;T0* _right;};
extern T429 M429;
struct S606{T2 _count;T9 _area;T0* _area_string;};
extern T606 M606;
struct S244{T257 _storage;T2 _capacity;T2 _upper;T2 _lower;};
extern T244 M244;
struct S434{T0* _equality_tester;T2 _count;T2 _capacity;T0* _storage;T0* _special_;};
extern T434 M434;
extern T198 M198;
struct S314{Tid id;T0* _parameters;};
extern T314 M314;
struct S89{Tid id;T0* _equality_tester;T2 _count;T2 _capacity;T0* _storage;T0* _special_routines;T0* _internal_cursor;};
extern T89 M89;
struct S22{Tid id;T0* _name;T0* _string_name;T0* _path;T9 _buffer;T2 _buffer_position;T2 _capacity;T8 _output_stream;};
extern T22 M22;
struct S490{Tid id;T0* _container;T2 _position;T0* _next_cursor;};
extern T490 M490;
struct S515{T518 _storage;T2 _capacity;T2 _upper;};
extern T515 M515;
struct S404{T0* _equality_tester;T2 _count;T2 _capacity;T2 _last_position;T2 _modulus;T2 _free_slot;T2 _position;T2 _slots_position;T2 _clashes_previous_position;T2 _found_position;T0* _internal_cursor;T0* _key_equality_tester;T0* _items;T0* _keys;T0* _clashes;T0* _slots;T0* _special_item_routines;T0* _special_key_routines;};
extern T404 M404;
extern T202 M202;
extern T76 M76;
struct S604{Tid id;T0* _parameters;};
extern T604 M604;
struct S619{Tid id;T2 _position;T0* _container;};
extern T619 M619;
struct S587{T0* _container;};
extern T587 M587;
struct S605{Tid id;T0* _parameters;};
extern T605 M605;
struct S537{Tid id;T0* _parameters;};
extern T537 M537;
struct S316{T319 _storage;T2 _capacity;T2 _upper;};
extern T316 M316;
struct S88{T2 _id;T0* _lhs;T0* _rhs;T0* _error_actions;T0* _action;T2 _precedence;T2 _line_nb;T6 _is_useful;T2 _associativity;};
extern T88 M88;
extern T197 M197;
struct S245{T0* _container;T6 _after;T6 _before;T0* _current_cell;T0* _next_cursor;};
extern T245 M245;
struct S501{T2 _yy_start_state;T2 _yy_column;T6 _yy_lookahead_needed;T0* _yy_nxt;T0* _yy_chk;T0* _yy_def;T0* _yy_ec;T0* _yy_acclist;T2 _yy_state_count;T2 _yy_looking_for_trail_begin;T0* _error_handler;T0* _rule;T0* _yytable;T0* _yycheck;T2 _yyerrstatus;T0* _yy_accept;T6 _old_typing;T0* _yytypes1;T0* _yytypes2;T2 _column;T0* _yy_content;T2 _yy_last_accepting_state;T2 _yy_last_accepting_cpos;T2 _last_integer_value;T2 _nb_open_brackets;T2 _last_error;T0* _yydefgoto;T0* _yy_content_area;T2 _yy_start;T0* _last_string_value;T2 _line_nb;T0* _yydefact;T2 _yy_more_len;T6 _yy_rejected;T0* _action_buffer;T2 _yyssp;T6 _successful;T0* _yyss;T2 _position;T0* _yyr1;T0* _yypact;T0* _yypgoto;T0* _input_buffer;T2 _yy_end;T2 _yy_position;T2 _error_count;T2 _last_token;T2 _line;T0* _yytranslate;T2 _yy_line;T6 _yy_more_flag;T2 _yy_parsing_status;T0* _yy_base;T2 _yy_full_state;T0* _last_any_value;T0* _yy_meta;T0* _yy_state_stack;T2 _yy_full_match;T2 _yy_lp;T2 _yy_full_lp;T0* _last_grammar;T0* _action_factory;T2 _precedence;T0* _precedence_token;T0* _type;T0* _start_symbol;T0* _terminal_symbols;T0* _nonterminal_symbols;T0* _types;T0* _yyvs1;T2 _yyvsc1;T2 _yyvsp1;T0* _yyspecial_routines1;T0* _yyvs2;T2 _yyvsc2;T2 _yyvsp2;T0* _yyspecial_routines2;T0* _yyvs3;T2 _yyvsc3;T2 _yyvsp3;T0* _yyspecial_routines3;T0* _yyvs4;T2 _yyvsc4;T2 _yyvsp4;T0* _yyspecial_routines4;T0* _yyvs5;T2 _yyvsc5;T2 _yyvsp5;T0* _yyspecial_routines5;T0* _yyvs6;T2 _yyvsc6;T2 _yyvsp6;T0* _yyspecial_routines6;};
extern T501 M501;
struct S595{T0* _container;};
extern T595 M595;
struct S169{T172 _storage;T2 _capacity;T2 _upper;};
extern T169 M169;
struct S624{Tid id;T2 _position;T0* _container;T0* _next_cursor;};
extern T624 M624;
struct S329{T0* _container;};
extern T329 M329;
struct S372{Tid id;T2 _count;T0* _first_cell;T0* _last_cell;T0* _internal_cursor;};
extern T372 M372;
struct S361{T0* _container;T2 _position;T0* _next_cursor;};
extern T361 M361;
struct S305{T308 _storage;T2 _capacity;T2 _upper;};
extern T305 M305;
struct S637{Tid id;T0* _parameters;};
extern T637 M637;
struct S539{Tid id;T0* _parameters;};
extern T539 M539;
struct S82{T2 _count;T2 _capacity;T0* _storage;T0* _special_routines;T0* _internal_cursor;};
extern T82 M82;
struct S231{T0* _comparator;};
extern T231 M231;
struct S304{T0* _equality_tester;T2 _count;T2 _capacity;T0* _storage;T0* _special_routines;T0* _internal_cursor;};
extern T304 M304;
struct S138{Tid id;T141 _storage;T2 _capacity;T2 _upper;};
extern T138 M138;
struct S42{T0* _yytranslate;T0* _yyr1;T0* _yydefact;T0* _yydefgoto;T0* _yypact;T0* _yypgoto;T0* _yytable;T0* _yycheck;T0* _yytypes1;T0* _yytypes2;T2 _yyfinal;T2 _yyflag;T2 _yyntbase;T2 _yylast;T2 _yymax_token;T2 _yynsyms;T6 _old_typing;T6 _line_pragma;T0* _machine;T0* _input_filename;T2 _array_size;};
extern T42 M42;
struct S564{Tid id;T6 _is_used;T0* _name;T2 _id;};
extern T564 M564;
struct S612{Tid id;T2 _position;T0* _container;};
extern T612 M612;
struct S210{T6 _is_state;T2 _id;T0* _froms;T0* _tos;T2 _count;T2 _width;T2 _position;};
extern T210 M210;
struct S571{Tid id;T0* _parameters;};
extern T571 M571;
struct S416{T0* _comparator;};
extern T416 M416;
struct S602{Tid id;T0* _parameters;};
extern T602 M602;
struct S39{Tid id;T0* _parameters;};
extern T39 M39;
struct S276{T279 _storage;T2 _capacity;T2 _upper;};
extern T276 M276;
struct S320{T11 _item;};
extern T320 M320;
struct S552{Tid id;T0* _equality_tester;T2 _count;T2 _capacity;T2 _last_position;T2 _modulus;T2 _free_slot;T2 _position;T2 _slots_position;T2 _clashes_previous_position;T2 _found_position;T0* _internal_cursor;T0* _key_equality_tester;T0* _items;T0* _keys;T0* _clashes;T0* _slots;T0* _special_item_routines;T0* _special_key_routines;};
extern T552 M552;
struct S274{T0* _rule;T0* _lookaheads;T0* _transitions;};
extern T274 M274;
struct S543{Tid id;T0* _parameters;};
extern T543 M543;
struct S578{Tid id;T0* _parameters;};
extern T578 M578;
struct S650{T652 _storage;T2 _capacity;T2 _upper;T2 _lower;};
extern T650 M650;
struct S110{Tid id;T0* _equality_tester;T2 _count;T2 _capacity;T2 _last_position;T2 _modulus;T2 _free_slot;T2 _position;T2 _slots_position;T2 _clashes_previous_position;T2 _found_position;T0* _internal_cursor;T0* _key_equality_tester;T0* _items;T0* _keys;T0* _clashes;T0* _slots;T0* _special_item_routines;T0* _special_key_routines;};
extern T110 M110;
extern T176 M176;
struct S540{Tid id;T0* _parameters;};
extern T540 M540;
struct S180{T182 _storage;T2 _capacity;T2 _upper;};
extern T180 M180;
struct S563{Tid id;T0* _parameters;};
extern T563 M563;
struct S403{T87 _storage;T2 _capacity;T2 _upper;T2 _lower;};
extern T403 M403;
struct S601{Tid id;T0* _parameters;};
extern T601 M601;
struct S243{T2 _index;T0* _target;T0* _source;T0* _following_tokens;T0* _included_tokens;};
extern T243 M243;
struct S577{Tid id;T0* _parameters;};
extern T577 M577;
struct S340{Tid id;T0* _equality_tester;T2 _count;T0* _first_cell;T0* _last_cell;T0* _internal_cursor;};
extern T340 M340;
struct S273{T0* _item;T0* _right;};
extern T273 M273;
struct S551{T0* _first;T2 _second;};
extern T551 M551;
struct S167{Tid id;T6 _is_useful;T0* _name;T0* _type;T2 _id;T6 _is_declared;T2 _token_id;T2 _precedence;T0* _literal_string;T2 _associativity;};
extern T167 M167;
struct S109{Tid id;T2 _position;T0* _container;T0* _next_cursor;};
extern T109 M109;
struct S45{T0* _states;T0* _grammar;T0* _cached_states;};
extern T45 M45;
struct S216{T219 _storage;T2 _capacity;T2 _upper;};
extern T216 M216;
struct S408{T411 _storage;T2 _capacity;T2 _upper;};
extern T408 M408;
struct S92{Tid id;T6 _is_useful;T2 _index;T0* _name;T0* _type;T2 _id;T6 _is_nullable;T0* _rules;T0* _firsts;T0* _derives;T0* _transitions;};
extern T92 M92;
struct S399{Tid id;T0* _container;T2 _position;T0* _next_cursor;};
extern T399 M399;
struct S421{Tid id;T0* _container;T6 _after;T6 _before;T0* _current_cell;T0* _next_cursor;};
extern T421 M421;
struct S81{Tid id;T2 _id;T0* _accessing_symbol;T0* _positions;T0* _shifts;T0* _reductions;T0* _errors;T0* _error_action;T2 _hash_code;T6 _lookahead_needed;T6 _has_conflict;};
extern T81 M81;
struct S556{Tid id;T0* _parameters;};
extern T556 M556;
struct S315{T2 _count;T2 _capacity;T0* _storage;T0* _special_routines;T0* _internal_cursor;};
extern T315 M315;
struct S380{Tid id;T0* _container;T6 _after;T6 _before;T0* _current_cell;T0* _next_cursor;};
extern T380 M380;
struct S7{Tid id;T9 _storage;T2 _count;T2 _capacity;};
extern T7 M7;
struct S487{Tid id;T0* _container;T2 _position;T0* _next_cursor;};
extern T487 M487;
struct S84{T87 _storage;T2 _capacity;T2 _upper;};
extern T84 M84;
struct S12{T0* _input_filename;T0* _output_filename;T0* _token_classname;T0* _token_filename;T0* _verbose_filename;T6 _actions_separated;T6 _old_typing;T6 _line_pragma;T0* _grammar;T0* _error_handler;};
extern T12 M12;
struct S235{Tid id;T238 _storage;T2 _capacity;T2 _upper;};
extern T235 M235;
struct S527{Tid id;T0* _content;T2 _count;T2 _capacity;T2 _position;T2 _column;T2 _line;T2 _index;T6 _beginning_of_line;T6 _filled;};
extern T527 M527;
struct S397{T0* _item;T0* _right;};
extern T397 M397;
struct S550{Tid id;T0* _parameters;};
extern T550 M550;
struct S275{Tid id;T2 _count;T2 _capacity;T0* _storage;T0* _special_routines;T0* _internal_cursor;};
extern T275 M275;
struct S603{Tid id;T0* _parameters;};
extern T603 M603;
extern T187 M187;
struct S91{T0* _equality_tester;T2 _count;T2 _capacity;T0* _storage;T0* _special_routines;T0* _internal_cursor;};
extern T91 M91;
struct S179{T182 _storage;T2 _capacity;T2 _upper;};
extern T179 M179;
struct S363{T0* _container;T6 _after;T6 _before;T0* _current_cell;T0* _next_cursor;};
extern T363 M363;
struct S491{Tid id;T0* _parameters;};
extern T491 M491;
struct S545{Tid id;T0* _equality_tester;T2 _count;T2 _capacity;T2 _last_position;T2 _modulus;T2 _free_slot;T2 _position;T2 _slots_position;T2 _clashes_previous_position;T2 _found_position;T0* _internal_cursor;T0* _key_equality_tester;T0* _items;T0* _keys;T0* _clashes;T0* _slots;T0* _special_item_routines;T0* _special_key_routines;};
extern T545 M545;
extern T598 M598;
struct S573{Tid id;T0* _parameters;};
extern T573 M573;
struct S600{Tid id;T0* _parameters;};
extern T600 M600;
struct S189{Tid id;T9 _storage;T2 _count;T2 _capacity;T2 _byte_count;T2 _last_byte_index_input;T2 _last_byte_index_result;};
extern T189 M189;
struct S46{T0* _tokens;T0* _variables;T0* _types;T0* _rules;T0* _start_symbol;T2 _expected_conflicts;T0* _eiffel_code;T0* _eiffel_header;};
extern T46 M46;
struct S572{Tid id;T0* _parameters;};
extern T572 M572;
struct S526{Tid id;T0* _content;T2 _count;T2 _capacity;T2 _position;T2 _column;T2 _line;T2 _index;T6 _beginning_of_line;T6 _filled;T6 _interactive;T0* _file;T6 _end_of_file;};
extern T526 M526;
struct S207{Tid id;T2 _buffer_position;T9 _buffer;T2 _capacity;T0* _name;};
extern T207 M207;
struct S337{T0* _state;T0* _rule;T0* _token;T0* _resolution;};
extern T337 M337;
struct S533{Tid id;T0* _name;};
extern T533 M533;
extern T175 M175;
struct S542{Tid id;T0* _parameters;};
extern T542 M542;
struct S476{T480 _storage;T2 _capacity;T2 _upper;};
extern T476 M476;
struct S203{T182 _storage;T2 _capacity;T2 _upper;T2 _lower;};
extern T203 M203;
struct S151{Tid id;T0* _equality_tester;T2 _count;T2 _capacity;T2 _last_position;T2 _modulus;T2 _free_slot;T2 _position;T2 _slots_position;T2 _clashes_previous_position;T2 _found_position;T0* _internal_cursor;T0* _items;T0* _clashes;T0* _slots;T0* _special_item_routines;};
extern T151 M151;
struct S391{T394 _storage;T2 _capacity;T2 _upper;};
extern T391 M391;
struct S557{Tid id;T0* _container;T6 _after;T6 _before;T0* _current_cell;T0* _next_cursor;};
extern T557 M557;
struct S150{Tid id;T2 _position;T0* _container;T0* _next_cursor;};
extern T150 M150;
struct S80{Tid id;T0* _action;T2 _line_nb;};
extern T80 M80;
struct S67{Tid id;T0* _equality_tester;T2 _count;T2 _capacity;T0* _storage;T0* _special_routines;T0* _internal_cursor;};
extern T67 M67;
struct S568{Tid id;T0* _container;};
extern T568 M568;
struct S576{Tid id;T0* _parameters;};
extern T576 M576;
struct S303{T0* _rule;T2 _index;};
extern T303 M303;
struct S427{Tid id;T0* _equality_tester;T2 _count;T0* _first_cell;T0* _last_cell;T0* _internal_cursor;};
extern T427 M427;
struct S465{T2 _count;T2 _capacity;T0* _storage;T0* _special_routines;T0* _internal_cursor;};
extern T465 M465;
struct S208{T2 _buffer_position;T9 _buffer;T2 _capacity;};
extern T208 M208;
struct S463{T2 _position;T0* _container;};
extern T463 M463;
struct S248{T0* _comparator;};
extern T248 M248;
struct S525{Tid id;T0* _parameters;};
extern T525 M525;
struct S204{T0* _program_name;};
extern T204 M204;
struct S211{Tid id;T2 _count;T2 _capacity;T0* _storage;T0* _special_routines;T0* _internal_cursor;};
extern T211 M211;
struct S129{T132 _storage;T2 _capacity;T2 _upper;};
extern T129 M129;
struct S260{Tid id;T0* _container;};
extern T260 M260;
struct S341{T0* _item;T0* _right;};
extern T341 M341;
struct S575{Tid id;T0* _parameters;};
extern T575 M575;
/*
-- This file is  free  software, which  comes  along  with  SmartEiffel. This
-- software  is  distributed  in the hope that it will be useful, but WITHOUT
-- ANY  WARRANTY;  without  even  the  implied warranty of MERCHANTABILITY or
-- FITNESS  FOR A PARTICULAR PURPOSE. You can modify it as you want, provided
-- this header is kept unaltered, and a notification of the changes is added.
-- You  are  allowed  to  redistribute  it and sell it, alone or as a part of
-- another product.
--       Copyright (C) 1994-2002 LORIA - INRIA - U.H.P. Nancy 1 - FRANCE
--          Dominique COLNET and Suzanne COLLIN - SmartEiffel@loria.fr
--                       http://SmartEiffel.loria.fr
--
*/

/*
  This file (SmartEiffel/sys/runtime/boost.h) is automatically included when
  `run_control.boost' is true (ie. only for mode -boost).
*/
#define SE_BOOST 1
void se_print_run_time_stack (void);
void se_signal_handler(int sig);
/*
-- This file is  free  software, which  comes  along  with  SmartEiffel. This
-- software  is  distributed  in the hope that it will be useful, but WITHOUT
-- ANY  WARRANTY;  without  even  the  implied warranty of MERCHANTABILITY or
-- FITNESS  FOR A PARTICULAR PURPOSE. You can modify it as you want, provided
-- this header is kept unaltered, and a notification of the changes is added.
-- You  are  allowed  to  redistribute  it and sell it, alone or as a part of
-- another product.
--       Copyright (C) 1994-2002 LORIA - INRIA - U.H.P. Nancy 1 - FRANCE
--          Dominique COLNET and Suzanne COLLIN - SmartEiffel@loria.fr
--                       http://SmartEiffel.loria.fr
--
*/
/*
  This file (SmartEiffel/sys/runtime/exception.h) is automatically included
  when exception handling is used somewhere in the live code.
*/

#define SE_EXCEPTIONS 1

/*
  Constants from Eiffel class EXCEPTIONS :
*/
#define Check_instruction 	  1
#define Class_invariant 	  2
#define Developer_exception 	  3
#define Incorrect_inspect_value   4
#define Loop_invariant 		  5
#define Loop_variant 		  6
#define No_more_memory  	  7
#define Postcondition 		  8
#define Precondition  		  9
#define Routine_failure  	  10
#define	Os_signal		  11
#define Void_attached_to_expanded 12
#define Void_call_target 	  13
#define System_level_type_error	  14

/*
   This will be the structure of rescue contexts.  A rescue context
   will be declared for every routine that has a rescue clause.

   The `next' pointer is the address of the next rescue context if there
   is one higher up the call chain, or NULL if there is no other
   context.
*/
struct rescue_context {
  JMP_BUF jb;
#ifndef SE_BOOST
    /* To keep track of dump stack to unwind it safely
       before the LONGJMP :
    */
    struct _se_dump_stack * top_of_ds ;
#endif
  struct rescue_context *next;
};

extern struct rescue_context *rescue_context_top;
extern int internal_exception_number;
extern int original_internal_exception_number;
extern int signal_exception_number;
extern char *additional_error_message;

void setup_signal_handler(void);
void signal_exception_handler(int);
void internal_exception_handler(int);
void print_exception(void);
/*
-- This file is  free  software, which  comes  along  with  SmartEiffel. This
-- software  is  distributed  in the hope that it will be useful, but WITHOUT
-- ANY  WARRANTY;  without  even  the  implied warranty of MERCHANTABILITY or
-- FITNESS  FOR A PARTICULAR PURPOSE. You can modify it as you want, provided
-- this header is kept unaltered, and a notification of the changes is added.
-- You  are  allowed  to  redistribute  it and sell it, alone or as a part of
-- another product.
--       Copyright (C) 1994-2002 LORIA - INRIA - U.H.P. Nancy 1 - FRANCE
--          Dominique COLNET and Suzanne COLLIN - SmartEiffel@loria.fr
--                       http://SmartEiffel.loria.fr
--
*/
/*
  This file (SmartEiffel/sys/runtime/basic_io.h) is automatically
  included when some external "SmartEiffel" basic_io_* feature is used.
*/

#define basic_io_stdin (stdin)
#define basic_io_stdout (stdout)
#define basic_io_stderr (stderr)
#define basic_io_eof (EOF)
#define basic_io_text_file_read_open(p) (fopen(((char*)(p)),"r"))
#define basic_io_text_file_write_open(p) (fopen(((char*)(p)),"w"))
#define basic_io_text_file_write_append(p) (fopen(((char*)(p)),"a"))
#define basic_io_text_file_read_write_open(p) (fopen(((char*)(p)),"r+"))
#define basic_io_text_file_read_write_append(p) (fopen(((char*)(p)),"a+"))
#define basic_io_binary_file_read_open(p) (fopen(((char*)(p)),"rb"))
#define basic_io_binary_file_write_open(p) (fopen(((char*)(p)),"wb"))
#define basic_io_binary_file_write_append(p) (fopen(((char*)(p)),"ab"))
#define basic_io_fclose(p) (fclose((FILE*)(p)))
#define basic_io_flush(p) (fflush((FILE*)(p)))
#define basic_io_getc(f) (getc(((FILE*)(f))))
#define basic_io_putc(b, f) (putc((b),((FILE*)(f))))
#define basic_io_fread(b, n, f) (fread((void *)(b),(size_t)(1), (size_t)(n),(FILE*)(f)))
#define basic_io_fwrite(b, n, f) (fwrite((void *)(b),(size_t)(1), (size_t)(n),(FILE*)(f)))
#define basic_io_feof(f) (feof(((FILE*)(f))))
#define basic_io_rename(o, n) (rename(((char*)(o)),((char*)(n))))
#define basic_io_remove(f) (remove(((char*)(f))))

#if defined __USE_POSIX || defined __unix__ || defined _POSIX_C_SOURCE
#  define basic_io_read_stdin(b, s) (read(STDIN_FILENO, b, s))
#else
  extern int basic_io_read_stdin(char *buffer, int size);
#endif

/*
-- This file is  free  software, which  comes  along  with  SmartEiffel. This
-- software  is  distributed  in the hope that it will be useful, but WITHOUT
-- ANY  WARRANTY;  without  even  the  implied warranty of MERCHANTABILITY or
-- FITNESS  FOR A PARTICULAR PURPOSE. You can modify it as you want, provided
-- this header is kept unaltered, and a notification of the changes is added.
-- You  are  allowed  to  redistribute  it and sell it, alone or as a part of
-- another product.
--       Copyright (C) 1994-2002 LORIA - INRIA - U.H.P. Nancy 1 - FRANCE
--          Dominique COLNET and Suzanne COLLIN - SmartEiffel@loria.fr
--                       http://SmartEiffel.loria.fr
--
*/
/*
  This file (SmartEiffel/sys/runtime/basic_sprintf.h) is automatically
  included when the external "SmartEiffel" basic_sprintf feature is used.
*/

#define basic_sprintf_pointer(buffer, pointer) sprintf((char*)(buffer),"%p",pointer)

void basic_sprintf_double(EIF_CHARACTER* b, int f, double d);
extern T0*oBC8string_buffer;
/*POINTER*/
void r8append_in(T8 C,T0* a1);
/*BOOLEAN*/
T6 r6_ix_and(T6 C,T6 a1);
/*BOOLEAN*/
T6 r6_px_not(T6 C);
/*BOOLEAN*/
T6 r6_ix_or(T6 C,T6 a1);
/*CHARACTER*/
T6 r3is_digit(T3 C);
/*CHARACTER*/
T6 r3is_separator(T3 C);
/*CHARACTER*/
T6 r3_ix_6061(T3 C,T3 a1);
/*CHARACTER*/
T1 r3value(T3 C);
/*CHARACTER*/
T1 r3decimal_value(T3 C);
/*CHARACTER*/
T3 r3to_upper(T3 C);
/*CHARACTER*/
T6 r3_ix_6261(T3 C,T3 a1);
/*CHARACTER*/
T3 r3to_lower(T3 C);
/*CHARACTER*/
T6 r3_ix_60(T3 C,T3 a1);
/*CHARACTER*/
T6 r3_ix_62(T3 C,T3 a1);
/*INTEGER*/
T0* r2out(T2 C);
/*INTEGER*/
T2 r2max(T2 C,T2 a1);
/*INTEGER*/
T2 r2min(T2 C,T2 a1);
/*INTEGER*/
T2 r2hash_code(T2 C);
/*INTEGER*/
void r2append_in(T2 C,T0* a1);
extern T0*oBC21tagged_out_memory;
/*INTEGER_64*/
T3 r11digit(T11 C);
/*NATIVE_ARRAY[PR_TOKEN]*/
T172 r172realloc(T172 C,T2 a1,T2 a2);
/*NATIVE_ARRAY[PR_TOKEN]*/
void r172set_all_with(T172 C,T0* a1,T2 a2);
/*NATIVE_ARRAY[PR_TOKEN]*/
void r172clear(T172 C,T2 a1,T2 a2);
/*NATIVE_ARRAY[PR_TOKEN]*/
void r172copy_from(T172 C,T172 a1,T2 a2);
/*NATIVE_ARRAY[DS_ARRAYED_LIST[PR_VARIABLE]]*/
void r480clear(T480 C,T2 a1,T2 a2);
/*NATIVE_ARRAY[PR_POSITION]*/
T308 r308realloc(T308 C,T2 a1,T2 a2);
/*NATIVE_ARRAY[PR_POSITION]*/
void r308clear(T308 C,T2 a1,T2 a2);
/*NATIVE_ARRAY[PR_POSITION]*/
void r308copy_from(T308 C,T308 a1,T2 a2);
/*NATIVE_ARRAY[DS_ARRAYED_LIST[PR_TYPE]]*/
T518 r518realloc(T518 C,T2 a1,T2 a2);
/*NATIVE_ARRAY[DS_ARRAYED_LIST[PR_TYPE]]*/
void r518set_all_with(T518 C,T0* a1,T2 a2);
/*NATIVE_ARRAY[DS_ARRAYED_LIST[PR_TYPE]]*/
void r518clear(T518 C,T2 a1,T2 a2);
/*NATIVE_ARRAY[DS_ARRAYED_LIST[PR_TYPE]]*/
void r518copy_from(T518 C,T518 a1,T2 a2);
/*NATIVE_ARRAY[PR_TRANSITION]*/
void r257set_all_with(T257 C,T0* a1,T2 a2);
/*NATIVE_ARRAY[PR_ERROR_ACTION]*/
T319 r319realloc(T319 C,T2 a1,T2 a2);
/*NATIVE_ARRAY[PR_ERROR_ACTION]*/
void r319clear(T319 C,T2 a1,T2 a2);
/*NATIVE_ARRAY[PR_ERROR_ACTION]*/
void r319copy_from(T319 C,T319 a1,T2 a2);
/*NATIVE_ARRAY[DS_NESTED_LIST[PR_RULE]]*/
T446 r446realloc(T446 C,T2 a1,T2 a2);
/*NATIVE_ARRAY[DS_NESTED_LIST[PR_RULE]]*/
void r446clear(T446 C,T2 a1,T2 a2);
/*NATIVE_ARRAY[DS_NESTED_LIST[PR_RULE]]*/
void r446copy_from(T446 C,T446 a1,T2 a2);
/*NATIVE_ARRAY[STRING]*/
T182 r182realloc(T182 C,T2 a1,T2 a2);
/*NATIVE_ARRAY[STRING]*/
void r182set_all_with(T182 C,T0* a1,T2 a2);
/*NATIVE_ARRAY[STRING]*/
void r182clear(T182 C,T2 a1,T2 a2);
/*NATIVE_ARRAY[STRING]*/
void r182copy_from(T182 C,T182 a1,T2 a2);
/*NATIVE_ARRAY[PR_RULE]*/
void r141clear_all(T141 C,T2 a1);
/*NATIVE_ARRAY[PR_RULE]*/
T141 r141realloc(T141 C,T2 a1,T2 a2);
/*NATIVE_ARRAY[PR_RULE]*/
T6 r141fast_memcmp(T141 C,T141 a1,T2 a2);
/*NATIVE_ARRAY[PR_RULE]*/
void r141clear(T141 C,T2 a1,T2 a2);
/*NATIVE_ARRAY[PR_RULE]*/
void r141copy_from(T141 C,T141 a1,T2 a2);
/*NATIVE_ARRAY[PR_REDUCTION]*/
T279 r279realloc(T279 C,T2 a1,T2 a2);
/*NATIVE_ARRAY[PR_REDUCTION]*/
void r279clear(T279 C,T2 a1,T2 a2);
/*NATIVE_ARRAY[PR_REDUCTION]*/
void r279copy_from(T279 C,T279 a1,T2 a2);
/*NATIVE_ARRAY[PR_SYMBOL]*/
T132 r132realloc(T132 C,T2 a1,T2 a2);
/*NATIVE_ARRAY[PR_SYMBOL]*/
void r132clear(T132 C,T2 a1,T2 a2);
/*NATIVE_ARRAY[PR_SYMBOL]*/
void r132copy_from(T132 C,T132 a1,T2 a2);
/*NATIVE_ARRAY[DS_ARRAYED_LIST[PR_STATE]]*/
T411 r411realloc(T411 C,T2 a1,T2 a2);
/*NATIVE_ARRAY[DS_ARRAYED_LIST[PR_STATE]]*/
void r411clear(T411 C,T2 a1,T2 a2);
/*NATIVE_ARRAY[DS_ARRAYED_LIST[PR_STATE]]*/
void r411copy_from(T411 C,T411 a1,T2 a2);
/*NATIVE_ARRAY[CHARACTER]*/
void r9copy_slice(T9 C,T2 a1,T9 a2,T2 a3,T2 a4);
/*NATIVE_ARRAY[CHARACTER]*/
T9 r9realloc(T9 C,T2 a1,T2 a2);
/*NATIVE_ARRAY[CHARACTER]*/
void r9set_all_with(T9 C,T3 a1,T2 a2);
/*NATIVE_ARRAY[CHARACTER]*/
T6 r9fast_memcmp(T9 C,T9 a1,T2 a2);
/*NATIVE_ARRAY[CHARACTER]*/
void r9copy_at(T9 C,T2 a1,T9 a2,T2 a3);
/*NATIVE_ARRAY[CHARACTER]*/
void r9clear(T9 C,T2 a1,T2 a2);
/*NATIVE_ARRAY[CHARACTER]*/
void r9copy_from(T9 C,T9 a1,T2 a2);
/*NATIVE_ARRAY[PR_STATE]*/
T87 r87realloc(T87 C,T2 a1,T2 a2);
/*NATIVE_ARRAY[PR_STATE]*/
void r87set_all_with(T87 C,T0* a1,T2 a2);
/*NATIVE_ARRAY[PR_STATE]*/
void r87clear(T87 C,T2 a1,T2 a2);
/*NATIVE_ARRAY[PR_STATE]*/
void r87copy_from(T87 C,T87 a1,T2 a2);
/*NATIVE_ARRAY[PR_VARIABLE]*/
void r238clear_all(T238 C,T2 a1);
/*NATIVE_ARRAY[PR_VARIABLE]*/
T238 r238realloc(T238 C,T2 a1,T2 a2);
/*NATIVE_ARRAY[PR_VARIABLE]*/
T6 r238fast_memcmp(T238 C,T238 a1,T2 a2);
/*NATIVE_ARRAY[PR_VARIABLE]*/
void r238clear(T238 C,T2 a1,T2 a2);
/*NATIVE_ARRAY[PR_VARIABLE]*/
void r238copy_from(T238 C,T238 a1,T2 a2);
/*NATIVE_ARRAY[DS_NESTED_LIST[PR_TOKEN]]*/
T394 r394realloc(T394 C,T2 a1,T2 a2);
/*NATIVE_ARRAY[DS_NESTED_LIST[PR_TOKEN]]*/
void r394clear(T394 C,T2 a1,T2 a2);
/*NATIVE_ARRAY[DS_NESTED_LIST[PR_TOKEN]]*/
void r394copy_from(T394 C,T394 a1,T2 a2);
/*NATIVE_ARRAY[PR_PORTION]*/
void r219clear(T219 C,T2 a1,T2 a2);
/*NATIVE_ARRAY[INTEGER]*/
T79 r79realloc(T79 C,T2 a1,T2 a2);
/*NATIVE_ARRAY[INTEGER]*/
void r79move(T79 C,T2 a1,T2 a2,T2 a3);
/*NATIVE_ARRAY[INTEGER]*/
void r79set_all_with(T79 C,T2 a1,T2 a2);
/*NATIVE_ARRAY[INTEGER]*/
void r79clear(T79 C,T2 a1,T2 a2);
/*NATIVE_ARRAY[INTEGER]*/
void r79copy_from(T79 C,T79 a1,T2 a2);
/*NATIVE_ARRAY[ANY]*/
T522 r522realloc(T522 C,T2 a1,T2 a2);
/*NATIVE_ARRAY[ANY]*/
void r522set_all_with(T522 C,T0* a1,T2 a2);
/*NATIVE_ARRAY[ANY]*/
void r522clear(T522 C,T2 a1,T2 a2);
/*NATIVE_ARRAY[ANY]*/
void r522copy_from(T522 C,T522 a1,T2 a2);
/*NATIVE_ARRAY[PR_TYPE]*/
T75 r75realloc(T75 C,T2 a1,T2 a2);
/*NATIVE_ARRAY[PR_TYPE]*/
void r75set_all_with(T75 C,T0* a1,T2 a2);
/*NATIVE_ARRAY[PR_TYPE]*/
void r75clear(T75 C,T2 a1,T2 a2);
/*NATIVE_ARRAY[PR_TYPE]*/
void r75copy_from(T75 C,T75 a1,T2 a2);
/*STRING*/
void r7copy(T7* C,T0* a1);
/*STRING*/
T0* r7substring(T7* C,T2 a1,T2 a2);
/*STRING*/
T2 r7item_code(T7* C,T2 a1);
/*STRING*/
T6 r7is_equal(T7* C,T0* a1);
/*STRING*/
T3 r7item(T7* C,T2 a1);
/*STRING*/
T6 r7valid_index(T7* C,T2 a1);
/*STRING*/
void r7append(T7* C,T0* a1);
/*STRING*/
T6 r7se_assigned_from(T0* a1);
/*STRING*/
void r7make_from_string(T7* C,T0* a1);
/*STRING*/
T6 r7same_type(T7* C,T0* a1);
/*STRING*/
void r7remove_tail(T7* C,T2 a1);
/*STRING*/
void r7make(T7* C,T2 a1);
/*STRING*/
void r7append_string(T7* C,T0* a1);
/*STRING*/
void r7make_filled(T7* C,T3 a1,T2 a2);
/*STRING*/
T0* r7as_upper(T7* C);
/*STRING*/
T0* r7string(T7* C);
/*STRING*/
void r7extend(T7* C,T3 a1);
/*STRING*/
T2 r7hash_code(T7* C);
/*STRING*/
T6 r7conforms_to(T7* C,T0* a1);
/*STRING*/
T0* r7as_lower(T7* C);
/*STRING*/
T2 r7to_integer(T7* C);
/*STRING*/
void r7append_character(T7* C,T3 a1);
/*STRING*/
void r7resize(T7* C,T2 a1);
/*STRING*/
void r7to_upper(T7* C);
/*STRING*/
T8 r7to_external(T7* C);
/*STRING*/
void r7to_lower(T7* C);
/*STRING*/
T0* r7twin(T7* C);
/*STRING*/
T0* r7_ix_43(T7* C,T0* a1);
/*STRING*/
void r7swap(T7* C,T2 a1,T2 a2);
/*ARRAY[INTEGER]*/
T2 r78count(T78* C);
/*ARRAY[INTEGER]*/
T2 r78item(T78* C,T2 a1);
/*ARRAY[INTEGER]*/
T6 r78valid_index(T78* C,T2 a1);
/*ARRAY[INTEGER]*/
void r78make(T78* C,T2 a1,T2 a2);
/*ARRAY[INTEGER]*/
void r78resize(T78* C,T2 a1,T2 a2);
/*ARRAY[PR_TOKEN]*/
T0* r541item(T541* C,T2 a1);
/*ARRAY[PR_TOKEN]*/
T6 r541valid_index(T541* C,T2 a1);
/*ARRAY[PR_TOKEN]*/
void r541make(T541* C,T2 a1,T2 a2);
/*ARRAY[PR_TRANSITION]*/
T0* r244item(T244* C,T2 a1);
/*ARRAY[PR_TRANSITION]*/
T6 r244valid_index(T244* C,T2 a1);
/*ARRAY[PR_TRANSITION]*/
void r244make(T244* C,T2 a1,T2 a2);
/*ARRAY[ARRAY[INTEGER]]*/
T0* r650item(T650* C,T2 a1);
/*FIXED_ARRAY[STRING]*/
T6 r180valid_index(T180* C,T2 a1);
/*FIXED_ARRAY[STRING]*/
void r180make(T180* C,T2 a1);
/*ARRAY[PR_STATE]*/
T0* r403item(T403* C,T2 a1);
/*ARRAY[PR_STATE]*/
T6 r403valid_index(T403* C,T2 a1);
/*ARRAY[PR_STATE]*/
void r403make(T403* C,T2 a1,T2 a2);
/*ARRAY[STRING]*/
T0* r203item(T203* C,T2 a1);
/*ARRAY[STRING]*/
T6 r203valid_index(T203* C,T2 a1);
/*ARRAY[STRING]*/
void r203make(T203* C,T2 a1,T2 a2);
/*KL_SPECIAL_ROUTINES[PR_TYPE]*/
T0* r135make(T2 a1);
/*KL_SPECIAL_ROUTINES[PR_TYPE]*/
T0* r135resize(T0* a1,T2 a2);
/*SPECIAL[PR_TYPE]*/
T6 r73valid_index(T73* C,T2 a1);
/*SPECIAL[PR_TYPE]*/
void r73make(T73* C,T2 a1);
/*SPECIAL[PR_TYPE]*/
T0* r73resize(T73* C,T2 a1);
/*SPECIAL[PR_TYPE]*/
void r73array_resize(T73* C,T2 a1);
/*SPECIAL[ANY]*/
T6 r519valid_index(T519* C,T2 a1);
/*SPECIAL[ANY]*/
void r519make(T519* C,T2 a1);
/*SPECIAL[ANY]*/
T0* r519resize(T519* C,T2 a1);
/*SPECIAL[ANY]*/
void r519array_resize(T519* C,T2 a1);
/*DS_LINKED_LIST[PR_VARIABLE]*/
T6 r449valid_cursor(T449* C,T0* a1);
/*DS_LINKED_LIST[PR_VARIABLE]*/
T0* r449cursor_item(T0* a1);
/*DS_LINKED_LIST[PR_VARIABLE]*/
void r449remove_traversing_cursor(T449* C,T0* a1);
/*DS_LINKED_LIST[PR_VARIABLE]*/
void r449cursor_go_after(T449* C,T0* a1);
/*DS_LINKED_LIST[PR_VARIABLE]*/
void r449add_traversing_cursor(T449* C,T0* a1);
/*DS_LINKED_LIST[PR_VARIABLE]*/
void r449make(T449* C);
/*DS_LINKED_LIST[PR_VARIABLE]*/
T6 r449cursor_after(T0* a1);
/*DS_LINKED_LIST[PR_VARIABLE]*/
T6 r449has(T449* C,T0* a1);
/*DS_LINKED_LIST[PR_VARIABLE]*/
void r449cursor_search_forth(T449* C,T0* a1,T0* a2);
/*DS_LINKED_LIST[PR_VARIABLE]*/
void r449cursor_forth(T449* C,T0* a1);
/*DS_LINKED_LIST[PR_VARIABLE]*/
void r449cursor_start(T449* C,T0* a1);
/*DS_LINKED_LIST[PR_VARIABLE]*/
void r449force_last(T449* C,T0* a1);
/*DS_LINKED_LIST[PR_VARIABLE]*/
T0* r449new_cursor(T449* C);
/*DS_LINKED_LIST[PR_VARIABLE]*/
T6 r449cursor_off(T0* a1);
/*KL_SPECIAL_ROUTINES[ANY]*/
T0* r523make(T2 a1);
/*KL_SPECIAL_ROUTINES[ANY]*/
T0* r523resize(T0* a1,T2 a2);
/*DS_ARRAYED_LIST[STRING]*/
T2 r178new_capacity(T2 a1);
/*DS_ARRAYED_LIST[STRING]*/
T6 r178extendible(T178* C,T2 a1);
/*DS_ARRAYED_LIST[STRING]*/
void r178make(T178* C,T2 a1);
/*DS_ARRAYED_LIST[STRING]*/
void r178resize(T178* C,T2 a1);
/*DS_ARRAYED_LIST[STRING]*/
void r178force_last(T178* C,T0* a1);
/*DS_ARRAYED_LIST[STRING]*/
T0* r178new_cursor(T178* C);
/*DS_ARRAYED_STACK[PR_STATE]*/
void r369clear_items(T369* C,T2 a1,T2 a2);
/*DS_ARRAYED_STACK[PR_STATE]*/
T6 r369extendible(T369* C,T2 a1);
/*DS_ARRAYED_STACK[PR_STATE]*/
void r369wipe_out(T369* C);
/*DS_ARRAYED_STACK[PR_STATE]*/
void r369put(T369* C,T0* a1);
/*DS_ARRAYED_STACK[PR_STATE]*/
T0* r369item(T369* C);
/*DS_ARRAYED_STACK[PR_STATE]*/
void r369make(T369* C,T2 a1);
/*DS_ARRAYED_STACK[PR_STATE]*/
void r369remove(T369* C);
/*DS_ARRAYED_STACK[DS_NESTED_LIST[PR_TOKEN]]*/
T2 r383new_capacity(T2 a1);
/*DS_ARRAYED_STACK[DS_NESTED_LIST[PR_TOKEN]]*/
T6 r383extendible(T383* C,T2 a1);
/*DS_ARRAYED_STACK[DS_NESTED_LIST[PR_TOKEN]]*/
void r383force(T383* C,T0* a1);
/*DS_ARRAYED_STACK[DS_NESTED_LIST[PR_TOKEN]]*/
T0* r383item(T383* C);
/*DS_ARRAYED_STACK[DS_NESTED_LIST[PR_TOKEN]]*/
void r383make(T383* C,T2 a1);
/*DS_ARRAYED_STACK[DS_NESTED_LIST[PR_TOKEN]]*/
void r383remove(T383* C);
/*DS_ARRAYED_STACK[DS_NESTED_LIST[PR_TOKEN]]*/
T6 r383has(T383* C,T0* a1);
/*DS_ARRAYED_STACK[DS_NESTED_LIST[PR_TOKEN]]*/
void r383resize(T383* C,T2 a1);
/*DS_LINKED_LIST[PR_TRANSITION]*/
T6 r246valid_cursor(T246* C,T0* a1);
/*DS_LINKED_LIST[PR_TRANSITION]*/
T0* r246cursor_item(T0* a1);
/*DS_LINKED_LIST[PR_TRANSITION]*/
void r246remove_traversing_cursor(T246* C,T0* a1);
/*DS_LINKED_LIST[PR_TRANSITION]*/
void r246cursor_go_after(T246* C,T0* a1);
/*DS_LINKED_LIST[PR_TRANSITION]*/
void r246add_traversing_cursor(T246* C,T0* a1);
/*DS_LINKED_LIST[PR_TRANSITION]*/
void r246make(T246* C);
/*DS_LINKED_LIST[PR_TRANSITION]*/
T6 r246cursor_after(T0* a1);
/*DS_LINKED_LIST[PR_TRANSITION]*/
T6 r246has(T246* C,T0* a1);
/*DS_LINKED_LIST[PR_TRANSITION]*/
void r246cursor_search_forth(T246* C,T0* a1,T0* a2);
/*DS_LINKED_LIST[PR_TRANSITION]*/
void r246cursor_forth(T246* C,T0* a1);
/*DS_LINKED_LIST[PR_TRANSITION]*/
void r246cursor_start(T246* C,T0* a1);
/*DS_LINKED_LIST[PR_TRANSITION]*/
void r246force_last(T246* C,T0* a1);
/*DS_LINKED_LIST[PR_TRANSITION]*/
T0* r246new_cursor(T246* C);
/*DS_LINKED_LIST[PR_TRANSITION]*/
T6 r246cursor_off(T0* a1);
/*DS_LINKED_LIST_CURSOR[PR_TOKEN]*/
void r343set(T343* C,T0* a1,T6 a2,T6 a3);
/*DS_LINKED_LIST_CURSOR[PR_TOKEN]*/
void r343make(T343* C,T0* a1);
/*DS_LINKED_LIST_CURSOR[PR_TOKEN]*/
void r343set_after(T343* C);
/*DS_HASH_TABLE[PR_TYPE,STRING]*/
T2 r559new_capacity(T2 a1);
/*DS_HASH_TABLE[PR_TYPE,STRING]*/
void r559force(T559* C,T0* a1,T0* a2);
/*DS_HASH_TABLE[PR_TYPE,STRING]*/
void r559make_clashes(T559* C,T2 a1);
/*DS_HASH_TABLE[PR_TYPE,STRING]*/
void r559search_position(T559* C,T0* a1);
/*DS_HASH_TABLE[PR_TYPE,STRING]*/
void r559keys_resize(T559* C,T2 a1);
/*DS_HASH_TABLE[PR_TYPE,STRING]*/
T0* r559item(T559* C,T0* a1);
/*DS_HASH_TABLE[PR_TYPE,STRING]*/
void r559make_items(T559* C,T2 a1);
/*DS_HASH_TABLE[PR_TYPE,STRING]*/
void r559make(T559* C,T2 a1);
extern T0*oBC104special_integer_;
/*DS_HASH_TABLE[PR_TYPE,STRING]*/
T6 r559has(T559* C,T0* a1);
/*DS_HASH_TABLE[PR_TYPE,STRING]*/
void r559make_keys(T559* C,T2 a1);
/*DS_HASH_TABLE[PR_TYPE,STRING]*/
T2 r559hash_position(T559* C,T0* a1);
/*DS_HASH_TABLE[PR_TYPE,STRING]*/
void r559items_resize(T559* C,T2 a1);
/*DS_HASH_TABLE[PR_TYPE,STRING]*/
void r559make_with_equality_testers(T559* C,T2 a1,T0* a2,T0* a3);
/*DS_HASH_TABLE[PR_TYPE,STRING]*/
void r559resize(T559* C,T2 a1);
/*DS_HASH_TABLE[PR_TYPE,STRING]*/
void r559make_sparse_container(T559* C,T2 a1);
/*DS_HASH_TABLE[PR_TYPE,STRING]*/
void r559clashes_resize(T559* C,T2 a1);
/*DS_HASH_TABLE[PR_TYPE,STRING]*/
void r559slots_resize(T559* C,T2 a1);
/*DS_HASH_TABLE[PR_TYPE,STRING]*/
T0* r559new_cursor(T559* C);
/*DS_HASH_TABLE[PR_TYPE,STRING]*/
void r559make_slots(T559* C,T2 a1);
/*DS_HASH_TABLE[PR_TYPE,STRING]*/
T2 r559new_modulus(T2 a1);
/*DS_ARRAYED_LIST_CURSOR[PR_TOKEN]*/
T6 r301valid_position(T301* C,T2 a1);
/*DS_ARRAYED_LIST_CURSOR[PR_TOKEN]*/
T0* r301item(T301* C);
/*DS_ARRAYED_LIST_CURSOR[PR_TOKEN]*/
T6 r301after(T301* C);
/*DS_ARRAYED_LIST_CURSOR[PR_TOKEN]*/
T2 r301index(T301* C);
/*DS_ARRAYED_LIST_CURSOR[PR_TOKEN]*/
T6 r301off(T301* C);
/*SPECIAL[INTEGER]*/
T6 r113valid_index(T113* C,T2 a1);
/*SPECIAL[INTEGER]*/
void r113make(T113* C,T2 a1);
/*SPECIAL[INTEGER]*/
T0* r113resize(T113* C,T2 a1);
/*SPECIAL[INTEGER]*/
void r113array_resize(T113* C,T2 a1);
/*SPECIAL[INTEGER]*/
void r113with_capacity(T113* C,T2 a1);
/*SPECIAL[INTEGER]*/
void r113from_collection(T113* C,T0* a1);
/*DS_ARRAYED_LIST[PR_PORTION]*/
T6 r212extendible(T212* C,T2 a1);
/*DS_ARRAYED_LIST[PR_PORTION]*/
void r212make(T212* C,T2 a1);
/*DS_ARRAYED_LIST[PR_PORTION]*/
T0* r212new_cursor(T212* C);
/*DS_ARRAYED_LIST[PR_PORTION]*/
void r212put_last(T212* C,T0* a1);
/*DS_ARRAYED_LIST[PR_TOKEN]*/
T2 r168new_capacity(T2 a1);
/*DS_ARRAYED_LIST[PR_TOKEN]*/
void r168clear_items(T168* C,T2 a1,T2 a2);
/*DS_ARRAYED_LIST[PR_TOKEN]*/
T6 r168valid_cursor(T168* C,T0* a1);
/*DS_ARRAYED_LIST[PR_TOKEN]*/
T6 r168extendible(T168* C,T2 a1);
/*DS_ARRAYED_LIST[PR_TOKEN]*/
void r168wipe_out(T168* C);
/*DS_ARRAYED_LIST[PR_TOKEN]*/
T0* r168cursor_item(T168* C,T0* a1);
/*DS_ARRAYED_LIST[PR_TOKEN]*/
void r168remove_traversing_cursor(T168* C,T0* a1);
/*DS_ARRAYED_LIST[PR_TOKEN]*/
void r168cursor_go_after(T168* C,T0* a1);
/*DS_ARRAYED_LIST[PR_TOKEN]*/
void r168move_all_cursors_after(T168* C);
/*DS_ARRAYED_LIST[PR_TOKEN]*/
void r168add_traversing_cursor(T168* C,T0* a1);
/*DS_ARRAYED_LIST[PR_TOKEN]*/
void r168move_left(T168* C,T2 a1,T2 a2);
/*DS_ARRAYED_LIST[PR_TOKEN]*/
T6 r168cursor_before(T0* a1);
/*DS_ARRAYED_LIST[PR_TOKEN]*/
void r168make(T168* C,T2 a1);
/*DS_ARRAYED_LIST[PR_TOKEN]*/
void r168remove(T168* C,T2 a1);
/*DS_ARRAYED_LIST[PR_TOKEN]*/
void r168move_cursors_left(T168* C,T2 a1);
/*DS_ARRAYED_LIST[PR_TOKEN]*/
void r168remove_last(T168* C);
/*DS_ARRAYED_LIST[PR_TOKEN]*/
T6 r168cursor_after(T0* a1);
/*DS_ARRAYED_LIST[PR_TOKEN]*/
T6 r168has(T168* C,T0* a1);
/*DS_ARRAYED_LIST[PR_TOKEN]*/
T2 r168cursor_index(T168* C,T0* a1);
/*DS_ARRAYED_LIST[PR_TOKEN]*/
void r168cursor_search_forth(T168* C,T0* a1,T0* a2);
/*DS_ARRAYED_LIST[PR_TOKEN]*/
void r168cursor_forth(T168* C,T0* a1);
/*DS_ARRAYED_LIST[PR_TOKEN]*/
void r168resize(T168* C,T2 a1);
/*DS_ARRAYED_LIST[PR_TOKEN]*/
void r168move_last_cursors_after(T168* C);
/*DS_ARRAYED_LIST[PR_TOKEN]*/
void r168delete(T168* C,T0* a1);
/*DS_ARRAYED_LIST[PR_TOKEN]*/
void r168cursor_start(T168* C,T0* a1);
/*DS_ARRAYED_LIST[PR_TOKEN]*/
void r168force_last(T168* C,T0* a1);
/*DS_ARRAYED_LIST[PR_TOKEN]*/
T0* r168new_cursor(T168* C);
/*DS_ARRAYED_LIST[PR_TOKEN]*/
void r168extend_last(T168* C,T0* a1);
/*DS_ARRAYED_LIST[PR_TOKEN]*/
T6 r168is_full(T168* C);
/*DS_ARRAYED_LIST[PR_TOKEN]*/
void r168put_last(T168* C,T0* a1);
/*DS_ARRAYED_LIST[PR_TOKEN]*/
T6 r168cursor_off(T0* a1);
/*DS_ARRAYED_LIST_CURSOR[DS_ARRAYED_LIST[PR_VARIABLE]]*/
T6 r474valid_position(T474* C,T2 a1);
/*KL_SPECIAL_ROUTINES[PR_STATE]*/
T0* r396make(T2 a1);
/*KL_SPECIAL_ROUTINES[PR_STATE]*/
T0* r396resize(T0* a1,T2 a2);
/*DS_ARRAYED_LIST[PR_VARIABLE]*/
void r213copy(T213* C,T0* a1);
/*DS_ARRAYED_LIST[PR_VARIABLE]*/
T6 r213valid_cursor(T213* C,T0* a1);
/*DS_ARRAYED_LIST[PR_VARIABLE]*/
T6 r213extendible(T213* C,T2 a1);
/*DS_ARRAYED_LIST[PR_VARIABLE]*/
void r213move_cursors_right(T213* C,T2 a1,T2 a2);
/*DS_ARRAYED_LIST[PR_VARIABLE]*/
T0* r213last(T213* C);
/*DS_ARRAYED_LIST[PR_VARIABLE]*/
void r213put(T213* C,T0* a1,T2 a2);
/*DS_ARRAYED_LIST[PR_VARIABLE]*/
T0* r213cursor_item(T213* C,T0* a1);
/*DS_ARRAYED_LIST[PR_VARIABLE]*/
T6 r213is_equal(T213* C,T0* a1);
/*DS_ARRAYED_LIST[PR_VARIABLE]*/
void r213remove_traversing_cursor(T213* C,T0* a1);
/*DS_ARRAYED_LIST[PR_VARIABLE]*/
void r213cursor_go_after(T213* C,T0* a1);
/*DS_ARRAYED_LIST[PR_VARIABLE]*/
void r213move_all_cursors_after(T213* C);
/*DS_ARRAYED_LIST[PR_VARIABLE]*/
void r213add_traversing_cursor(T213* C,T0* a1);
/*DS_ARRAYED_LIST[PR_VARIABLE]*/
T6 r213se_assigned_from(T0* a1);
/*DS_ARRAYED_LIST[PR_VARIABLE]*/
T0* r213clone(T0* a1);
/*DS_ARRAYED_LIST[PR_VARIABLE]*/
void r213move_left(T213* C,T2 a1,T2 a2);
/*DS_ARRAYED_LIST[PR_VARIABLE]*/
T6 r213cursor_before(T0* a1);
/*DS_ARRAYED_LIST[PR_VARIABLE]*/
T6 r213same_type(T213* C,T0* a1);
/*DS_ARRAYED_LIST[PR_VARIABLE]*/
void r213make(T213* C,T2 a1);
/*DS_ARRAYED_LIST[PR_VARIABLE]*/
void r213remove(T213* C,T2 a1);
/*DS_ARRAYED_LIST[PR_VARIABLE]*/
void r213move_cursors_left(T213* C,T2 a1);
/*DS_ARRAYED_LIST[PR_VARIABLE]*/
void r213remove_last(T213* C);
/*DS_ARRAYED_LIST[PR_VARIABLE]*/
T6 r213cursor_after(T0* a1);
/*DS_ARRAYED_LIST[PR_VARIABLE]*/
T6 r213conforms_to(T213* C,T0* a1);
/*DS_ARRAYED_LIST[PR_VARIABLE]*/
T6 r213has(T213* C,T0* a1);
/*DS_ARRAYED_LIST[PR_VARIABLE]*/
void r213move_right(T213* C,T2 a1,T2 a2);
/*DS_ARRAYED_LIST[PR_VARIABLE]*/
T2 r213cursor_index(T213* C,T0* a1);
/*DS_ARRAYED_LIST[PR_VARIABLE]*/
void r213cursor_search_forth(T213* C,T0* a1,T0* a2);
/*DS_ARRAYED_LIST[PR_VARIABLE]*/
void r213cursor_forth(T213* C,T0* a1);
/*DS_ARRAYED_LIST[PR_VARIABLE]*/
void r213resize(T213* C,T2 a1);
/*DS_ARRAYED_LIST[PR_VARIABLE]*/
void r213move_last_cursors_after(T213* C);
/*DS_ARRAYED_LIST[PR_VARIABLE]*/
void r213cursor_start(T213* C,T0* a1);
/*DS_ARRAYED_LIST[PR_VARIABLE]*/
T0* r213twin(T213* C);
/*DS_ARRAYED_LIST[PR_VARIABLE]*/
T0* r213new_cursor(T213* C);
/*DS_ARRAYED_LIST[PR_VARIABLE]*/
T6 r213is_full(T213* C);
/*DS_ARRAYED_LIST[PR_VARIABLE]*/
void r213put_last(T213* C,T0* a1);
/*DS_ARRAYED_LIST[PR_VARIABLE]*/
T6 r213cursor_off(T0* a1);
/*KL_SPECIAL_ROUTINES[PR_REDUCTION]*/
T0* r400make(T2 a1);
/*KL_SPECIAL_ROUTINES[PR_REDUCTION]*/
T0* r400resize(T0* a1,T2 a2);
/*KL_SPECIAL_ROUTINES[PR_ERROR_ACTION]*/
T0* r589make(T2 a1);
/*KL_SPECIAL_ROUTINES[PR_ERROR_ACTION]*/
T0* r589resize(T0* a1,T2 a2);
/*KL_SPECIAL_ROUTINES[DS_ARRAYED_LIST[PR_VARIABLE]]*/
T0* r477make(T2 a1);
/*KL_EQUALITY_TESTER[STRING]*/
T6 r549test(T0* a1,T0* a2);
/*SPECIAL[DS_NESTED_LIST[PR_RULE]]*/
T6 r442valid_index(T442* C,T2 a1);
/*SPECIAL[DS_NESTED_LIST[PR_RULE]]*/
void r442make(T442* C,T2 a1);
/*SPECIAL[DS_NESTED_LIST[PR_RULE]]*/
T0* r442resize(T442* C,T2 a1);
/*SPECIAL[DS_NESTED_LIST[PR_RULE]]*/
void r442array_resize(T442* C,T2 a1);
/*DS_LINKED_LIST[PR_CONFLICT]*/
T6 r350valid_cursor(T350* C,T0* a1);
/*DS_LINKED_LIST[PR_CONFLICT]*/
T0* r350cursor_item(T0* a1);
/*DS_LINKED_LIST[PR_CONFLICT]*/
void r350remove_traversing_cursor(T350* C,T0* a1);
/*DS_LINKED_LIST[PR_CONFLICT]*/
void r350add_traversing_cursor(T350* C,T0* a1);
/*DS_LINKED_LIST[PR_CONFLICT]*/
void r350make(T350* C);
/*DS_LINKED_LIST[PR_CONFLICT]*/
T6 r350cursor_after(T0* a1);
/*DS_LINKED_LIST[PR_CONFLICT]*/
void r350cursor_forth(T350* C,T0* a1);
/*DS_LINKED_LIST[PR_CONFLICT]*/
void r350cursor_start(T350* C,T0* a1);
/*DS_LINKED_LIST[PR_CONFLICT]*/
void r350force_last(T350* C,T0* a1);
/*DS_LINKED_LIST[PR_CONFLICT]*/
T0* r350new_cursor(T350* C);
/*DS_LINKED_LIST[PR_CONFLICT]*/
T6 r350cursor_off(T0* a1);
/*KL_EQUALITY_TESTER[PR_POSITION]*/
T6 r402test(T0* a1,T0* a2);
/*KL_SPECIAL_ROUTINES[PR_POSITION]*/
T0* r331make(T2 a1);
/*KL_SPECIAL_ROUTINES[PR_POSITION]*/
T0* r331resize(T0* a1,T2 a2);
/*KL_COMPARABLE_COMPARATOR[INTEGER]*/
T6 r247less_than(T2 a1,T2 a2);
/*DS_ARRAYED_STACK[DS_NESTED_LIST[PR_RULE]]*/
T2 r434new_capacity(T2 a1);
/*DS_ARRAYED_STACK[DS_NESTED_LIST[PR_RULE]]*/
T6 r434extendible(T434* C,T2 a1);
/*DS_ARRAYED_STACK[DS_NESTED_LIST[PR_RULE]]*/
void r434force(T434* C,T0* a1);
/*DS_ARRAYED_STACK[DS_NESTED_LIST[PR_RULE]]*/
T0* r434item(T434* C);
/*DS_ARRAYED_STACK[DS_NESTED_LIST[PR_RULE]]*/
void r434make(T434* C,T2 a1);
/*DS_ARRAYED_STACK[DS_NESTED_LIST[PR_RULE]]*/
void r434remove(T434* C);
/*DS_ARRAYED_STACK[DS_NESTED_LIST[PR_RULE]]*/
T6 r434has(T434* C,T0* a1);
/*DS_ARRAYED_STACK[DS_NESTED_LIST[PR_RULE]]*/
void r434resize(T434* C,T2 a1);
/*DS_ARRAYED_LIST[PR_RULE]*/
void r89copy(T89* C,T0* a1);
/*DS_ARRAYED_LIST[PR_RULE]*/
T6 r89valid_cursor(T89* C,T0* a1);
/*DS_ARRAYED_LIST[PR_RULE]*/
T6 r89extendible(T89* C,T2 a1);
/*DS_ARRAYED_LIST[PR_RULE]*/
T0* r89cursor_item(T89* C,T0* a1);
/*DS_ARRAYED_LIST[PR_RULE]*/
T6 r89is_equal(T89* C,T0* a1);
/*DS_ARRAYED_LIST[PR_RULE]*/
void r89remove_traversing_cursor(T89* C,T0* a1);
/*DS_ARRAYED_LIST[PR_RULE]*/
void r89cursor_go_after(T89* C,T0* a1);
/*DS_ARRAYED_LIST[PR_RULE]*/
void r89move_all_cursors_after(T89* C);
/*DS_ARRAYED_LIST[PR_RULE]*/
void r89add_traversing_cursor(T89* C,T0* a1);
/*DS_ARRAYED_LIST[PR_RULE]*/
T6 r89se_assigned_from(T0* a1);
/*DS_ARRAYED_LIST[PR_RULE]*/
T0* r89clone(T0* a1);
/*DS_ARRAYED_LIST[PR_RULE]*/
void r89move_left(T89* C,T2 a1,T2 a2);
/*DS_ARRAYED_LIST[PR_RULE]*/
T6 r89cursor_before(T0* a1);
/*DS_ARRAYED_LIST[PR_RULE]*/
T6 r89same_type(T89* C,T0* a1);
/*DS_ARRAYED_LIST[PR_RULE]*/
void r89make(T89* C,T2 a1);
/*DS_ARRAYED_LIST[PR_RULE]*/
void r89remove(T89* C,T2 a1);
/*DS_ARRAYED_LIST[PR_RULE]*/
void r89move_cursors_left(T89* C,T2 a1);
/*DS_ARRAYED_LIST[PR_RULE]*/
void r89remove_last(T89* C);
/*DS_ARRAYED_LIST[PR_RULE]*/
T6 r89cursor_after(T0* a1);
/*DS_ARRAYED_LIST[PR_RULE]*/
T6 r89conforms_to(T89* C,T0* a1);
/*DS_ARRAYED_LIST[PR_RULE]*/
T6 r89has(T89* C,T0* a1);
/*DS_ARRAYED_LIST[PR_RULE]*/
T2 r89cursor_index(T89* C,T0* a1);
/*DS_ARRAYED_LIST[PR_RULE]*/
void r89cursor_search_forth(T89* C,T0* a1,T0* a2);
/*DS_ARRAYED_LIST[PR_RULE]*/
void r89cursor_forth(T89* C,T0* a1);
/*DS_ARRAYED_LIST[PR_RULE]*/
void r89resize(T89* C,T2 a1);
/*DS_ARRAYED_LIST[PR_RULE]*/
void r89move_last_cursors_after(T89* C);
/*DS_ARRAYED_LIST[PR_RULE]*/
void r89cursor_start(T89* C,T0* a1);
/*DS_ARRAYED_LIST[PR_RULE]*/
T0* r89twin(T89* C);
/*DS_ARRAYED_LIST[PR_RULE]*/
T0* r89new_cursor(T89* C);
/*DS_ARRAYED_LIST[PR_RULE]*/
T6 r89is_full(T89* C);
/*DS_ARRAYED_LIST[PR_RULE]*/
void r89put_last(T89* C,T0* a1);
/*DS_ARRAYED_LIST[PR_RULE]*/
T6 r89cursor_off(T0* a1);
/*KL_SPECIAL_ROUTINES[PR_PORTION]*/
T0* r289make(T2 a1);
/*DS_ARRAYED_LIST_CURSOR[PR_RULE]*/
T6 r490valid_position(T490* C,T2 a1);
/*DS_ARRAYED_LIST_CURSOR[PR_RULE]*/
T0* r490item(T490* C);
/*DS_ARRAYED_LIST_CURSOR[PR_RULE]*/
T6 r490after(T490* C);
/*DS_ARRAYED_LIST_CURSOR[PR_RULE]*/
T2 r490index(T490* C);
/*DS_ARRAYED_LIST_CURSOR[PR_RULE]*/
T6 r490off(T490* C);
/*SPECIAL[DS_ARRAYED_LIST[PR_TYPE]]*/
T6 r515valid_index(T515* C,T2 a1);
/*SPECIAL[DS_ARRAYED_LIST[PR_TYPE]]*/
void r515make(T515* C,T2 a1);
/*SPECIAL[DS_ARRAYED_LIST[PR_TYPE]]*/
T0* r515resize(T515* C,T2 a1);
/*SPECIAL[DS_ARRAYED_LIST[PR_TYPE]]*/
void r515array_resize(T515* C,T2 a1);
/*DS_HASH_TABLE[DS_ARRAYED_LIST[PR_STATE],INTEGER]*/
void r404make_clashes(T404* C,T2 a1);
/*DS_HASH_TABLE[DS_ARRAYED_LIST[PR_STATE],INTEGER]*/
void r404put(T404* C,T0* a1,T2 a2);
/*DS_HASH_TABLE[DS_ARRAYED_LIST[PR_STATE],INTEGER]*/
void r404search_position(T404* C,T2 a1);
/*DS_HASH_TABLE[DS_ARRAYED_LIST[PR_STATE],INTEGER]*/
void r404keys_resize(T404* C,T2 a1);
/*DS_HASH_TABLE[DS_ARRAYED_LIST[PR_STATE],INTEGER]*/
T0* r404item(T404* C,T2 a1);
/*DS_HASH_TABLE[DS_ARRAYED_LIST[PR_STATE],INTEGER]*/
void r404make_items(T404* C,T2 a1);
/*DS_HASH_TABLE[DS_ARRAYED_LIST[PR_STATE],INTEGER]*/
void r404make(T404* C,T2 a1);
/*DS_HASH_TABLE[DS_ARRAYED_LIST[PR_STATE],INTEGER]*/
T6 r404has(T404* C,T2 a1);
/*DS_HASH_TABLE[DS_ARRAYED_LIST[PR_STATE],INTEGER]*/
void r404make_keys(T404* C,T2 a1);
/*DS_HASH_TABLE[DS_ARRAYED_LIST[PR_STATE],INTEGER]*/
T2 r404hash_position(T404* C,T2 a1);
/*DS_HASH_TABLE[DS_ARRAYED_LIST[PR_STATE],INTEGER]*/
void r404items_resize(T404* C,T2 a1);
/*DS_HASH_TABLE[DS_ARRAYED_LIST[PR_STATE],INTEGER]*/
void r404make_with_equality_testers(T404* C,T2 a1,T0* a2,T0* a3);
/*DS_HASH_TABLE[DS_ARRAYED_LIST[PR_STATE],INTEGER]*/
void r404resize(T404* C,T2 a1);
/*DS_HASH_TABLE[DS_ARRAYED_LIST[PR_STATE],INTEGER]*/
void r404make_sparse_container(T404* C,T2 a1);
/*DS_HASH_TABLE[DS_ARRAYED_LIST[PR_STATE],INTEGER]*/
void r404clashes_resize(T404* C,T2 a1);
/*DS_HASH_TABLE[DS_ARRAYED_LIST[PR_STATE],INTEGER]*/
void r404slots_resize(T404* C,T2 a1);
/*DS_HASH_TABLE[DS_ARRAYED_LIST[PR_STATE],INTEGER]*/
T0* r404new_cursor(T404* C);
/*DS_HASH_TABLE[DS_ARRAYED_LIST[PR_STATE],INTEGER]*/
void r404make_slots(T404* C,T2 a1);
/*DS_HASH_TABLE[DS_ARRAYED_LIST[PR_STATE],INTEGER]*/
T6 r404is_full(T404* C);
/*DS_HASH_TABLE[DS_ARRAYED_LIST[PR_STATE],INTEGER]*/
T2 r404new_modulus(T2 a1);
/*DS_HASH_TABLE_CURSOR[PR_VARIABLE,STRING]*/
void r619make(T619* C,T0* a1);
/*SPECIAL[PR_ERROR_ACTION]*/
T6 r316valid_index(T316* C,T2 a1);
/*SPECIAL[PR_ERROR_ACTION]*/
void r316make(T316* C,T2 a1);
/*SPECIAL[PR_ERROR_ACTION]*/
T0* r316resize(T316* C,T2 a1);
/*SPECIAL[PR_ERROR_ACTION]*/
void r316array_resize(T316* C,T2 a1);
/*KL_SPECIAL_ROUTINES[DS_ARRAYED_LIST[PR_STATE]]*/
T0* r420make(T2 a1);
/*KL_SPECIAL_ROUTINES[DS_ARRAYED_LIST[PR_STATE]]*/
T0* r420resize(T0* a1,T2 a2);
/*DS_LINKED_LIST_CURSOR[PR_TRANSITION]*/
void r245set(T245* C,T0* a1,T6 a2,T6 a3);
/*DS_LINKED_LIST_CURSOR[PR_TRANSITION]*/
void r245make(T245* C,T0* a1);
/*DS_LINKED_LIST_CURSOR[PR_TRANSITION]*/
void r245set_after(T245* C);
/*SPECIAL[PR_TOKEN]*/
T6 r169valid_index(T169* C,T2 a1);
/*SPECIAL[PR_TOKEN]*/
void r169make(T169* C,T2 a1);
/*SPECIAL[PR_TOKEN]*/
T0* r169resize(T169* C,T2 a1);
/*SPECIAL[PR_TOKEN]*/
void r169array_resize(T169* C,T2 a1);
/*DS_HASH_TABLE_CURSOR[PR_TOKEN,STRING]*/
T6 r624valid_position(T624* C,T2 a1);
/*DS_HASH_TABLE_CURSOR[PR_TOKEN,STRING]*/
T0* r624item(T624* C);
/*DS_HASH_TABLE_CURSOR[PR_TOKEN,STRING]*/
T6 r624after(T624* C);
/*DS_HASH_TABLE_CURSOR[PR_TOKEN,STRING]*/
void r624make(T624* C,T0* a1);
/*DS_HASH_TABLE_CURSOR[PR_TOKEN,STRING]*/
T6 r624off(T624* C);
/*DS_LINKED_LIST[PR_REDUCTION]*/
T6 r372valid_cursor(T372* C,T0* a1);
/*DS_LINKED_LIST[PR_REDUCTION]*/
void r372append_last(T372* C,T0* a1);
/*DS_LINKED_LIST[PR_REDUCTION]*/
T0* r372cursor_item(T0* a1);
/*DS_LINKED_LIST[PR_REDUCTION]*/
void r372remove_traversing_cursor(T372* C,T0* a1);
/*DS_LINKED_LIST[PR_REDUCTION]*/
void r372add_traversing_cursor(T372* C,T0* a1);
/*DS_LINKED_LIST[PR_REDUCTION]*/
void r372make(T372* C);
/*DS_LINKED_LIST[PR_REDUCTION]*/
T6 r372cursor_after(T0* a1);
/*DS_LINKED_LIST[PR_REDUCTION]*/
void r372cursor_forth(T372* C,T0* a1);
/*DS_LINKED_LIST[PR_REDUCTION]*/
void r372cursor_start(T372* C,T0* a1);
/*DS_LINKED_LIST[PR_REDUCTION]*/
T0* r372new_cursor(T372* C);
/*DS_LINKED_LIST[PR_REDUCTION]*/
T6 r372cursor_off(T0* a1);
/*DS_ARRAYED_LIST_CURSOR[PR_STATE]*/
T6 r361valid_position(T361* C,T2 a1);
/*SPECIAL[PR_POSITION]*/
T6 r305valid_index(T305* C,T2 a1);
/*SPECIAL[PR_POSITION]*/
void r305make(T305* C,T2 a1);
/*SPECIAL[PR_POSITION]*/
T0* r305resize(T305* C,T2 a1);
/*SPECIAL[PR_POSITION]*/
void r305array_resize(T305* C,T2 a1);
/*DS_ARRAYED_LIST[PR_STATE]*/
T2 r82new_capacity(T2 a1);
/*DS_ARRAYED_LIST[PR_STATE]*/
T6 r82extendible(T82* C,T2 a1);
/*DS_ARRAYED_LIST[PR_STATE]*/
void r82move_cursors_right(T82* C,T2 a1,T2 a2);
/*DS_ARRAYED_LIST[PR_STATE]*/
T0* r82last(T82* C);
/*DS_ARRAYED_LIST[PR_STATE]*/
void r82put(T82* C,T0* a1,T2 a2);
/*DS_ARRAYED_LIST[PR_STATE]*/
void r82move_left(T82* C,T2 a1,T2 a2);
/*DS_ARRAYED_LIST[PR_STATE]*/
void r82make(T82* C,T2 a1);
/*DS_ARRAYED_LIST[PR_STATE]*/
void r82remove(T82* C,T2 a1);
/*DS_ARRAYED_LIST[PR_STATE]*/
void r82move_cursors_left(T82* C,T2 a1);
/*DS_ARRAYED_LIST[PR_STATE]*/
void r82remove_last(T82* C);
/*DS_ARRAYED_LIST[PR_STATE]*/
void r82move_right(T82* C,T2 a1,T2 a2);
/*DS_ARRAYED_LIST[PR_STATE]*/
void r82resize(T82* C,T2 a1);
/*DS_ARRAYED_LIST[PR_STATE]*/
void r82move_last_cursors_after(T82* C);
/*DS_ARRAYED_LIST[PR_STATE]*/
void r82force_last(T82* C,T0* a1);
/*DS_ARRAYED_LIST[PR_STATE]*/
T0* r82new_cursor(T82* C);
/*DS_ARRAYED_LIST[PR_STATE]*/
void r82put_last(T82* C,T0* a1);
/*DS_BUBBLE_SORTER[PR_PORTION]*/
void r231subsort_with_comparator(T0* a1,T0* a2,T2 a3,T2 a4);
/*DS_BUBBLE_SORTER[PR_PORTION]*/
void r231sort_with_comparator(T0* a1,T0* a2);
/*KL_SPECIAL_ROUTINES[DS_NESTED_LIST[PR_TOKEN]]*/
T0* r390make(T2 a1);
/*KL_SPECIAL_ROUTINES[DS_NESTED_LIST[PR_TOKEN]]*/
T0* r390resize(T0* a1,T2 a2);
/*DS_ARRAYED_LIST[PR_POSITION]*/
T6 r304extendible(T304* C,T2 a1);
/*DS_ARRAYED_LIST[PR_POSITION]*/
void r304make_equal(T304* C,T2 a1);
/*DS_ARRAYED_LIST[PR_POSITION]*/
void r304make(T304* C,T2 a1);
/*DS_ARRAYED_LIST[PR_POSITION]*/
T6 r304has(T304* C,T0* a1);
/*DS_ARRAYED_LIST[PR_POSITION]*/
void r304resize(T304* C,T2 a1);
/*DS_ARRAYED_LIST[PR_POSITION]*/
T0* r304new_cursor(T304* C);
/*DS_ARRAYED_LIST[PR_POSITION]*/
T6 r304is_full(T304* C);
/*DS_ARRAYED_LIST[PR_POSITION]*/
void r304put_last(T304* C,T0* a1);
/*KL_SPECIAL_ROUTINES[PR_SYMBOL]*/
T0* r597make(T2 a1);
/*KL_SPECIAL_ROUTINES[PR_SYMBOL]*/
T0* r597resize(T0* a1,T2 a2);
/*SPECIAL[PR_RULE]*/
void r138copy(T138* C,T0* a1);
/*SPECIAL[PR_RULE]*/
T6 r138is_equal(T138* C,T0* a1);
/*SPECIAL[PR_RULE]*/
T6 r138valid_index(T138* C,T2 a1);
/*SPECIAL[PR_RULE]*/
void r138make(T138* C,T2 a1);
/*SPECIAL[PR_RULE]*/
T0* r138resize(T138* C,T2 a1);
/*SPECIAL[PR_RULE]*/
void r138array_resize(T138* C,T2 a1);
/*SPECIAL[PR_RULE]*/
T0* r138twin(T138* C);
/*DS_HASH_TABLE_CURSOR[PR_TYPE,STRING]*/
void r612make(T612* C,T0* a1);
/*DS_BUBBLE_SORTER[PR_POSITION]*/
void r416subsort_with_comparator(T0* a1,T0* a2,T2 a3,T2 a4);
/*DS_BUBBLE_SORTER[PR_POSITION]*/
void r416sort_with_comparator(T0* a1,T0* a2);
/*SPECIAL[PR_REDUCTION]*/
T6 r276valid_index(T276* C,T2 a1);
/*SPECIAL[PR_REDUCTION]*/
void r276make(T276* C,T2 a1);
/*SPECIAL[PR_REDUCTION]*/
T0* r276resize(T276* C,T2 a1);
/*SPECIAL[PR_REDUCTION]*/
void r276array_resize(T276* C,T2 a1);
/*DS_HASH_TABLE[PR_VARIABLE,STRING]*/
T2 r552new_capacity(T2 a1);
/*DS_HASH_TABLE[PR_VARIABLE,STRING]*/
void r552force(T552* C,T0* a1,T0* a2);
/*DS_HASH_TABLE[PR_VARIABLE,STRING]*/
void r552make_clashes(T552* C,T2 a1);
/*DS_HASH_TABLE[PR_VARIABLE,STRING]*/
void r552search_position(T552* C,T0* a1);
/*DS_HASH_TABLE[PR_VARIABLE,STRING]*/
void r552keys_resize(T552* C,T2 a1);
/*DS_HASH_TABLE[PR_VARIABLE,STRING]*/
T0* r552item(T552* C,T0* a1);
/*DS_HASH_TABLE[PR_VARIABLE,STRING]*/
void r552make_items(T552* C,T2 a1);
/*DS_HASH_TABLE[PR_VARIABLE,STRING]*/
void r552make(T552* C,T2 a1);
/*DS_HASH_TABLE[PR_VARIABLE,STRING]*/
T6 r552has(T552* C,T0* a1);
/*DS_HASH_TABLE[PR_VARIABLE,STRING]*/
void r552make_keys(T552* C,T2 a1);
/*DS_HASH_TABLE[PR_VARIABLE,STRING]*/
T2 r552hash_position(T552* C,T0* a1);
/*DS_HASH_TABLE[PR_VARIABLE,STRING]*/
void r552items_resize(T552* C,T2 a1);
/*DS_HASH_TABLE[PR_VARIABLE,STRING]*/
void r552make_with_equality_testers(T552* C,T2 a1,T0* a2,T0* a3);
/*DS_HASH_TABLE[PR_VARIABLE,STRING]*/
void r552resize(T552* C,T2 a1);
/*DS_HASH_TABLE[PR_VARIABLE,STRING]*/
void r552make_sparse_container(T552* C,T2 a1);
/*DS_HASH_TABLE[PR_VARIABLE,STRING]*/
void r552clashes_resize(T552* C,T2 a1);
/*DS_HASH_TABLE[PR_VARIABLE,STRING]*/
void r552slots_resize(T552* C,T2 a1);
/*DS_HASH_TABLE[PR_VARIABLE,STRING]*/
T0* r552new_cursor(T552* C);
/*DS_HASH_TABLE[PR_VARIABLE,STRING]*/
void r552make_slots(T552* C,T2 a1);
/*DS_HASH_TABLE[PR_VARIABLE,STRING]*/
T2 r552new_modulus(T2 a1);
/*DS_HASH_TABLE[INTEGER,PR_TYPE]*/
T6 r110valid_cursor(T110* C,T0* a1);
/*DS_HASH_TABLE[INTEGER,PR_TYPE]*/
void r110make_clashes(T110* C,T2 a1);
/*DS_HASH_TABLE[INTEGER,PR_TYPE]*/
T6 r110valid_slot(T110* C,T2 a1);
/*DS_HASH_TABLE[INTEGER,PR_TYPE]*/
T6 r110valid_position(T110* C,T2 a1);
/*DS_HASH_TABLE[INTEGER,PR_TYPE]*/
T2 r110cursor_item(T110* C,T0* a1);
/*DS_HASH_TABLE[INTEGER,PR_TYPE]*/
void r110search_position(T110* C,T0* a1);
/*DS_HASH_TABLE[INTEGER,PR_TYPE]*/
void r110remove_traversing_cursor(T110* C,T0* a1);
/*DS_HASH_TABLE[INTEGER,PR_TYPE]*/
T2 r110item(T110* C,T0* a1);
/*DS_HASH_TABLE[INTEGER,PR_TYPE]*/
void r110make_items(T110* C,T2 a1);
/*DS_HASH_TABLE[INTEGER,PR_TYPE]*/
void r110add_traversing_cursor(T110* C,T0* a1);
/*DS_HASH_TABLE[INTEGER,PR_TYPE]*/
void r110put_new(T110* C,T2 a1,T0* a2);
/*DS_HASH_TABLE[INTEGER,PR_TYPE]*/
T0* r110cursor_key(T110* C,T0* a1);
/*DS_HASH_TABLE[INTEGER,PR_TYPE]*/
T6 r110cursor_after(T0* a1);
/*DS_HASH_TABLE[INTEGER,PR_TYPE]*/
T6 r110has(T110* C,T0* a1);
/*DS_HASH_TABLE[INTEGER,PR_TYPE]*/
void r110make_keys(T110* C,T2 a1);
/*DS_HASH_TABLE[INTEGER,PR_TYPE]*/
T2 r110hash_position(T110* C,T0* a1);
/*DS_HASH_TABLE[INTEGER,PR_TYPE]*/
void r110cursor_forth(T110* C,T0* a1);
/*DS_HASH_TABLE[INTEGER,PR_TYPE]*/
void r110make_with_equality_testers(T110* C,T2 a1,T0* a2,T0* a3);
/*DS_HASH_TABLE[INTEGER,PR_TYPE]*/
T2 r110found_item(T110* C);
/*DS_HASH_TABLE[INTEGER,PR_TYPE]*/
T6 r110found(T110* C);
/*DS_HASH_TABLE[INTEGER,PR_TYPE]*/
void r110make_sparse_container(T110* C,T2 a1);
/*DS_HASH_TABLE[INTEGER,PR_TYPE]*/
void r110search(T110* C,T0* a1);
/*DS_HASH_TABLE[INTEGER,PR_TYPE]*/
void r110cursor_start(T110* C,T0* a1);
/*DS_HASH_TABLE[INTEGER,PR_TYPE]*/
T0* r110new_cursor(T110* C);
/*DS_HASH_TABLE[INTEGER,PR_TYPE]*/
void r110make_slots(T110* C,T2 a1);
/*DS_HASH_TABLE[INTEGER,PR_TYPE]*/
T6 r110is_full(T110* C);
/*DS_HASH_TABLE[INTEGER,PR_TYPE]*/
T2 r110new_modulus(T2 a1);
/*DS_HASH_TABLE[INTEGER,PR_TYPE]*/
T6 r110cursor_off(T0* a1);
/*KL_SPECIAL_ROUTINES[DS_NESTED_LIST[PR_RULE]]*/
T0* r443make(T2 a1);
/*KL_SPECIAL_ROUTINES[DS_NESTED_LIST[PR_RULE]]*/
T0* r443resize(T0* a1,T2 a2);
/*KL_ARRAY_ROUTINES[INTEGER]*/
void r215subcopy(T0* a1,T0* a2,T2 a3,T2 a4,T2 a5);
/*KL_ARRAY_ROUTINES[INTEGER]*/
T0* r215subarray(T0* a1,T2 a2,T2 a3,T2 a4);
/*DS_LINKED_LIST[PR_TOKEN]*/
T6 r340valid_cursor(T340* C,T0* a1);
/*DS_LINKED_LIST[PR_TOKEN]*/
T0* r340cursor_item(T0* a1);
/*DS_LINKED_LIST[PR_TOKEN]*/
void r340remove_traversing_cursor(T340* C,T0* a1);
/*DS_LINKED_LIST[PR_TOKEN]*/
void r340cursor_go_after(T340* C,T0* a1);
/*DS_LINKED_LIST[PR_TOKEN]*/
void r340add_traversing_cursor(T340* C,T0* a1);
/*DS_LINKED_LIST[PR_TOKEN]*/
void r340make(T340* C);
/*DS_LINKED_LIST[PR_TOKEN]*/
T6 r340cursor_after(T0* a1);
/*DS_LINKED_LIST[PR_TOKEN]*/
T6 r340has(T340* C,T0* a1);
/*DS_LINKED_LIST[PR_TOKEN]*/
void r340cursor_search_forth(T340* C,T0* a1,T0* a2);
/*DS_LINKED_LIST[PR_TOKEN]*/
void r340cursor_forth(T340* C,T0* a1);
/*DS_LINKED_LIST[PR_TOKEN]*/
void r340cursor_start(T340* C,T0* a1);
/*DS_LINKED_LIST[PR_TOKEN]*/
void r340force_last(T340* C,T0* a1);
/*DS_LINKED_LIST[PR_TOKEN]*/
T0* r340new_cursor(T340* C);
/*DS_LINKED_LIST[PR_TOKEN]*/
T6 r340cursor_off(T0* a1);
/*KL_EQUALITY_TESTER[PR_RULE]*/
T6 r336test(T0* a1,T0* a2);
/*DS_PAIR[STRING,INTEGER]*/
void r551make(T551* C,T0* a1,T2 a2);
/*DS_HASH_TABLE_CURSOR[INTEGER,PR_TYPE]*/
T0* r109key(T109* C);
/*DS_HASH_TABLE_CURSOR[INTEGER,PR_TYPE]*/
T6 r109valid_position(T109* C,T2 a1);
/*DS_HASH_TABLE_CURSOR[INTEGER,PR_TYPE]*/
T2 r109item(T109* C);
/*DS_HASH_TABLE_CURSOR[INTEGER,PR_TYPE]*/
T6 r109after(T109* C);
/*DS_HASH_TABLE_CURSOR[INTEGER,PR_TYPE]*/
void r109make(T109* C,T0* a1);
/*SPECIAL[PR_PORTION]*/
T6 r216valid_index(T216* C,T2 a1);
/*SPECIAL[PR_PORTION]*/
void r216make(T216* C,T2 a1);
/*SPECIAL[DS_ARRAYED_LIST[PR_STATE]]*/
T6 r408valid_index(T408* C,T2 a1);
/*SPECIAL[DS_ARRAYED_LIST[PR_STATE]]*/
void r408make(T408* C,T2 a1);
/*SPECIAL[DS_ARRAYED_LIST[PR_STATE]]*/
T0* r408resize(T408* C,T2 a1);
/*SPECIAL[DS_ARRAYED_LIST[PR_STATE]]*/
void r408array_resize(T408* C,T2 a1);
/*KL_SPECIAL_ROUTINES[DS_ARRAYED_LIST[PR_TYPE]]*/
T0* r566make(T2 a1);
/*KL_SPECIAL_ROUTINES[DS_ARRAYED_LIST[PR_TYPE]]*/
T0* r566resize(T0* a1,T2 a2);
/*DS_ARRAYED_LIST_CURSOR[PR_REDUCTION]*/
T6 r399valid_position(T399* C,T2 a1);
/*DS_ARRAYED_LIST_CURSOR[PR_REDUCTION]*/
T0* r399item(T399* C);
/*DS_ARRAYED_LIST_CURSOR[PR_REDUCTION]*/
T6 r399after(T399* C);
/*DS_ARRAYED_LIST_CURSOR[PR_REDUCTION]*/
T6 r399off(T399* C);
/*KL_SPECIAL_ROUTINES[PR_RULE]*/
T0* r558make(T2 a1);
/*KL_SPECIAL_ROUTINES[PR_RULE]*/
T0* r558resize(T0* a1,T2 a2);
/*DS_LINKED_LIST_CURSOR[PR_RULE]*/
void r421set(T421* C,T0* a1,T6 a2,T6 a3);
/*DS_LINKED_LIST_CURSOR[PR_RULE]*/
void r421make(T421* C,T0* a1);
/*DS_LINKED_LIST_CURSOR[PR_RULE]*/
void r421set_after(T421* C);
/*DS_ARRAYED_LIST[PR_ERROR_ACTION]*/
T6 r315extendible(T315* C,T2 a1);
/*DS_ARRAYED_LIST[PR_ERROR_ACTION]*/
void r315make(T315* C,T2 a1);
/*DS_ARRAYED_LIST[PR_ERROR_ACTION]*/
void r315resize(T315* C,T2 a1);
/*DS_ARRAYED_LIST[PR_ERROR_ACTION]*/
T0* r315new_cursor(T315* C);
/*DS_ARRAYED_LIST[PR_ERROR_ACTION]*/
T6 r315is_full(T315* C);
/*DS_ARRAYED_LIST[PR_ERROR_ACTION]*/
void r315put_last(T315* C,T0* a1);
/*DS_LINKED_LIST_CURSOR[PR_REDUCTION]*/
void r380set(T380* C,T0* a1,T6 a2,T6 a3);
/*DS_LINKED_LIST_CURSOR[PR_REDUCTION]*/
void r380make(T380* C,T0* a1);
/*DS_ARRAYED_LIST_CURSOR[PR_VARIABLE]*/
T6 r487valid_position(T487* C,T2 a1);
/*DS_ARRAYED_LIST_CURSOR[PR_VARIABLE]*/
T0* r487item(T487* C);
/*DS_ARRAYED_LIST_CURSOR[PR_VARIABLE]*/
T6 r487after(T487* C);
/*DS_ARRAYED_LIST_CURSOR[PR_VARIABLE]*/
T2 r487index(T487* C);
/*DS_ARRAYED_LIST_CURSOR[PR_VARIABLE]*/
T6 r487off(T487* C);
/*SPECIAL[PR_STATE]*/
T6 r84valid_index(T84* C,T2 a1);
/*SPECIAL[PR_STATE]*/
void r84make(T84* C,T2 a1);
/*SPECIAL[PR_STATE]*/
T0* r84resize(T84* C,T2 a1);
/*SPECIAL[PR_STATE]*/
void r84array_resize(T84* C,T2 a1);
/*SPECIAL[PR_VARIABLE]*/
void r235copy(T235* C,T0* a1);
/*SPECIAL[PR_VARIABLE]*/
T6 r235is_equal(T235* C,T0* a1);
/*SPECIAL[PR_VARIABLE]*/
T6 r235valid_index(T235* C,T2 a1);
/*SPECIAL[PR_VARIABLE]*/
void r235make(T235* C,T2 a1);
/*SPECIAL[PR_VARIABLE]*/
T0* r235resize(T235* C,T2 a1);
/*SPECIAL[PR_VARIABLE]*/
void r235array_resize(T235* C,T2 a1);
/*SPECIAL[PR_VARIABLE]*/
T0* r235twin(T235* C);
/*DS_ARRAYED_LIST[PR_REDUCTION]*/
T6 r275valid_cursor(T275* C,T0* a1);
/*DS_ARRAYED_LIST[PR_REDUCTION]*/
T6 r275extendible(T275* C,T2 a1);
/*DS_ARRAYED_LIST[PR_REDUCTION]*/
T0* r275cursor_item(T275* C,T0* a1);
/*DS_ARRAYED_LIST[PR_REDUCTION]*/
void r275remove_traversing_cursor(T275* C,T0* a1);
/*DS_ARRAYED_LIST[PR_REDUCTION]*/
void r275add_traversing_cursor(T275* C,T0* a1);
/*DS_ARRAYED_LIST[PR_REDUCTION]*/
T6 r275cursor_before(T0* a1);
/*DS_ARRAYED_LIST[PR_REDUCTION]*/
void r275make(T275* C,T2 a1);
/*DS_ARRAYED_LIST[PR_REDUCTION]*/
T6 r275cursor_after(T0* a1);
/*DS_ARRAYED_LIST[PR_REDUCTION]*/
void r275cursor_forth(T275* C,T0* a1);
/*DS_ARRAYED_LIST[PR_REDUCTION]*/
void r275resize(T275* C,T2 a1);
/*DS_ARRAYED_LIST[PR_REDUCTION]*/
void r275cursor_start(T275* C,T0* a1);
/*DS_ARRAYED_LIST[PR_REDUCTION]*/
T0* r275new_cursor(T275* C);
/*DS_ARRAYED_LIST[PR_REDUCTION]*/
void r275put_last(T275* C,T0* a1);
/*DS_ARRAYED_LIST[PR_REDUCTION]*/
T6 r275cursor_off(T0* a1);
/*DS_ARRAYED_LIST[PR_SYMBOL]*/
T6 r91extendible(T91* C,T2 a1);
/*DS_ARRAYED_LIST[PR_SYMBOL]*/
void r91make(T91* C,T2 a1);
/*DS_ARRAYED_LIST[PR_SYMBOL]*/
T6 r91has(T91* C,T0* a1);
/*DS_ARRAYED_LIST[PR_SYMBOL]*/
void r91resize(T91* C,T2 a1);
/*DS_ARRAYED_LIST[PR_SYMBOL]*/
T0* r91new_cursor(T91* C);
/*DS_ARRAYED_LIST[PR_SYMBOL]*/
T6 r91is_full(T91* C);
/*DS_ARRAYED_LIST[PR_SYMBOL]*/
void r91put_last(T91* C,T0* a1);
/*SPECIAL[STRING]*/
T6 r179valid_index(T179* C,T2 a1);
/*SPECIAL[STRING]*/
void r179make(T179* C,T2 a1);
/*SPECIAL[STRING]*/
T0* r179resize(T179* C,T2 a1);
/*SPECIAL[STRING]*/
void r179array_resize(T179* C,T2 a1);
/*DS_LINKED_LIST_CURSOR[PR_CONFLICT]*/
void r363set(T363* C,T0* a1,T6 a2,T6 a3);
/*DS_LINKED_LIST_CURSOR[PR_CONFLICT]*/
void r363make(T363* C,T0* a1);
/*KL_EQUALITY_TESTER[PR_TOKEN]*/
T6 r294test(T0* a1,T0* a2);
/*DS_HASH_TABLE[PR_TOKEN,STRING]*/
T2 r545new_capacity(T2 a1);
/*DS_HASH_TABLE[PR_TOKEN,STRING]*/
T6 r545valid_cursor(T545* C,T0* a1);
/*DS_HASH_TABLE[PR_TOKEN,STRING]*/
void r545force(T545* C,T0* a1,T0* a2);
/*DS_HASH_TABLE[PR_TOKEN,STRING]*/
T6 r545valid_slot(T545* C,T2 a1);
/*DS_HASH_TABLE[PR_TOKEN,STRING]*/
void r545make_clashes(T545* C,T2 a1);
/*DS_HASH_TABLE[PR_TOKEN,STRING]*/
T6 r545valid_position(T545* C,T2 a1);
/*DS_HASH_TABLE[PR_TOKEN,STRING]*/
T0* r545cursor_item(T545* C,T0* a1);
/*DS_HASH_TABLE[PR_TOKEN,STRING]*/
void r545search_position(T545* C,T0* a1);
/*DS_HASH_TABLE[PR_TOKEN,STRING]*/
void r545remove_traversing_cursor(T545* C,T0* a1);
/*DS_HASH_TABLE[PR_TOKEN,STRING]*/
void r545keys_resize(T545* C,T2 a1);
/*DS_HASH_TABLE[PR_TOKEN,STRING]*/
void r545cursor_go_after(T545* C,T0* a1);
/*DS_HASH_TABLE[PR_TOKEN,STRING]*/
T0* r545item(T545* C,T0* a1);
/*DS_HASH_TABLE[PR_TOKEN,STRING]*/
void r545make_items(T545* C,T2 a1);
/*DS_HASH_TABLE[PR_TOKEN,STRING]*/
void r545add_traversing_cursor(T545* C,T0* a1);
/*DS_HASH_TABLE[PR_TOKEN,STRING]*/
T6 r545has_item(T545* C,T0* a1);
/*DS_HASH_TABLE[PR_TOKEN,STRING]*/
void r545make(T545* C,T2 a1);
/*DS_HASH_TABLE[PR_TOKEN,STRING]*/
T6 r545cursor_after(T0* a1);
/*DS_HASH_TABLE[PR_TOKEN,STRING]*/
T6 r545has(T545* C,T0* a1);
/*DS_HASH_TABLE[PR_TOKEN,STRING]*/
void r545make_keys(T545* C,T2 a1);
/*DS_HASH_TABLE[PR_TOKEN,STRING]*/
void r545cursor_search_forth(T545* C,T0* a1,T0* a2);
/*DS_HASH_TABLE[PR_TOKEN,STRING]*/
T2 r545hash_position(T545* C,T0* a1);
/*DS_HASH_TABLE[PR_TOKEN,STRING]*/
void r545cursor_forth(T545* C,T0* a1);
/*DS_HASH_TABLE[PR_TOKEN,STRING]*/
void r545items_resize(T545* C,T2 a1);
/*DS_HASH_TABLE[PR_TOKEN,STRING]*/
void r545make_with_equality_testers(T545* C,T2 a1,T0* a2,T0* a3);
/*DS_HASH_TABLE[PR_TOKEN,STRING]*/
void r545resize(T545* C,T2 a1);
/*DS_HASH_TABLE[PR_TOKEN,STRING]*/
void r545make_sparse_container(T545* C,T2 a1);
/*DS_HASH_TABLE[PR_TOKEN,STRING]*/
void r545cursor_start(T545* C,T0* a1);
/*DS_HASH_TABLE[PR_TOKEN,STRING]*/
void r545clashes_resize(T545* C,T2 a1);
/*DS_HASH_TABLE[PR_TOKEN,STRING]*/
void r545slots_resize(T545* C,T2 a1);
/*DS_HASH_TABLE[PR_TOKEN,STRING]*/
T0* r545new_cursor(T545* C);
/*DS_HASH_TABLE[PR_TOKEN,STRING]*/
void r545make_slots(T545* C,T2 a1);
/*DS_HASH_TABLE[PR_TOKEN,STRING]*/
T2 r545new_modulus(T2 a1);
/*DS_HASH_TABLE[PR_TOKEN,STRING]*/
T6 r545cursor_off(T0* a1);
/*DS_NESTED_LIST_FLATTENER[PR_TOKEN]*/
void r370traverse(T0* a1,T0* a2);
/*DS_NESTED_LIST_FLATTENER[PR_TOKEN]*/
void r370flatten(T0* a1);
/*DS_NESTED_LIST_FLATTENER[PR_RULE]*/
void r431traverse(T0* a1,T0* a2);
/*DS_NESTED_LIST_FLATTENER[PR_RULE]*/
void r431flatten(T0* a1);
/*KL_SPECIAL_ROUTINES[PR_TOKEN]*/
T0* r295make(T2 a1);
/*KL_SPECIAL_ROUTINES[PR_TOKEN]*/
T0* r295resize(T0* a1,T2 a2);
/*KL_COMPARABLE_COMPARATOR[PR_PORTION]*/
T6 r230less_than(T0* a1,T0* a2);
/*SPECIAL[DS_ARRAYED_LIST[PR_VARIABLE]]*/
T6 r476valid_index(T476* C,T2 a1);
/*SPECIAL[DS_ARRAYED_LIST[PR_VARIABLE]]*/
void r476make(T476* C,T2 a1);
/*KL_EQUALITY_TESTER[INTEGER]*/
T6 r137test(T2 a1,T2 a2);
/*DS_HASH_SET[PR_TYPE]*/
T6 r151valid_cursor(T151* C,T0* a1);
/*DS_HASH_SET[PR_TYPE]*/
T6 r151extendible(T151* C,T2 a1);
/*DS_HASH_SET[PR_TYPE]*/
T0* r151keys_item(T151* C,T2 a1);
/*DS_HASH_SET[PR_TYPE]*/
void r151make_clashes(T151* C,T2 a1);
/*DS_HASH_SET[PR_TYPE]*/
T6 r151valid_slot(T151* C,T2 a1);
/*DS_HASH_SET[PR_TYPE]*/
T6 r151valid_position(T151* C,T2 a1);
/*DS_HASH_SET[PR_TYPE]*/
void r151put(T151* C,T0* a1);
/*DS_HASH_SET[PR_TYPE]*/
T0* r151cursor_item(T151* C,T0* a1);
/*DS_HASH_SET[PR_TYPE]*/
void r151search_position(T151* C,T0* a1);
/*DS_HASH_SET[PR_TYPE]*/
void r151remove_traversing_cursor(T151* C,T0* a1);
/*DS_HASH_SET[PR_TYPE]*/
void r151make_items(T151* C,T2 a1);
/*DS_HASH_SET[PR_TYPE]*/
void r151add_traversing_cursor(T151* C,T0* a1);
/*DS_HASH_SET[PR_TYPE]*/
void r151make(T151* C,T2 a1);
/*DS_HASH_SET[PR_TYPE]*/
T6 r151cursor_after(T0* a1);
/*DS_HASH_SET[PR_TYPE]*/
T2 r151hash_position(T151* C,T0* a1);
/*DS_HASH_SET[PR_TYPE]*/
T0* r151first(T151* C);
/*DS_HASH_SET[PR_TYPE]*/
void r151cursor_forth(T151* C,T0* a1);
/*DS_HASH_SET[PR_TYPE]*/
void r151cursor_start(T151* C,T0* a1);
/*DS_HASH_SET[PR_TYPE]*/
T0* r151new_cursor(T151* C);
/*DS_HASH_SET[PR_TYPE]*/
void r151make_slots(T151* C,T2 a1);
/*DS_HASH_SET[PR_TYPE]*/
T2 r151new_modulus(T2 a1);
/*DS_HASH_SET[PR_TYPE]*/
T6 r151cursor_off(T0* a1);
/*SPECIAL[DS_NESTED_LIST[PR_TOKEN]]*/
T6 r391valid_index(T391* C,T2 a1);
/*SPECIAL[DS_NESTED_LIST[PR_TOKEN]]*/
void r391make(T391* C,T2 a1);
/*SPECIAL[DS_NESTED_LIST[PR_TOKEN]]*/
T0* r391resize(T391* C,T2 a1);
/*SPECIAL[DS_NESTED_LIST[PR_TOKEN]]*/
void r391array_resize(T391* C,T2 a1);
/*DS_LINKED_LIST_CURSOR[PR_VARIABLE]*/
void r557set(T557* C,T0* a1,T6 a2,T6 a3);
/*DS_LINKED_LIST_CURSOR[PR_VARIABLE]*/
void r557make(T557* C,T0* a1);
/*DS_LINKED_LIST_CURSOR[PR_VARIABLE]*/
void r557set_after(T557* C);
/*DS_HASH_SET_CURSOR[PR_TYPE]*/
T6 r150valid_position(T150* C,T2 a1);
/*DS_HASH_SET_CURSOR[PR_TYPE]*/
T0* r150item(T150* C);
/*DS_HASH_SET_CURSOR[PR_TYPE]*/
T6 r150after(T150* C);
/*DS_HASH_SET_CURSOR[PR_TYPE]*/
void r150make(T150* C,T0* a1);
/*DS_ARRAYED_LIST[PR_TYPE]*/
T2 r67new_capacity(T2 a1);
/*DS_ARRAYED_LIST[PR_TYPE]*/
T6 r67extendible(T67* C,T2 a1);
/*DS_ARRAYED_LIST[PR_TYPE]*/
void r67make(T67* C,T2 a1);
/*DS_ARRAYED_LIST[PR_TYPE]*/
T6 r67has(T67* C,T0* a1);
/*DS_ARRAYED_LIST[PR_TYPE]*/
void r67resize(T67* C,T2 a1);
/*DS_ARRAYED_LIST[PR_TYPE]*/
void r67force_last(T67* C,T0* a1);
/*DS_ARRAYED_LIST[PR_TYPE]*/
T0* r67new_cursor(T67* C);
/*DS_ARRAYED_LIST[PR_TYPE]*/
T6 r67is_full(T67* C);
/*DS_ARRAYED_LIST[PR_TYPE]*/
void r67put_last(T67* C,T0* a1);
/*KL_EQUALITY_TESTER[PR_VARIABLE]*/
T6 r615test(T0* a1,T0* a2);
/*KL_COMPARABLE_COMPARATOR[PR_POSITION]*/
T6 r415less_than(T0* a1,T0* a2);
/*KL_SPECIAL_ROUTINES[INTEGER]*/
T0* r134make(T2 a1);
/*KL_SPECIAL_ROUTINES[INTEGER]*/
T0* r134make_from_array(T0* a1);
/*KL_SPECIAL_ROUTINES[INTEGER]*/
T0* r134resize(T0* a1,T2 a2);
/*KL_SPECIAL_ROUTINES[INTEGER]*/
T0* r134to_special(T0* a1);
/*KL_EQUALITY_TESTER[PR_TYPE]*/
T6 r117test(T0* a1,T0* a2);
/*KL_SPECIAL_ROUTINES[STRING]*/
T0* r524make(T2 a1);
/*KL_SPECIAL_ROUTINES[STRING]*/
T0* r524resize(T0* a1,T2 a2);
/*DS_LINKED_LIST[PR_RULE]*/
T6 r427valid_cursor(T427* C,T0* a1);
/*DS_LINKED_LIST[PR_RULE]*/
void r427append_last(T427* C,T0* a1);
/*DS_LINKED_LIST[PR_RULE]*/
T0* r427cursor_item(T0* a1);
/*DS_LINKED_LIST[PR_RULE]*/
void r427remove_traversing_cursor(T427* C,T0* a1);
/*DS_LINKED_LIST[PR_RULE]*/
void r427cursor_go_after(T427* C,T0* a1);
/*DS_LINKED_LIST[PR_RULE]*/
void r427add_traversing_cursor(T427* C,T0* a1);
/*DS_LINKED_LIST[PR_RULE]*/
void r427make(T427* C);
/*DS_LINKED_LIST[PR_RULE]*/
T6 r427cursor_after(T0* a1);
/*DS_LINKED_LIST[PR_RULE]*/
T6 r427has(T427* C,T0* a1);
/*DS_LINKED_LIST[PR_RULE]*/
void r427cursor_search_forth(T427* C,T0* a1,T0* a2);
/*DS_LINKED_LIST[PR_RULE]*/
void r427cursor_forth(T427* C,T0* a1);
/*DS_LINKED_LIST[PR_RULE]*/
void r427cursor_start(T427* C,T0* a1);
/*DS_LINKED_LIST[PR_RULE]*/
void r427force_last(T427* C,T0* a1);
/*DS_LINKED_LIST[PR_RULE]*/
T0* r427new_cursor(T427* C);
/*DS_LINKED_LIST[PR_RULE]*/
T6 r427cursor_off(T0* a1);
/*DS_ARRAYED_LIST[DS_ARRAYED_LIST[PR_VARIABLE]]*/
void r465clear_items(T465* C,T2 a1,T2 a2);
/*DS_ARRAYED_LIST[DS_ARRAYED_LIST[PR_VARIABLE]]*/
T6 r465extendible(T465* C,T2 a1);
/*DS_ARRAYED_LIST[DS_ARRAYED_LIST[PR_VARIABLE]]*/
void r465wipe_out(T465* C);
/*DS_ARRAYED_LIST[DS_ARRAYED_LIST[PR_VARIABLE]]*/
void r465move_all_cursors_after(T465* C);
/*DS_ARRAYED_LIST[DS_ARRAYED_LIST[PR_VARIABLE]]*/
void r465make(T465* C,T2 a1);
/*DS_ARRAYED_LIST[DS_ARRAYED_LIST[PR_VARIABLE]]*/
T0* r465new_cursor(T465* C);
/*DS_ARRAYED_LIST[DS_ARRAYED_LIST[PR_VARIABLE]]*/
void r465put_last(T465* C,T0* a1);
/*KL_SPECIAL_ROUTINES[PR_VARIABLE]*/
T0* r489make(T2 a1);
/*KL_SPECIAL_ROUTINES[PR_VARIABLE]*/
T0* r489resize(T0* a1,T2 a2);
/*DS_HASH_TABLE_CURSOR[DS_ARRAYED_LIST[PR_STATE],INTEGER]*/
void r463make(T463* C,T0* a1);
/*DS_BUBBLE_SORTER[INTEGER]*/
T6 r248sorted(T248* C,T0* a1);
/*DS_BUBBLE_SORTER[INTEGER]*/
T6 r248sorted_with_comparator(T0* a1,T0* a2);
/*DS_BUBBLE_SORTER[INTEGER]*/
T6 r248subsorted_with_comparator(T0* a1,T0* a2,T2 a3,T2 a4);
/*DS_ARRAYED_LIST[INTEGER]*/
T6 r211extendible(T211* C,T2 a1);
/*DS_ARRAYED_LIST[INTEGER]*/
T2 r211last(T211* C);
/*DS_ARRAYED_LIST[INTEGER]*/
void r211make(T211* C,T2 a1);
/*DS_ARRAYED_LIST[INTEGER]*/
T6 r211sorted(T211* C,T0* a1);
/*DS_ARRAYED_LIST[INTEGER]*/
T0* r211new_cursor(T211* C);
/*DS_ARRAYED_LIST[INTEGER]*/
void r211put_last(T211* C,T2 a1);
/*SPECIAL[PR_SYMBOL]*/
T6 r129valid_index(T129* C,T2 a1);
/*SPECIAL[PR_SYMBOL]*/
void r129make(T129* C,T2 a1);
/*SPECIAL[PR_SYMBOL]*/
T0* r129resize(T129* C,T2 a1);
/*SPECIAL[PR_SYMBOL]*/
void r129array_resize(T129* C,T2 a1);
/*KL_EQUALITY_TESTER[PR_TRANSITION]*/
T6 r644test(T0* a1,T0* a2);
extern T0*oBC13string_;
extern T0*oBC15arguments;
extern int fBC15arguments;
/*PR_STRING_TOKEN_DEFINED_TWICE_ERROR*/
T0* r574arguments(void);
/*PR_STRING_TOKEN_DEFINED_TWICE_ERROR*/
void r574make(T574* C,T0* a1,T2 a2,T0* a3,T0* a4,T0* a5);
/*PR_STRING_TOKEN_DEFINED_TWICE_ERROR*/
T0* r574message(T574* C,T0* a1);
/*PR_STRING_TOKEN_DEFINED_TWICE_ERROR*/
T0* r574default_message(T574* C);
/*PR_NULL_INTEGER_ERROR*/
T0* r536arguments(void);
/*PR_NULL_INTEGER_ERROR*/
void r536make(T536* C,T0* a1,T2 a2);
/*PR_NULL_INTEGER_ERROR*/
T0* r536message(T536* C,T0* a1);
/*PR_NULL_INTEGER_ERROR*/
T0* r536default_message(T536* C);
/*PR_INVALID_DOLLAR_DOLLAR_ERROR*/
T0* r538arguments(void);
/*PR_INVALID_DOLLAR_DOLLAR_ERROR*/
void r538make(T538* C,T0* a1,T2 a2);
/*PR_INVALID_DOLLAR_DOLLAR_ERROR*/
T0* r538message(T538* C,T0* a1);
/*PR_INVALID_DOLLAR_DOLLAR_ERROR*/
T0* r538default_message(T538* C);
/*KL_TEXT_INPUT_FILE*/
T6 r492is_closed(T492* C);
/*KL_TEXT_INPUT_FILE*/
void r492old_close(T492* C);
/*KL_TEXT_INPUT_FILE*/
T2 r492read_to_string(T492* C,T0* a1,T2 a2,T2 a3);
/*KL_TEXT_INPUT_FILE*/
T2 r492_498Pread_to_buffer(T492* C,T0* a1,T2 a2,T2 a3);
/*KL_TEXT_INPUT_FILE*/
void r492open_read(T492* C);
/*KL_TEXT_INPUT_FILE*/
void r492old_read_character(T492* C);
/*KL_TEXT_INPUT_FILE*/
void r492read_character(T492* C);
/*KL_TEXT_INPUT_FILE*/
void r492fill_buffer(T492* C);
/*KL_TEXT_INPUT_FILE*/
void r492close(T492* C);
/*KL_TEXT_INPUT_FILE*/
void r492make(T492* C,T0* a1);
/*KL_TEXT_INPUT_FILE*/
T2 r492read_to_buffer(T492* C,T0* a1,T2 a2,T2 a3);
/*KL_TEXT_INPUT_FILE*/
void r492connect_to(T492* C,T0* a1);
/*KL_TEXT_INPUT_FILE*/
void r492old_open_read(T492* C);
/*PR_MISSING_CHARACTERS_ERROR*/
T0* r535arguments(void);
/*PR_MISSING_CHARACTERS_ERROR*/
void r535make(T535* C,T0* a1,T2 a2,T0* a3);
/*PR_MISSING_CHARACTERS_ERROR*/
T0* r535message(T535* C,T0* a1);
/*PR_MISSING_CHARACTERS_ERROR*/
T0* r535default_message(T535* C);
/*UT_VERSION_NUMBER*/
T0* r638arguments(void);
/*UT_VERSION_NUMBER*/
void r638make(T638* C,T0* a1);
/*UT_VERSION_NUMBER*/
T0* r638message(T638* C,T0* a1);
/*UT_VERSION_NUMBER*/
T0* r638default_message(T638* C);
/*PR_ACTION*/
T6 r599is_equal(T599* C,T0* a1);
/*PR_ACTION*/
T6 r599se_assigned_from(T0* a1);
/*PR_ACTION*/
void r599out_in_tagged_out_memory(T599* C);
/*PR_ACTION*/
T6 r599same_type(T599* C,T0* a1);
/*PR_ACTION*/
T6 r599conforms_to(T599* C,T0* a1);
/*PR_TOKEN_DECLARED_TWICE_ERROR*/
T0* r570arguments(void);
/*PR_TOKEN_DECLARED_TWICE_ERROR*/
void r570make(T570* C,T0* a1,T2 a2,T0* a3);
/*PR_TOKEN_DECLARED_TWICE_ERROR*/
T0* r570message(T570* C,T0* a1);
/*PR_TOKEN_DECLARED_TWICE_ERROR*/
T0* r570default_message(T570* C);
/*KL_STDIN_FILE*/
T2 r607read_to_string(T607* C,T0* a1,T2 a2,T2 a3);
/*KL_STDIN_FILE*/
T2 r607_498Pread_to_buffer(T607* C,T0* a1,T2 a2,T2 a3);
/*KL_STDIN_FILE*/
void r607old_read_character(T607* C);
/*KL_STDIN_FILE*/
void r607read_character(T607* C);
/*KL_STDIN_FILE*/
void r607fill_buffer(T607* C);
/*KL_STDIN_FILE*/
void r607make(T607* C);
/*KL_STDIN_FILE*/
T2 r607read_to_buffer(T607* C,T0* a1,T2 a2,T2 a3);
extern T0*oBC21std_output;
/*KL_STDIN_FILE*/
void r607old_make(T607* C);
/*PR_TYPE*/
void r65print_create_yyvs(T65* C,T2 a1,T0* a2);
/*PR_TYPE*/
void r65append_dollar_n_to_string(T65* C,T2 a1,T2 a2,T0* a3,T0* a4);
/*PR_TYPE*/
void r65old_append_dollar_dollar_to_string(T65* C,T0* a1);
/*PR_TYPE*/
void r65print_resize_yyvs(T65* C,T2 a1,T0* a2);
/*PR_TYPE*/
T6 r65is_equal(T65* C,T0* a1);
/*PR_TYPE*/
void r65print_push_yyval(T65* C,T2 a1,T0* a2);
/*PR_TYPE*/
void r65old_print_dollar_dollar_initialization(T65* C,T0* a1);
/*PR_TYPE*/
void r65print_push_last_value(T65* C,T2 a1,T0* a2);
extern T0*oBC43integer_formatter_;
/*PR_TYPE*/
void r65make_generic(T65* C,T2 a1,T0* a2,T0* a3);
extern T0*oBC66character_;
/*PR_TYPE*/
void r65print_increment_yyvsp(T65* C,T2 a1,T2 a2,T0* a3);
/*PR_TYPE*/
void r65print_yyvs_declaration(T65* C,T2 a1,T0* a2);
/*PR_TYPE*/
void r65print_pop_last_value(T65* C,T2 a1,T0* a2);
/*PR_TYPE*/
void r65make(T65* C,T2 a1,T0* a2);
/*PR_TYPE*/
T0* r65last_value_name(T65* C);
/*PR_TYPE*/
void r65old_print_dollar_dollar_finalization(T65* C,T0* a1);
/*PR_TYPE*/
void r65print_clear_yyvs(T65* C,T2 a1,T0* a2);
/*PR_TYPE*/
void r65print_dollar_dollar_declaration(T65* C,T0* a1);
/*PR_TYPE*/
void r65print_indentation(T2 a1,T0* a2);
/*PR_TYPE*/
void r65old_print_conversion_routine(T65* C,T0* a1);
/*PR_TYPE*/
void r65old_append_dollar_n_to_string(T65* C,T2 a1,T2 a2,T0* a3,T0* a4);
/*PR_TYPE*/
void r65append_dollar_dollar_to_string(T65* C,T0* a1);
/*PR_TYPE*/
void r65make_anchored(T65* C,T2 a1,T0* a2);
/*UT_ERROR_HANDLER*/
void r185report_warning_message(T185* C,T0* a1);
extern T0*oBC14std;
/*UT_ERROR_HANDLER*/
T0* r185message(T0* a1);
/*UT_ERROR_HANDLER*/
void r185report_info_message(T185* C,T0* a1);
/*UT_ERROR_HANDLER*/
void r185make_standard(T185* C);
/*UT_ERROR_HANDLER*/
void r185report_error_message(T185* C,T0* a1);
/*KL_CHARACTER_BUFFER*/
T0* r606substring(T606* C,T2 a1,T2 a2);
/*KL_CHARACTER_BUFFER*/
void r606fill_from_string(T606* C,T0* a1,T2 a2);
/*KL_CHARACTER_BUFFER*/
T2 r606fill_from_stream(T606* C,T0* a1,T2 a2,T2 a3);
/*KL_CHARACTER_BUFFER*/
void r606move_left(T606* C,T2 a1,T2 a2,T2 a3);
/*KL_CHARACTER_BUFFER*/
void r606make(T606* C,T2 a1);
/*KL_CHARACTER_BUFFER*/
void r606resize(T606* C,T2 a1);
/*UT_MESSAGE*/
T0* r314arguments(void);
/*UT_MESSAGE*/
void r314make(T314* C,T0* a1);
/*UT_MESSAGE*/
T0* r314message(T314* C,T0* a1);
/*UT_MESSAGE*/
T0* r314default_message(T314* C);
/*KL_TEXT_OUTPUT_FILE*/
T6 r22is_closed(T22* C);
/*KL_TEXT_OUTPUT_FILE*/
void r22old_close(T22* C);
/*KL_TEXT_OUTPUT_FILE*/
void r22old_open_write(T22* C);
/*KL_TEXT_OUTPUT_FILE*/
void r22close(T22* C);
/*KL_TEXT_OUTPUT_FILE*/
void r22make(T22* C,T0* a1);
/*KL_TEXT_OUTPUT_FILE*/
void r22old_put_string(T22* C,T0* a1);
/*KL_TEXT_OUTPUT_FILE*/
void r22old_put_character(T22* C,T3 a1);
/*KL_TEXT_OUTPUT_FILE*/
void r22connect_to(T22* C,T0* a1);
/*KL_TEXT_OUTPUT_FILE*/
void r22put_integer(T22* C,T2 a1);
/*KL_TEXT_OUTPUT_FILE*/
void r22put_line(T22* C,T0* a1);
/*KL_TEXT_OUTPUT_FILE*/
void r22old_make(T22* C);
/*KL_TEXT_OUTPUT_FILE*/
void r22open_write(T22* C);
/*KL_TEXT_OUTPUT_FILE*/
void r22write_buffer(T22* C);
/*PR_PREC_SPECIFIED_TWICE_ERROR*/
T0* r604arguments(void);
/*PR_PREC_SPECIFIED_TWICE_ERROR*/
void r604make(T604* C,T0* a1,T2 a2);
/*PR_PREC_SPECIFIED_TWICE_ERROR*/
T0* r604message(T604* C,T0* a1);
/*PR_PREC_SPECIFIED_TWICE_ERROR*/
T0* r604default_message(T604* C);
/*PR_PREC_NOT_TOKEN_ERROR*/
T0* r605arguments(void);
/*PR_PREC_NOT_TOKEN_ERROR*/
void r605make(T605* C,T0* a1,T2 a2,T0* a3);
/*PR_PREC_NOT_TOKEN_ERROR*/
T0* r605message(T605* C,T0* a1);
/*PR_PREC_NOT_TOKEN_ERROR*/
T0* r605default_message(T605* C);
/*PR_INVALID_STRING_TOKEN_ERROR*/
T0* r537arguments(void);
/*PR_INVALID_STRING_TOKEN_ERROR*/
void r537make(T537* C,T0* a1,T2 a2,T0* a3);
/*PR_INVALID_STRING_TOKEN_ERROR*/
T0* r537message(T537* C,T0* a1);
/*PR_INVALID_STRING_TOKEN_ERROR*/
T0* r537default_message(T537* C);
/*PR_RULE*/
void r88put_symbol(T88* C,T0* a1);
/*PR_RULE*/
T6 r88is_equal(T88* C,T0* a1);
/*PR_RULE*/
void r88old_print_action(T88* C,T0* a1,T6 a2,T0* a3);
/*PR_RULE*/
void r88print_rule(T88* C,T0* a1);
/*PR_RULE*/
void r88make(T88* C,T2 a1,T0* a2,T0* a3);
/*PR_RULE*/
void r88print_action(T88* C,T0* a1,T6 a2,T0* a3);
/*PR_RULE*/
T6 r88_ix_60(T88* C,T0* a1);
/*PR_YACC_PARSER*/
void r501report_multiple_start_declarations_error(T501* C);
/*PR_YACC_PARSER*/
void r501yy_do_action(T501* C,T2 a1);
/*PR_YACC_PARSER*/
void r501report_variable_declared_as_token_error(T501* C,T0* a1);
/*PR_YACC_PARSER*/
T0* r501cloned_string(T0* a1);
extern T0*oBC510unknown_type;
extern int fBC510unknown_type;
/*PR_YACC_PARSER*/
T0* r501unknown_type(T501* C);
extern T0*oBC501yytable_template;
extern int fBC501yytable_template;
/*PR_YACC_PARSER*/
T0* r501yytable_template(void);
/*PR_YACC_PARSER*/
T0* r501new_symbol(T501* C,T0* a1);
/*PR_YACC_PARSER*/
void r501make_parser_skeleton(T501* C);
/*PR_YACC_PARSER*/
void r501report_undefined_string_token_error(T501* C,T0* a1);
/*PR_YACC_PARSER*/
void r501report_start_symbol_token_error(T501* C);
/*PR_YACC_PARSER*/
T0* r501new_nonassoc_char_terminal(T501* C,T0* a1,T2 a2);
/*PR_YACC_PARSER*/
void r501fatal_error(T0* a1);
/*PR_YACC_PARSER*/
T0* r501new_type(T501* C,T0* a1);
/*PR_YACC_PARSER*/
void r501put_symbol(T501* C,T0* a1,T0* a2);
/*PR_YACC_PARSER*/
T2 r501start_condition(T501* C);
/*PR_YACC_PARSER*/
void r501yy_do_error_action(T501* C,T2 a1);
extern T0*oBC510no_action;
extern int fBC510no_action;
/*PR_YACC_PARSER*/
T0* r501no_action(T501* C);
/*PR_YACC_PARSER*/
void r501report_two_strings_token_error(T501* C,T0* a1,T0* a2,T0* a3);
/*PR_YACC_PARSER*/
void r501parse_file(T501* C,T0* a1);
/*PR_YACC_PARSER*/
void r501parse(T501* C);
/*PR_YACC_PARSER*/
void r501report_invalid_dollar_dollar_error(T501* C);
/*PR_YACC_PARSER*/
T0* r501new_rule(T501* C,T0* a1);
/*PR_YACC_PARSER*/
void r501report_dangerous_dollar_n_warning(T501* C,T2 a1);
/*PR_YACC_PARSER*/
T0* r501new_dummy_variable(T501* C);
/*PR_YACC_PARSER*/
void r501set_input_buffer(T501* C,T0* a1);
/*PR_YACC_PARSER*/
T0* r501new_char_terminal(T501* C,T0* a1,T0* a2);
/*PR_YACC_PARSER*/
void r501report_prec_not_token_error(T501* C,T0* a1);
extern T0*oBC502yy_ec_template;
extern int fBC502yy_ec_template;
/*PR_YACC_PARSER*/
T0* r501yy_ec_template(void);
/*PR_YACC_PARSER*/
T0* r501text_substring(T501* C,T2 a1,T2 a2);
/*PR_YACC_PARSER*/
void r501yy_execute_action(T501* C,T2 a1);
extern T0*oBC501yytranslate_template;
extern int fBC501yytranslate_template;
/*PR_YACC_PARSER*/
T0* r501yytranslate_template(void);
extern T0*oBC502yy_def_template;
extern int fBC502yy_def_template;
/*PR_YACC_PARSER*/
T0* r501yy_def_template(void);
/*PR_YACC_PARSER*/
void r501set_token_id(T501* C,T0* a1,T2 a2);
/*PR_YACC_PARSER*/
void r501process_dollar_n(T501* C,T2 a1,T2 a2,T0* a3);
/*PR_YACC_PARSER*/
T3 r501text_item(T501* C,T2 a1);
/*PR_YACC_PARSER*/
T0* r501new_anchored_type(T501* C,T0* a1);
/*PR_YACC_PARSER*/
void r501yy_push_last_value(T501* C,T2 a1);
/*PR_YACC_PARSER*/
void r501report_token_declared_twice_error(T501* C,T0* a1);
/*PR_YACC_PARSER*/
void r501yy_load_input_buffer(T501* C);
/*PR_YACC_PARSER*/
void r501yy_push_error_value(T501* C);
/*PR_YACC_PARSER*/
void r501report_undefined_symbol_error(T501* C,T0* a1);
/*PR_YACC_PARSER*/
void r501report_variable_declared_twice_error(T501* C,T0* a1);
extern T0*oBC501yyr1_template;
extern int fBC501yyr1_template;
/*PR_YACC_PARSER*/
T0* r501yyr1_template(void);
/*PR_YACC_PARSER*/
void r501make_with_buffer(T501* C,T0* a1);
/*PR_YACC_PARSER*/
T0* r501new_nonterminal(T501* C,T0* a1,T0* a2);
/*PR_YACC_PARSER*/
void r501process_rule(T501* C,T0* a1);
extern T0*oBC501yytypes1_template;
extern int fBC501yytypes1_template;
/*PR_YACC_PARSER*/
T0* r501yytypes1_template(void);
/*PR_YACC_PARSER*/
T2 r501yy_null_trans_state(T501* C,T2 a1);
/*PR_YACC_PARSER*/
T0* r501new_variable(T501* C,T0* a1);
extern T0*oBC502yy_accept_template;
extern int fBC502yy_accept_template;
/*PR_YACC_PARSER*/
T0* r501yy_accept_template(void);
/*PR_YACC_PARSER*/
T0* r501new_error_action(T501* C,T0* a1,T2 a2);
/*PR_YACC_PARSER*/
void r501read_token(T501* C);
/*PR_YACC_PARSER*/
void r501report_invalid_dollar_n_error(T501* C,T2 a1);
/*PR_YACC_PARSER*/
T0* r501new_token(T501* C,T0* a1);
/*PR_YACC_PARSER*/
T0* r501new_basic_type(T501* C,T0* a1);
/*PR_YACC_PARSER*/
void r501yy_init_value_stacks(T501* C);
extern T0*oBC510no_type;
extern int fBC510no_type;
/*PR_YACC_PARSER*/
T0* r501no_type(T501* C);
/*PR_YACC_PARSER*/
T2 r501yy_previous_state(T501* C);
extern T0*oBC501yypgoto_template;
extern int fBC501yypgoto_template;
/*PR_YACC_PARSER*/
T0* r501yypgoto_template(void);
/*PR_YACC_PARSER*/
void r501yy_refill_input_buffer(T501* C);
extern T0*oBC501yytypes2_template;
extern int fBC501yytypes2_template;
/*PR_YACC_PARSER*/
T0* r501yytypes2_template(void);
/*PR_YACC_PARSER*/
T0* r501yy_fixed_array(T0* a1);
extern T0*oBC502yy_meta_template;
extern int fBC502yy_meta_template;
/*PR_YACC_PARSER*/
T0* r501yy_meta_template(void);
/*PR_YACC_PARSER*/
void r501process_symbols(T501* C);
/*PR_YACC_PARSER*/
void r501report_prec_specified_twice_error(T501* C);
/*PR_YACC_PARSER*/
T6 r501is_terminal(T501* C,T0* a1);
extern T0*oBC502yy_base_template;
extern int fBC502yy_base_template;
/*PR_YACC_PARSER*/
T0* r501yy_base_template(void);
/*PR_YACC_PARSER*/
void r501initialize_grammar(T501* C);
/*PR_YACC_PARSER*/
void r501report_two_token_ids_token_error(T501* C,T0* a1,T2 a2,T2 a3);
/*PR_YACC_PARSER*/
T2 r501text_count(T501* C);
/*PR_YACC_PARSER*/
T0* r501new_file_buffer(T0* a1);
/*PR_YACC_PARSER*/
T0* r501new_string_token(T501* C,T0* a1);
/*PR_YACC_PARSER*/
void r501yy_initialize(T501* C);
/*PR_YACC_PARSER*/
T0* r501text(T501* C);
/*PR_YACC_PARSER*/
void r501report_token_id_used_twice_warning(T501* C,T0* a1,T0* a2);
/*PR_YACC_PARSER*/
void r501report_rule_declared_twice_warning(T501* C,T0* a1);
/*PR_YACC_PARSER*/
void r501report_no_rules_error(T501* C);
/*PR_YACC_PARSER*/
void r501set_start_symbol(T501* C);
/*PR_YACC_PARSER*/
void r501set_precedence(T501* C,T0* a1,T2 a2);
/*PR_YACC_PARSER*/
void r501make_yacc_scanner(T501* C,T0* a1);
/*PR_YACC_PARSER*/
void r501report_lhs_symbol_token_error(T501* C,T0* a1);
/*PR_YACC_PARSER*/
void r501yy_clear_value_stacks(T501* C);
extern T0*oBC502yy_nxt_template;
extern int fBC502yy_nxt_template;
/*PR_YACC_PARSER*/
T0* r501yy_nxt_template(void);
/*PR_YACC_PARSER*/
T0* r501new_left_char_terminal(T501* C,T0* a1,T2 a2);
/*PR_YACC_PARSER*/
void r501yy_build_parser_tables(T501* C);
/*PR_YACC_PARSER*/
void r501report_missing_characters_error(T501* C,T0* a1);
/*PR_YACC_PARSER*/
T6 r501valid_start_condition(T2 a1);
/*PR_YACC_PARSER*/
T0* r501new_generic_type(T501* C,T0* a1,T0* a2);
/*PR_YACC_PARSER*/
void r501report_unknown_start_symbol_error(T501* C);
extern T0*oBC509empty_buffer;
extern int fBC509empty_buffer;
/*PR_YACC_PARSER*/
T0* r501empty_buffer(void);
/*PR_YACC_PARSER*/
void r501report_error(T501* C,T0* a1);
/*PR_YACC_PARSER*/
void r501process_dollar_dollar(T501* C,T0* a1);
/*PR_YACC_PARSER*/
void r501report_token_declared_as_variable_error(T501* C,T0* a1);
/*PR_YACC_PARSER*/
T0* r501new_terminal(T501* C,T0* a1,T0* a2);
/*PR_YACC_PARSER*/
void r501report_invalid_error_n_error(T501* C,T2 a1);
extern T0*oBC501yydefact_template;
extern int fBC501yydefact_template;
/*PR_YACC_PARSER*/
T0* r501yydefact_template(void);
/*PR_YACC_PARSER*/
T0* r501new_nonassoc_terminal(T501* C,T0* a1,T2 a2);
extern T0*oBC502yy_chk_template;
extern int fBC502yy_chk_template;
/*PR_YACC_PARSER*/
T0* r501yy_chk_template(void);
/*PR_YACC_PARSER*/
void r501report_string_token_defined_twice_error(T501* C,T0* a1,T0* a2,T0* a3);
/*PR_YACC_PARSER*/
void r501set_literal_string(T501* C,T0* a1,T0* a2);
extern T0*oBC501yycheck_template;
extern int fBC501yycheck_template;
/*PR_YACC_PARSER*/
T0* r501yycheck_template(void);
/*PR_YACC_PARSER*/
T0* r501new_right_char_terminal(T501* C,T0* a1,T2 a2);
/*PR_YACC_PARSER*/
T0* r501new_char_token(T501* C,T0* a1);
/*PR_YACC_PARSER*/
T0* r501filename(T501* C);
/*PR_YACC_PARSER*/
void r501make(T501* C,T0* a1);
/*PR_YACC_PARSER*/
T0* r501yyfixed_array(T0* a1);
extern T0*oBC501yydefgoto_template;
extern int fBC501yydefgoto_template;
/*PR_YACC_PARSER*/
T0* r501yydefgoto_template(void);
/*PR_YACC_PARSER*/
void r501yy_pop_last_value(T501* C,T2 a1);
/*PR_YACC_PARSER*/
void r501yy_set_content(T501* C,T0* a1);
/*PR_YACC_PARSER*/
void r501put_action(T501* C,T0* a1,T0* a2);
/*PR_YACC_PARSER*/
void r501report_precedence_defined_twice_error(T501* C,T0* a1);
extern T0*oBC501yypact_template;
extern int fBC501yypact_template;
/*PR_YACC_PARSER*/
T0* r501yypact_template(void);
/*PR_YACC_PARSER*/
void r501report_invalid_string_token_error(T501* C,T0* a1);
/*PR_YACC_PARSER*/
void r501set_start_condition(T501* C,T2 a1);
/*PR_YACC_PARSER*/
void r501yy_execute_eof_action(T501* C,T2 a1);
/*PR_YACC_PARSER*/
T0* r501new_left_terminal(T501* C,T0* a1,T2 a2);
/*PR_YACC_PARSER*/
T6 r501is_nonterminal(T501* C,T0* a1);
/*PR_YACC_PARSER*/
void r501yy_build_tables(T501* C);
/*PR_YACC_PARSER*/
void r501report_null_integer_error(T501* C);
/*PR_YACC_PARSER*/
T0* r501new_right_terminal(T501* C,T0* a1,T2 a2);
/*UT_USAGE_MESSAGE*/
T0* r637arguments(void);
/*UT_USAGE_MESSAGE*/
void r637make(T637* C,T0* a1);
/*UT_USAGE_MESSAGE*/
T0* r637message(T637* C,T0* a1);
/*UT_USAGE_MESSAGE*/
T0* r637default_message(T637* C);
/*PR_DANGEROUS_DOLLAR_N_ERROR*/
T0* r539arguments(void);
/*PR_DANGEROUS_DOLLAR_N_ERROR*/
void r539make(T539* C,T0* a1,T2 a2,T2 a3);
/*PR_DANGEROUS_DOLLAR_N_ERROR*/
T0* r539message(T539* C,T0* a1);
/*PR_DANGEROUS_DOLLAR_N_ERROR*/
T0* r539default_message(T539* C);
/*PR_PARSER_GENERATOR*/
void r42build_action_tables(T42* C);
/*PR_PARSER_GENERATOR*/
void r42print_stack_declarations(T42* C,T0* a1);
/*PR_PARSER_GENERATOR*/
void r42print_separated_actions(T42* C,T0* a1);
/*PR_PARSER_GENERATOR*/
void r42print_constants(T42* C,T0* a1);
extern T0*oBC43array_formatter_;
/*PR_PARSER_GENERATOR*/
void r42print_push_error_value(T42* C,T0* a1);
extern T0*oBC42portion_sorter;
extern int fBC42portion_sorter;
/*PR_PARSER_GENERATOR*/
T0* r42portion_sorter(void);
/*PR_PARSER_GENERATOR*/
void r42print_eiffel_array(T42* C,T0* a1,T0* a2,T0* a3);
/*PR_PARSER_GENERATOR*/
void r42print_push_last_value(T42* C,T0* a1);
extern T0*oBC41integer_array_;
extern T0*oBC43string_formatter_;
/*PR_PARSER_GENERATOR*/
void r42print_eiffel_header(T42* C,T0* a1);
/*PR_PARSER_GENERATOR*/
void r42print_init_value_stacks(T42* C,T0* a1);
/*PR_PARSER_GENERATOR*/
void r42print_eiffel_tables(T42* C,T0* a1);
/*PR_PARSER_GENERATOR*/
void r42build_yytypes1(T42* C);
/*PR_PARSER_GENERATOR*/
void r42build_yytypes2(T42* C);
/*PR_PARSER_GENERATOR*/
void r42print_pop_last_value(T42* C,T0* a1);
/*PR_PARSER_GENERATOR*/
void r42make(T42* C,T0* a1);
/*PR_PARSER_GENERATOR*/
void r42print_create_value_stacks(T0* a1);
/*PR_PARSER_GENERATOR*/
void r42build_yytranslate(T42* C);
/*PR_PARSER_GENERATOR*/
void r42put_yydefact(T42* C,T0* a1,T0* a2);
/*PR_PARSER_GENERATOR*/
void r42put_yydefgoto(T42* C,T0* a1,T0* a2);
/*PR_PARSER_GENERATOR*/
void r42old_print_conversion_routines(T42* C,T0* a1);
/*PR_PARSER_GENERATOR*/
void r42print_build_parser_tables(T0* a1);
/*PR_PARSER_GENERATOR*/
void r42print_eiffel_code(T42* C,T0* a1);
/*PR_PARSER_GENERATOR*/
void r42print_clear_value_stacks(T42* C,T0* a1);
/*PR_PARSER_GENERATOR*/
void r42print_parser(T42* C,T6 a1,T6 a2,T0* a3);
/*PR_PARSER_GENERATOR*/
void r42print_separated_error_actions(T42* C,T0* a1);
/*PR_PARSER_GENERATOR*/
void r42print_last_values(T42* C,T0* a1);
/*PR_PARSER_GENERATOR*/
void r42print_actions(T42* C,T0* a1);
/*PR_PARSER_GENERATOR*/
void r42build_yyr1(T42* C);
/*PR_PARSER_GENERATOR*/
void r42print_error_actions(T42* C,T0* a1);
/*PR_PARSER_GENERATOR*/
void r42print_token_class(T42* C,T0* a1,T0* a2,T0* a3);
/*PR_PARSER_GENERATOR*/
void r42print_token_codes(T42* C,T0* a1);
/*PR_BASIC_TYPE*/
void r564print_create_yyvs(T564* C,T2 a1,T0* a2);
/*PR_BASIC_TYPE*/
void r564append_dollar_n_to_string(T564* C,T2 a1,T2 a2,T0* a3,T0* a4);
/*PR_BASIC_TYPE*/
void r564old_append_dollar_dollar_to_string(T564* C,T0* a1);
/*PR_BASIC_TYPE*/
void r564print_resize_yyvs(T564* C,T2 a1,T0* a2);
/*PR_BASIC_TYPE*/
T6 r564is_equal(T564* C,T0* a1);
/*PR_BASIC_TYPE*/
void r564print_push_yyval(T564* C,T2 a1,T0* a2);
/*PR_BASIC_TYPE*/
void r564old_print_dollar_dollar_initialization(T564* C,T0* a1);
/*PR_BASIC_TYPE*/
void r564print_push_last_value(T564* C,T2 a1,T0* a2);
/*PR_BASIC_TYPE*/
void r564make_generic(T564* C,T2 a1,T0* a2,T0* a3);
/*PR_BASIC_TYPE*/
void r564print_increment_yyvsp(T564* C,T2 a1,T2 a2,T0* a3);
/*PR_BASIC_TYPE*/
void r564print_yyvs_declaration(T564* C,T2 a1,T0* a2);
/*PR_BASIC_TYPE*/
void r564print_pop_last_value(T564* C,T2 a1,T0* a2);
/*PR_BASIC_TYPE*/
void r564make(T564* C,T2 a1,T0* a2);
/*PR_BASIC_TYPE*/
T0* r564last_value_name(T564* C);
/*PR_BASIC_TYPE*/
void r564old_print_dollar_dollar_finalization(T564* C,T0* a1);
/*PR_BASIC_TYPE*/
void r564print_clear_yyvs(T564* C,T2 a1,T0* a2);
/*PR_BASIC_TYPE*/
void r564print_dollar_dollar_declaration(T564* C,T0* a1);
/*PR_BASIC_TYPE*/
void r564old_print_conversion_routine(T564* C,T0* a1);
/*PR_BASIC_TYPE*/
void r564print_indentation(T2 a1,T0* a2);
/*PR_BASIC_TYPE*/
void r564old_append_dollar_n_to_string(T564* C,T2 a1,T2 a2,T0* a3,T0* a4);
/*PR_BASIC_TYPE*/
void r564append_dollar_dollar_to_string(T564* C,T0* a1);
/*PR_BASIC_TYPE*/
void r564make_anchored(T564* C,T2 a1,T0* a2);
/*PR_PORTION*/
T6 r210order_is_equal(T210* C,T0* a1);
/*PR_PORTION*/
void r210make_state(T210* C,T2 a1,T0* a2,T0* a3);
/*PR_PORTION*/
void r210make_symbol(T210* C,T2 a1,T0* a2,T0* a3);
extern T0*oBC210integer_sorter;
extern int fBC210integer_sorter;
/*PR_PORTION*/
T0* r210integer_sorter(void);
/*PR_PORTION*/
T6 r210same_portion(T210* C,T0* a1);
/*PR_PORTION*/
T6 r210_ix_60(T210* C,T0* a1);
/*PR_SYMBOL_DECLARED_VARIABLE_ERROR*/
T0* r571arguments(void);
/*PR_SYMBOL_DECLARED_VARIABLE_ERROR*/
void r571make(T571* C,T0* a1,T2 a2,T0* a3);
/*PR_SYMBOL_DECLARED_VARIABLE_ERROR*/
T0* r571message(T571* C,T0* a1);
/*PR_SYMBOL_DECLARED_VARIABLE_ERROR*/
T0* r571default_message(T571* C);
/*PR_INVALID_ERROR_N_ERROR*/
T0* r602arguments(void);
/*PR_INVALID_ERROR_N_ERROR*/
void r602make(T602* C,T0* a1,T2 a2,T2 a3);
/*PR_INVALID_ERROR_N_ERROR*/
T0* r602message(T602* C,T0* a1);
/*PR_INVALID_ERROR_N_ERROR*/
T0* r602default_message(T602* C);
/*UT_CANNOT_WRITE_TO_FILE_ERROR*/
T0* r39arguments(void);
/*UT_CANNOT_WRITE_TO_FILE_ERROR*/
void r39make(T39* C,T0* a1);
/*UT_CANNOT_WRITE_TO_FILE_ERROR*/
T0* r39message(T39* C,T0* a1);
/*UT_CANNOT_WRITE_TO_FILE_ERROR*/
T0* r39default_message(T39* C);
/*PR_REDUCTION*/
void r274make(T274* C,T0* a1);
/*PR_REDUCTION*/
void r274build_lookaheads(T274* C);
/*PR_TOKEN_ID_USED_TWICE_ERROR*/
T0* r543arguments(void);
/*PR_TOKEN_ID_USED_TWICE_ERROR*/
void r543make(T543* C,T0* a1,T0* a2,T0* a3,T2 a4);
/*PR_TOKEN_ID_USED_TWICE_ERROR*/
T0* r543message(T543* C,T0* a1);
/*PR_TOKEN_ID_USED_TWICE_ERROR*/
T0* r543default_message(T543* C);
/*PR_NO_RULES_ERROR*/
T0* r578arguments(void);
/*PR_NO_RULES_ERROR*/
void r578make(T578* C,T0* a1);
/*PR_NO_RULES_ERROR*/
T0* r578message(T578* C,T0* a1);
/*PR_NO_RULES_ERROR*/
T0* r578default_message(T578* C);
/*PR_INVALID_DOLLAR_N_ERROR*/
T0* r540arguments(void);
/*PR_INVALID_DOLLAR_N_ERROR*/
void r540make(T540* C,T0* a1,T2 a2,T2 a3);
/*PR_INVALID_DOLLAR_N_ERROR*/
T0* r540message(T540* C,T0* a1);
/*PR_INVALID_DOLLAR_N_ERROR*/
T0* r540default_message(T540* C);
/*PR_MULTIPLE_START_DECLARATIONS_ERROR*/
T0* r563arguments(void);
/*PR_MULTIPLE_START_DECLARATIONS_ERROR*/
void r563make(T563* C,T0* a1,T2 a2);
/*PR_MULTIPLE_START_DECLARATIONS_ERROR*/
T0* r563message(T563* C,T0* a1);
/*PR_MULTIPLE_START_DECLARATIONS_ERROR*/
T0* r563default_message(T563* C);
/*PR_RULE_DECLARED_TWICE_ERROR*/
T0* r601arguments(void);
/*PR_RULE_DECLARED_TWICE_ERROR*/
void r601make(T601* C,T0* a1,T2 a2,T0* a3);
/*PR_RULE_DECLARED_TWICE_ERROR*/
T0* r601message(T601* C,T0* a1);
/*PR_RULE_DECLARED_TWICE_ERROR*/
T0* r601default_message(T601* C);
/*PR_TRANSITION*/
void r243make(T243* C,T0* a1,T0* a2);
/*PR_VARIABLE_DECLARED_TWICE_ERROR*/
T0* r577arguments(void);
/*PR_VARIABLE_DECLARED_TWICE_ERROR*/
void r577make(T577* C,T0* a1,T2 a2,T0* a3);
/*PR_VARIABLE_DECLARED_TWICE_ERROR*/
T0* r577message(T577* C,T0* a1);
/*PR_VARIABLE_DECLARED_TWICE_ERROR*/
T0* r577default_message(T577* C);
/*PR_TOKEN*/
T6 r167is_right_associative(T167* C);
/*PR_TOKEN*/
void r167print_token(T167* C,T0* a1,T0* a2);
/*PR_TOKEN*/
T6 r167is_non_associative(T167* C);
/*PR_TOKEN*/
T6 r167is_equal(T167* C,T0* a1);
/*PR_TOKEN*/
void r167make(T167* C,T2 a1,T0* a2,T0* a3);
/*PR_TOKEN*/
T6 r167has_identifier(T167* C);
/*PR_TOKEN*/
T6 r167is_left_associative(T167* C);
/*PR_FSM*/
void r45make_verbose(T45* C,T0* a1,T0* a2,T0* a3);
/*PR_FSM*/
void r45put_final_state(T45* C);
/*PR_FSM*/
void r45make_default(T45* C,T0* a1);
/*PR_FSM*/
void r45print_machine(T45* C,T0* a1);
/*PR_FSM*/
void r45resolve_conflicts(T45* C,T0* a1);
/*PR_FSM*/
void r45build_nondeterministic(T45* C);
/*PR_FSM*/
void r45make(T45* C,T0* a1,T0* a2);
/*PR_FSM*/
T6 r45equal(T0* a1,T0* a2);
/*PR_FSM*/
void r45set_error_actions_verbose(T45* C,T0* a1,T0* a2);
/*PR_FSM*/
void r45resolve_conflicts_verbose(T45* C,T0* a1,T0* a2);
extern T0*oBC45no_type;
extern int fBC45no_type;
/*PR_FSM*/
T0* r45no_type(T45* C);
/*PR_FSM*/
void r45put_closure_positions(T0* a1,T0* a2);
/*PR_FSM*/
void r45set_error_actions(T45* C,T0* a1);
/*PR_FSM*/
void r45build_transitions(T45* C,T0* a1);
/*PR_FSM*/
void r45build_deterministic(T45* C);
/*PR_FSM*/
void r45put_start_state(T45* C);
/*PR_FSM*/
void r45build_derives(T45* C);
/*PR_FSM*/
T0* r45new_state(T45* C,T0* a1);
/*PR_VARIABLE*/
void r92put_rule(T92* C,T0* a1);
/*PR_VARIABLE*/
T6 r92is_equal(T92* C,T0* a1);
/*PR_VARIABLE*/
T0* r92transition(T92* C,T0* a1);
/*PR_VARIABLE*/
void r92make(T92* C,T2 a1,T0* a2,T0* a3);
/*PR_VARIABLE*/
T0* r92twin(T92* C);
/*PR_VARIABLE*/
void r92print_variable(T92* C,T0* a1,T0* a2);
/*PR_STATE*/
void r81put_position(T81* C,T0* a1);
extern T0*oBC81position_sorter;
extern int fBC81position_sorter;
/*PR_STATE*/
T0* r81position_sorter(void);
/*PR_STATE*/
void r81remove_shift(T81* C,T0* a1);
/*PR_STATE*/
T6 r81has_shift(T81* C,T0* a1);
/*PR_STATE*/
void r81print_state(T81* C,T0* a1);
/*PR_STATE*/
T6 r81se_assigned_from(T0* a1);
/*PR_STATE*/
T0* r81resolve_conflicts(T81* C);
/*PR_STATE*/
T6 r81same_type(T81* C,T0* a1);
/*PR_STATE*/
void r81make(T81* C,T2 a1,T0* a2);
/*PR_STATE*/
void r81set_lookahead_needed(T81* C);
/*PR_STATE*/
void r81put_transition(T81* C,T0* a1,T0* a2);
/*PR_STATE*/
T2 r81reduce_reduce_count(T81* C);
/*PR_STATE*/
T6 r81conforms_to(T81* C,T0* a1);
/*PR_STATE*/
T0* r81shift(T81* C,T0* a1);
/*PR_STATE*/
T6 r81same_state(T81* C,T0* a1);
/*PR_STATE*/
void r81print_reductions(T81* C,T0* a1);
/*PR_STATE*/
T2 r81shift_reduce_count(T81* C);
/*PR_UNKNOWN_START_SYMBOL_ERROR*/
T0* r556arguments(void);
/*PR_UNKNOWN_START_SYMBOL_ERROR*/
void r556make(T556* C,T0* a1,T2 a2,T0* a3);
/*PR_UNKNOWN_START_SYMBOL_ERROR*/
T0* r556message(T556* C,T0* a1);
/*PR_UNKNOWN_START_SYMBOL_ERROR*/
T0* r556default_message(T556* C);
/*YY_BUFFER*/
void r527set_position(T527* C,T2 a1,T2 a2,T2 a3);
/*YY_BUFFER*/
void r527make(T527* C,T0* a1);
/*YY_BUFFER*/
void r527make_from_buffer(T527* C,T0* a1);
/*YY_BUFFER*/
T0* r527new_default_buffer(T2 a1);
/*PR_START_SYMBOL_TOKEN_ERROR*/
T0* r550arguments(void);
/*PR_START_SYMBOL_TOKEN_ERROR*/
void r550make(T550* C,T0* a1,T2 a2,T0* a3);
/*PR_START_SYMBOL_TOKEN_ERROR*/
T0* r550message(T550* C,T0* a1);
/*PR_START_SYMBOL_TOKEN_ERROR*/
T0* r550default_message(T550* C);
/*PR_UNDEFINED_STRING_TOKEN_ERROR*/
T0* r603arguments(void);
/*PR_UNDEFINED_STRING_TOKEN_ERROR*/
void r603make(T603* C,T0* a1,T2 a2,T0* a3);
/*PR_UNDEFINED_STRING_TOKEN_ERROR*/
T0* r603message(T603* C,T0* a1);
/*PR_UNDEFINED_STRING_TOKEN_ERROR*/
T0* r603default_message(T603* C);
/*UT_CANNOT_READ_FILE_ERROR*/
T0* r491arguments(void);
/*UT_CANNOT_READ_FILE_ERROR*/
void r491make(T491* C,T0* a1);
/*UT_CANNOT_READ_FILE_ERROR*/
T0* r491message(T491* C,T0* a1);
/*UT_CANNOT_READ_FILE_ERROR*/
T0* r491default_message(T491* C);
/*PR_ACTION_FACTORY*/
T0* r598new_action(T0* a1);
/*PR_TWO_STRINGS_TOKEN_ERROR*/
T0* r573arguments(void);
/*PR_TWO_STRINGS_TOKEN_ERROR*/
void r573make(T573* C,T0* a1,T2 a2,T0* a3,T0* a4,T0* a5);
/*PR_TWO_STRINGS_TOKEN_ERROR*/
T0* r573message(T573* C,T0* a1);
/*PR_TWO_STRINGS_TOKEN_ERROR*/
T0* r573default_message(T573* C);
/*PR_LHS_SYMBOL_TOKEN_ERROR*/
T0* r600arguments(void);
/*PR_LHS_SYMBOL_TOKEN_ERROR*/
void r600make(T600* C,T0* a1,T2 a2,T0* a3);
/*PR_LHS_SYMBOL_TOKEN_ERROR*/
T0* r600message(T600* C,T0* a1);
/*PR_LHS_SYMBOL_TOKEN_ERROR*/
T0* r600default_message(T600* C);
/*UC_STRING*/
void r189copy(T189* C,T0* a1);
/*UC_STRING*/
T0* r189substring(T189* C,T2 a1,T2 a2);
/*UC_STRING*/
void r189reset_byte_index_cache(T189* C);
/*UC_STRING*/
void r189wipe_out(T189* C);
/*UC_STRING*/
T2 r189item_code(T189* C,T2 a1);
/*UC_STRING*/
T3 r189character_item_at_byte_index(T189* C,T2 a1);
/*UC_STRING*/
void r189_7Pmake(T189* C,T2 a1);
/*UC_STRING*/
void r189put(T189* C,T3 a1,T2 a2);
/*UC_STRING*/
T6 r189is_equal(T189* C,T0* a1);
/*UC_STRING*/
T3 r189item(T189* C,T2 a1);
extern T0*oBC177integer_;
/*UC_STRING*/
void r189resize_byte_storage(T189* C,T2 a1);
/*UC_STRING*/
T6 r189valid_index(T189* C,T2 a1);
/*UC_STRING*/
void r189append(T189* C,T0* a1);
/*UC_STRING*/
T6 r189se_assigned_from(T0* a1);
/*UC_STRING*/
T2 r189byte_index(T189* C,T2 a1);
/*UC_STRING*/
T0* r189clone(T0* a1);
/*UC_STRING*/
void r189make_from_string(T189* C,T0* a1);
/*UC_STRING*/
void r189move_bytes_right(T189* C,T2 a1,T2 a2);
/*UC_STRING*/
void r189set_count(T189* C,T2 a1);
/*UC_STRING*/
T2 r189next_byte_index(T189* C,T2 a1);
/*UC_STRING*/
T6 r189same_type(T189* C,T0* a1);
/*UC_STRING*/
void r189remove_tail(T189* C,T2 a1);
extern T0*oBC189dummy_uc_string;
extern int fBC189dummy_uc_string;
/*UC_STRING*/
T0* r189dummy_uc_string(void);
/*UC_STRING*/
void r189make(T189* C,T2 a1);
/*UC_STRING*/
void r189append_string(T189* C,T0* a1);
/*UC_STRING*/
void r189make_filled(T189* C,T3 a1,T2 a2);
/*UC_STRING*/
T0* r189as_upper(T189* C);
/*UC_STRING*/
void r189append_substring(T189* C,T0* a1,T2 a2,T2 a3);
/*UC_STRING*/
T2 r189item_code_at_byte_index(T189* C,T2 a1);
/*UC_STRING*/
T0* r189string(T189* C);
extern T0*oBC174platform;
/*UC_STRING*/
void r189extend(T189* C,T3 a1);
/*UC_STRING*/
T2 r189hash_code(T189* C);
/*UC_STRING*/
T0* r189prefixed_string(T189* C,T0* a1);
/*UC_STRING*/
T6 r189conforms_to(T189* C,T0* a1);
/*UC_STRING*/
void r189keep_head(T189* C,T2 a1);
/*UC_STRING*/
T2 r189to_integer(T189* C);
/*UC_STRING*/
T0* r189as_lower(T189* C);
/*UC_STRING*/
T0* r189new_empty_string(T2 a1);
/*UC_STRING*/
void r189append_character(T189* C,T3 a1);
/*UC_STRING*/
void r189make_from_substring(T189* C,T0* a1,T2 a2,T2 a3);
/*UC_STRING*/
void r189put_code_at_byte_index(T189* C,T2 a1,T2 a2,T2 a3);
/*UC_STRING*/
void r189fill_with(T189* C,T3 a1);
/*UC_STRING*/
void r189put_character_at_byte_index(T189* C,T3 a1,T2 a2,T2 a3);
/*UC_STRING*/
void r189_7Pappend_string(T189* C,T0* a1);
/*UC_STRING*/
void r189resize(T189* C,T2 a1);
/*UC_STRING*/
void r189put_substring_at_byte_index(T189* C,T0* a1,T2 a2,T2 a3,T2 a4,T2 a5);
/*UC_STRING*/
void r189to_upper(T189* C);
extern T0*oBC191utf8;
/*UC_STRING*/
void r189move_bytes_left(T189* C,T2 a1,T2 a2);
/*UC_STRING*/
T8 r189to_external(T189* C);
/*UC_STRING*/
void r189to_lower(T189* C);
/*UC_STRING*/
T0* r189twin(T189* C);
/*UC_STRING*/
T0* r189to_utf8(T189* C);
/*UC_STRING*/
T0* r189_ix_43(T189* C,T0* a1);
extern T0*oBC188unicode;
/*UC_STRING*/
T2 r189_7Phash_code(T189* C);
/*UC_STRING*/
void r189swap(T189* C,T2 a1,T2 a2);
/*PR_GRAMMAR*/
void r46put_type(T46* C,T0* a1);
/*PR_GRAMMAR*/
void r46mark_useful_rules(T46* C);
/*PR_GRAMMAR*/
void r46put_rule(T46* C,T0* a1);
/*PR_GRAMMAR*/
void r46put_variable(T46* C,T0* a1);
/*PR_GRAMMAR*/
T2 r46max_rhs(T46* C);
/*PR_GRAMMAR*/
T0* r46clone(T0* a1);
/*PR_GRAMMAR*/
void r46make(T46* C);
/*PR_GRAMMAR*/
void r46reduce_verbose(T46* C,T0* a1,T0* a2);
/*PR_GRAMMAR*/
void r46put_token(T46* C,T0* a1);
/*PR_GRAMMAR*/
void r46print_grammar(T46* C,T0* a1);
/*PR_GRAMMAR*/
void r46mark_useful_variables(T46* C);
/*PR_GRAMMAR*/
void r46set_nullable(T46* C);
/*PR_GRAMMAR*/
void r46reduce(T46* C,T0* a1);
/*PR_GRAMMAR*/
void r46traverse_variable(T0* a1);
/*PR_TWO_TOKEN_IDS_TOKEN_ERROR*/
T0* r572arguments(void);
/*PR_TWO_TOKEN_IDS_TOKEN_ERROR*/
void r572make(T572* C,T0* a1,T2 a2,T0* a3,T2 a4,T2 a5);
/*PR_TWO_TOKEN_IDS_TOKEN_ERROR*/
T0* r572message(T572* C,T0* a1);
/*PR_TWO_TOKEN_IDS_TOKEN_ERROR*/
T0* r572default_message(T572* C);
/*YY_FILE_BUFFER*/
void r526fill(T526* C);
/*YY_FILE_BUFFER*/
void r526compact_left(T526* C);
/*YY_FILE_BUFFER*/
void r526set_position(T526* C,T2 a1,T2 a2,T2 a3);
extern T2 oBC527default_capacity;
/*YY_FILE_BUFFER*/
void r526make_from_string(T526* C,T0* a1);
/*YY_FILE_BUFFER*/
void r526make_from_buffer(T526* C,T0* a1);
/*YY_FILE_BUFFER*/
void r526resize(T526* C);
/*YY_FILE_BUFFER*/
T0* r526new_default_buffer(T2 a1);
/*YY_FILE_BUFFER*/
void r526make_with_size(T526* C,T0* a1,T2 a2);
/*YY_FILE_BUFFER*/
void r526set_file(T526* C,T0* a1);
/*YY_FILE_BUFFER*/
void r526flush(T526* C);
/*KL_STDOUT_FILE*/
void r207make(T207* C);
/*KL_STDOUT_FILE*/
void r207old_put_string(T207* C,T0* a1);
/*KL_STDOUT_FILE*/
void r207old_put_character(T207* C,T3 a1);
/*KL_STDOUT_FILE*/
void r207put_integer(T207* C,T2 a1);
/*KL_STDOUT_FILE*/
void r207put_line(T207* C,T0* a1);
/*KL_STDOUT_FILE*/
void r207old_make(T207* C);
/*KL_STDOUT_FILE*/
void r207write_buffer(T207* C);
/*KL_STDOUT_FILE*/
void r207put_string(T207* C,T0* a1);
/*PR_CONFLICT*/
void r337print_conflict(T337* C,T0* a1);
/*PR_CONFLICT*/
void r337make(T337* C,T0* a1,T0* a2,T0* a3,T0* a4);
/*KL_STDERR_FILE*/
void r533make(T533* C);
/*KL_STDERR_FILE*/
void r533old_put_string(T0* a1);
/*KL_STDERR_FILE*/
void r533put_integer(T2 a1);
/*KL_STDERR_FILE*/
void r533put_line(T0* a1);
/*KL_STDERR_FILE*/
void r533put_string(T0* a1);
/*PR_UNDEFINED_SYMBOL_ERROR*/
T0* r542arguments(void);
/*PR_UNDEFINED_SYMBOL_ERROR*/
void r542make(T542* C,T0* a1,T0* a2);
/*PR_UNDEFINED_SYMBOL_ERROR*/
T0* r542message(T542* C,T0* a1);
/*PR_UNDEFINED_SYMBOL_ERROR*/
T0* r542default_message(T542* C);
/*PR_ERROR_ACTION*/
T6 r80is_equal(T80* C,T0* a1);
/*PR_ERROR_ACTION*/
T6 r80se_assigned_from(T0* a1);
/*PR_ERROR_ACTION*/
T6 r80same_type(T80* C,T0* a1);
/*PR_ERROR_ACTION*/
void r80make(T80* C,T0* a1,T2 a2);
/*PR_ERROR_ACTION*/
T6 r80conforms_to(T80* C,T0* a1);
/*PR_ERROR_ACTION*/
T0* r80twin(T80* C);
/*PR_SYMBOL_DECLARED_TOKEN_ERROR*/
T0* r576arguments(void);
/*PR_SYMBOL_DECLARED_TOKEN_ERROR*/
void r576make(T576* C,T0* a1,T2 a2,T0* a3);
/*PR_SYMBOL_DECLARED_TOKEN_ERROR*/
T0* r576message(T576* C,T0* a1);
/*PR_SYMBOL_DECLARED_TOKEN_ERROR*/
T0* r576default_message(T576* C);
/*PR_POSITION*/
T0* r303next(T303* C);
/*PR_POSITION*/
T6 r303is_equal(T303* C,T0* a1);
/*PR_POSITION*/
T6 r303same_position(T303* C,T0* a1);
/*PR_POSITION*/
T0* r303error_action(T303* C);
/*PR_POSITION*/
T6 r303after(T303* C);
/*PR_POSITION*/
void r303make(T303* C,T0* a1,T2 a2);
/*PR_POSITION*/
T2 r303hash_code(T303* C);
/*PR_POSITION*/
T0* r303symbol(T303* C);
/*PR_POSITION*/
void r303print_position(T303* C,T0* a1);
/*PR_POSITION*/
T6 r303_ix_60(T303* C,T0* a1);
/*STD_OUTPUT*/
void r208make(T208* C);
/*STD_OUTPUT*/
void r208flush(T208* C);
/*STD_OUTPUT*/
void r208write_buffer(T208* C);
/*UT_SYNTAX_ERROR*/
T0* r525arguments(void);
/*UT_SYNTAX_ERROR*/
void r525make(T525* C,T0* a1,T2 a2);
/*UT_SYNTAX_ERROR*/
T0* r525message(T525* C,T0* a1);
/*UT_SYNTAX_ERROR*/
T0* r525default_message(T525* C);
extern T0*oBC21command_arguments;
extern int fBC21command_arguments;
/*KL_ARGUMENTS*/
T0* r204command_arguments(void);
/*KL_ARGUMENTS*/
T0* r204argument(T2 a1);
/*PR_PRECEDENCE_DEFINED_TWICE_ERROR*/
T0* r575arguments(void);
/*PR_PRECEDENCE_DEFINED_TWICE_ERROR*/
void r575make(T575* C,T0* a1,T2 a2,T0* a3);
/*PR_PRECEDENCE_DEFINED_TWICE_ERROR*/
T0* r575message(T575* C,T0* a1);
/*PR_PRECEDENCE_DEFINED_TWICE_ERROR*/
T0* r575default_message(T575* C);
extern T0*oBC206error;
extern int fBC206error;
/*KL_STANDARD_FILES*/
T0* r206error(void);
extern T0*oBC206input;
extern int fBC206input;
/*KL_STANDARD_FILES*/
T0* r206input(void);
extern T0*oBC206output;
extern int fBC206output;
/*KL_STANDARD_FILES*/
T0* r206output(void);
/*KL_CHARACTER_ROUTINES*/
T3 r173as_lower(T3 a1);
extern T2 oBC648maximum_character_code;
extern int fBC648maximum_character_code;
/*KL_PLATFORM*/
T2 r648maximum_character_code(T648* C);
extern T0*oBC199lowercase_24;
extern int fBC199lowercase_24;
/*UC_UNICODE_ROUTINES*/
T0* r198lowercase_24(void);
extern T0*oBC199lowercase_21;
extern int fBC199lowercase_21;
/*UC_UNICODE_ROUTINES*/
T0* r198lowercase_21(void);
extern T0*oBC199lowercase_06;
extern int fBC199lowercase_06;
/*UC_UNICODE_ROUTINES*/
T0* r198lowercase_06(void);
extern T0*oBC199lowercase_05;
extern int fBC199lowercase_05;
/*UC_UNICODE_ROUTINES*/
T0* r198lowercase_05(void);
extern T0*oBC199lowercase_04;
extern int fBC199lowercase_04;
/*UC_UNICODE_ROUTINES*/
T0* r198lowercase_04(void);
extern T0*oBC199lowercase_03;
extern int fBC199lowercase_03;
/*UC_UNICODE_ROUTINES*/
T0* r198lowercase_03(void);
extern T0*oBC199lowercase_02;
extern int fBC199lowercase_02;
/*UC_UNICODE_ROUTINES*/
T0* r198lowercase_02(void);
extern T0*oBC199lowercase_01;
extern int fBC199lowercase_01;
/*UC_UNICODE_ROUTINES*/
T0* r198lowercase_01(void);
extern T0*oBC199lowercase_00;
extern int fBC199lowercase_00;
/*UC_UNICODE_ROUTINES*/
T0* r198lowercase_00(void);
extern T0*oBC200uppercase_1f;
extern int fBC200uppercase_1f;
/*UC_UNICODE_ROUTINES*/
T0* r198uppercase_1f(void);
extern T0*oBC200uppercase_1e;
extern int fBC200uppercase_1e;
/*UC_UNICODE_ROUTINES*/
T0* r198uppercase_1e(void);
/*UC_UNICODE_ROUTINES*/
T2 r198upper_code(T2 a1);
extern T0*oBC199lowercase_ff;
extern int fBC199lowercase_ff;
/*UC_UNICODE_ROUTINES*/
T0* r198lowercase_ff(void);
extern T0*oBC200uppercase_24;
extern int fBC200uppercase_24;
/*UC_UNICODE_ROUTINES*/
T0* r198uppercase_24(void);
extern T0*oBC200uppercase_21;
extern int fBC200uppercase_21;
/*UC_UNICODE_ROUTINES*/
T0* r198uppercase_21(void);
extern T0*oBC200uppercase_06;
extern int fBC200uppercase_06;
/*UC_UNICODE_ROUTINES*/
T0* r198uppercase_06(void);
extern T0*oBC200uppercase_05;
extern int fBC200uppercase_05;
/*UC_UNICODE_ROUTINES*/
T0* r198uppercase_05(void);
extern T0*oBC200uppercase_04;
extern int fBC200uppercase_04;
/*UC_UNICODE_ROUTINES*/
T0* r198uppercase_04(void);
extern T0*oBC200uppercase_03;
extern int fBC200uppercase_03;
/*UC_UNICODE_ROUTINES*/
T0* r198uppercase_03(void);
extern T0*oBC200uppercase_02;
extern int fBC200uppercase_02;
/*UC_UNICODE_ROUTINES*/
T0* r198uppercase_02(void);
extern T0*oBC200uppercase_01;
extern int fBC200uppercase_01;
/*UC_UNICODE_ROUTINES*/
T0* r198uppercase_01(void);
extern T0*oBC200uppercase_00;
extern int fBC200uppercase_00;
/*UC_UNICODE_ROUTINES*/
T0* r198uppercase_00(void);
extern T0*oBC200uppercase;
extern int fBC200uppercase;
/*UC_UNICODE_ROUTINES*/
T0* r198uppercase(void);
/*UC_UNICODE_ROUTINES*/
T2 r198lower_code(T2 a1);
/*UC_UNICODE_ROUTINES*/
T6 r198valid_code(T2 a1);
extern T0*oBC199lowercase_1f;
extern int fBC199lowercase_1f;
/*UC_UNICODE_ROUTINES*/
T0* r198lowercase_1f(void);
extern T0*oBC199lowercase_1e;
extern int fBC199lowercase_1e;
/*UC_UNICODE_ROUTINES*/
T0* r198lowercase_1e(void);
extern T0*oBC199lowercase;
extern int fBC199lowercase;
/*UC_UNICODE_ROUTINES*/
T0* r198lowercase(void);
extern T0*oBC200uppercase_ff;
extern int fBC200uppercase_ff;
/*UC_UNICODE_ROUTINES*/
T0* r198uppercase_ff(void);
/*UC_UTF8_ROUTINES*/
T2 r202encoded_next_value(T3 a1);
/*UC_UTF8_ROUTINES*/
T2 r202character_byte_count(T3 a1);
/*UC_UTF8_ROUTINES*/
T2 r202encoded_first_value(T3 a1);
/*UC_UTF8_ROUTINES*/
T2 r202code_byte_count(T2 a1);
/*UC_UTF8_ROUTINES*/
T2 r202encoded_byte_count(T3 a1);
/*UC_UTF8_ROUTINES*/
T2 r202substring_byte_count(T0* a1,T2 a2,T2 a3);
/*UT_ARRAY_FORMATTER*/
void r76put_integer_array(T0* a1,T0* a2,T2 a3,T2 a4);
/*KL_INTEGER_ROUTINES*/
T3 r197to_character(T2 a1);
/*UT_INTEGER_FORMATTER*/
void r176append_decimal_integer(T0* a1,T2 a2);
/*UT_INTEGER_FORMATTER*/
void r176put_decimal_integer(T0* a1,T2 a2);
/*GEYACC*/
void r12read_command_line(T12* C);
/*GEYACC*/
T0* r12arguments(void);
/*GEYACC*/
void r12report_usage_message(T12* C);
extern T0*oBC12usage_message;
extern int fBC12usage_message;
/*GEYACC*/
T0* r12usage_message(void);
/*GEYACC*/
void r12parse_input_file(T12* C);
extern T0*oBC16exceptions;
/*GEYACC*/
void r12execute(T12* C);
/*GEYACC*/
void r12report_version_number(T12* C);
/*GEYACC*/
void r12report_usage_error(T12* C);
/*KL_STRING_ROUTINES*/
T0* r187as_string(T0* a1);
/*KL_STRING_ROUTINES*/
T0* r187clone(T0* a1);
/*KL_STRING_ROUTINES*/
T0* r187appended_string(T0* a1,T0* a2);
/*KL_STRING_ROUTINES*/
T6 r187is_integer(T0* a1);
/*KL_STRING_ROUTINES*/
T0* r187appended_substring(T0* a1,T0* a2,T2 a3,T2 a4);
/*KL_STRING_ROUTINES*/
T0* r187new_empty_string(T0* a1,T2 a2);
/*KL_STRING_ROUTINES*/
T0* r187concat(T0* a1,T0* a2);
/*KL_STRING_ROUTINES*/
void r187append_substring_to_string(T0* a1,T0* a2,T2 a3,T2 a4);
/*UT_STRING_FORMATTER*/
void r175put_eiffel_string(T0* a1,T0* a2);
extern T12*eiffel_root_object;
extern int se_argc;
extern char**se_argv;
#define SE_MAXID 658
extern T7* g[];
extern T7* t[];
void std_output_flush(void);
void initialize_eiffel_runtime(int argc,char*argv[]);
extern T7*ms42_1338085634;
extern T7*ms535_559383313;
extern T7*ms603_165116404;
extern T7*ms571_1849034395;
extern T7*ms638_1158552108;
extern T7*ms533_10;
extern T7*ms76_192;
extern T7*ms76_279;
extern T7*ms76_992;
extern T7*ms542_272755366;
extern T7*ms42_279;
extern T7*ms572_1151210642;
extern T7*ms601_2110198733;
extern T7*ms543_2088248237;
extern T7*ms539_1821517345;
extern T7*ms207_10;
extern T7*ms605_1956876694;
extern T7*ms563_1383509722;
extern T7*ms600_1049715130;
extern T7*ms540_1454279890;
extern T7*ms491_988446515;
extern T7*ms39_1606053737;
extern T7*ms27_250860571;
extern T7*ms573_88402782;
extern T7*ms18_1556;
extern T7*ms575_751424646;
extern T7*ms578_110467006;
extern T7*ms202_0;
extern T7*ms550_1291418954;
extern T7*ms602_693578480;
extern T7*ms536_1319944131;
extern T7*ms538_727416569;
extern T7*ms537_1349308461;
extern T7*ms314_229;
extern T7*ms556_1366120531;
extern T7*ms12_331;
extern T7*ms604_220658643;
extern T7*ms187_0;
extern T7*ms189_0;
extern T7*ms637_1515383187;
extern T7*ms22_10;
extern T7*ms577_1822824531;
extern T7*ms570_2038502230;
extern T7*ms576_1729371669;
extern T7*ms574_473369027;
extern T7*ms76_4992;
extern T7*ms525_1449702436;
T7*se_ms(int c,char*e);
T7*se_string(char*e);
/*
-- This file is  free  software, which  comes  along  with  SmartEiffel. This
-- software  is  distributed  in the hope that it will be useful, but WITHOUT
-- ANY  WARRANTY;  without  even  the  implied warranty of MERCHANTABILITY or
-- FITNESS  FOR A PARTICULAR PURPOSE. You can modify it as you want, provided
-- this header is kept unaltered, and a notification of the changes is added.
-- You  are  allowed  to  redistribute  it and sell it, alone or as a part of
-- another product.
--       Copyright (C) 1994-2002 LORIA - INRIA - U.H.P. Nancy 1 - FRANCE
--          Dominique COLNET and Suzanne COLLIN - SmartEiffel@loria.fr
--                       http://SmartEiffel.loria.fr
--
*/
/*
  This file (SmartEiffel/sys/runtime/manifest_string_trace.h) is automatically
  included when the -manifest_string_trace command line flag is used.
*/

EIF_STRING se_ms_trace(int count, char* c_string, int li, int co, char* path);
void se_msi1(void);
void*se_ma650(int argc,...);
void*se_ma78(int argc,...);
T0* X424item(T0*C);
T6 X424after(T0*C);
void X424forth(T0*C);
void X424start(T0*C);
void X424go_after(T0*C);
void X424search_forth(T0*C,T0* a1);
T0* X371item(T0*C);
T6 X371after(T0*C);
void X371forth(T0*C);
void X371start(T0*C);
T0* X296item(T0*C);
T6 X296after(T0*C);
void X296forth(T0*C);
void X296start(T0*C);
void X296go_after(T0*C);
void X296search_forth(T0*C,T0* a1);
void X65append_dollar_n_to_string(T0*C,T2 a1,T2 a2,T0* a3,T0* a4);
void X65old_append_dollar_dollar_to_string(T0*C,T0* a1);
void X65print_resize_yyvs(T0*C,T2 a1,T0* a2);
T6 X65is_equal(T0*C,T0* a1);
void X65print_push_yyval(T0*C,T2 a1,T0* a2);
void X65old_print_dollar_dollar_initialization(T0*C,T0* a1);
void X65print_push_last_value(T0*C,T2 a1,T0* a2);
void X65print_increment_yyvsp(T0*C,T2 a1,T2 a2,T0* a3);
void X65print_yyvs_declaration(T0*C,T2 a1,T0* a2);
void X65print_pop_last_value(T0*C,T2 a1,T0* a2);
T0* X65last_value_name(T0*C);
void X65old_print_dollar_dollar_finalization(T0*C,T0* a1);
void X65print_clear_yyvs(T0*C,T2 a1,T0* a2);
void X65print_dollar_dollar_declaration(T0*C,T0* a1);
void X65old_print_conversion_routine(T0*C,T0* a1);
void X65old_append_dollar_n_to_string(T0*C,T2 a1,T2 a2,T0* a3,T0* a4);
void X65append_dollar_dollar_to_string(T0*C,T0* a1);
T0* X435item(T0*C);
T6 X435after(T0*C);
void X435forth(T0*C);
void X435start(T0*C);
void X435go_after(T0*C);
void X435search_forth(T0*C,T0* a1);
T0* X7substring(T0*C,T2 a1,T2 a2);
void X7wipe_out(T0*C);
T2 X7item_code(T0*C,T2 a1);
void X7put(T0*C,T3 a1,T2 a2);
T6 X7is_equal(T0*C,T0* a1);
T3 X7item(T0*C,T2 a1);
void X7append(T0*C,T0* a1);
void X7set_count(T0*C,T2 a1);
T6 X7same_type(T0*C,T0* a1);
void X7remove_tail(T0*C,T2 a1);
void X7append_string(T0*C,T0* a1);
T0* X7as_upper(T0*C);
T0* X7string(T0*C);
void X7extend(T0*C,T3 a1);
T2 X7hash_code(T0*C);
T0* X7as_lower(T0*C);
T2 X7to_integer(T0*C);
void X7append_character(T0*C,T3 a1);
void X7resize(T0*C,T2 a1);
void X7to_upper(T0*C);
T8 X7to_external(T0*C);
void X7to_lower(T0*C);
T0* X7twin(T0*C);
T0* X7_ix_43(T0*C,T0* a1);
void X7swap(T0*C,T2 a1,T2 a2);
T0* X433cursor_item(T0*C,T0* a1);
void X433cursor_go_after(T0*C,T0* a1);
T6 X433cursor_after(T0*C,T0* a1);
void X433cursor_search_forth(T0*C,T0* a1,T0* a2);
void X433cursor_forth(T0*C,T0* a1);
void X433cursor_start(T0*C,T0* a1);
T0* X433new_cursor(T0*C);
T6 X433cursor_off(T0*C,T0* a1);
T0* X90name(T0*C);
T6 X90is_equal(T0*C,T0* a1);
T0* X90type(T0*C);
T2 X90id(T0*C);
T6 X90is_terminal(T0*C);
T6 X19is_equal(T0*C,T0* a1);
T0* X19twin(T0*C);
T0* X292cursor_item(T0*C,T0* a1);
void X292cursor_go_after(T0*C,T0* a1);
T6 X292cursor_after(T0*C,T0* a1);
T6 X292has(T0*C,T0* a1);
void X292cursor_search_forth(T0*C,T0* a1,T0* a2);
void X292cursor_forth(T0*C,T0* a1);
void X292cursor_start(T0*C,T0* a1);
T0* X292new_cursor(T0*C);
T6 X292cursor_off(T0*C,T0* a1);
T6 X21se_assigned_from(T0*C,T0* a1);
T6 X21conforms_to(T0*C,T0* a1);
void X38put_new_line(T0*C);
void X38put_integer(T0*C,T2 a1);
void X38put_line(T0*C,T0* a1);
void X38put_character(T0*C,T3 a1);
void X38put_string(T0*C,T0* a1);
T0* X154container(T0*C);
T0* X497name(T0*C);
T2 X497read_to_string(T0*C,T0* a1,T2 a2,T2 a3);
void X497read_character(T0*C);
T2 X497read_to_buffer(T0*C,T0* a1,T2 a2,T2 a3);
T6 X497end_of_input(T0*C);
T3 X497last_character(T0*C);
T0* X483container(T0*C);
void X527fill(T0*C);
T0* X375cursor_item(T0*C,T0* a1);
T6 X375is_empty(T0*C);
T6 X375cursor_after(T0*C,T0* a1);
void X375cursor_forth(T0*C,T0* a1);
void X375cursor_start(T0*C,T0* a1);
T0* X375new_cursor(T0*C);
T0* X127container(T0*C);
void X35put_character(T0*C,T3 a1);
void X35put_string(T0*C,T0* a1);
T0* X334cursor_item(T0*C,T0* a1);
void X334cursor_go_after(T0*C,T0* a1);
T6 X334is_empty(T0*C);
T6 X334cursor_after(T0*C,T0* a1);
T6 X334has(T0*C,T0* a1);
void X334cursor_search_forth(T0*C,T0* a1,T0* a2);
void X334cursor_forth(T0*C,T0* a1);
void X334cursor_start(T0*C,T0* a1);
T0* X334new_cursor(T0*C);
T6 X334cursor_off(T0*C,T0* a1);
T0* X40default_message(T0*C);
T0* X297container(T0*C);
T0* T11toT320(T11 source);

#ifdef __cplusplus
}
#endif
