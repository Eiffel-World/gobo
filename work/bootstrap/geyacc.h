#ifdef __cplusplus
extern "C" {
#endif
/*
ANSI C code generated by SmartEiffel The GNU Eiffel Compiler, Eiffel tools and libraries
Release 1.0 (Friday December 6th 2002)
Copyright (C), 1994-2002 - LORIA - UHP - INRIA - FRANCE
Dominique COLNET and Suzanne COLLIN - SmartEiffel@loria.fr
http://SmartEiffel.loria.fr
C Compiler options used: -O2 -nologo -D"WIN32" -w
*/

/*
-- This file is  free  software, which  comes  along  with  SmartEiffel. This
-- software  is  distributed  in the hope that it will be useful, but WITHOUT
-- ANY  WARRANTY;  without  even  the  implied warranty of MERCHANTABILITY or
-- FITNESS  FOR A PARTICULAR PURPOSE. You can modify it as you want, provided
-- this header is kept unaltered, and a notification of the changes is added.
-- You  are  allowed  to  redistribute  it and sell it, alone or as a part of
-- another product.
--       Copyright (C) 1994-2002 LORIA - INRIA - U.H.P. Nancy 1 - FRANCE
--          Dominique COLNET and Suzanne COLLIN - SmartEiffel@loria.fr
--                       http://SmartEiffel.loria.fr
--
*/
/*
  This file (SmartEiffel/sys/runtime/base.h) contains all basic Eiffel
  type definitions.
  This file is automatically included in the header for all modes of
  compilation: -boost, -no_check, -require_check, -ensure_check, ...
  This file is also included in the header of any cecil file (when the
  -cecil option is used).
  This file is also included in the header file of C++ wrappers (when
  using the external "C++" clause).
*/
#include <stdio.h>
#include <string.h>
#include <math.h>
#include <stdlib.h>
#include <signal.h>
#include <stddef.h>
#include <stdarg.h>
#include <limits.h>
#include <float.h>
#include <setjmp.h>
#include <sys/types.h>
#include <sys/stat.h>
#include <fcntl.h>
#if defined __USE_POSIX || defined __unix__ || defined _POSIX_C_SOURCE
#  include <unistd.h>
#endif
#if !defined(WIN32) && \
       (defined(WINVER) || defined(_WIN32_WINNT) || defined(_WIN32) || \
	defined(__WIN32__) || defined(__TOS_WIN__) || defined(_MSC_VER))
#  define WIN32 1
#endif
#ifdef WIN32
#  include <windows.h>
#else
#  ifndef O_RDONLY
#    include <sys/file.h>
#  endif
#  ifndef O_RDONLY
#    define O_RDONLY 0000
#  endif
#endif

#if defined(_MSC_VER) && (_MSC_VER < 1400) /* MSVC older than v8 */
typedef signed char int8_t;
typedef signed short int16_t;
typedef signed int int32_t;
typedef signed __int64 int64_t;
#  define PRId8 "d"
#  define PRId16 "d"
#  define PRId32 "d"
#  define PRId64 "I64d"
#  define INT8_C(c) c
#  define INT16_C(c) c
#  define INT32_C(c) c
#  define INT64_C(c) c ## i64
#elif defined(__WATCOMC__) && (__WATCOMC__ <= 1100) /* WATCOM 11 or lower */
typedef signed char int8_t;
typedef signed short int16_t;
typedef signed long int int32_t;
typedef signed __int64 int64_t;
#  define PRId8 "d"
#  define PRId16 "d"
#  define PRId32 "d"
#  define PRId64 "Ld"
#  define INT8_C(c) c
#  define INT16_C(c) c
#  define INT32_C(c) c ## L
#  define INT64_C(c) c ## i64
#elif defined(__BORLANDC__) && (__BORLANDC__ < 0x600) /* Borland before 6.0 */
typedef signed char int8_t;
typedef signed short int16_t;
typedef signed long int int32_t;
typedef signed __int64 int64_t;
#  define PRId8 "d"
#  define PRId16 "d"
#  define PRId32 "Ld"
#  define PRId64 "I64Ld"
#  define INT8_C(c) c
#  define INT16_C(c) c
#  define INT32_C(c) c ## L
#  define INT64_C(c) c ## i64
#elif defined(__FreeBSD__) && (__FreeBSD__ < 5) /* FreeBSD before 5.0 */ && !defined (_SYS_INTTYPES_H_)
typedef signed char int8_t;
typedef signed short int16_t;
typedef signed long int int32_t;
typedef signed long long int int64_t;
#elif defined(__CYGWIN__) && defined(__BIT_TYPES_DEFINED__) /* Cygwin defines intxx_t in sys/types.h instead of inttypes.h */
#else
#  include <inttypes.h>
#  if !defined(INT8_MAX) && defined(INT16_MAX)
/* int8_t is not mandatory */
typedef int_least8_t int8_t;
#  endif
#endif

#if !defined(PRId16)
#  define PRId8 "d"
#  define PRId16 "d"
#  define PRId32 "ld"
#  define PRId64 "lld"
#elif !defined(PRId8)
#  define PRId8 "d"
#endif
#if !defined(INT16_C)
#  define INT8_C(c) c
#  define INT16_C(c) c
#  define INT32_C(c) c ## L
#  define INT64_C(c) c ## LL
#elif !defined(INT8_C)
#  define INT8_C(c) c
#endif
#if !defined(INT16_MIN)
#  define INT8_MIN (-INT8_C(127)-1)
#  define INT8_MAX (INT8_C(127))
#  define INT16_MIN (-INT16_C(32767)-1)
#  define INT16_MAX (INT16_C(32767))
#  define INT32_MIN (-INT32_C(2147483647)-1)
#  define INT32_MAX (INT32_C(2147483647))
#  define INT64_MIN (-INT64_C(9223372036854775807)-1)
#  define INT64_MAX (INT64_C(9223372036854775807))
#elif !defined(INT8_MIN)
#  define INT8_MIN (-INT8_C(127)-1)
#endif

/* Because ANSI C EXIT_* are not always defined: */
#ifndef EXIT_FAILURE
#  define EXIT_FAILURE 1
#endif
#ifndef EXIT_SUCCESS
#  define EXIT_SUCCESS 0
#endif

/*
   On Linux glibc systems, we need to use sig.* versions of jmp_buf,
   setjmp and longjmp to preserve the signal handling context.
   Currently, the way I figured to detect this is if _SIGSET_H_types has
   been defined in /usr/include/setjmp.h.
*/
#ifdef _SIGSET_H_types
#  define JMP_BUF    sigjmp_buf
#  define SETJMP(x)  sigsetjmp( (x), 1)
#  define LONGJMP    siglongjmp
#else
#  define JMP_BUF    jmp_buf
#  define SETJMP(x)  setjmp( (x) )
#  define LONGJMP    longjmp
#endif

/*
   Type to store reference objects Id:
 */
typedef int Tid;
typedef struct S0 T0;
struct S0{Tid id;};

/*
   The default channel used to print runtime error messages:
*/
#define SE_ERR stderr

/*
   Eiffel type INTEGER_8 is #1:
*/
typedef int8_t T1;
#define EIF_INTEGER_8 T1
#define M1 (INT8_C(0))
#define EIF_INTEGER_8_BITS (CHAR_BIT)
#define EIF_MINIMUM_INTEGER_8 (INT8_MIN)
#define EIF_MAXIMUM_INTEGER_8 (INT8_MAX)

/*
  Eiffel type INTEGER_16 is #10:
*/
typedef int16_t T10;
#define EIF_INTEGER_16 T10
#define M10 (INT16_C(0))
#define EIF_INTEGER_16_BITS (CHAR_BIT*sizeof(T10t))
#define EIF_MINIMUM_INTEGER_16 (INT16_MIN) /*-32768*/
#define EIF_MAXIMUM_INTEGER_16 (INT16_MAX) /*+32767*/

/*
  Eiffel type INTEGER or INTEGER_32 is #2:
*/
typedef int32_t T2;
#define EIF_INTEGER T2
#define EIF_INTEGER_32 T2
#define M2 (INT32_C(0))
#define EIF_INTEGER_BITS ((T2)(CHAR_BIT*sizeof(T2)))
#define EIF_INTEGER_32_BITS EIF_INTEGER_BITS
#define EIF_MINIMUM_INTEGER (INT32_MIN)
#define EIF_MAXIMUM_INTEGER (INT32_MAX)

/*
  Eiffel type INTEGER_64 is #11:
*/
typedef int64_t T11;
#define EIF_INTEGER_64 T11
#define M11 (INT64_C(0))
#define EIF_INTEGER_64_BITS (CHAR_BIT*sizeof(T11))
#define EIF_MINIMUM_INTEGER_64 (INT64_MIN)
#define EIF_MAXIMUM_INTEGER_64 (INT64_MAX)

/*
  Eiffel type CHARACTER is #3:
*/
typedef unsigned char T3;
#define EIF_CHARACTER T3
#define M3 (0)
#define EIF_CHARACTER_BITS (CHAR_BIT)
#define EIF_MINIMUM_CHARACTER_CODE (0)
#define EIF_MAXIMUM_CHARACTER_CODE (255)
#define T3code(x) ((T2)(x))
#define T3to_integer(x) ((T2)((signed char)(x)))
#define T3to_bit(x) (x)

/*
  Eiffel type REAL is #4:
*/
typedef float T4;
#define EIF_REAL T4
#define M4 (0.0)
#define EIF_REAL_BITS (CHAR_BIT*sizeof(float))
#define EIF_MINIMUM_REAL (-(FLT_MAX))
#define EIF_MAXIMUM_REAL (FLT_MAX)

/*
  Eiffel type DOUBLE is #5:
*/
typedef double T5;
#define EIF_DOUBLE T5
#define M5 (0.0)
#define EIF_DOUBLE_BITS (CHAR_BIT*sizeof(double))
#define EIF_MINIMUM_DOUBLE (-(DBL_MAX))
#define EIF_MAXIMUM_DOUBLE (DBL_MAX)

/*
  Eiffel type BOOLEAN is #6:
*/
typedef char T6;
#define EIF_BOOLEAN T6
#define M6 (0)
#define EIF_BOOLEAN_BITS (CHAR_BIT)

/*
   Eiffel type POINTER is #8:
*/
typedef void* T8;
#define EIF_POINTER T8
#define M8 (NULL)
#define EIF_POINTER_BITS (CHAR_BIT*sizeof(void*))

/*
  To use type STRING on the C side:
*/
#define EIF_STRING T7*

/*
  Some Other EIF_* defined in ETL:
*/
#define eif_access(x) ((char*)(x))
#define EIF_REFERENCE T0*
#define EIF_OBJ T0*
#define EIF_OBJECT EIF_OBJ

/*
   Wrappers for `malloc' and `calloc':
*/
void* se_malloc(size_t size);
void* se_calloc(size_t nmemb, size_t size);
#define SE_BOOST 1
#define SE_EXCEPTIONS 1

/*C Header Pass 1 :*/
typedef struct S551 T551;
typedef struct S433 T433;
typedef struct S130 T130;
typedef struct S432 T432;
typedef struct S514 T514;
typedef struct S139 T139;
typedef struct S347 T347;
typedef void*T622;
typedef struct S361 T361;
typedef struct S517 T517;
typedef struct S178 T178;
typedef struct S213 T213;
typedef struct S477 T477;
typedef struct S202 T202;
typedef struct S321 T321;
typedef struct S539 T539;
typedef struct S275 T275;
typedef struct S512 T512;
typedef struct S177 T177;
typedef struct S131 T131;
typedef void*T619;
typedef struct S277 T277;
typedef struct S459 T459;
typedef struct S183 T183;
typedef struct S608 T608;
typedef struct S618 T618;
typedef void*T171;
typedef struct S576 T576;
typedef struct S75 T75;
typedef struct S329 T329;
typedef void*T474;
typedef void*T527;
typedef struct S328 T328;
typedef void*T169;
typedef void*T144;
typedef struct S547 T547;
typedef void*T500;
typedef struct S513 T513;
typedef void*T380;
typedef void*T623;
typedef void*T127;
typedef struct S260 T260;
typedef struct S520 T520;
typedef struct S584 T584;
typedef struct S65 T65;
typedef struct S146 T146;
typedef struct S412 T412;
typedef struct S583 T583;
typedef struct S211 T211;
typedef void*T214;
typedef struct S417 T417;
typedef void*T161;
typedef void*T128;
typedef void*T621;
typedef struct S391 T391;
typedef struct S292 T292;
typedef struct S86 T86;
typedef struct S21 T21;
typedef struct S475 T475;
typedef struct S387 T387;
typedef void*T165;
typedef void*T73;
typedef struct S133 T133;
typedef struct S210 T210;
typedef struct S581 T581;
typedef struct S594 T594;
typedef void*T427;
typedef struct S564 T564;
typedef struct S582 T582;
typedef struct S516 T516;
typedef struct S280 T280;
typedef struct S85 T85;
typedef void*T160;
typedef struct S212 T212;
typedef struct S77 T77;
typedef struct S486 T486;
typedef struct S572 T572;
typedef void*T566;
typedef struct S598 T598;
typedef struct S307 T307;
typedef struct S350 T350;
typedef void*T378;
typedef struct S339 T339;
typedef struct S617 T617;
typedef struct S518 T518;
typedef struct S79 T79;
typedef struct S197 T197;
typedef struct S278 T278;
typedef struct S250 T250;
typedef struct S41 T41;
typedef struct S542 T542;
typedef struct S588 T588;
typedef void*T374;
typedef struct S175 T175;
typedef struct S548 T548;
typedef struct S398 T398;
typedef struct S579 T579;
typedef struct S38 T38;
typedef struct S91 T91;
typedef struct S298 T298;
typedef struct S531 T531;
typedef struct S247 T247;
typedef struct S522 T522;
typedef struct S555 T555;
typedef struct S628 T628;
typedef void*T137;
typedef struct S519 T519;
typedef struct S141 T141;
typedef struct S610 T610;
typedef struct S515 T515;
typedef struct S538 T538;
typedef struct S381 T381;
typedef struct S578 T578;
typedef struct S7 T7;
typedef struct S554 T554;
typedef void*T180;
typedef struct S318 T318;
typedef void*T314;
typedef struct S246 T246;
typedef struct S530 T530;
typedef struct S44 T44;
typedef struct S87 T87;
typedef void*T262;
typedef struct S377 T377;
typedef struct S82 T82;
typedef struct S404 T404;
typedef struct S78 T78;
typedef struct S534 T534;
typedef struct S293 T293;
typedef struct S358 T358;
typedef struct S472 T472;
typedef struct S462 T462;
typedef struct S295 T295;
typedef struct S12 T12;
typedef struct S507 T507;
typedef struct S375 T375;
typedef struct S529 T529;
typedef struct S248 T248;
typedef struct S580 T580;
typedef void*T269;
typedef void*T148;
typedef struct S263 T263;
typedef struct S341 T341;
typedef void*T268;
typedef struct S476 T476;
typedef struct S524 T524;
typedef void*T575;
typedef void*T348;
typedef struct S550 T550;
typedef struct S577 T577;
typedef struct S368 T368;
typedef struct S121 T121;
typedef struct S152 T152;
typedef struct S45 T45;
typedef void*T620;
typedef void*T574;
typedef struct S549 T549;
typedef void*T414;
typedef struct S106 T106;
typedef struct S506 T506;
typedef struct S172 T172;
typedef struct S315 T315;
typedef struct S510 T510;
typedef void*T402;
typedef void*T437;
typedef void*T196;
typedef void*T136;
typedef struct S521 T521;
typedef void*T535;
typedef struct S71 T71;
typedef struct S166 T166;
typedef struct S502 T502;
typedef void*T390;
typedef struct S108 T108;
typedef struct S536 T536;
typedef void*T309;
typedef struct S107 T107;
typedef void*T537;
typedef struct S66 T66;
typedef struct S545 T545;
typedef struct S553 T553;
typedef void*T591;
typedef void*T397;
typedef struct S614 T614;
typedef void*T463;
typedef struct S426 T426;
typedef void*T124;
typedef struct S410 T410;
typedef struct S450 T450;
typedef void*T369;
typedef struct S173 T173;
typedef struct S448 T448;
typedef struct S215 T215;
typedef struct S284 T284;
typedef struct S505 T505;
typedef struct S167 T167;
typedef struct S176 T176;
typedef void*T624;
typedef struct S233 T233;
typedef struct S319 T319;
typedef struct S552 T552;

/*C Header Pass 2 :*/
typedef T0**T135;
typedef T0**T465;
typedef T0**T282;
typedef T0**T224;
typedef T0**T297;
typedef T0**T630;
typedef T10*T616;
typedef T0**T429;
typedef T0**T143;
typedef T0**T93;
typedef T0**T252;
typedef T0**T286;
typedef T0**T393;
typedef T3*T9;
typedef T0**T84;
typedef T1*T612;
typedef T0**T204;
typedef T0**T372;
typedef T0**T185;
typedef T2*T76;
typedef T0**T504;
typedef T0**T72;

/*C Header Pass 3 :*/

/*C Header Pass 4 :*/
struct S551{Tid id;T0* _parameters;};
extern T551 M551;
struct S433{T0* _item;T0* _right;};
extern T433 M433;
struct S432{Tid id;T0* _equality_tester;T2 _count;T0* _first_cell;T0* _last_cell;T0* _internal_cursor;};
extern T432 M432;
struct S514{Tid id;T0* _parameters;};
extern T514 M514;
struct S139{T2 _count;T2 _capacity;T0* _storage;T0* _fixed_array_;T0* _internal_cursor;};
extern T139 M139;
struct S347{T2 _count;T2 _capacity;T0* _storage;T0* _fixed_array_;};
extern T347 M347;
struct S361{T0* _equality_tester;T2 _count;T2 _capacity;T0* _storage;T0* _fixed_array_;};
extern T361 M361;
struct S517{Tid id;T0* _parameters;};
extern T517 M517;
struct S213{T0* _equality_tester;T2 _count;T0* _first_cell;T0* _last_cell;T0* _internal_cursor;};
extern T213 M213;
struct S477{Tid id;T0* _name;T0* _string_name;T3 _last_character;T6 _end_of_file;T0* _character_buffer;T0* _path;T3 _old_last_character;T6 _old_end_of_file;T6 _push_back_flag;T8 _input_stream;T9 _buffer;T6 _end_reached;T2 _buffer_position;T2 _buffer_size;T2 _capacity;};
extern T477 M477;
struct S202{Tid id;T204 _storage;T2 _capacity;T2 _upper;};
extern T202 M202;
struct S321{Tid id;T0* _container;T6 _after;T6 _before;T0* _current_cell;T0* _next_cursor;};
extern T321 M321;
struct S539{Tid id;T0* _equality_tester;T0* _key_equality_tester;T2 _count;T2 _capacity;T2 _last_position;T2 _modulus;T2 _free_slot;T2 _position;T2 _slots_position;T2 _clashes_previous_position;T2 _found_position;T0* _internal_cursor;T0* _items;T0* _keys;T0* _clashes;T0* _slots;T0* _fixed_item_array_;T0* _fixed_key_array_;};
extern T539 M539;
struct S275{Tid id;T0* _container;T2 _position;T0* _next_cursor;};
extern T275 M275;
struct S512{Tid id;T0* _parameters;};
extern T512 M512;
struct S177{T2 _count;T2 _capacity;T0* _storage;T0* _fixed_array_;T0* _internal_cursor;};
extern T177 M177;
struct S131{Tid id;T0* _equality_tester;T2 _count;T2 _capacity;T0* _storage;T0* _fixed_array_;T0* _internal_cursor;};
extern T131 M131;
struct S459{T0* _container;T2 _position;T0* _next_cursor;};
extern T459 M459;
struct S183{T185 _storage;T2 _capacity;T2 _upper;};
extern T183 M183;
struct S608{T0* _container;};
extern T608 M608;
struct S618{Tid id;T0* _parameters;};
extern T618 M618;
struct S178{Tid id;T0* _equality_tester;T2 _count;T2 _capacity;T0* _storage;T0* _fixed_array_;T0* _internal_cursor;};
extern T178 M178;
extern T171 M171;
struct S576{Tid id;T0* _text;};
extern T576 M576;
struct S75{Tid id;T76 _storage;T2 _capacity;T2 _upper;T2 _lower;};
extern T75 M75;
struct S329{T0* _item;T0* _right;};
extern T329 M329;
struct S328{T2 _count;T0* _first_cell;T0* _last_cell;T0* _internal_cursor;};
extern T328 M328;
extern T169 M169;
extern T144 M144;
struct S547{Tid id;T0* _parameters;};
extern T547 M547;
struct S513{Tid id;T1 _item;};
extern T513 M513;
struct S260{T0* _container;};
extern T260 M260;
struct S520{T135 _storage;T2 _capacity;T2 _upper;T2 _lower;};
extern T520 M520;
struct S584{Tid id;T6 _push_back_flag;T3 _old_last_character;T6 _old_end_of_file;T9 _buffer;T6 _end_reached;T2 _buffer_position;T2 _buffer_size;T2 _capacity;T0* _name;T3 _last_character;T6 _end_of_file;T0* _character_buffer;};
extern T584 M584;
struct S65{Tid id;T6 _is_used;T0* _name;T2 _id;};
extern T65 M65;
struct S146{T0* _error_file;T0* _warning_file;T0* _info_file;};
extern T146 M146;
struct S412{T0* _item;T0* _right;};
extern T412 M412;
struct S583{T2 _count;T9 _area;T0* _area_string;};
extern T583 M583;
struct S211{T224 _storage;T2 _capacity;T2 _upper;T2 _lower;};
extern T211 M211;
struct S417{T0* _equality_tester;T2 _count;T2 _capacity;T0* _storage;T0* _fixed_array_;};
extern T417 M417;
extern T161 M161;
struct S391{T393 _storage;T2 _capacity;T2 _upper;};
extern T391 M391;
struct S292{Tid id;T0* _parameters;};
extern T292 M292;
struct S86{Tid id;T0* _equality_tester;T2 _count;T2 _capacity;T0* _storage;T0* _fixed_array_;T0* _internal_cursor;};
extern T86 M86;
struct S21{Tid id;T0* _name;T0* _string_name;T0* _path;T9 _buffer;T2 _buffer_position;T2 _capacity;T8 _output_stream;};
extern T21 M21;
struct S475{Tid id;T0* _container;T2 _position;T0* _next_cursor;};
extern T475 M475;
struct S387{T0* _equality_tester;T0* _key_equality_tester;T2 _count;T2 _capacity;T2 _last_position;T2 _modulus;T2 _free_slot;T2 _position;T2 _slots_position;T2 _clashes_previous_position;T2 _found_position;T0* _internal_cursor;T0* _items;T0* _keys;T0* _clashes;T0* _slots;T0* _fixed_item_array_;T0* _fixed_key_array_;};
extern T387 M387;
extern T165 M165;
extern T73 M73;
struct S133{T135 _storage;T2 _capacity;T2 _upper;};
extern T133 M133;
struct S581{Tid id;T0* _parameters;};
extern T581 M581;
struct S594{Tid id;T2 _position;T0* _container;};
extern T594 M594;
struct S564{T0* _container;};
extern T564 M564;
struct S582{Tid id;T0* _parameters;};
extern T582 M582;
struct S516{Tid id;T0* _parameters;};
extern T516 M516;
struct S280{T282 _storage;T2 _capacity;T2 _upper;};
extern T280 M280;
struct S85{T2 _id;T0* _lhs;T0* _rhs;T0* _error_actions;T0* _action;T2 _precedence;T2 _line_nb;T6 _is_useful;T2 _associativity;};
extern T85 M85;
extern T160 M160;
struct S212{T0* _container;T6 _after;T6 _before;T0* _current_cell;T0* _next_cursor;};
extern T212 M212;
struct S486{T2 _error_count;T0* _yytranslate;T0* _yyr1;T0* _yyr2;T0* _yydefact;T0* _yydefgoto;T0* _yypact;T0* _yypgoto;T0* _yytable;T0* _yycheck;T0* _yyvs;T0* _yyss;T2 _yyvsp;T2 _yyssp;T0* _yyval;T6 _yy_lookahead_needed;T2 _yyerrstatus;T2 _yy_parsing_status;T0* _fixed_array_;T2 _last_token;T0* _input_buffer;T2 _line;T2 _column;T2 _position;T2 _yy_start_state;T0* _yy_content;T2 _yy_end;T2 _yy_start;T2 _yy_column;T2 _yy_line;T2 _yy_position;T6 _yy_more_flag;T2 _yy_more_len;T2 _yy_last_accepting_state;T2 _yy_last_accepting_cpos;T0* _yy_nxt;T0* _yy_chk;T0* _yy_base;T0* _yy_def;T0* _yy_ec;T0* _yy_meta;T0* _yy_accept;T0* _yy_acclist;T6 _yy_rejected;T0* _yy_state_stack;T2 _yy_state_count;T2 _yy_full_match;T2 _yy_lp;T2 _yy_looking_for_trail_begin;T2 _yy_full_lp;T2 _yy_full_state;T6 _successful;T0* _error_handler;T2 _line_nb;T0* _last_value;T0* _action_buffer;T2 _nb_open_brackets;T2 _last_error;T0* _rule;T0* _last_grammar;T0* _action_factory;T2 _precedence;T0* _precedence_token;T0* _type;T0* _start_symbol;T0* _terminal_symbols;T0* _nonterminal_symbols;T0* _types;};
extern T486 M486;
struct S572{T0* _container;};
extern T572 M572;
struct S598{Tid id;T2 _position;T0* _container;T0* _next_cursor;};
extern T598 M598;
struct S307{T0* _container;};
extern T307 M307;
struct S350{Tid id;T2 _count;T0* _first_cell;T0* _last_cell;T0* _internal_cursor;};
extern T350 M350;
struct S339{T0* _container;T2 _position;T0* _next_cursor;};
extern T339 M339;
struct S617{Tid id;T0* _parameters;};
extern T617 M617;
struct S518{Tid id;T0* _parameters;};
extern T518 M518;
struct S79{T2 _count;T2 _capacity;T0* _storage;T0* _fixed_array_;T0* _internal_cursor;};
extern T79 M79;
struct S197{T0* _comparator;};
extern T197 M197;
struct S278{T0* _equality_tester;T2 _count;T2 _capacity;T0* _storage;T0* _fixed_array_;T0* _internal_cursor;};
extern T278 M278;
struct S250{T252 _storage;T2 _capacity;T2 _upper;};
extern T250 M250;
struct S41{T0* _yytranslate;T0* _yyr1;T0* _yyr2;T0* _yydefact;T0* _yydefgoto;T0* _yypact;T0* _yypgoto;T0* _yytable;T0* _yycheck;T2 _yyfinal;T2 _yyflag;T2 _yyntbase;T2 _yylast;T2 _yymax_token;T2 _yynsyms;T0* _machine;T0* _input_filename;T2 _array_size;};
extern T41 M41;
struct S542{Tid id;T6 _is_used;T0* _name;T2 _id;};
extern T542 M542;
struct S588{Tid id;T2 _position;T0* _container;};
extern T588 M588;
struct S175{T6 _is_state;T2 _id;T0* _froms;T0* _tos;T2 _count;T2 _width;T2 _position;};
extern T175 M175;
struct S548{Tid id;T0* _parameters;};
extern T548 M548;
struct S398{T0* _comparator;};
extern T398 M398;
struct S579{Tid id;T0* _parameters;};
extern T579 M579;
struct S38{Tid id;T0* _parameters;};
extern T38 M38;
struct S91{Tid id;T93 _storage;T2 _capacity;T2 _upper;};
extern T91 M91;
struct S298{Tid id;T11 _item;};
extern T298 M298;
struct S531{Tid id;T0* _equality_tester;T0* _key_equality_tester;T2 _count;T2 _capacity;T2 _last_position;T2 _modulus;T2 _free_slot;T2 _position;T2 _slots_position;T2 _clashes_previous_position;T2 _found_position;T0* _internal_cursor;T0* _items;T0* _keys;T0* _clashes;T0* _slots;T0* _fixed_item_array_;T0* _fixed_key_array_;};
extern T531 M531;
struct S247{T0* _rule;T0* _lookaheads;T0* _transitions;};
extern T247 M247;
struct S522{Tid id;T0* _parameters;};
extern T522 M522;
struct S555{Tid id;T0* _parameters;};
extern T555 M555;
struct S628{T630 _storage;T2 _capacity;T2 _upper;T2 _lower;};
extern T628 M628;
extern T137 M137;
struct S519{Tid id;T0* _parameters;};
extern T519 M519;
struct S141{T143 _storage;T2 _capacity;T2 _upper;};
extern T141 M141;
struct S610{Tid id;T612 _storage;T2 _capacity;T2 _upper;T2 _lower;};
extern T610 M610;
struct S515{Tid id;T2 _item;};
extern T515 M515;
struct S538{Tid id;T0* _parameters;};
extern T538 M538;
struct S381{T84 _storage;T2 _capacity;T2 _upper;T2 _lower;};
extern T381 M381;
struct S578{Tid id;T0* _parameters;};
extern T578 M578;
struct S210{T2 _index;T0* _target;T0* _source;T0* _following_tokens;T0* _included_tokens;};
extern T210 M210;
struct S554{Tid id;T0* _parameters;};
extern T554 M554;
struct S318{Tid id;T0* _equality_tester;T2 _count;T0* _first_cell;T0* _last_cell;T0* _internal_cursor;};
extern T318 M318;
struct S246{T0* _item;T0* _right;};
extern T246 M246;
struct S530{T0* _first;T2 _second;};
extern T530 M530;
struct S130{Tid id;T6 _is_useful;T0* _name;T0* _type;T2 _id;T2 _token_id;T2 _precedence;T0* _literal_string;T2 _associativity;};
extern T130 M130;
struct S44{T0* _states;T0* _grammar;T0* _cached_states;};
extern T44 M44;
struct S87{Tid id;T2 _index;T6 _is_useful;T0* _name;T0* _type;T2 _id;T6 _is_nullable;T0* _rules;T0* _firsts;T0* _derives;T0* _transitions;};
extern T87 M87;
struct S377{Tid id;T0* _container;T2 _position;T0* _next_cursor;};
extern T377 M377;
struct S82{T84 _storage;T2 _capacity;T2 _upper;};
extern T82 M82;
struct S404{Tid id;T0* _container;T6 _after;T6 _before;T0* _current_cell;T0* _next_cursor;};
extern T404 M404;
struct S78{Tid id;T2 _id;T0* _accessing_symbol;T0* _positions;T0* _shifts;T0* _reductions;T0* _errors;T0* _error_action;T2 _hash_code;T6 _lookahead_needed;T6 _has_conflict;};
extern T78 M78;
struct S534{Tid id;T0* _parameters;};
extern T534 M534;
struct S293{T2 _count;T2 _capacity;T0* _storage;T0* _fixed_array_;T0* _internal_cursor;};
extern T293 M293;
struct S358{Tid id;T0* _container;T6 _after;T6 _before;T0* _current_cell;T0* _next_cursor;};
extern T358 M358;
struct S7{Tid id;T9 _storage;T2 _count;T2 _capacity;};
extern T7 M7;
struct S472{Tid id;T0* _container;T2 _position;T0* _next_cursor;};
extern T472 M472;
struct S462{T465 _storage;T2 _capacity;T2 _upper;};
extern T462 M462;
struct S295{T297 _storage;T2 _capacity;T2 _upper;};
extern T295 M295;
struct S12{T0* _input_filename;T0* _output_filename;T0* _token_classname;T0* _token_filename;T0* _verbose_filename;T6 _actions_separated;T0* _grammar;T0* _error_handler;};
extern T12 M12;
struct S507{Tid id;T0* _content;T2 _count;T2 _capacity;T2 _position;T2 _column;T2 _line;T2 _index;T6 _beginning_of_line;T6 _filled;};
extern T507 M507;
struct S375{T0* _item;T0* _right;};
extern T375 M375;
struct S529{Tid id;T0* _parameters;};
extern T529 M529;
struct S248{Tid id;T2 _count;T2 _capacity;T0* _storage;T0* _fixed_array_;T0* _internal_cursor;};
extern T248 M248;
struct S580{Tid id;T0* _parameters;};
extern T580 M580;
extern T148 M148;
struct S263{T0* _equality_tester;T2 _count;T2 _capacity;T0* _storage;T0* _fixed_array_;T0* _internal_cursor;};
extern T263 M263;
struct S341{T0* _container;T6 _after;T6 _before;T0* _current_cell;T0* _next_cursor;};
extern T341 M341;
struct S476{Tid id;T0* _parameters;};
extern T476 M476;
struct S524{Tid id;T0* _equality_tester;T0* _key_equality_tester;T2 _count;T2 _capacity;T2 _last_position;T2 _modulus;T2 _free_slot;T2 _position;T2 _slots_position;T2 _clashes_previous_position;T2 _found_position;T0* _internal_cursor;T0* _items;T0* _keys;T0* _clashes;T0* _slots;T0* _fixed_item_array_;T0* _fixed_key_array_;};
extern T524 M524;
extern T575 M575;
struct S550{Tid id;T0* _parameters;};
extern T550 M550;
struct S577{Tid id;T0* _parameters;};
extern T577 M577;
struct S368{T372 _storage;T2 _capacity;T2 _upper;};
extern T368 M368;
struct S121{Tid id;T76 _storage;T2 _capacity;T2 _upper;};
extern T121 M121;
struct S152{Tid id;T9 _storage;T2 _count;T2 _capacity;T2 _byte_count;T2 _last_byte_index_input;T2 _last_byte_index_result;};
extern T152 M152;
struct S45{T0* _tokens;T0* _variables;T0* _types;T0* _rules;T0* _start_symbol;T2 _expected_conflicts;T0* _eiffel_code;T0* _eiffel_header;};
extern T45 M45;
struct S549{Tid id;T0* _parameters;};
extern T549 M549;
struct S106{Tid id;T6 _is_used;T0* _name;T2 _id;};
extern T106 M106;
struct S506{Tid id;T0* _content;T2 _count;T2 _capacity;T2 _position;T2 _column;T2 _line;T2 _index;T6 _beginning_of_line;T6 _filled;T6 _interactive;T0* _file;T6 _end_of_file;};
extern T506 M506;
struct S172{Tid id;T2 _buffer_position;T9 _buffer;T2 _capacity;T0* _name;};
extern T172 M172;
struct S315{T0* _state;T0* _rule;T0* _token;T0* _resolution;};
extern T315 M315;
struct S510{Tid id;T0* _name;};
extern T510 M510;
extern T136 M136;
struct S521{Tid id;T0* _parameters;};
extern T521 M521;
struct S71{Tid id;T72 _storage;T2 _capacity;T2 _upper;};
extern T71 M71;
struct S166{T143 _storage;T2 _capacity;T2 _upper;T2 _lower;};
extern T166 M166;
struct S502{T504 _storage;T2 _capacity;T2 _upper;};
extern T502 M502;
struct S108{Tid id;T0* _equality_tester;T2 _count;T2 _capacity;T2 _last_position;T2 _modulus;T2 _free_slot;T2 _position;T2 _slots_position;T2 _clashes_previous_position;T2 _found_position;T0* _internal_cursor;T0* _items;T0* _clashes;T0* _slots;T0* _fixed_item_array_;};
extern T108 M108;
struct S536{Tid id;T0* _container;T6 _after;T6 _before;T0* _current_cell;T0* _next_cursor;};
extern T536 M536;
struct S107{Tid id;T2 _position;T0* _container;T0* _next_cursor;};
extern T107 M107;
struct S77{Tid id;T0* _action;T2 _line_nb;};
extern T77 M77;
struct S66{Tid id;T0* _equality_tester;T2 _count;T2 _capacity;T0* _storage;T0* _fixed_array_;T0* _internal_cursor;};
extern T66 M66;
struct S545{Tid id;T0* _container;T2 _position;T0* _next_cursor;};
extern T545 M545;
struct S553{Tid id;T0* _parameters;};
extern T553 M553;
struct S614{Tid id;T616 _storage;T2 _capacity;T2 _upper;T2 _lower;};
extern T614 M614;
struct S426{T429 _storage;T2 _capacity;T2 _upper;};
extern T426 M426;
struct S277{T0* _rule;T2 _index;};
extern T277 M277;
struct S410{Tid id;T0* _equality_tester;T2 _count;T0* _first_cell;T0* _last_cell;T0* _internal_cursor;};
extern T410 M410;
struct S450{T2 _count;T2 _capacity;T0* _storage;T0* _fixed_array_;T0* _internal_cursor;};
extern T450 M450;
struct S173{T2 _buffer_position;T9 _buffer;T2 _capacity;};
extern T173 M173;
struct S448{T2 _position;T0* _container;};
extern T448 M448;
struct S215{T0* _comparator;};
extern T215 M215;
struct S284{T286 _storage;T2 _capacity;T2 _upper;};
extern T284 M284;
struct S505{Tid id;T0* _parameters;};
extern T505 M505;
struct S167{T0* _program_name;};
extern T167 M167;
struct S176{T2 _count;T2 _capacity;T0* _storage;T0* _fixed_array_;T0* _internal_cursor;};
extern T176 M176;
struct S233{T0* _container;};
extern T233 M233;
struct S319{T0* _item;T0* _right;};
extern T319 M319;
struct S552{Tid id;T0* _parameters;};
extern T552 M552;
/*
-- This file is  free  software, which  comes  along  with  SmartEiffel. This
-- software  is  distributed  in the hope that it will be useful, but WITHOUT
-- ANY  WARRANTY;  without  even  the  implied warranty of MERCHANTABILITY or
-- FITNESS  FOR A PARTICULAR PURPOSE. You can modify it as you want, provided
-- this header is kept unaltered, and a notification of the changes is added.
-- You  are  allowed  to  redistribute  it and sell it, alone or as a part of
-- another product.
--       Copyright (C) 1994-2002 LORIA - INRIA - U.H.P. Nancy 1 - FRANCE
--          Dominique COLNET and Suzanne COLLIN - SmartEiffel@loria.fr
--                       http://SmartEiffel.loria.fr
--
*/

/*
  This file (SmartEiffel/sys/runtime/boost.h) is automatically included when
  `run_control.boost' is true (ie. only for mode -boost).
*/
#define SE_BOOST 1
void se_print_run_time_stack (void);
void se_signal_handler(int sig);
/*
-- This file is  free  software, which  comes  along  with  SmartEiffel. This
-- software  is  distributed  in the hope that it will be useful, but WITHOUT
-- ANY  WARRANTY;  without  even  the  implied warranty of MERCHANTABILITY or
-- FITNESS  FOR A PARTICULAR PURPOSE. You can modify it as you want, provided
-- this header is kept unaltered, and a notification of the changes is added.
-- You  are  allowed  to  redistribute  it and sell it, alone or as a part of
-- another product.
--       Copyright (C) 1994-2002 LORIA - INRIA - U.H.P. Nancy 1 - FRANCE
--          Dominique COLNET and Suzanne COLLIN - SmartEiffel@loria.fr
--                       http://SmartEiffel.loria.fr
--
*/
/*
  This file (SmartEiffel/sys/runtime/exception.h) is automatically included
  when exception handling is used somewhere in the live code.
*/

#define SE_EXCEPTIONS 1

/*
  Constants from Eiffel class EXCEPTIONS :
*/
#define Check_instruction 	  1
#define Class_invariant 	  2
#define Developer_exception 	  3
#define Incorrect_inspect_value   4
#define Loop_invariant 		  5
#define Loop_variant 		  6
#define No_more_memory  	  7
#define Postcondition 		  8
#define Precondition  		  9
#define Routine_failure  	  10
#define	Os_signal		  11
#define Void_attached_to_expanded 12
#define Void_call_target 	  13
#define System_level_type_error	  14

/*
   This will be the structure of rescue contexts.  A rescue context
   will be declared for every routine that has a rescue clause.

   The `next' pointer is the address of the next rescue context if there
   is one higher up the call chain, or NULL if there is no other
   context.
*/
struct rescue_context {
  JMP_BUF jb;
#ifndef SE_BOOST
    /* To keep track of dump stack to unwind it safely
       before the LONGJMP :
    */
    struct _se_dump_stack * top_of_ds ;
#endif
  struct rescue_context *next;
};

extern struct rescue_context *rescue_context_top;
extern int internal_exception_number;
extern int original_internal_exception_number;
extern int signal_exception_number;
extern char *additional_error_message;

void setup_signal_handler(void);
void signal_exception_handler(int);
void internal_exception_handler(int);
void print_exception(void);
/*
-- This file is  free  software, which  comes  along  with  SmartEiffel. This
-- software  is  distributed  in the hope that it will be useful, but WITHOUT
-- ANY  WARRANTY;  without  even  the  implied warranty of MERCHANTABILITY or
-- FITNESS  FOR A PARTICULAR PURPOSE. You can modify it as you want, provided
-- this header is kept unaltered, and a notification of the changes is added.
-- You  are  allowed  to  redistribute  it and sell it, alone or as a part of
-- another product.
--       Copyright (C) 1994-2002 LORIA - INRIA - U.H.P. Nancy 1 - FRANCE
--          Dominique COLNET and Suzanne COLLIN - SmartEiffel@loria.fr
--                       http://SmartEiffel.loria.fr
--
*/
/*
  This file (SmartEiffel/sys/runtime/basic_io.h) is automatically
  included when some external "SmartEiffel" basic_io_* feature is used.
*/

#define basic_io_stdin (stdin)
#define basic_io_stdout (stdout)
#define basic_io_stderr (stderr)
#define basic_io_eof (EOF)
#define basic_io_text_file_read_open(p) (fopen(((char*)(p)),"r"))
#define basic_io_text_file_write_open(p) (fopen(((char*)(p)),"w"))
#define basic_io_text_file_write_append(p) (fopen(((char*)(p)),"a"))
#define basic_io_text_file_read_write_open(p) (fopen(((char*)(p)),"r+"))
#define basic_io_text_file_read_write_append(p) (fopen(((char*)(p)),"a+"))
#define basic_io_binary_file_read_open(p) (fopen(((char*)(p)),"rb"))
#define basic_io_binary_file_write_open(p) (fopen(((char*)(p)),"wb"))
#define basic_io_binary_file_write_append(p) (fopen(((char*)(p)),"ab"))
#define basic_io_fclose(p) (fclose((FILE*)(p)))
#define basic_io_flush(p) (fflush((FILE*)(p)))
#define basic_io_getc(f) (getc(((FILE*)(f))))
#define basic_io_putc(b, f) (putc((b),((FILE*)(f))))
#define basic_io_fread(b, n, f) (fread((void *)(b),(size_t)(1), (size_t)(n),(FILE*)(f)))
#define basic_io_fwrite(b, n, f) (fwrite((void *)(b),(size_t)(1), (size_t)(n),(FILE*)(f)))
#define basic_io_feof(f) (feof(((FILE*)(f))))
#define basic_io_rename(o, n) (rename(((char*)(o)),((char*)(n))))
#define basic_io_remove(f) (remove(((char*)(f))))

#if defined __USE_POSIX || defined __unix__ || defined _POSIX_C_SOURCE
#  define basic_io_read_stdin(b, s) (read(STDIN_FILENO, b, s))
#else
  extern int basic_io_read_stdin(char *buffer, int size);
#endif

/*
-- This file is  free  software, which  comes  along  with  SmartEiffel. This
-- software  is  distributed  in the hope that it will be useful, but WITHOUT
-- ANY  WARRANTY;  without  even  the  implied warranty of MERCHANTABILITY or
-- FITNESS  FOR A PARTICULAR PURPOSE. You can modify it as you want, provided
-- this header is kept unaltered, and a notification of the changes is added.
-- You  are  allowed  to  redistribute  it and sell it, alone or as a part of
-- another product.
--       Copyright (C) 1994-2002 LORIA - INRIA - U.H.P. Nancy 1 - FRANCE
--          Dominique COLNET and Suzanne COLLIN - SmartEiffel@loria.fr
--                       http://SmartEiffel.loria.fr
--
*/
/*
  This file (SmartEiffel/sys/runtime/basic_sprintf.h) is automatically
  included when the external "SmartEiffel" basic_sprintf feature is used.
*/

#define basic_sprintf_pointer(buffer, pointer) sprintf((char*)(buffer),"%p",pointer)

void basic_sprintf_double(EIF_CHARACTER* b, int f, double d);
extern T0*oBC8string_buffer;
/*POINTER*/
void r8append_in(T8 C,T0* a1);
/*BOOLEAN*/
T6 r6_ix_and(T6 C,T6 a1);
/*BOOLEAN*/
T6 r6_px_not(T6 C);
/*BOOLEAN*/
T6 r6_ix_or(T6 C,T6 a1);
/*CHARACTER*/
T6 r3is_digit(T3 C);
/*CHARACTER*/
T6 r3is_separator(T3 C);
/*CHARACTER*/
T6 r3_ix_6061(T3 C,T3 a1);
/*CHARACTER*/
T1 r3value(T3 C);
/*CHARACTER*/
T1 r3decimal_value(T3 C);
/*CHARACTER*/
T3 r3to_upper(T3 C);
/*CHARACTER*/
T6 r3_ix_6261(T3 C,T3 a1);
/*CHARACTER*/
T3 r3to_lower(T3 C);
/*CHARACTER*/
T6 r3_ix_60(T3 C,T3 a1);
/*CHARACTER*/
T6 r3_ix_62(T3 C,T3 a1);
/*INTEGER*/
T0* r2out(T2 C);
/*INTEGER*/
T2 r2max(T2 C,T2 a1);
/*INTEGER*/
T2 r2min(T2 C,T2 a1);
/*INTEGER*/
T2 r2hash_code(T2 C);
/*INTEGER*/
void r2append_in(T2 C,T0* a1);
extern T0*oBC20tagged_out_memory;
/*INTEGER_64*/
T3 r11digit(T11 C);
/*NATIVE_ARRAY[PR_TOKEN]*/
T135 r135realloc(T135 C,T2 a1,T2 a2);
/*NATIVE_ARRAY[PR_TOKEN]*/
void r135set_all_with(T135 C,T0* a1,T2 a2);
/*NATIVE_ARRAY[PR_TOKEN]*/
void r135clear(T135 C,T2 a1,T2 a2);
/*NATIVE_ARRAY[PR_TOKEN]*/
void r135copy_from(T135 C,T135 a1,T2 a2);
/*NATIVE_ARRAY[DS_ARRAYED_LIST[PR_VARIABLE]]*/
void r465clear(T465 C,T2 a1,T2 a2);
/*NATIVE_ARRAY[PR_POSITION]*/
T282 r282realloc(T282 C,T2 a1,T2 a2);
/*NATIVE_ARRAY[PR_POSITION]*/
void r282clear(T282 C,T2 a1,T2 a2);
/*NATIVE_ARRAY[PR_POSITION]*/
void r282copy_from(T282 C,T282 a1,T2 a2);
/*NATIVE_ARRAY[PR_TRANSITION]*/
void r224set_all_with(T224 C,T0* a1,T2 a2);
/*NATIVE_ARRAY[PR_ERROR_ACTION]*/
T297 r297realloc(T297 C,T2 a1,T2 a2);
/*NATIVE_ARRAY[PR_ERROR_ACTION]*/
void r297clear(T297 C,T2 a1,T2 a2);
/*NATIVE_ARRAY[PR_ERROR_ACTION]*/
void r297copy_from(T297 C,T297 a1,T2 a2);
/*NATIVE_ARRAY[INTEGER_16]*/
T616 r616realloc(T616 C,T2 a1,T2 a2);
/*NATIVE_ARRAY[INTEGER_16]*/
void r616move(T616 C,T2 a1,T2 a2,T2 a3);
/*NATIVE_ARRAY[INTEGER_16]*/
void r616set_all_with(T616 C,T10 a1,T2 a2);
/*NATIVE_ARRAY[INTEGER_16]*/
void r616clear(T616 C,T2 a1,T2 a2);
/*NATIVE_ARRAY[INTEGER_16]*/
void r616copy_from(T616 C,T616 a1,T2 a2);
/*NATIVE_ARRAY[DS_NESTED_LIST[PR_RULE]]*/
T429 r429realloc(T429 C,T2 a1,T2 a2);
/*NATIVE_ARRAY[DS_NESTED_LIST[PR_RULE]]*/
void r429clear(T429 C,T2 a1,T2 a2);
/*NATIVE_ARRAY[DS_NESTED_LIST[PR_RULE]]*/
void r429copy_from(T429 C,T429 a1,T2 a2);
/*NATIVE_ARRAY[STRING]*/
T143 r143realloc(T143 C,T2 a1,T2 a2);
/*NATIVE_ARRAY[STRING]*/
void r143set_all_with(T143 C,T0* a1,T2 a2);
/*NATIVE_ARRAY[STRING]*/
void r143clear(T143 C,T2 a1,T2 a2);
/*NATIVE_ARRAY[STRING]*/
void r143copy_from(T143 C,T143 a1,T2 a2);
/*NATIVE_ARRAY[PR_RULE]*/
void r93clear_all(T93 C,T2 a1);
/*NATIVE_ARRAY[PR_RULE]*/
T93 r93realloc(T93 C,T2 a1,T2 a2);
/*NATIVE_ARRAY[PR_RULE]*/
T6 r93fast_memcmp(T93 C,T93 a1,T2 a2);
/*NATIVE_ARRAY[PR_RULE]*/
void r93clear(T93 C,T2 a1,T2 a2);
/*NATIVE_ARRAY[PR_RULE]*/
void r93copy_from(T93 C,T93 a1,T2 a2);
/*NATIVE_ARRAY[PR_REDUCTION]*/
T252 r252realloc(T252 C,T2 a1,T2 a2);
/*NATIVE_ARRAY[PR_REDUCTION]*/
void r252clear(T252 C,T2 a1,T2 a2);
/*NATIVE_ARRAY[PR_REDUCTION]*/
void r252copy_from(T252 C,T252 a1,T2 a2);
/*NATIVE_ARRAY[PR_SYMBOL]*/
T286 r286realloc(T286 C,T2 a1,T2 a2);
/*NATIVE_ARRAY[PR_SYMBOL]*/
void r286clear(T286 C,T2 a1,T2 a2);
/*NATIVE_ARRAY[PR_SYMBOL]*/
void r286copy_from(T286 C,T286 a1,T2 a2);
/*NATIVE_ARRAY[DS_ARRAYED_LIST[PR_STATE]]*/
T393 r393realloc(T393 C,T2 a1,T2 a2);
/*NATIVE_ARRAY[DS_ARRAYED_LIST[PR_STATE]]*/
void r393clear(T393 C,T2 a1,T2 a2);
/*NATIVE_ARRAY[DS_ARRAYED_LIST[PR_STATE]]*/
void r393copy_from(T393 C,T393 a1,T2 a2);
/*NATIVE_ARRAY[CHARACTER]*/
void r9copy_slice(T9 C,T2 a1,T9 a2,T2 a3,T2 a4);
/*NATIVE_ARRAY[CHARACTER]*/
T9 r9realloc(T9 C,T2 a1,T2 a2);
/*NATIVE_ARRAY[CHARACTER]*/
void r9set_all_with(T9 C,T3 a1,T2 a2);
/*NATIVE_ARRAY[CHARACTER]*/
T6 r9fast_memcmp(T9 C,T9 a1,T2 a2);
/*NATIVE_ARRAY[CHARACTER]*/
void r9copy_at(T9 C,T2 a1,T9 a2,T2 a3);
/*NATIVE_ARRAY[CHARACTER]*/
void r9clear(T9 C,T2 a1,T2 a2);
/*NATIVE_ARRAY[CHARACTER]*/
void r9copy_from(T9 C,T9 a1,T2 a2);
/*NATIVE_ARRAY[PR_STATE]*/
T84 r84realloc(T84 C,T2 a1,T2 a2);
/*NATIVE_ARRAY[PR_STATE]*/
void r84set_all_with(T84 C,T0* a1,T2 a2);
/*NATIVE_ARRAY[PR_STATE]*/
void r84clear(T84 C,T2 a1,T2 a2);
/*NATIVE_ARRAY[PR_STATE]*/
void r84copy_from(T84 C,T84 a1,T2 a2);
/*NATIVE_ARRAY[INTEGER_8]*/
T612 r612realloc(T612 C,T2 a1,T2 a2);
/*NATIVE_ARRAY[INTEGER_8]*/
void r612move(T612 C,T2 a1,T2 a2,T2 a3);
/*NATIVE_ARRAY[INTEGER_8]*/
void r612set_all_with(T612 C,T1 a1,T2 a2);
/*NATIVE_ARRAY[INTEGER_8]*/
void r612clear(T612 C,T2 a1,T2 a2);
/*NATIVE_ARRAY[INTEGER_8]*/
void r612copy_from(T612 C,T612 a1,T2 a2);
/*NATIVE_ARRAY[PR_VARIABLE]*/
void r204clear_all(T204 C,T2 a1);
/*NATIVE_ARRAY[PR_VARIABLE]*/
T204 r204realloc(T204 C,T2 a1,T2 a2);
/*NATIVE_ARRAY[PR_VARIABLE]*/
T6 r204fast_memcmp(T204 C,T204 a1,T2 a2);
/*NATIVE_ARRAY[PR_VARIABLE]*/
void r204clear(T204 C,T2 a1,T2 a2);
/*NATIVE_ARRAY[PR_VARIABLE]*/
void r204copy_from(T204 C,T204 a1,T2 a2);
/*NATIVE_ARRAY[DS_NESTED_LIST[PR_TOKEN]]*/
T372 r372realloc(T372 C,T2 a1,T2 a2);
/*NATIVE_ARRAY[DS_NESTED_LIST[PR_TOKEN]]*/
void r372clear(T372 C,T2 a1,T2 a2);
/*NATIVE_ARRAY[DS_NESTED_LIST[PR_TOKEN]]*/
void r372copy_from(T372 C,T372 a1,T2 a2);
/*NATIVE_ARRAY[PR_PORTION]*/
void r185clear(T185 C,T2 a1,T2 a2);
/*NATIVE_ARRAY[INTEGER]*/
void r76clear_all(T76 C,T2 a1);
/*NATIVE_ARRAY[INTEGER]*/
T76 r76realloc(T76 C,T2 a1,T2 a2);
/*NATIVE_ARRAY[INTEGER]*/
void r76move(T76 C,T2 a1,T2 a2,T2 a3);
/*NATIVE_ARRAY[INTEGER]*/
T6 r76fast_memcmp(T76 C,T76 a1,T2 a2);
/*NATIVE_ARRAY[INTEGER]*/
void r76set_all_with(T76 C,T2 a1,T2 a2);
/*NATIVE_ARRAY[INTEGER]*/
void r76clear(T76 C,T2 a1,T2 a2);
/*NATIVE_ARRAY[INTEGER]*/
void r76copy_from(T76 C,T76 a1,T2 a2);
/*NATIVE_ARRAY[ANY]*/
T504 r504realloc(T504 C,T2 a1,T2 a2);
/*NATIVE_ARRAY[ANY]*/
void r504set_all_with(T504 C,T0* a1,T2 a2);
/*NATIVE_ARRAY[ANY]*/
void r504clear(T504 C,T2 a1,T2 a2);
/*NATIVE_ARRAY[ANY]*/
void r504copy_from(T504 C,T504 a1,T2 a2);
/*NATIVE_ARRAY[PR_TYPE]*/
void r72clear_all(T72 C,T2 a1);
/*NATIVE_ARRAY[PR_TYPE]*/
T72 r72realloc(T72 C,T2 a1,T2 a2);
/*NATIVE_ARRAY[PR_TYPE]*/
T6 r72fast_memcmp(T72 C,T72 a1,T2 a2);
/*NATIVE_ARRAY[PR_TYPE]*/
void r72clear(T72 C,T2 a1,T2 a2);
/*NATIVE_ARRAY[PR_TYPE]*/
void r72copy_from(T72 C,T72 a1,T2 a2);
/*STRING*/
void r7copy(T7* C,T0* a1);
/*STRING*/
T0* r7substring(T7* C,T2 a1,T2 a2);
/*STRING*/
T2 r7item_code(T7* C,T2 a1);
/*STRING*/
T6 r7is_equal(T7* C,T0* a1);
/*STRING*/
T3 r7item(T7* C,T2 a1);
/*STRING*/
T6 r7valid_index(T7* C,T2 a1);
/*STRING*/
void r7append(T7* C,T0* a1);
/*STRING*/
T6 r7se_assigned_from(T0* a1);
/*STRING*/
void r7make_from_string(T7* C,T0* a1);
/*STRING*/
T6 r7same_type(T7* C,T0* a1);
/*STRING*/
void r7remove_tail(T7* C,T2 a1);
/*STRING*/
void r7make(T7* C,T2 a1);
/*STRING*/
void r7append_string(T7* C,T0* a1);
/*STRING*/
void r7make_filled(T7* C,T3 a1,T2 a2);
/*STRING*/
T0* r7string(T7* C);
/*STRING*/
void r7extend(T7* C,T3 a1);
/*STRING*/
T2 r7hash_code(T7* C);
/*STRING*/
T6 r7conforms_to(T7* C,T0* a1);
/*STRING*/
T2 r7to_integer(T7* C);
/*STRING*/
void r7append_character(T7* C,T3 a1);
/*STRING*/
void r7resize(T7* C,T2 a1);
/*STRING*/
void r7to_upper(T7* C);
/*STRING*/
T8 r7to_external(T7* C);
/*STRING*/
void r7to_lower(T7* C);
/*STRING*/
T0* r7twin(T7* C);
/*STRING*/
T0* r7_ix_43(T7* C,T0* a1);
/*STRING*/
void r7swap(T7* C,T2 a1,T2 a2);
/*FIXED_ARRAY[PR_VARIABLE]*/
void r202copy(T202* C,T0* a1);
/*FIXED_ARRAY[PR_VARIABLE]*/
T6 r202is_equal(T202* C,T0* a1);
/*FIXED_ARRAY[PR_VARIABLE]*/
T6 r202valid_index(T202* C,T2 a1);
/*FIXED_ARRAY[PR_VARIABLE]*/
void r202make(T202* C,T2 a1);
/*FIXED_ARRAY[PR_VARIABLE]*/
void r202resize(T202* C,T2 a1);
/*FIXED_ARRAY[PR_VARIABLE]*/
T0* r202twin(T202* C);
/*FIXED_ARRAY[PR_PORTION]*/
T6 r183valid_index(T183* C,T2 a1);
/*FIXED_ARRAY[PR_PORTION]*/
void r183make(T183* C,T2 a1);
/*ARRAY[INTEGER]*/
void r75clear_all(T75* C);
/*ARRAY[INTEGER]*/
T2 r75count(T75* C);
/*ARRAY[INTEGER]*/
T2 r75item(T75* C,T2 a1);
/*ARRAY[INTEGER]*/
T6 r75valid_index(T75* C,T2 a1);
/*ARRAY[INTEGER]*/
void r75make(T75* C,T2 a1,T2 a2);
/*ARRAY[INTEGER]*/
void r75resize(T75* C,T2 a1,T2 a2);
/*ARRAY[PR_TOKEN]*/
T0* r520item(T520* C,T2 a1);
/*ARRAY[PR_TOKEN]*/
T6 r520valid_index(T520* C,T2 a1);
/*ARRAY[PR_TOKEN]*/
void r520make(T520* C,T2 a1,T2 a2);
/*ARRAY[PR_TRANSITION]*/
T0* r211item(T211* C,T2 a1);
/*ARRAY[PR_TRANSITION]*/
T6 r211valid_index(T211* C,T2 a1);
/*ARRAY[PR_TRANSITION]*/
void r211make(T211* C,T2 a1,T2 a2);
/*FIXED_ARRAY[DS_ARRAYED_LIST[PR_STATE]]*/
T6 r391valid_index(T391* C,T2 a1);
/*FIXED_ARRAY[DS_ARRAYED_LIST[PR_STATE]]*/
void r391make(T391* C,T2 a1);
/*FIXED_ARRAY[DS_ARRAYED_LIST[PR_STATE]]*/
void r391resize(T391* C,T2 a1);
/*FIXED_ARRAY[PR_TOKEN]*/
T6 r133valid_index(T133* C,T2 a1);
/*FIXED_ARRAY[PR_TOKEN]*/
void r133make(T133* C,T2 a1);
/*FIXED_ARRAY[PR_TOKEN]*/
void r133resize(T133* C,T2 a1);
/*FIXED_ARRAY[PR_POSITION]*/
T6 r280valid_index(T280* C,T2 a1);
/*FIXED_ARRAY[PR_POSITION]*/
void r280make(T280* C,T2 a1);
/*FIXED_ARRAY[PR_POSITION]*/
void r280resize(T280* C,T2 a1);
/*FIXED_ARRAY[PR_REDUCTION]*/
T6 r250valid_index(T250* C,T2 a1);
/*FIXED_ARRAY[PR_REDUCTION]*/
void r250make(T250* C,T2 a1);
/*FIXED_ARRAY[PR_REDUCTION]*/
void r250resize(T250* C,T2 a1);
/*FIXED_ARRAY[PR_RULE]*/
void r91copy(T91* C,T0* a1);
/*FIXED_ARRAY[PR_RULE]*/
T6 r91is_equal(T91* C,T0* a1);
/*FIXED_ARRAY[PR_RULE]*/
T6 r91valid_index(T91* C,T2 a1);
/*FIXED_ARRAY[PR_RULE]*/
void r91make(T91* C,T2 a1);
/*FIXED_ARRAY[PR_RULE]*/
void r91resize(T91* C,T2 a1);
/*FIXED_ARRAY[PR_RULE]*/
T0* r91twin(T91* C);
/*ARRAY[ARRAY[INTEGER]]*/
T0* r628item(T628* C,T2 a1);
/*FIXED_ARRAY[STRING]*/
T6 r141valid_index(T141* C,T2 a1);
/*FIXED_ARRAY[STRING]*/
void r141make(T141* C,T2 a1);
/*FIXED_ARRAY[STRING]*/
void r141resize(T141* C,T2 a1);
/*ARRAY[INTEGER_8]*/
T2 r610count(T610* C);
/*ARRAY[INTEGER_8]*/
T1 r610item(T610* C,T2 a1);
/*ARRAY[INTEGER_8]*/
T6 r610valid_index(T610* C,T2 a1);
/*ARRAY[INTEGER_8]*/
void r610make(T610* C,T2 a1,T2 a2);
/*ARRAY[INTEGER_8]*/
void r610resize(T610* C,T2 a1,T2 a2);
/*ARRAY[PR_STATE]*/
T0* r381item(T381* C,T2 a1);
/*ARRAY[PR_STATE]*/
T6 r381valid_index(T381* C,T2 a1);
/*ARRAY[PR_STATE]*/
void r381make(T381* C,T2 a1,T2 a2);
/*FIXED_ARRAY[PR_STATE]*/
T6 r82valid_index(T82* C,T2 a1);
/*FIXED_ARRAY[PR_STATE]*/
void r82make(T82* C,T2 a1);
/*FIXED_ARRAY[PR_STATE]*/
void r82resize(T82* C,T2 a1);
/*FIXED_ARRAY[DS_ARRAYED_LIST[PR_VARIABLE]]*/
T6 r462valid_index(T462* C,T2 a1);
/*FIXED_ARRAY[DS_ARRAYED_LIST[PR_VARIABLE]]*/
void r462make(T462* C,T2 a1);
/*FIXED_ARRAY[PR_ERROR_ACTION]*/
T6 r295valid_index(T295* C,T2 a1);
/*FIXED_ARRAY[PR_ERROR_ACTION]*/
void r295make(T295* C,T2 a1);
/*FIXED_ARRAY[PR_ERROR_ACTION]*/
void r295resize(T295* C,T2 a1);
/*FIXED_ARRAY[DS_NESTED_LIST[PR_TOKEN]]*/
T6 r368valid_index(T368* C,T2 a1);
/*FIXED_ARRAY[DS_NESTED_LIST[PR_TOKEN]]*/
void r368make(T368* C,T2 a1);
/*FIXED_ARRAY[DS_NESTED_LIST[PR_TOKEN]]*/
void r368resize(T368* C,T2 a1);
/*FIXED_ARRAY[INTEGER]*/
void r121copy(T121* C,T0* a1);
/*FIXED_ARRAY[INTEGER]*/
T6 r121is_equal(T121* C,T0* a1);
/*FIXED_ARRAY[INTEGER]*/
T6 r121valid_index(T121* C,T2 a1);
/*FIXED_ARRAY[INTEGER]*/
void r121make(T121* C,T2 a1);
/*FIXED_ARRAY[INTEGER]*/
void r121resize(T121* C,T2 a1);
/*FIXED_ARRAY[INTEGER]*/
T0* r121twin(T121* C);
/*FIXED_ARRAY[INTEGER]*/
void r121with_capacity(T121* C,T2 a1);
/*FIXED_ARRAY[INTEGER]*/
void r121from_collection(T121* C,T0* a1);
/*FIXED_ARRAY[PR_TYPE]*/
void r71copy(T71* C,T0* a1);
/*FIXED_ARRAY[PR_TYPE]*/
T6 r71is_equal(T71* C,T0* a1);
/*FIXED_ARRAY[PR_TYPE]*/
T6 r71valid_index(T71* C,T2 a1);
/*FIXED_ARRAY[PR_TYPE]*/
void r71make(T71* C,T2 a1);
/*FIXED_ARRAY[PR_TYPE]*/
void r71resize(T71* C,T2 a1);
/*FIXED_ARRAY[PR_TYPE]*/
T0* r71twin(T71* C);
/*ARRAY[STRING]*/
T0* r166item(T166* C,T2 a1);
/*ARRAY[STRING]*/
T6 r166valid_index(T166* C,T2 a1);
/*ARRAY[STRING]*/
void r166make(T166* C,T2 a1,T2 a2);
/*FIXED_ARRAY[ANY]*/
T6 r502valid_index(T502* C,T2 a1);
/*FIXED_ARRAY[ANY]*/
void r502make(T502* C,T2 a1);
/*FIXED_ARRAY[ANY]*/
void r502resize(T502* C,T2 a1);
/*ARRAY[INTEGER_16]*/
T2 r614count(T614* C);
/*ARRAY[INTEGER_16]*/
T10 r614item(T614* C,T2 a1);
/*ARRAY[INTEGER_16]*/
T6 r614valid_index(T614* C,T2 a1);
/*ARRAY[INTEGER_16]*/
void r614make(T614* C,T2 a1,T2 a2);
/*ARRAY[INTEGER_16]*/
void r614resize(T614* C,T2 a1,T2 a2);
/*FIXED_ARRAY[DS_NESTED_LIST[PR_RULE]]*/
T6 r426valid_index(T426* C,T2 a1);
/*FIXED_ARRAY[DS_NESTED_LIST[PR_RULE]]*/
void r426make(T426* C,T2 a1);
/*FIXED_ARRAY[DS_NESTED_LIST[PR_RULE]]*/
void r426resize(T426* C,T2 a1);
/*FIXED_ARRAY[PR_SYMBOL]*/
T6 r284valid_index(T284* C,T2 a1);
/*FIXED_ARRAY[PR_SYMBOL]*/
void r284make(T284* C,T2 a1);
/*FIXED_ARRAY[PR_SYMBOL]*/
void r284resize(T284* C,T2 a1);
/*DS_LINKED_LIST[PR_VARIABLE]*/
T6 r432valid_cursor(T432* C,T0* a1);
/*DS_LINKED_LIST[PR_VARIABLE]*/
T0* r432cursor_item(T0* a1);
/*DS_LINKED_LIST[PR_VARIABLE]*/
void r432remove_traversing_cursor(T432* C,T0* a1);
/*DS_LINKED_LIST[PR_VARIABLE]*/
void r432cursor_go_after(T432* C,T0* a1);
/*DS_LINKED_LIST[PR_VARIABLE]*/
void r432add_traversing_cursor(T432* C,T0* a1);
/*DS_LINKED_LIST[PR_VARIABLE]*/
void r432make(T432* C);
/*DS_LINKED_LIST[PR_VARIABLE]*/
T6 r432cursor_after(T0* a1);
/*DS_LINKED_LIST[PR_VARIABLE]*/
T6 r432has(T432* C,T0* a1);
/*DS_LINKED_LIST[PR_VARIABLE]*/
void r432cursor_search_forth(T432* C,T0* a1,T0* a2);
/*DS_LINKED_LIST[PR_VARIABLE]*/
void r432cursor_forth(T432* C,T0* a1);
/*DS_LINKED_LIST[PR_VARIABLE]*/
void r432cursor_start(T432* C,T0* a1);
/*DS_LINKED_LIST[PR_VARIABLE]*/
void r432force_last(T432* C,T0* a1);
/*DS_LINKED_LIST[PR_VARIABLE]*/
T0* r432new_cursor(T432* C);
/*DS_LINKED_LIST[PR_VARIABLE]*/
T6 r432cursor_off(T0* a1);
/*DS_ARRAYED_LIST[STRING]*/
T2 r139new_capacity(T2 a1);
/*DS_ARRAYED_LIST[STRING]*/
T6 r139extendible(T139* C,T2 a1);
/*DS_ARRAYED_LIST[STRING]*/
void r139make(T139* C,T2 a1);
/*DS_ARRAYED_LIST[STRING]*/
void r139resize(T139* C,T2 a1);
/*DS_ARRAYED_LIST[STRING]*/
void r139force_last(T139* C,T0* a1);
/*DS_ARRAYED_LIST[STRING]*/
T0* r139new_cursor(T139* C);
/*DS_ARRAYED_STACK[PR_STATE]*/
void r347clear_items(T347* C,T2 a1,T2 a2);
/*DS_ARRAYED_STACK[PR_STATE]*/
T6 r347extendible(T347* C,T2 a1);
/*DS_ARRAYED_STACK[PR_STATE]*/
void r347wipe_out(T347* C);
/*DS_ARRAYED_STACK[PR_STATE]*/
void r347put(T347* C,T0* a1);
/*DS_ARRAYED_STACK[PR_STATE]*/
T0* r347item(T347* C);
/*DS_ARRAYED_STACK[PR_STATE]*/
void r347make(T347* C,T2 a1);
/*DS_ARRAYED_STACK[PR_STATE]*/
void r347remove(T347* C);
/*DS_ARRAYED_STACK[DS_NESTED_LIST[PR_TOKEN]]*/
T2 r361new_capacity(T2 a1);
/*DS_ARRAYED_STACK[DS_NESTED_LIST[PR_TOKEN]]*/
T6 r361extendible(T361* C,T2 a1);
/*DS_ARRAYED_STACK[DS_NESTED_LIST[PR_TOKEN]]*/
void r361force(T361* C,T0* a1);
/*DS_ARRAYED_STACK[DS_NESTED_LIST[PR_TOKEN]]*/
T0* r361item(T361* C);
/*DS_ARRAYED_STACK[DS_NESTED_LIST[PR_TOKEN]]*/
void r361make(T361* C,T2 a1);
/*DS_ARRAYED_STACK[DS_NESTED_LIST[PR_TOKEN]]*/
void r361remove(T361* C);
/*DS_ARRAYED_STACK[DS_NESTED_LIST[PR_TOKEN]]*/
T6 r361has(T361* C,T0* a1);
/*DS_ARRAYED_STACK[DS_NESTED_LIST[PR_TOKEN]]*/
void r361resize(T361* C,T2 a1);
/*DS_LINKED_LIST[PR_TRANSITION]*/
T6 r213valid_cursor(T213* C,T0* a1);
/*DS_LINKED_LIST[PR_TRANSITION]*/
T0* r213cursor_item(T0* a1);
/*DS_LINKED_LIST[PR_TRANSITION]*/
void r213remove_traversing_cursor(T213* C,T0* a1);
/*DS_LINKED_LIST[PR_TRANSITION]*/
void r213cursor_go_after(T213* C,T0* a1);
/*DS_LINKED_LIST[PR_TRANSITION]*/
void r213add_traversing_cursor(T213* C,T0* a1);
/*DS_LINKED_LIST[PR_TRANSITION]*/
void r213make(T213* C);
/*DS_LINKED_LIST[PR_TRANSITION]*/
T6 r213cursor_after(T0* a1);
/*DS_LINKED_LIST[PR_TRANSITION]*/
T6 r213has(T213* C,T0* a1);
/*DS_LINKED_LIST[PR_TRANSITION]*/
void r213cursor_search_forth(T213* C,T0* a1,T0* a2);
/*DS_LINKED_LIST[PR_TRANSITION]*/
void r213cursor_forth(T213* C,T0* a1);
/*DS_LINKED_LIST[PR_TRANSITION]*/
void r213cursor_start(T213* C,T0* a1);
/*DS_LINKED_LIST[PR_TRANSITION]*/
void r213force_last(T213* C,T0* a1);
/*DS_LINKED_LIST[PR_TRANSITION]*/
T0* r213new_cursor(T213* C);
/*DS_LINKED_LIST[PR_TRANSITION]*/
T6 r213cursor_off(T0* a1);
/*DS_LINKED_LIST_CURSOR[PR_TOKEN]*/
void r321set(T321* C,T0* a1,T6 a2,T6 a3);
/*DS_LINKED_LIST_CURSOR[PR_TOKEN]*/
void r321make(T321* C,T0* a1);
/*DS_LINKED_LIST_CURSOR[PR_TOKEN]*/
void r321set_after(T321* C);
/*DS_HASH_TABLE[PR_TYPE,STRING]*/
T2 r539new_capacity(T2 a1);
/*DS_HASH_TABLE[PR_TYPE,STRING]*/
void r539force(T539* C,T0* a1,T0* a2);
/*DS_HASH_TABLE[PR_TYPE,STRING]*/
void r539make_clashes(T539* C,T2 a1);
/*DS_HASH_TABLE[PR_TYPE,STRING]*/
void r539search_position(T539* C,T0* a1);
/*DS_HASH_TABLE[PR_TYPE,STRING]*/
void r539keys_resize(T539* C,T2 a1);
/*DS_HASH_TABLE[PR_TYPE,STRING]*/
T0* r539item(T539* C,T0* a1);
/*DS_HASH_TABLE[PR_TYPE,STRING]*/
void r539make_items(T539* C,T2 a1);
/*DS_HASH_TABLE[PR_TYPE,STRING]*/
void r539make(T539* C,T2 a1);
/*DS_HASH_TABLE[PR_TYPE,STRING]*/
T6 r539has(T539* C,T0* a1);
/*DS_HASH_TABLE[PR_TYPE,STRING]*/
void r539make_keys(T539* C,T2 a1);
/*DS_HASH_TABLE[PR_TYPE,STRING]*/
T2 r539hash_position(T539* C,T0* a1);
extern T0*oBC103fixed_integer_array_;
/*DS_HASH_TABLE[PR_TYPE,STRING]*/
void r539items_resize(T539* C,T2 a1);
/*DS_HASH_TABLE[PR_TYPE,STRING]*/
void r539make_with_equality_testers(T539* C,T2 a1,T0* a2,T0* a3);
/*DS_HASH_TABLE[PR_TYPE,STRING]*/
void r539resize(T539* C,T2 a1);
/*DS_HASH_TABLE[PR_TYPE,STRING]*/
void r539clashes_resize(T539* C,T2 a1);
/*DS_HASH_TABLE[PR_TYPE,STRING]*/
void r539slots_resize(T539* C,T2 a1);
/*DS_HASH_TABLE[PR_TYPE,STRING]*/
T0* r539new_cursor(T539* C);
/*DS_HASH_TABLE[PR_TYPE,STRING]*/
void r539make_slots(T539* C,T2 a1);
/*DS_HASH_TABLE[PR_TYPE,STRING]*/
T2 r539new_modulus(T2 a1);
/*DS_ARRAYED_LIST_CURSOR[PR_TOKEN]*/
T6 r275valid_position(T275* C,T2 a1);
/*DS_ARRAYED_LIST_CURSOR[PR_TOKEN]*/
T0* r275item(T275* C);
/*DS_ARRAYED_LIST_CURSOR[PR_TOKEN]*/
T6 r275after(T275* C);
/*DS_ARRAYED_LIST_CURSOR[PR_TOKEN]*/
T2 r275index(T275* C);
/*DS_ARRAYED_LIST_CURSOR[PR_TOKEN]*/
T6 r275off(T275* C);
/*DS_ARRAYED_LIST[PR_PORTION]*/
T6 r177extendible(T177* C,T2 a1);
/*DS_ARRAYED_LIST[PR_PORTION]*/
void r177make(T177* C,T2 a1);
/*DS_ARRAYED_LIST[PR_PORTION]*/
T0* r177new_cursor(T177* C);
/*DS_ARRAYED_LIST[PR_PORTION]*/
void r177put_last(T177* C,T0* a1);
/*DS_ARRAYED_LIST[PR_TOKEN]*/
T2 r131new_capacity(T2 a1);
/*DS_ARRAYED_LIST[PR_TOKEN]*/
void r131clear_items(T131* C,T2 a1,T2 a2);
/*DS_ARRAYED_LIST[PR_TOKEN]*/
T6 r131valid_cursor(T131* C,T0* a1);
/*DS_ARRAYED_LIST[PR_TOKEN]*/
T6 r131extendible(T131* C,T2 a1);
/*DS_ARRAYED_LIST[PR_TOKEN]*/
void r131wipe_out(T131* C);
/*DS_ARRAYED_LIST[PR_TOKEN]*/
T0* r131cursor_item(T131* C,T0* a1);
/*DS_ARRAYED_LIST[PR_TOKEN]*/
void r131remove_traversing_cursor(T131* C,T0* a1);
/*DS_ARRAYED_LIST[PR_TOKEN]*/
void r131cursor_go_after(T131* C,T0* a1);
/*DS_ARRAYED_LIST[PR_TOKEN]*/
void r131move_all_cursors_after(T131* C);
/*DS_ARRAYED_LIST[PR_TOKEN]*/
void r131add_traversing_cursor(T131* C,T0* a1);
/*DS_ARRAYED_LIST[PR_TOKEN]*/
void r131move_left(T131* C,T2 a1,T2 a2);
/*DS_ARRAYED_LIST[PR_TOKEN]*/
T6 r131cursor_before(T0* a1);
/*DS_ARRAYED_LIST[PR_TOKEN]*/
void r131make(T131* C,T2 a1);
/*DS_ARRAYED_LIST[PR_TOKEN]*/
void r131remove(T131* C,T2 a1);
/*DS_ARRAYED_LIST[PR_TOKEN]*/
void r131move_cursors_left(T131* C,T2 a1);
/*DS_ARRAYED_LIST[PR_TOKEN]*/
void r131remove_last(T131* C);
/*DS_ARRAYED_LIST[PR_TOKEN]*/
T6 r131cursor_after(T0* a1);
/*DS_ARRAYED_LIST[PR_TOKEN]*/
T6 r131has(T131* C,T0* a1);
/*DS_ARRAYED_LIST[PR_TOKEN]*/
T2 r131cursor_index(T131* C,T0* a1);
/*DS_ARRAYED_LIST[PR_TOKEN]*/
void r131cursor_search_forth(T131* C,T0* a1,T0* a2);
/*DS_ARRAYED_LIST[PR_TOKEN]*/
void r131cursor_forth(T131* C,T0* a1);
/*DS_ARRAYED_LIST[PR_TOKEN]*/
void r131resize(T131* C,T2 a1);
/*DS_ARRAYED_LIST[PR_TOKEN]*/
void r131move_last_cursors_after(T131* C);
/*DS_ARRAYED_LIST[PR_TOKEN]*/
void r131delete(T131* C,T0* a1);
/*DS_ARRAYED_LIST[PR_TOKEN]*/
void r131cursor_start(T131* C,T0* a1);
/*DS_ARRAYED_LIST[PR_TOKEN]*/
void r131force_last(T131* C,T0* a1);
/*DS_ARRAYED_LIST[PR_TOKEN]*/
T0* r131new_cursor(T131* C);
/*DS_ARRAYED_LIST[PR_TOKEN]*/
void r131extend_last(T131* C,T0* a1);
/*DS_ARRAYED_LIST[PR_TOKEN]*/
T6 r131is_full(T131* C);
/*DS_ARRAYED_LIST[PR_TOKEN]*/
void r131put_last(T131* C,T0* a1);
/*DS_ARRAYED_LIST[PR_TOKEN]*/
T6 r131cursor_off(T0* a1);
/*DS_ARRAYED_LIST_CURSOR[DS_ARRAYED_LIST[PR_VARIABLE]]*/
T6 r459valid_position(T459* C,T2 a1);
/*DS_ARRAYED_LIST[PR_VARIABLE]*/
void r178copy(T178* C,T0* a1);
/*DS_ARRAYED_LIST[PR_VARIABLE]*/
T6 r178valid_cursor(T178* C,T0* a1);
/*DS_ARRAYED_LIST[PR_VARIABLE]*/
T6 r178extendible(T178* C,T2 a1);
/*DS_ARRAYED_LIST[PR_VARIABLE]*/
void r178move_cursors_right(T178* C,T2 a1,T2 a2);
/*DS_ARRAYED_LIST[PR_VARIABLE]*/
T0* r178last(T178* C);
/*DS_ARRAYED_LIST[PR_VARIABLE]*/
void r178put(T178* C,T0* a1,T2 a2);
/*DS_ARRAYED_LIST[PR_VARIABLE]*/
T0* r178cursor_item(T178* C,T0* a1);
/*DS_ARRAYED_LIST[PR_VARIABLE]*/
T6 r178is_equal(T178* C,T0* a1);
/*DS_ARRAYED_LIST[PR_VARIABLE]*/
void r178remove_traversing_cursor(T178* C,T0* a1);
/*DS_ARRAYED_LIST[PR_VARIABLE]*/
void r178cursor_go_after(T178* C,T0* a1);
/*DS_ARRAYED_LIST[PR_VARIABLE]*/
void r178move_all_cursors_after(T178* C);
/*DS_ARRAYED_LIST[PR_VARIABLE]*/
void r178add_traversing_cursor(T178* C,T0* a1);
/*DS_ARRAYED_LIST[PR_VARIABLE]*/
T6 r178se_assigned_from(T0* a1);
/*DS_ARRAYED_LIST[PR_VARIABLE]*/
T0* r178clone(T0* a1);
/*DS_ARRAYED_LIST[PR_VARIABLE]*/
void r178move_left(T178* C,T2 a1,T2 a2);
/*DS_ARRAYED_LIST[PR_VARIABLE]*/
T6 r178cursor_before(T0* a1);
/*DS_ARRAYED_LIST[PR_VARIABLE]*/
T6 r178same_type(T178* C,T0* a1);
/*DS_ARRAYED_LIST[PR_VARIABLE]*/
void r178make(T178* C,T2 a1);
/*DS_ARRAYED_LIST[PR_VARIABLE]*/
void r178remove(T178* C,T2 a1);
/*DS_ARRAYED_LIST[PR_VARIABLE]*/
void r178move_cursors_left(T178* C,T2 a1);
/*DS_ARRAYED_LIST[PR_VARIABLE]*/
void r178remove_last(T178* C);
/*DS_ARRAYED_LIST[PR_VARIABLE]*/
T6 r178cursor_after(T0* a1);
/*DS_ARRAYED_LIST[PR_VARIABLE]*/
T6 r178conforms_to(T178* C,T0* a1);
/*DS_ARRAYED_LIST[PR_VARIABLE]*/
T6 r178has(T178* C,T0* a1);
/*DS_ARRAYED_LIST[PR_VARIABLE]*/
void r178move_right(T178* C,T2 a1,T2 a2);
/*DS_ARRAYED_LIST[PR_VARIABLE]*/
T2 r178cursor_index(T178* C,T0* a1);
/*DS_ARRAYED_LIST[PR_VARIABLE]*/
void r178cursor_search_forth(T178* C,T0* a1,T0* a2);
/*DS_ARRAYED_LIST[PR_VARIABLE]*/
void r178cursor_forth(T178* C,T0* a1);
/*DS_ARRAYED_LIST[PR_VARIABLE]*/
void r178resize(T178* C,T2 a1);
/*DS_ARRAYED_LIST[PR_VARIABLE]*/
void r178move_last_cursors_after(T178* C);
/*DS_ARRAYED_LIST[PR_VARIABLE]*/
void r178cursor_start(T178* C,T0* a1);
/*DS_ARRAYED_LIST[PR_VARIABLE]*/
T0* r178twin(T178* C);
/*DS_ARRAYED_LIST[PR_VARIABLE]*/
T0* r178new_cursor(T178* C);
/*DS_ARRAYED_LIST[PR_VARIABLE]*/
T6 r178is_full(T178* C);
/*DS_ARRAYED_LIST[PR_VARIABLE]*/
void r178put_last(T178* C,T0* a1);
/*DS_ARRAYED_LIST[PR_VARIABLE]*/
T6 r178cursor_off(T0* a1);
/*KL_FIXED_ARRAY_ROUTINES[PR_VARIABLE]*/
T0* r474make(T2 a1);
/*KL_FIXED_ARRAY_ROUTINES[PR_VARIABLE]*/
T0* r474resize(T0* a1,T2 a2);
/*KL_EQUALITY_TESTER[STRING]*/
T6 r527test(T0* a1,T0* a2);
/*DS_LINKED_LIST[PR_CONFLICT]*/
T6 r328valid_cursor(T328* C,T0* a1);
/*DS_LINKED_LIST[PR_CONFLICT]*/
T0* r328cursor_item(T0* a1);
/*DS_LINKED_LIST[PR_CONFLICT]*/
void r328remove_traversing_cursor(T328* C,T0* a1);
/*DS_LINKED_LIST[PR_CONFLICT]*/
void r328add_traversing_cursor(T328* C,T0* a1);
/*DS_LINKED_LIST[PR_CONFLICT]*/
void r328make(T328* C);
/*DS_LINKED_LIST[PR_CONFLICT]*/
T6 r328cursor_after(T0* a1);
/*DS_LINKED_LIST[PR_CONFLICT]*/
void r328cursor_forth(T328* C,T0* a1);
/*DS_LINKED_LIST[PR_CONFLICT]*/
void r328cursor_start(T328* C,T0* a1);
/*DS_LINKED_LIST[PR_CONFLICT]*/
void r328force_last(T328* C,T0* a1);
/*DS_LINKED_LIST[PR_CONFLICT]*/
T0* r328new_cursor(T328* C);
/*DS_LINKED_LIST[PR_CONFLICT]*/
T6 r328cursor_off(T0* a1);
/*KL_FIXED_ARRAY_ROUTINES[ANY]*/
T0* r500make(T2 a1);
/*KL_FIXED_ARRAY_ROUTINES[ANY]*/
T0* r500resize(T0* a1,T2 a2);
/*KL_EQUALITY_TESTER[PR_POSITION]*/
T6 r380test(T0* a1,T0* a2);
/*KL_FIXED_ARRAY_ROUTINES[INTEGER]*/
T0* r127to_fixed_array(T0* a1);
/*KL_FIXED_ARRAY_ROUTINES[INTEGER]*/
T0* r127make(T2 a1);
/*KL_FIXED_ARRAY_ROUTINES[INTEGER]*/
T0* r127make_from_array(T0* a1);
/*KL_FIXED_ARRAY_ROUTINES[INTEGER]*/
T0* r127resize(T0* a1,T2 a2);
/*KL_COMPARABLE_COMPARATOR[INTEGER]*/
T6 r214less_than(T2 a1,T2 a2);
/*DS_ARRAYED_STACK[DS_NESTED_LIST[PR_RULE]]*/
T2 r417new_capacity(T2 a1);
/*DS_ARRAYED_STACK[DS_NESTED_LIST[PR_RULE]]*/
T6 r417extendible(T417* C,T2 a1);
/*DS_ARRAYED_STACK[DS_NESTED_LIST[PR_RULE]]*/
void r417force(T417* C,T0* a1);
/*DS_ARRAYED_STACK[DS_NESTED_LIST[PR_RULE]]*/
T0* r417item(T417* C);
/*DS_ARRAYED_STACK[DS_NESTED_LIST[PR_RULE]]*/
void r417make(T417* C,T2 a1);
/*DS_ARRAYED_STACK[DS_NESTED_LIST[PR_RULE]]*/
void r417remove(T417* C);
/*DS_ARRAYED_STACK[DS_NESTED_LIST[PR_RULE]]*/
T6 r417has(T417* C,T0* a1);
/*DS_ARRAYED_STACK[DS_NESTED_LIST[PR_RULE]]*/
void r417resize(T417* C,T2 a1);
/*KL_FIXED_ARRAY_ROUTINES[PR_TYPE]*/
T0* r128make(T2 a1);
/*KL_FIXED_ARRAY_ROUTINES[PR_TYPE]*/
T0* r128resize(T0* a1,T2 a2);
/*DS_ARRAYED_LIST[PR_RULE]*/
void r86copy(T86* C,T0* a1);
/*DS_ARRAYED_LIST[PR_RULE]*/
T6 r86valid_cursor(T86* C,T0* a1);
/*DS_ARRAYED_LIST[PR_RULE]*/
T6 r86extendible(T86* C,T2 a1);
/*DS_ARRAYED_LIST[PR_RULE]*/
T0* r86cursor_item(T86* C,T0* a1);
/*DS_ARRAYED_LIST[PR_RULE]*/
T6 r86is_equal(T86* C,T0* a1);
/*DS_ARRAYED_LIST[PR_RULE]*/
void r86remove_traversing_cursor(T86* C,T0* a1);
/*DS_ARRAYED_LIST[PR_RULE]*/
void r86cursor_go_after(T86* C,T0* a1);
/*DS_ARRAYED_LIST[PR_RULE]*/
void r86move_all_cursors_after(T86* C);
/*DS_ARRAYED_LIST[PR_RULE]*/
void r86add_traversing_cursor(T86* C,T0* a1);
/*DS_ARRAYED_LIST[PR_RULE]*/
T6 r86se_assigned_from(T0* a1);
/*DS_ARRAYED_LIST[PR_RULE]*/
T0* r86clone(T0* a1);
/*DS_ARRAYED_LIST[PR_RULE]*/
void r86move_left(T86* C,T2 a1,T2 a2);
/*DS_ARRAYED_LIST[PR_RULE]*/
T6 r86cursor_before(T0* a1);
/*DS_ARRAYED_LIST[PR_RULE]*/
T6 r86same_type(T86* C,T0* a1);
/*DS_ARRAYED_LIST[PR_RULE]*/
void r86make(T86* C,T2 a1);
/*DS_ARRAYED_LIST[PR_RULE]*/
void r86remove(T86* C,T2 a1);
/*DS_ARRAYED_LIST[PR_RULE]*/
void r86move_cursors_left(T86* C,T2 a1);
/*DS_ARRAYED_LIST[PR_RULE]*/
void r86remove_last(T86* C);
/*DS_ARRAYED_LIST[PR_RULE]*/
T6 r86cursor_after(T0* a1);
/*DS_ARRAYED_LIST[PR_RULE]*/
T6 r86conforms_to(T86* C,T0* a1);
/*DS_ARRAYED_LIST[PR_RULE]*/
T6 r86has(T86* C,T0* a1);
/*DS_ARRAYED_LIST[PR_RULE]*/
T2 r86cursor_index(T86* C,T0* a1);
/*DS_ARRAYED_LIST[PR_RULE]*/
void r86cursor_search_forth(T86* C,T0* a1,T0* a2);
/*DS_ARRAYED_LIST[PR_RULE]*/
void r86cursor_forth(T86* C,T0* a1);
/*DS_ARRAYED_LIST[PR_RULE]*/
void r86resize(T86* C,T2 a1);
/*DS_ARRAYED_LIST[PR_RULE]*/
void r86move_last_cursors_after(T86* C);
/*DS_ARRAYED_LIST[PR_RULE]*/
void r86cursor_start(T86* C,T0* a1);
/*DS_ARRAYED_LIST[PR_RULE]*/
T0* r86twin(T86* C);
/*DS_ARRAYED_LIST[PR_RULE]*/
T0* r86new_cursor(T86* C);
/*DS_ARRAYED_LIST[PR_RULE]*/
T6 r86is_full(T86* C);
/*DS_ARRAYED_LIST[PR_RULE]*/
void r86put_last(T86* C,T0* a1);
/*DS_ARRAYED_LIST[PR_RULE]*/
T6 r86cursor_off(T0* a1);
/*DS_ARRAYED_LIST_CURSOR[PR_RULE]*/
T6 r475valid_position(T475* C,T2 a1);
/*DS_ARRAYED_LIST_CURSOR[PR_RULE]*/
T0* r475item(T475* C);
/*DS_ARRAYED_LIST_CURSOR[PR_RULE]*/
T6 r475after(T475* C);
/*DS_ARRAYED_LIST_CURSOR[PR_RULE]*/
T2 r475index(T475* C);
/*DS_ARRAYED_LIST_CURSOR[PR_RULE]*/
T6 r475off(T475* C);
/*DS_HASH_TABLE[DS_ARRAYED_LIST[PR_STATE],INTEGER]*/
void r387make_clashes(T387* C,T2 a1);
/*DS_HASH_TABLE[DS_ARRAYED_LIST[PR_STATE],INTEGER]*/
void r387put(T387* C,T0* a1,T2 a2);
/*DS_HASH_TABLE[DS_ARRAYED_LIST[PR_STATE],INTEGER]*/
void r387search_position(T387* C,T2 a1);
/*DS_HASH_TABLE[DS_ARRAYED_LIST[PR_STATE],INTEGER]*/
void r387keys_resize(T387* C,T2 a1);
/*DS_HASH_TABLE[DS_ARRAYED_LIST[PR_STATE],INTEGER]*/
T0* r387item(T387* C,T2 a1);
/*DS_HASH_TABLE[DS_ARRAYED_LIST[PR_STATE],INTEGER]*/
void r387make_items(T387* C,T2 a1);
/*DS_HASH_TABLE[DS_ARRAYED_LIST[PR_STATE],INTEGER]*/
void r387make(T387* C,T2 a1);
/*DS_HASH_TABLE[DS_ARRAYED_LIST[PR_STATE],INTEGER]*/
T6 r387has(T387* C,T2 a1);
/*DS_HASH_TABLE[DS_ARRAYED_LIST[PR_STATE],INTEGER]*/
void r387make_keys(T387* C,T2 a1);
/*DS_HASH_TABLE[DS_ARRAYED_LIST[PR_STATE],INTEGER]*/
T2 r387hash_position(T387* C,T2 a1);
/*DS_HASH_TABLE[DS_ARRAYED_LIST[PR_STATE],INTEGER]*/
void r387items_resize(T387* C,T2 a1);
/*DS_HASH_TABLE[DS_ARRAYED_LIST[PR_STATE],INTEGER]*/
void r387make_with_equality_testers(T387* C,T2 a1,T0* a2,T0* a3);
/*DS_HASH_TABLE[DS_ARRAYED_LIST[PR_STATE],INTEGER]*/
void r387resize(T387* C,T2 a1);
/*DS_HASH_TABLE[DS_ARRAYED_LIST[PR_STATE],INTEGER]*/
void r387clashes_resize(T387* C,T2 a1);
/*DS_HASH_TABLE[DS_ARRAYED_LIST[PR_STATE],INTEGER]*/
void r387slots_resize(T387* C,T2 a1);
/*DS_HASH_TABLE[DS_ARRAYED_LIST[PR_STATE],INTEGER]*/
T0* r387new_cursor(T387* C);
/*DS_HASH_TABLE[DS_ARRAYED_LIST[PR_STATE],INTEGER]*/
void r387make_slots(T387* C,T2 a1);
/*DS_HASH_TABLE[DS_ARRAYED_LIST[PR_STATE],INTEGER]*/
T6 r387is_full(T387* C);
/*DS_HASH_TABLE[DS_ARRAYED_LIST[PR_STATE],INTEGER]*/
T2 r387new_modulus(T2 a1);
/*DS_HASH_TABLE_CURSOR[PR_VARIABLE,STRING]*/
void r594make(T594* C,T0* a1);
/*KL_FIXED_ARRAY_ROUTINES[DS_NESTED_LIST[PR_RULE]]*/
T0* r427make(T2 a1);
/*KL_FIXED_ARRAY_ROUTINES[DS_NESTED_LIST[PR_RULE]]*/
T0* r427resize(T0* a1,T2 a2);
/*DS_LINKED_LIST_CURSOR[PR_TRANSITION]*/
void r212set(T212* C,T0* a1,T6 a2,T6 a3);
/*DS_LINKED_LIST_CURSOR[PR_TRANSITION]*/
void r212make(T212* C,T0* a1);
/*DS_LINKED_LIST_CURSOR[PR_TRANSITION]*/
void r212set_after(T212* C);
/*KL_FIXED_ARRAY_ROUTINES[PR_ERROR_ACTION]*/
T0* r566make(T2 a1);
/*KL_FIXED_ARRAY_ROUTINES[PR_ERROR_ACTION]*/
T0* r566resize(T0* a1,T2 a2);
/*DS_HASH_TABLE_CURSOR[PR_TOKEN,STRING]*/
T6 r598valid_position(T598* C,T2 a1);
/*DS_HASH_TABLE_CURSOR[PR_TOKEN,STRING]*/
T0* r598item(T598* C);
/*DS_HASH_TABLE_CURSOR[PR_TOKEN,STRING]*/
T6 r598after(T598* C);
/*DS_HASH_TABLE_CURSOR[PR_TOKEN,STRING]*/
void r598make(T598* C,T0* a1);
/*DS_HASH_TABLE_CURSOR[PR_TOKEN,STRING]*/
T6 r598off(T598* C);
/*DS_LINKED_LIST[PR_REDUCTION]*/
T6 r350valid_cursor(T350* C,T0* a1);
/*DS_LINKED_LIST[PR_REDUCTION]*/
void r350append_last(T350* C,T0* a1);
/*DS_LINKED_LIST[PR_REDUCTION]*/
T0* r350cursor_item(T0* a1);
/*DS_LINKED_LIST[PR_REDUCTION]*/
void r350remove_traversing_cursor(T350* C,T0* a1);
/*DS_LINKED_LIST[PR_REDUCTION]*/
void r350add_traversing_cursor(T350* C,T0* a1);
/*DS_LINKED_LIST[PR_REDUCTION]*/
void r350make(T350* C);
/*DS_LINKED_LIST[PR_REDUCTION]*/
T6 r350cursor_after(T0* a1);
/*DS_LINKED_LIST[PR_REDUCTION]*/
void r350cursor_forth(T350* C,T0* a1);
/*DS_LINKED_LIST[PR_REDUCTION]*/
void r350make_from_linear(T350* C,T0* a1);
/*DS_LINKED_LIST[PR_REDUCTION]*/
void r350cursor_start(T350* C,T0* a1);
/*DS_LINKED_LIST[PR_REDUCTION]*/
T0* r350new_cursor(T350* C);
/*DS_LINKED_LIST[PR_REDUCTION]*/
T6 r350cursor_off(T0* a1);
/*KL_FIXED_ARRAY_ROUTINES[PR_REDUCTION]*/
T0* r378make(T2 a1);
/*KL_FIXED_ARRAY_ROUTINES[PR_REDUCTION]*/
T0* r378resize(T0* a1,T2 a2);
/*DS_ARRAYED_LIST_CURSOR[PR_STATE]*/
T6 r339valid_position(T339* C,T2 a1);
/*DS_ARRAYED_LIST[PR_STATE]*/
T2 r79new_capacity(T2 a1);
/*DS_ARRAYED_LIST[PR_STATE]*/
T6 r79extendible(T79* C,T2 a1);
/*DS_ARRAYED_LIST[PR_STATE]*/
void r79move_cursors_right(T79* C,T2 a1,T2 a2);
/*DS_ARRAYED_LIST[PR_STATE]*/
T0* r79last(T79* C);
/*DS_ARRAYED_LIST[PR_STATE]*/
void r79put(T79* C,T0* a1,T2 a2);
/*DS_ARRAYED_LIST[PR_STATE]*/
void r79move_left(T79* C,T2 a1,T2 a2);
/*DS_ARRAYED_LIST[PR_STATE]*/
void r79make(T79* C,T2 a1);
/*DS_ARRAYED_LIST[PR_STATE]*/
void r79remove(T79* C,T2 a1);
/*DS_ARRAYED_LIST[PR_STATE]*/
void r79move_cursors_left(T79* C,T2 a1);
/*DS_ARRAYED_LIST[PR_STATE]*/
void r79remove_last(T79* C);
/*DS_ARRAYED_LIST[PR_STATE]*/
void r79move_right(T79* C,T2 a1,T2 a2);
/*DS_ARRAYED_LIST[PR_STATE]*/
void r79resize(T79* C,T2 a1);
/*DS_ARRAYED_LIST[PR_STATE]*/
void r79move_last_cursors_after(T79* C);
/*DS_ARRAYED_LIST[PR_STATE]*/
void r79force_last(T79* C,T0* a1);
/*DS_ARRAYED_LIST[PR_STATE]*/
T0* r79new_cursor(T79* C);
/*DS_ARRAYED_LIST[PR_STATE]*/
void r79put_last(T79* C,T0* a1);
/*DS_BUBBLE_SORTER[PR_PORTION]*/
void r197subsort_with_comparator(T0* a1,T0* a2,T2 a3,T2 a4);
/*DS_BUBBLE_SORTER[PR_PORTION]*/
void r197sort_with_comparator(T0* a1,T0* a2);
/*DS_ARRAYED_LIST[PR_POSITION]*/
T6 r278extendible(T278* C,T2 a1);
/*DS_ARRAYED_LIST[PR_POSITION]*/
void r278make_equal(T278* C,T2 a1);
/*DS_ARRAYED_LIST[PR_POSITION]*/
void r278make(T278* C,T2 a1);
/*DS_ARRAYED_LIST[PR_POSITION]*/
T6 r278has(T278* C,T0* a1);
/*DS_ARRAYED_LIST[PR_POSITION]*/
void r278resize(T278* C,T2 a1);
/*DS_ARRAYED_LIST[PR_POSITION]*/
T0* r278new_cursor(T278* C);
/*DS_ARRAYED_LIST[PR_POSITION]*/
T6 r278is_full(T278* C);
/*DS_ARRAYED_LIST[PR_POSITION]*/
void r278put_last(T278* C,T0* a1);
/*DS_HASH_TABLE_CURSOR[PR_TYPE,STRING]*/
void r588make(T588* C,T0* a1);
/*KL_FIXED_ARRAY_ROUTINES[PR_STATE]*/
T0* r374make(T2 a1);
/*KL_FIXED_ARRAY_ROUTINES[PR_STATE]*/
T0* r374resize(T0* a1,T2 a2);
/*DS_BUBBLE_SORTER[PR_POSITION]*/
void r398subsort_with_comparator(T0* a1,T0* a2,T2 a3,T2 a4);
/*DS_BUBBLE_SORTER[PR_POSITION]*/
void r398sort_with_comparator(T0* a1,T0* a2);
/*DS_HASH_TABLE[PR_VARIABLE,STRING]*/
T2 r531new_capacity(T2 a1);
/*DS_HASH_TABLE[PR_VARIABLE,STRING]*/
void r531force(T531* C,T0* a1,T0* a2);
/*DS_HASH_TABLE[PR_VARIABLE,STRING]*/
void r531make_clashes(T531* C,T2 a1);
/*DS_HASH_TABLE[PR_VARIABLE,STRING]*/
void r531search_position(T531* C,T0* a1);
/*DS_HASH_TABLE[PR_VARIABLE,STRING]*/
void r531keys_resize(T531* C,T2 a1);
/*DS_HASH_TABLE[PR_VARIABLE,STRING]*/
T0* r531item(T531* C,T0* a1);
/*DS_HASH_TABLE[PR_VARIABLE,STRING]*/
void r531make_items(T531* C,T2 a1);
/*DS_HASH_TABLE[PR_VARIABLE,STRING]*/
void r531make(T531* C,T2 a1);
/*DS_HASH_TABLE[PR_VARIABLE,STRING]*/
T6 r531has(T531* C,T0* a1);
/*DS_HASH_TABLE[PR_VARIABLE,STRING]*/
void r531make_keys(T531* C,T2 a1);
/*DS_HASH_TABLE[PR_VARIABLE,STRING]*/
T2 r531hash_position(T531* C,T0* a1);
/*DS_HASH_TABLE[PR_VARIABLE,STRING]*/
void r531items_resize(T531* C,T2 a1);
/*DS_HASH_TABLE[PR_VARIABLE,STRING]*/
void r531make_with_equality_testers(T531* C,T2 a1,T0* a2,T0* a3);
/*DS_HASH_TABLE[PR_VARIABLE,STRING]*/
void r531resize(T531* C,T2 a1);
/*DS_HASH_TABLE[PR_VARIABLE,STRING]*/
void r531clashes_resize(T531* C,T2 a1);
/*DS_HASH_TABLE[PR_VARIABLE,STRING]*/
void r531slots_resize(T531* C,T2 a1);
/*DS_HASH_TABLE[PR_VARIABLE,STRING]*/
T0* r531new_cursor(T531* C);
/*DS_HASH_TABLE[PR_VARIABLE,STRING]*/
void r531make_slots(T531* C,T2 a1);
/*DS_HASH_TABLE[PR_VARIABLE,STRING]*/
T2 r531new_modulus(T2 a1);
/*KL_ARRAY_ROUTINES[INTEGER]*/
void r180subcopy(T0* a1,T0* a2,T2 a3,T2 a4,T2 a5);
/*KL_ARRAY_ROUTINES[INTEGER]*/
T0* r180subarray(T0* a1,T2 a2,T2 a3,T2 a4);
/*DS_LINKED_LIST[PR_TOKEN]*/
T6 r318valid_cursor(T318* C,T0* a1);
/*DS_LINKED_LIST[PR_TOKEN]*/
T0* r318cursor_item(T0* a1);
/*DS_LINKED_LIST[PR_TOKEN]*/
void r318remove_traversing_cursor(T318* C,T0* a1);
/*DS_LINKED_LIST[PR_TOKEN]*/
void r318cursor_go_after(T318* C,T0* a1);
/*DS_LINKED_LIST[PR_TOKEN]*/
void r318add_traversing_cursor(T318* C,T0* a1);
/*DS_LINKED_LIST[PR_TOKEN]*/
void r318make(T318* C);
/*DS_LINKED_LIST[PR_TOKEN]*/
T6 r318cursor_after(T0* a1);
/*DS_LINKED_LIST[PR_TOKEN]*/
T6 r318has(T318* C,T0* a1);
/*DS_LINKED_LIST[PR_TOKEN]*/
void r318cursor_search_forth(T318* C,T0* a1,T0* a2);
/*DS_LINKED_LIST[PR_TOKEN]*/
void r318cursor_forth(T318* C,T0* a1);
/*DS_LINKED_LIST[PR_TOKEN]*/
void r318cursor_start(T318* C,T0* a1);
/*DS_LINKED_LIST[PR_TOKEN]*/
void r318force_last(T318* C,T0* a1);
/*DS_LINKED_LIST[PR_TOKEN]*/
T0* r318new_cursor(T318* C);
/*DS_LINKED_LIST[PR_TOKEN]*/
T6 r318cursor_off(T0* a1);
/*KL_EQUALITY_TESTER[PR_RULE]*/
T6 r314test(T0* a1,T0* a2);
/*DS_PAIR[STRING,INTEGER]*/
void r530make(T530* C,T0* a1,T2 a2);
/*KL_FIXED_ARRAY_ROUTINES[PR_PORTION]*/
T0* r262make(T2 a1);
/*DS_ARRAYED_LIST_CURSOR[PR_REDUCTION]*/
T6 r377valid_position(T377* C,T2 a1);
/*DS_ARRAYED_LIST_CURSOR[PR_REDUCTION]*/
T0* r377item(T377* C);
/*DS_ARRAYED_LIST_CURSOR[PR_REDUCTION]*/
T6 r377after(T377* C);
/*DS_ARRAYED_LIST_CURSOR[PR_REDUCTION]*/
T6 r377off(T377* C);
/*DS_LINKED_LIST_CURSOR[PR_RULE]*/
void r404set(T404* C,T0* a1,T6 a2,T6 a3);
/*DS_LINKED_LIST_CURSOR[PR_RULE]*/
void r404make(T404* C,T0* a1);
/*DS_LINKED_LIST_CURSOR[PR_RULE]*/
void r404set_after(T404* C);
/*DS_ARRAYED_LIST[PR_ERROR_ACTION]*/
T6 r293extendible(T293* C,T2 a1);
/*DS_ARRAYED_LIST[PR_ERROR_ACTION]*/
void r293make(T293* C,T2 a1);
/*DS_ARRAYED_LIST[PR_ERROR_ACTION]*/
void r293resize(T293* C,T2 a1);
/*DS_ARRAYED_LIST[PR_ERROR_ACTION]*/
T0* r293new_cursor(T293* C);
/*DS_ARRAYED_LIST[PR_ERROR_ACTION]*/
T6 r293is_full(T293* C);
/*DS_ARRAYED_LIST[PR_ERROR_ACTION]*/
void r293put_last(T293* C,T0* a1);
/*DS_LINKED_LIST_CURSOR[PR_REDUCTION]*/
void r358set(T358* C,T0* a1,T6 a2,T6 a3);
/*DS_LINKED_LIST_CURSOR[PR_REDUCTION]*/
void r358make(T358* C,T0* a1);
/*DS_ARRAYED_LIST_CURSOR[PR_VARIABLE]*/
T6 r472valid_position(T472* C,T2 a1);
/*DS_ARRAYED_LIST_CURSOR[PR_VARIABLE]*/
T0* r472item(T472* C);
/*DS_ARRAYED_LIST_CURSOR[PR_VARIABLE]*/
T6 r472after(T472* C);
/*DS_ARRAYED_LIST_CURSOR[PR_VARIABLE]*/
T2 r472index(T472* C);
/*DS_ARRAYED_LIST_CURSOR[PR_VARIABLE]*/
T6 r472off(T472* C);
/*DS_ARRAYED_LIST[PR_REDUCTION]*/
T6 r248valid_cursor(T248* C,T0* a1);
/*DS_ARRAYED_LIST[PR_REDUCTION]*/
T6 r248extendible(T248* C,T2 a1);
/*DS_ARRAYED_LIST[PR_REDUCTION]*/
T0* r248cursor_item(T248* C,T0* a1);
/*DS_ARRAYED_LIST[PR_REDUCTION]*/
void r248remove_traversing_cursor(T248* C,T0* a1);
/*DS_ARRAYED_LIST[PR_REDUCTION]*/
void r248add_traversing_cursor(T248* C,T0* a1);
/*DS_ARRAYED_LIST[PR_REDUCTION]*/
T6 r248cursor_before(T0* a1);
/*DS_ARRAYED_LIST[PR_REDUCTION]*/
void r248make(T248* C,T2 a1);
/*DS_ARRAYED_LIST[PR_REDUCTION]*/
T6 r248cursor_after(T0* a1);
/*DS_ARRAYED_LIST[PR_REDUCTION]*/
void r248cursor_forth(T248* C,T0* a1);
/*DS_ARRAYED_LIST[PR_REDUCTION]*/
void r248resize(T248* C,T2 a1);
/*DS_ARRAYED_LIST[PR_REDUCTION]*/
void r248cursor_start(T248* C,T0* a1);
/*DS_ARRAYED_LIST[PR_REDUCTION]*/
T0* r248new_cursor(T248* C);
/*DS_ARRAYED_LIST[PR_REDUCTION]*/
void r248put_last(T248* C,T0* a1);
/*DS_ARRAYED_LIST[PR_REDUCTION]*/
T6 r248cursor_off(T0* a1);
/*KL_FIXED_ARRAY_ROUTINES[PR_TOKEN]*/
T0* r269make(T2 a1);
/*KL_FIXED_ARRAY_ROUTINES[PR_TOKEN]*/
T0* r269resize(T0* a1,T2 a2);
/*DS_ARRAYED_LIST[PR_SYMBOL]*/
T6 r263extendible(T263* C,T2 a1);
/*DS_ARRAYED_LIST[PR_SYMBOL]*/
void r263make(T263* C,T2 a1);
/*DS_ARRAYED_LIST[PR_SYMBOL]*/
T6 r263has(T263* C,T0* a1);
/*DS_ARRAYED_LIST[PR_SYMBOL]*/
void r263resize(T263* C,T2 a1);
/*DS_ARRAYED_LIST[PR_SYMBOL]*/
T0* r263new_cursor(T263* C);
/*DS_ARRAYED_LIST[PR_SYMBOL]*/
T6 r263is_full(T263* C);
/*DS_ARRAYED_LIST[PR_SYMBOL]*/
void r263put_last(T263* C,T0* a1);
/*DS_LINKED_LIST_CURSOR[PR_CONFLICT]*/
void r341set(T341* C,T0* a1,T6 a2,T6 a3);
/*DS_LINKED_LIST_CURSOR[PR_CONFLICT]*/
void r341make(T341* C,T0* a1);
/*KL_EQUALITY_TESTER[PR_TOKEN]*/
T6 r268test(T0* a1,T0* a2);
/*DS_HASH_TABLE[PR_TOKEN,STRING]*/
T2 r524new_capacity(T2 a1);
/*DS_HASH_TABLE[PR_TOKEN,STRING]*/
T6 r524valid_cursor(T524* C,T0* a1);
/*DS_HASH_TABLE[PR_TOKEN,STRING]*/
void r524force(T524* C,T0* a1,T0* a2);
/*DS_HASH_TABLE[PR_TOKEN,STRING]*/
T6 r524valid_slot(T524* C,T2 a1);
/*DS_HASH_TABLE[PR_TOKEN,STRING]*/
void r524make_clashes(T524* C,T2 a1);
/*DS_HASH_TABLE[PR_TOKEN,STRING]*/
T6 r524valid_position(T524* C,T2 a1);
/*DS_HASH_TABLE[PR_TOKEN,STRING]*/
T0* r524cursor_item(T524* C,T0* a1);
/*DS_HASH_TABLE[PR_TOKEN,STRING]*/
void r524search_position(T524* C,T0* a1);
/*DS_HASH_TABLE[PR_TOKEN,STRING]*/
void r524remove_traversing_cursor(T524* C,T0* a1);
/*DS_HASH_TABLE[PR_TOKEN,STRING]*/
void r524keys_resize(T524* C,T2 a1);
/*DS_HASH_TABLE[PR_TOKEN,STRING]*/
void r524cursor_go_after(T524* C,T0* a1);
/*DS_HASH_TABLE[PR_TOKEN,STRING]*/
T0* r524item(T524* C,T0* a1);
/*DS_HASH_TABLE[PR_TOKEN,STRING]*/
void r524make_items(T524* C,T2 a1);
/*DS_HASH_TABLE[PR_TOKEN,STRING]*/
void r524add_traversing_cursor(T524* C,T0* a1);
/*DS_HASH_TABLE[PR_TOKEN,STRING]*/
T6 r524has_item(T524* C,T0* a1);
/*DS_HASH_TABLE[PR_TOKEN,STRING]*/
void r524make(T524* C,T2 a1);
/*DS_HASH_TABLE[PR_TOKEN,STRING]*/
T6 r524cursor_after(T0* a1);
/*DS_HASH_TABLE[PR_TOKEN,STRING]*/
T6 r524has(T524* C,T0* a1);
/*DS_HASH_TABLE[PR_TOKEN,STRING]*/
void r524make_keys(T524* C,T2 a1);
/*DS_HASH_TABLE[PR_TOKEN,STRING]*/
void r524cursor_search_forth(T524* C,T0* a1,T0* a2);
/*DS_HASH_TABLE[PR_TOKEN,STRING]*/
T2 r524hash_position(T524* C,T0* a1);
/*DS_HASH_TABLE[PR_TOKEN,STRING]*/
void r524cursor_forth(T524* C,T0* a1);
/*DS_HASH_TABLE[PR_TOKEN,STRING]*/
void r524items_resize(T524* C,T2 a1);
/*DS_HASH_TABLE[PR_TOKEN,STRING]*/
void r524make_with_equality_testers(T524* C,T2 a1,T0* a2,T0* a3);
/*DS_HASH_TABLE[PR_TOKEN,STRING]*/
void r524resize(T524* C,T2 a1);
/*DS_HASH_TABLE[PR_TOKEN,STRING]*/
void r524cursor_start(T524* C,T0* a1);
/*DS_HASH_TABLE[PR_TOKEN,STRING]*/
void r524clashes_resize(T524* C,T2 a1);
/*DS_HASH_TABLE[PR_TOKEN,STRING]*/
void r524slots_resize(T524* C,T2 a1);
/*DS_HASH_TABLE[PR_TOKEN,STRING]*/
T0* r524new_cursor(T524* C);
/*DS_HASH_TABLE[PR_TOKEN,STRING]*/
void r524make_slots(T524* C,T2 a1);
/*DS_HASH_TABLE[PR_TOKEN,STRING]*/
T2 r524new_modulus(T2 a1);
/*DS_HASH_TABLE[PR_TOKEN,STRING]*/
T6 r524cursor_off(T0* a1);
/*DS_NESTED_LIST_FLATTENER[PR_TOKEN]*/
void r348traverse(T0* a1,T0* a2);
/*DS_NESTED_LIST_FLATTENER[PR_TOKEN]*/
void r348flatten(T0* a1);
/*KL_FIXED_ARRAY_ROUTINES[PR_SYMBOL]*/
T0* r574make(T2 a1);
/*KL_FIXED_ARRAY_ROUTINES[PR_SYMBOL]*/
T0* r574resize(T0* a1,T2 a2);
/*DS_NESTED_LIST_FLATTENER[PR_RULE]*/
void r414traverse(T0* a1,T0* a2);
/*DS_NESTED_LIST_FLATTENER[PR_RULE]*/
void r414flatten(T0* a1);
/*KL_FIXED_ARRAY_ROUTINES[DS_ARRAYED_LIST[PR_STATE]]*/
T0* r402make(T2 a1);
/*KL_FIXED_ARRAY_ROUTINES[DS_ARRAYED_LIST[PR_STATE]]*/
T0* r402resize(T0* a1,T2 a2);
/*KL_COMPARABLE_COMPARATOR[PR_PORTION]*/
T6 r196less_than(T0* a1,T0* a2);
/*KL_FIXED_ARRAY_ROUTINES[STRING]*/
T0* r535make(T2 a1);
/*KL_FIXED_ARRAY_ROUTINES[STRING]*/
T0* r535resize(T0* a1,T2 a2);
/*KL_EQUALITY_TESTER[INTEGER]*/
T6 r390test(T2 a1,T2 a2);
/*DS_HASH_SET[PR_TYPE]*/
T6 r108valid_cursor(T108* C,T0* a1);
/*DS_HASH_SET[PR_TYPE]*/
T6 r108extendible(T108* C,T2 a1);
/*DS_HASH_SET[PR_TYPE]*/
void r108make_clashes(T108* C,T2 a1);
/*DS_HASH_SET[PR_TYPE]*/
T6 r108valid_slot(T108* C,T2 a1);
/*DS_HASH_SET[PR_TYPE]*/
T6 r108valid_position(T108* C,T2 a1);
/*DS_HASH_SET[PR_TYPE]*/
void r108put(T108* C,T0* a1);
/*DS_HASH_SET[PR_TYPE]*/
T0* r108cursor_item(T108* C,T0* a1);
/*DS_HASH_SET[PR_TYPE]*/
void r108search_position(T108* C,T0* a1);
/*DS_HASH_SET[PR_TYPE]*/
void r108remove_traversing_cursor(T108* C,T0* a1);
/*DS_HASH_SET[PR_TYPE]*/
void r108make_items(T108* C,T2 a1);
/*DS_HASH_SET[PR_TYPE]*/
void r108add_traversing_cursor(T108* C,T0* a1);
/*DS_HASH_SET[PR_TYPE]*/
void r108make(T108* C,T2 a1);
/*DS_HASH_SET[PR_TYPE]*/
T6 r108cursor_after(T0* a1);
/*DS_HASH_SET[PR_TYPE]*/
T2 r108hash_position(T108* C,T0* a1);
/*DS_HASH_SET[PR_TYPE]*/
void r108cursor_forth(T108* C,T0* a1);
/*DS_HASH_SET[PR_TYPE]*/
void r108cursor_start(T108* C,T0* a1);
/*DS_HASH_SET[PR_TYPE]*/
T0* r108new_cursor(T108* C);
/*DS_HASH_SET[PR_TYPE]*/
void r108make_slots(T108* C,T2 a1);
/*DS_HASH_SET[PR_TYPE]*/
T2 r108new_modulus(T2 a1);
/*DS_HASH_SET[PR_TYPE]*/
T6 r108cursor_off(T0* a1);
/*DS_LINKED_LIST_CURSOR[PR_VARIABLE]*/
void r536set(T536* C,T0* a1,T6 a2,T6 a3);
/*DS_LINKED_LIST_CURSOR[PR_VARIABLE]*/
void r536make(T536* C,T0* a1);
/*DS_LINKED_LIST_CURSOR[PR_VARIABLE]*/
void r536set_after(T536* C);
/*KL_FIXED_ARRAY_ROUTINES[PR_POSITION]*/
T0* r309make(T2 a1);
/*KL_FIXED_ARRAY_ROUTINES[PR_POSITION]*/
T0* r309resize(T0* a1,T2 a2);
/*DS_HASH_SET_CURSOR[PR_TYPE]*/
T6 r107valid_position(T107* C,T2 a1);
/*DS_HASH_SET_CURSOR[PR_TYPE]*/
T0* r107item(T107* C);
/*DS_HASH_SET_CURSOR[PR_TYPE]*/
T6 r107after(T107* C);
/*DS_HASH_SET_CURSOR[PR_TYPE]*/
void r107make(T107* C,T0* a1);
/*KL_FIXED_ARRAY_ROUTINES[PR_RULE]*/
T0* r537make(T2 a1);
/*KL_FIXED_ARRAY_ROUTINES[PR_RULE]*/
T0* r537resize(T0* a1,T2 a2);
/*DS_ARRAYED_LIST[PR_TYPE]*/
T2 r66new_capacity(T2 a1);
/*DS_ARRAYED_LIST[PR_TYPE]*/
void r66copy(T66* C,T0* a1);
/*DS_ARRAYED_LIST[PR_TYPE]*/
T6 r66extendible(T66* C,T2 a1);
/*DS_ARRAYED_LIST[PR_TYPE]*/
T6 r66is_equal(T66* C,T0* a1);
/*DS_ARRAYED_LIST[PR_TYPE]*/
void r66move_all_cursors_after(T66* C);
/*DS_ARRAYED_LIST[PR_TYPE]*/
T6 r66se_assigned_from(T0* a1);
/*DS_ARRAYED_LIST[PR_TYPE]*/
T0* r66clone(T0* a1);
/*DS_ARRAYED_LIST[PR_TYPE]*/
T6 r66same_type(T66* C,T0* a1);
/*DS_ARRAYED_LIST[PR_TYPE]*/
void r66make(T66* C,T2 a1);
/*DS_ARRAYED_LIST[PR_TYPE]*/
T6 r66conforms_to(T66* C,T0* a1);
/*DS_ARRAYED_LIST[PR_TYPE]*/
T6 r66has(T66* C,T0* a1);
/*DS_ARRAYED_LIST[PR_TYPE]*/
void r66resize(T66* C,T2 a1);
/*DS_ARRAYED_LIST[PR_TYPE]*/
T0* r66twin(T66* C);
/*DS_ARRAYED_LIST[PR_TYPE]*/
void r66force_last(T66* C,T0* a1);
/*DS_ARRAYED_LIST[PR_TYPE]*/
T0* r66new_cursor(T66* C);
/*DS_ARRAYED_LIST[PR_TYPE]*/
T6 r66is_full(T66* C);
/*DS_ARRAYED_LIST[PR_TYPE]*/
void r66put_last(T66* C,T0* a1);
/*DS_ARRAYED_LIST_CURSOR[PR_TYPE]*/
T6 r545valid_position(T545* C,T2 a1);
/*KL_EQUALITY_TESTER[PR_VARIABLE]*/
T6 r591test(T0* a1,T0* a2);
/*KL_COMPARABLE_COMPARATOR[PR_POSITION]*/
T6 r397less_than(T0* a1,T0* a2);
/*KL_FIXED_ARRAY_ROUTINES[DS_ARRAYED_LIST[PR_VARIABLE]]*/
T0* r463make(T2 a1);
/*KL_EQUALITY_TESTER[PR_TYPE]*/
T6 r124test(T0* a1,T0* a2);
/*DS_LINKED_LIST[PR_RULE]*/
T6 r410valid_cursor(T410* C,T0* a1);
/*DS_LINKED_LIST[PR_RULE]*/
void r410append_last(T410* C,T0* a1);
/*DS_LINKED_LIST[PR_RULE]*/
T0* r410cursor_item(T0* a1);
/*DS_LINKED_LIST[PR_RULE]*/
void r410remove_traversing_cursor(T410* C,T0* a1);
/*DS_LINKED_LIST[PR_RULE]*/
void r410cursor_go_after(T410* C,T0* a1);
/*DS_LINKED_LIST[PR_RULE]*/
void r410add_traversing_cursor(T410* C,T0* a1);
/*DS_LINKED_LIST[PR_RULE]*/
void r410make(T410* C);
/*DS_LINKED_LIST[PR_RULE]*/
T6 r410cursor_after(T0* a1);
/*DS_LINKED_LIST[PR_RULE]*/
T6 r410has(T410* C,T0* a1);
/*DS_LINKED_LIST[PR_RULE]*/
void r410cursor_search_forth(T410* C,T0* a1,T0* a2);
/*DS_LINKED_LIST[PR_RULE]*/
void r410cursor_forth(T410* C,T0* a1);
/*DS_LINKED_LIST[PR_RULE]*/
void r410make_from_linear(T410* C,T0* a1);
/*DS_LINKED_LIST[PR_RULE]*/
void r410cursor_start(T410* C,T0* a1);
/*DS_LINKED_LIST[PR_RULE]*/
void r410force_last(T410* C,T0* a1);
/*DS_LINKED_LIST[PR_RULE]*/
T0* r410new_cursor(T410* C);
/*DS_LINKED_LIST[PR_RULE]*/
T6 r410cursor_off(T0* a1);
/*DS_ARRAYED_LIST[DS_ARRAYED_LIST[PR_VARIABLE]]*/
void r450clear_items(T450* C,T2 a1,T2 a2);
/*DS_ARRAYED_LIST[DS_ARRAYED_LIST[PR_VARIABLE]]*/
T6 r450extendible(T450* C,T2 a1);
/*DS_ARRAYED_LIST[DS_ARRAYED_LIST[PR_VARIABLE]]*/
void r450wipe_out(T450* C);
/*DS_ARRAYED_LIST[DS_ARRAYED_LIST[PR_VARIABLE]]*/
void r450move_all_cursors_after(T450* C);
/*DS_ARRAYED_LIST[DS_ARRAYED_LIST[PR_VARIABLE]]*/
void r450make(T450* C,T2 a1);
/*DS_ARRAYED_LIST[DS_ARRAYED_LIST[PR_VARIABLE]]*/
T0* r450new_cursor(T450* C);
/*DS_ARRAYED_LIST[DS_ARRAYED_LIST[PR_VARIABLE]]*/
void r450put_last(T450* C,T0* a1);
/*KL_FIXED_ARRAY_ROUTINES[DS_NESTED_LIST[PR_TOKEN]]*/
T0* r369make(T2 a1);
/*KL_FIXED_ARRAY_ROUTINES[DS_NESTED_LIST[PR_TOKEN]]*/
T0* r369resize(T0* a1,T2 a2);
/*DS_HASH_TABLE_CURSOR[DS_ARRAYED_LIST[PR_STATE],INTEGER]*/
void r448make(T448* C,T0* a1);
/*DS_BUBBLE_SORTER[INTEGER]*/
T6 r215sorted(T215* C,T0* a1);
/*DS_BUBBLE_SORTER[INTEGER]*/
T6 r215sorted_with_comparator(T0* a1,T0* a2);
/*DS_BUBBLE_SORTER[INTEGER]*/
T6 r215subsorted_with_comparator(T0* a1,T0* a2,T2 a3,T2 a4);
/*DS_ARRAYED_LIST[INTEGER]*/
T6 r176extendible(T176* C,T2 a1);
/*DS_ARRAYED_LIST[INTEGER]*/
T2 r176last(T176* C);
/*DS_ARRAYED_LIST[INTEGER]*/
void r176make(T176* C,T2 a1);
/*DS_ARRAYED_LIST[INTEGER]*/
T6 r176sorted(T176* C,T0* a1);
/*DS_ARRAYED_LIST[INTEGER]*/
T0* r176new_cursor(T176* C);
/*DS_ARRAYED_LIST[INTEGER]*/
void r176put_last(T176* C,T2 a1);
/*KL_EQUALITY_TESTER[PR_TRANSITION]*/
T6 r624test(T0* a1,T0* a2);
extern T0*oBC13string_;
extern T0*oBC15arguments;
extern int fBC15arguments;
/*PR_STRING_TOKEN_DEFINED_TWICE_ERROR*/
T0* r551arguments(void);
/*PR_STRING_TOKEN_DEFINED_TWICE_ERROR*/
void r551make(T551* C,T0* a1,T2 a2,T0* a3,T0* a4,T0* a5);
/*PR_STRING_TOKEN_DEFINED_TWICE_ERROR*/
T0* r551message(T551* C,T0* a1);
/*PR_STRING_TOKEN_DEFINED_TWICE_ERROR*/
T0* r551default_message(T551* C);
/*PR_NULL_INTEGER_ERROR*/
T0* r514arguments(void);
/*PR_NULL_INTEGER_ERROR*/
void r514make(T514* C,T0* a1,T2 a2);
/*PR_NULL_INTEGER_ERROR*/
T0* r514message(T514* C,T0* a1);
/*PR_NULL_INTEGER_ERROR*/
T0* r514default_message(T514* C);
/*PR_INVALID_DOLLAR_DOLLAR_ERROR*/
T0* r517arguments(void);
/*PR_INVALID_DOLLAR_DOLLAR_ERROR*/
void r517make(T517* C,T0* a1,T2 a2);
/*PR_INVALID_DOLLAR_DOLLAR_ERROR*/
T0* r517message(T517* C,T0* a1);
/*PR_INVALID_DOLLAR_DOLLAR_ERROR*/
T0* r517default_message(T517* C);
/*KL_TEXT_INPUT_FILE*/
T6 r477is_closed(T477* C);
/*KL_TEXT_INPUT_FILE*/
void r477old_close(T477* C);
/*KL_TEXT_INPUT_FILE*/
T2 r477read_to_string(T477* C,T0* a1,T2 a2,T2 a3);
/*KL_TEXT_INPUT_FILE*/
void r477open_read(T477* C);
/*KL_TEXT_INPUT_FILE*/
void r477old_read_character(T477* C);
/*KL_TEXT_INPUT_FILE*/
void r477read_character(T477* C);
/*KL_TEXT_INPUT_FILE*/
void r477fill_buffer(T477* C);
/*KL_TEXT_INPUT_FILE*/
void r477close(T477* C);
/*KL_TEXT_INPUT_FILE*/
T2 r477_483Pread_to_buffer(T477* C,T0* a1,T2 a2,T2 a3);
/*KL_TEXT_INPUT_FILE*/
void r477make(T477* C,T0* a1);
/*KL_TEXT_INPUT_FILE*/
T2 r477read_to_buffer(T477* C,T0* a1,T2 a2,T2 a3);
/*KL_TEXT_INPUT_FILE*/
void r477connect_to(T477* C,T0* a1);
/*KL_TEXT_INPUT_FILE*/
void r477old_open_read(T477* C);
/*PR_MISSING_CHARACTERS_ERROR*/
T0* r512arguments(void);
/*PR_MISSING_CHARACTERS_ERROR*/
void r512make(T512* C,T0* a1,T2 a2,T0* a3);
/*PR_MISSING_CHARACTERS_ERROR*/
T0* r512message(T512* C,T0* a1);
/*PR_MISSING_CHARACTERS_ERROR*/
T0* r512default_message(T512* C);
/*UT_VERSION_NUMBER*/
T0* r618arguments(void);
/*UT_VERSION_NUMBER*/
void r618make(T618* C,T0* a1);
/*UT_VERSION_NUMBER*/
T0* r618message(T618* C,T0* a1);
/*UT_VERSION_NUMBER*/
T0* r618default_message(T618* C);
/*PR_ACTION*/
T6 r576is_equal(T576* C,T0* a1);
/*PR_ACTION*/
T6 r576se_assigned_from(T0* a1);
/*PR_ACTION*/
void r576out_in_tagged_out_memory(T576* C);
/*PR_ACTION*/
T6 r576same_type(T576* C,T0* a1);
/*PR_ACTION*/
T6 r576conforms_to(T576* C,T0* a1);
/*PR_TOKEN_DECLARED_TWICE_ERROR*/
T0* r547arguments(void);
/*PR_TOKEN_DECLARED_TWICE_ERROR*/
void r547make(T547* C,T0* a1,T2 a2,T0* a3);
/*PR_TOKEN_DECLARED_TWICE_ERROR*/
T0* r547message(T547* C,T0* a1);
/*PR_TOKEN_DECLARED_TWICE_ERROR*/
T0* r547default_message(T547* C);
/*KL_STDIN_FILE*/
T2 r584read_to_string(T584* C,T0* a1,T2 a2,T2 a3);
/*KL_STDIN_FILE*/
void r584old_read_character(T584* C);
/*KL_STDIN_FILE*/
void r584read_character(T584* C);
/*KL_STDIN_FILE*/
void r584fill_buffer(T584* C);
/*KL_STDIN_FILE*/
T2 r584_483Pread_to_buffer(T584* C,T0* a1,T2 a2,T2 a3);
/*KL_STDIN_FILE*/
void r584make(T584* C);
/*KL_STDIN_FILE*/
T2 r584read_to_buffer(T584* C,T0* a1,T2 a2,T2 a3);
extern T0*oBC20std_output;
/*KL_STDIN_FILE*/
void r584old_make(T584* C);
/*PR_TYPE*/
void r65append_dollar_n_to_string(T65* C,T2 a1,T2 a2,T0* a3);
/*PR_TYPE*/
T6 r65is_equal(T65* C,T0* a1);
extern T0*oBC42integer_formatter_;
/*PR_TYPE*/
void r65make_generic(T65* C,T2 a1,T0* a2,T0* a3);
/*PR_TYPE*/
void r65append_untyped_dollar_n_to_string(T2 a1,T2 a2,T0* a3);
/*PR_TYPE*/
void r65append_untyped_dollar_dollar_to_string(T0* a1);
/*PR_TYPE*/
void r65make(T65* C,T2 a1,T0* a2);
/*PR_TYPE*/
void r65print_dollar_dollar_declaration(T65* C,T0* a1);
/*PR_TYPE*/
void r65print_dollar_dollar_finalization(T65* C,T0* a1);
/*PR_TYPE*/
void r65print_conversion_routine(T65* C,T0* a1);
/*PR_TYPE*/
T0* r65twin(T65* C);
/*PR_TYPE*/
void r65append_dollar_dollar_to_string(T65* C,T0* a1);
/*PR_TYPE*/
void r65make_anchored(T65* C,T2 a1,T0* a2);
/*UT_ERROR_HANDLER*/
void r146report_warning_message(T146* C,T0* a1);
extern T0*oBC14std;
/*UT_ERROR_HANDLER*/
T0* r146message(T0* a1);
/*UT_ERROR_HANDLER*/
void r146report_info_message(T146* C,T0* a1);
/*UT_ERROR_HANDLER*/
void r146make_standard(T146* C);
/*UT_ERROR_HANDLER*/
void r146report_error_message(T146* C,T0* a1);
/*KL_CHARACTER_BUFFER*/
T0* r583substring(T583* C,T2 a1,T2 a2);
/*KL_CHARACTER_BUFFER*/
void r583fill_from_string(T583* C,T0* a1,T2 a2);
/*KL_CHARACTER_BUFFER*/
T2 r583fill_from_stream(T583* C,T0* a1,T2 a2,T2 a3);
/*KL_CHARACTER_BUFFER*/
void r583move_left(T583* C,T2 a1,T2 a2,T2 a3);
/*KL_CHARACTER_BUFFER*/
void r583make(T583* C,T2 a1);
/*KL_CHARACTER_BUFFER*/
void r583resize(T583* C,T2 a1);
/*UT_MESSAGE*/
T0* r292arguments(void);
/*UT_MESSAGE*/
void r292make(T292* C,T0* a1);
/*UT_MESSAGE*/
T0* r292message(T292* C,T0* a1);
/*UT_MESSAGE*/
T0* r292default_message(T292* C);
/*KL_TEXT_OUTPUT_FILE*/
T6 r21is_closed(T21* C);
/*KL_TEXT_OUTPUT_FILE*/
void r21old_close(T21* C);
/*KL_TEXT_OUTPUT_FILE*/
void r21old_open_write(T21* C);
/*KL_TEXT_OUTPUT_FILE*/
void r21close(T21* C);
/*KL_TEXT_OUTPUT_FILE*/
void r21make(T21* C,T0* a1);
/*KL_TEXT_OUTPUT_FILE*/
void r21old_put_string(T21* C,T0* a1);
/*KL_TEXT_OUTPUT_FILE*/
void r21old_put_character(T21* C,T3 a1);
/*KL_TEXT_OUTPUT_FILE*/
void r21connect_to(T21* C,T0* a1);
/*KL_TEXT_OUTPUT_FILE*/
void r21put_integer(T21* C,T2 a1);
/*KL_TEXT_OUTPUT_FILE*/
void r21put_line(T21* C,T0* a1);
/*KL_TEXT_OUTPUT_FILE*/
void r21old_make(T21* C);
/*KL_TEXT_OUTPUT_FILE*/
void r21open_write(T21* C);
/*KL_TEXT_OUTPUT_FILE*/
void r21write_buffer(T21* C);
/*PR_PREC_SPECIFIED_TWICE_ERROR*/
T0* r581arguments(void);
/*PR_PREC_SPECIFIED_TWICE_ERROR*/
void r581make(T581* C,T0* a1,T2 a2);
/*PR_PREC_SPECIFIED_TWICE_ERROR*/
T0* r581message(T581* C,T0* a1);
/*PR_PREC_SPECIFIED_TWICE_ERROR*/
T0* r581default_message(T581* C);
/*PR_PREC_NOT_TOKEN_ERROR*/
T0* r582arguments(void);
/*PR_PREC_NOT_TOKEN_ERROR*/
void r582make(T582* C,T0* a1,T2 a2,T0* a3);
/*PR_PREC_NOT_TOKEN_ERROR*/
T0* r582message(T582* C,T0* a1);
/*PR_PREC_NOT_TOKEN_ERROR*/
T0* r582default_message(T582* C);
/*PR_INVALID_STRING_TOKEN_ERROR*/
T0* r516arguments(void);
/*PR_INVALID_STRING_TOKEN_ERROR*/
void r516make(T516* C,T0* a1,T2 a2,T0* a3);
/*PR_INVALID_STRING_TOKEN_ERROR*/
T0* r516message(T516* C,T0* a1);
/*PR_INVALID_STRING_TOKEN_ERROR*/
T0* r516default_message(T516* C);
/*PR_RULE*/
void r85put_symbol(T85* C,T0* a1);
/*PR_RULE*/
T6 r85is_equal(T85* C,T0* a1);
/*PR_RULE*/
void r85print_rule(T85* C,T0* a1);
/*PR_RULE*/
void r85make(T85* C,T2 a1,T0* a2,T0* a3);
/*PR_RULE*/
T6 r85_ix_60(T85* C,T0* a1);
/*PR_YACC_PARSER*/
void r486report_multiple_start_declarations_error(T486* C);
/*PR_YACC_PARSER*/
void r486yy_do_action(T486* C,T2 a1);
/*PR_YACC_PARSER*/
void r486report_variable_declared_as_token_error(T486* C,T0* a1);
/*PR_YACC_PARSER*/
T0* r486cloned_string(T0* a1);
extern T0*oBC488unknown_type;
extern int fBC488unknown_type;
/*PR_YACC_PARSER*/
T0* r486unknown_type(void);
extern T0*oBC486yytable_template;
extern int fBC486yytable_template;
/*PR_YACC_PARSER*/
T0* r486yytable_template(void);
/*PR_YACC_PARSER*/
T0* r486new_symbol(T486* C,T0* a1);
/*PR_YACC_PARSER*/
void r486make_parser_skeleton(T486* C);
/*PR_YACC_PARSER*/
void r486report_undefined_string_token_error(T486* C,T0* a1);
/*PR_YACC_PARSER*/
void r486report_start_symbol_token_error(T486* C);
/*PR_YACC_PARSER*/
T2 r486yy_at_beginning_of_line(T486* C);
/*PR_YACC_PARSER*/
T0* r486new_nonassoc_char_terminal(T486* C,T0* a1,T2 a2);
/*PR_YACC_PARSER*/
void r486fatal_error(T0* a1);
/*PR_YACC_PARSER*/
T0* r486new_type(T486* C,T0* a1);
/*PR_YACC_PARSER*/
T0* r486yytype1(T0* a1);
/*PR_YACC_PARSER*/
T2 r486yytype2(T0* a1);
/*PR_YACC_PARSER*/
T0* r486yytype3(T0* a1);
/*PR_YACC_PARSER*/
T0* r486yytype4(T0* a1);
/*PR_YACC_PARSER*/
T0* r486yytype5(T0* a1);
/*PR_YACC_PARSER*/
void r486put_symbol(T486* C,T0* a1,T0* a2);
/*PR_YACC_PARSER*/
T2 r486start_condition(T486* C);
/*PR_YACC_PARSER*/
void r486yy_do_error_action(T486* C,T2 a1);
extern T0*oBC495no_action;
extern int fBC495no_action;
/*PR_YACC_PARSER*/
T0* r486no_action(T486* C);
/*PR_YACC_PARSER*/
void r486report_two_strings_token_error(T486* C,T0* a1,T0* a2,T0* a3);
/*PR_YACC_PARSER*/
void r486parse_file(T486* C,T0* a1);
/*PR_YACC_PARSER*/
void r486parse(T486* C);
/*PR_YACC_PARSER*/
void r486report_invalid_dollar_dollar_error(T486* C);
/*PR_YACC_PARSER*/
T0* r486new_rule(T486* C,T0* a1);
/*PR_YACC_PARSER*/
void r486report_dangerous_dollar_n_warning(T486* C,T2 a1);
/*PR_YACC_PARSER*/
T0* r486new_dummy_variable(T486* C);
/*PR_YACC_PARSER*/
void r486set_input_buffer(T486* C,T0* a1);
/*PR_YACC_PARSER*/
T0* r486new_char_terminal(T486* C,T0* a1,T0* a2);
/*PR_YACC_PARSER*/
T2 r486yy_translate(T486* C,T2 a1);
/*PR_YACC_PARSER*/
void r486report_prec_not_token_error(T486* C,T0* a1);
extern T0*oBC487yy_ec_template;
extern int fBC487yy_ec_template;
/*PR_YACC_PARSER*/
T0* r486yy_ec_template(void);
/*PR_YACC_PARSER*/
T0* r486text_substring(T486* C,T2 a1,T2 a2);
/*PR_YACC_PARSER*/
void r486yy_execute_action(T486* C,T2 a1);
extern T0*oBC486yytranslate_template;
extern int fBC486yytranslate_template;
/*PR_YACC_PARSER*/
T0* r486yytranslate_template(void);
extern T0*oBC487yy_def_template;
extern int fBC487yy_def_template;
/*PR_YACC_PARSER*/
T0* r486yy_def_template(void);
/*PR_YACC_PARSER*/
void r486set_token_id(T486* C,T0* a1,T2 a2);
/*PR_YACC_PARSER*/
void r486process_dollar_n(T486* C,T2 a1,T2 a2,T0* a3);
/*PR_YACC_PARSER*/
T3 r486text_item(T486* C,T2 a1);
/*PR_YACC_PARSER*/
T0* r486new_anchored_type(T486* C,T0* a1);
/*PR_YACC_PARSER*/
void r486report_token_declared_twice_error(T486* C,T0* a1);
/*PR_YACC_PARSER*/
void r486yy_load_input_buffer(T486* C);
/*PR_YACC_PARSER*/
void r486report_undefined_symbol_error(T486* C,T0* a1);
/*PR_YACC_PARSER*/
void r486report_variable_declared_twice_error(T486* C,T0* a1);
extern T0*oBC486yyr1_template;
extern int fBC486yyr1_template;
/*PR_YACC_PARSER*/
T0* r486yyr1_template(void);
/*PR_YACC_PARSER*/
void r486make_with_buffer(T486* C,T0* a1);
/*PR_YACC_PARSER*/
T0* r486new_nonterminal(T486* C,T0* a1,T0* a2);
/*PR_YACC_PARSER*/
void r486process_rule(T486* C,T0* a1);
/*PR_YACC_PARSER*/
T2 r486yy_null_trans_state(T486* C,T2 a1);
/*PR_YACC_PARSER*/
T0* r486new_variable(T486* C,T0* a1);
extern T0*oBC487yy_accept_template;
extern int fBC487yy_accept_template;
/*PR_YACC_PARSER*/
T0* r486yy_accept_template(void);
/*PR_YACC_PARSER*/
T0* r486new_error_action(T486* C,T0* a1,T2 a2);
/*PR_YACC_PARSER*/
void r486read_token(T486* C);
/*PR_YACC_PARSER*/
void r486report_invalid_dollar_n_error(T486* C,T2 a1);
/*PR_YACC_PARSER*/
T0* r486new_token(T486* C,T0* a1);
extern T0*oBC486yyr2_template;
extern int fBC486yyr2_template;
/*PR_YACC_PARSER*/
T0* r486yyr2_template(void);
/*PR_YACC_PARSER*/
T0* r486new_basic_type(T486* C,T0* a1);
extern T0*oBC495no_type;
extern int fBC495no_type;
/*PR_YACC_PARSER*/
T0* r486no_type(void);
/*PR_YACC_PARSER*/
T2 r486yy_previous_state(T486* C);
extern T0*oBC486yypgoto_template;
extern int fBC486yypgoto_template;
/*PR_YACC_PARSER*/
T0* r486yypgoto_template(void);
/*PR_YACC_PARSER*/
void r486yy_refill_input_buffer(T486* C);
/*PR_YACC_PARSER*/
T0* r486yy_fixed_array(T0* a1);
extern T0*oBC487yy_meta_template;
extern int fBC487yy_meta_template;
/*PR_YACC_PARSER*/
T0* r486yy_meta_template(void);
/*PR_YACC_PARSER*/
void r486process_symbols(T486* C);
/*PR_YACC_PARSER*/
void r486report_prec_specified_twice_error(T486* C);
/*PR_YACC_PARSER*/
T6 r486is_terminal(T486* C,T0* a1);
extern T0*oBC487yy_base_template;
extern int fBC487yy_base_template;
/*PR_YACC_PARSER*/
T0* r486yy_base_template(void);
/*PR_YACC_PARSER*/
void r486initialize_grammar(T486* C);
/*PR_YACC_PARSER*/
void r486report_two_token_ids_token_error(T486* C,T0* a1,T2 a2,T2 a3);
/*PR_YACC_PARSER*/
T2 r486text_count(T486* C);
/*PR_YACC_PARSER*/
T0* r486new_file_buffer(T0* a1);
/*PR_YACC_PARSER*/
T0* r486new_string_token(T486* C,T0* a1);
/*PR_YACC_PARSER*/
void r486yy_initialize(T486* C);
/*PR_YACC_PARSER*/
T0* r486text(T486* C);
/*PR_YACC_PARSER*/
void r486report_token_id_used_twice_warning(T486* C,T0* a1,T0* a2);
/*PR_YACC_PARSER*/
void r486report_rule_declared_twice_warning(T486* C,T0* a1);
/*PR_YACC_PARSER*/
void r486report_no_rules_error(T486* C);
/*PR_YACC_PARSER*/
void r486set_start_symbol(T486* C);
/*PR_YACC_PARSER*/
void r486set_precedence(T486* C,T0* a1,T2 a2);
/*PR_YACC_PARSER*/
void r486make_yacc_scanner(T486* C,T0* a1);
/*PR_YACC_PARSER*/
void r486report_lhs_symbol_token_error(T486* C,T0* a1);
extern T0*oBC487yy_nxt_template;
extern int fBC487yy_nxt_template;
/*PR_YACC_PARSER*/
T0* r486yy_nxt_template(void);
/*PR_YACC_PARSER*/
T0* r486new_left_char_terminal(T486* C,T0* a1,T2 a2);
/*PR_YACC_PARSER*/
void r486yy_build_parser_tables(T486* C);
/*PR_YACC_PARSER*/
void r486report_missing_characters_error(T486* C,T0* a1);
/*PR_YACC_PARSER*/
T6 r486valid_start_condition(T2 a1);
/*PR_YACC_PARSER*/
T0* r486new_generic_type(T486* C,T0* a1,T0* a2);
/*PR_YACC_PARSER*/
void r486report_unknown_start_symbol_error(T486* C);
extern T0*oBC494empty_buffer;
extern int fBC494empty_buffer;
/*PR_YACC_PARSER*/
T0* r486empty_buffer(void);
/*PR_YACC_PARSER*/
void r486report_error(T486* C,T0* a1);
/*PR_YACC_PARSER*/
void r486process_dollar_dollar(T486* C,T0* a1);
/*PR_YACC_PARSER*/
void r486report_token_declared_as_variable_error(T486* C,T0* a1);
/*PR_YACC_PARSER*/
T0* r486new_terminal(T486* C,T0* a1,T0* a2);
/*PR_YACC_PARSER*/
void r486report_invalid_error_n_error(T486* C,T2 a1);
extern T0*oBC486yydefact_template;
extern int fBC486yydefact_template;
/*PR_YACC_PARSER*/
T0* r486yydefact_template(void);
/*PR_YACC_PARSER*/
T0* r486new_nonassoc_terminal(T486* C,T0* a1,T2 a2);
extern T0*oBC487yy_chk_template;
extern int fBC487yy_chk_template;
/*PR_YACC_PARSER*/
T0* r486yy_chk_template(void);
/*PR_YACC_PARSER*/
void r486report_string_token_defined_twice_error(T486* C,T0* a1,T0* a2,T0* a3);
/*PR_YACC_PARSER*/
void r486set_literal_string(T486* C,T0* a1,T0* a2);
extern T0*oBC486yycheck_template;
extern int fBC486yycheck_template;
/*PR_YACC_PARSER*/
T0* r486yycheck_template(void);
/*PR_YACC_PARSER*/
T0* r486new_right_char_terminal(T486* C,T0* a1,T2 a2);
/*PR_YACC_PARSER*/
T0* r486new_char_token(T486* C,T0* a1);
/*PR_YACC_PARSER*/
T0* r486filename(T486* C);
/*PR_YACC_PARSER*/
void r486make(T486* C,T0* a1);
/*PR_YACC_PARSER*/
T0* r486yyfixed_array(T0* a1);
extern T0*oBC486yydefgoto_template;
extern int fBC486yydefgoto_template;
/*PR_YACC_PARSER*/
T0* r486yydefgoto_template(void);
/*PR_YACC_PARSER*/
void r486yy_clear_all(T486* C);
/*PR_YACC_PARSER*/
void r486yy_set_content(T486* C,T0* a1);
/*PR_YACC_PARSER*/
void r486put_action(T486* C,T0* a1,T0* a2);
/*PR_YACC_PARSER*/
void r486report_precedence_defined_twice_error(T486* C,T0* a1);
extern T0*oBC486yypact_template;
extern int fBC486yypact_template;
/*PR_YACC_PARSER*/
T0* r486yypact_template(void);
/*PR_YACC_PARSER*/
void r486report_invalid_string_token_error(T486* C,T0* a1);
/*PR_YACC_PARSER*/
void r486set_start_condition(T486* C,T2 a1);
/*PR_YACC_PARSER*/
void r486yy_execute_eof_action(T486* C,T2 a1);
/*PR_YACC_PARSER*/
T0* r486new_left_terminal(T486* C,T0* a1,T2 a2);
/*PR_YACC_PARSER*/
T6 r486is_nonterminal(T486* C,T0* a1);
/*PR_YACC_PARSER*/
void r486yy_build_tables(T486* C);
/*PR_YACC_PARSER*/
void r486report_null_integer_error(T486* C);
/*PR_YACC_PARSER*/
T0* r486new_right_terminal(T486* C,T0* a1,T2 a2);
/*UT_USAGE_MESSAGE*/
T0* r617arguments(void);
/*UT_USAGE_MESSAGE*/
void r617make(T617* C,T0* a1);
/*UT_USAGE_MESSAGE*/
T0* r617message(T617* C,T0* a1);
/*UT_USAGE_MESSAGE*/
T0* r617default_message(T617* C);
/*PR_DANGEROUS_DOLLAR_N_ERROR*/
T0* r518arguments(void);
/*PR_DANGEROUS_DOLLAR_N_ERROR*/
void r518make(T518* C,T0* a1,T2 a2,T2 a3);
/*PR_DANGEROUS_DOLLAR_N_ERROR*/
T0* r518message(T518* C,T0* a1);
/*PR_DANGEROUS_DOLLAR_N_ERROR*/
T0* r518default_message(T518* C);
/*PR_PARSER_GENERATOR*/
void r41build_action_tables(T41* C);
/*PR_PARSER_GENERATOR*/
void r41print_separated_actions(T41* C,T0* a1);
/*PR_PARSER_GENERATOR*/
void r41print_constants(T41* C,T0* a1);
extern T0*oBC42array_formatter_;
extern T0*oBC41portion_sorter;
extern int fBC41portion_sorter;
/*PR_PARSER_GENERATOR*/
T0* r41portion_sorter(void);
/*PR_PARSER_GENERATOR*/
void r41print_eiffel_array(T41* C,T0* a1,T0* a2,T0* a3);
extern T0*oBC40integer_array_;
/*PR_PARSER_GENERATOR*/
void r41build_yyr(T41* C);
extern T0*oBC42string_formatter_;
/*PR_PARSER_GENERATOR*/
void r41print_eiffel_header(T41* C,T0* a1);
/*PR_PARSER_GENERATOR*/
void r41print_eiffel_tables(T41* C,T0* a1);
/*PR_PARSER_GENERATOR*/
void r41make(T41* C,T0* a1);
/*PR_PARSER_GENERATOR*/
void r41build_yytranslate(T41* C);
/*PR_PARSER_GENERATOR*/
void r41put_yydefact(T41* C,T0* a1,T0* a2);
/*PR_PARSER_GENERATOR*/
void r41put_yydefgoto(T41* C,T0* a1,T0* a2);
/*PR_PARSER_GENERATOR*/
void r41print_build_parser_tables(T0* a1);
/*PR_PARSER_GENERATOR*/
void r41print_eiffel_code(T41* C,T0* a1);
/*PR_PARSER_GENERATOR*/
void r41print_parser(T41* C,T6 a1,T6 a2,T0* a3);
/*PR_PARSER_GENERATOR*/
void r41print_separated_error_actions(T41* C,T0* a1);
/*PR_PARSER_GENERATOR*/
void r41print_conversion_routines(T41* C,T0* a1);
/*PR_PARSER_GENERATOR*/
void r41print_actions(T41* C,T0* a1);
/*PR_PARSER_GENERATOR*/
void r41print_error_actions(T41* C,T0* a1);
/*PR_PARSER_GENERATOR*/
void r41print_token_class(T41* C,T0* a1,T0* a2,T0* a3);
/*PR_PARSER_GENERATOR*/
void r41print_token_codes(T41* C,T0* a1);
/*PR_BASIC_TYPE*/
void r542append_dollar_n_to_string(T542* C,T2 a1,T2 a2,T0* a3);
/*PR_BASIC_TYPE*/
T6 r542is_equal(T542* C,T0* a1);
/*PR_BASIC_TYPE*/
void r542make_generic(T542* C,T2 a1,T0* a2,T0* a3);
/*PR_BASIC_TYPE*/
void r542append_untyped_dollar_n_to_string(T2 a1,T2 a2,T0* a3);
/*PR_BASIC_TYPE*/
void r542append_untyped_dollar_dollar_to_string(T0* a1);
/*PR_BASIC_TYPE*/
void r542make(T542* C,T2 a1,T0* a2);
/*PR_BASIC_TYPE*/
void r542print_dollar_dollar_declaration(T542* C,T0* a1);
/*PR_BASIC_TYPE*/
void r542print_dollar_dollar_finalization(T542* C,T0* a1);
/*PR_BASIC_TYPE*/
void r542print_conversion_routine(T542* C,T0* a1);
/*PR_BASIC_TYPE*/
T0* r542twin(T542* C);
/*PR_BASIC_TYPE*/
void r542append_dollar_dollar_to_string(T542* C,T0* a1);
/*PR_BASIC_TYPE*/
void r542make_anchored(T542* C,T2 a1,T0* a2);
/*PR_PORTION*/
T6 r175order_is_equal(T175* C,T0* a1);
/*PR_PORTION*/
void r175make_state(T175* C,T2 a1,T0* a2,T0* a3);
/*PR_PORTION*/
void r175make_symbol(T175* C,T2 a1,T0* a2,T0* a3);
extern T0*oBC175integer_sorter;
extern int fBC175integer_sorter;
/*PR_PORTION*/
T0* r175integer_sorter(void);
/*PR_PORTION*/
T6 r175same_portion(T175* C,T0* a1);
/*PR_PORTION*/
T6 r175_ix_60(T175* C,T0* a1);
/*PR_SYMBOL_DECLARED_VARIABLE_ERROR*/
T0* r548arguments(void);
/*PR_SYMBOL_DECLARED_VARIABLE_ERROR*/
void r548make(T548* C,T0* a1,T2 a2,T0* a3);
/*PR_SYMBOL_DECLARED_VARIABLE_ERROR*/
T0* r548message(T548* C,T0* a1);
/*PR_SYMBOL_DECLARED_VARIABLE_ERROR*/
T0* r548default_message(T548* C);
/*PR_INVALID_ERROR_N_ERROR*/
T0* r579arguments(void);
/*PR_INVALID_ERROR_N_ERROR*/
void r579make(T579* C,T0* a1,T2 a2,T2 a3);
/*PR_INVALID_ERROR_N_ERROR*/
T0* r579message(T579* C,T0* a1);
/*PR_INVALID_ERROR_N_ERROR*/
T0* r579default_message(T579* C);
/*UT_CANNOT_WRITE_TO_FILE_ERROR*/
T0* r38arguments(void);
/*UT_CANNOT_WRITE_TO_FILE_ERROR*/
void r38make(T38* C,T0* a1);
/*UT_CANNOT_WRITE_TO_FILE_ERROR*/
T0* r38message(T38* C,T0* a1);
/*UT_CANNOT_WRITE_TO_FILE_ERROR*/
T0* r38default_message(T38* C);
/*PR_REDUCTION*/
void r247make(T247* C,T0* a1);
/*PR_REDUCTION*/
void r247build_lookaheads(T247* C);
/*PR_TOKEN_ID_USED_TWICE_ERROR*/
T0* r522arguments(void);
/*PR_TOKEN_ID_USED_TWICE_ERROR*/
void r522make(T522* C,T0* a1,T0* a2,T0* a3,T2 a4);
/*PR_TOKEN_ID_USED_TWICE_ERROR*/
T0* r522message(T522* C,T0* a1);
/*PR_TOKEN_ID_USED_TWICE_ERROR*/
T0* r522default_message(T522* C);
/*PR_NO_RULES_ERROR*/
T0* r555arguments(void);
/*PR_NO_RULES_ERROR*/
void r555make(T555* C,T0* a1);
/*PR_NO_RULES_ERROR*/
T0* r555message(T555* C,T0* a1);
/*PR_NO_RULES_ERROR*/
T0* r555default_message(T555* C);
/*PR_INVALID_DOLLAR_N_ERROR*/
T0* r519arguments(void);
/*PR_INVALID_DOLLAR_N_ERROR*/
void r519make(T519* C,T0* a1,T2 a2,T2 a3);
/*PR_INVALID_DOLLAR_N_ERROR*/
T0* r519message(T519* C,T0* a1);
/*PR_INVALID_DOLLAR_N_ERROR*/
T0* r519default_message(T519* C);
/*PR_MULTIPLE_START_DECLARATIONS_ERROR*/
T0* r538arguments(void);
/*PR_MULTIPLE_START_DECLARATIONS_ERROR*/
void r538make(T538* C,T0* a1,T2 a2);
/*PR_MULTIPLE_START_DECLARATIONS_ERROR*/
T0* r538message(T538* C,T0* a1);
/*PR_MULTIPLE_START_DECLARATIONS_ERROR*/
T0* r538default_message(T538* C);
/*PR_RULE_DECLARED_TWICE_ERROR*/
T0* r578arguments(void);
/*PR_RULE_DECLARED_TWICE_ERROR*/
void r578make(T578* C,T0* a1,T2 a2,T0* a3);
/*PR_RULE_DECLARED_TWICE_ERROR*/
T0* r578message(T578* C,T0* a1);
/*PR_RULE_DECLARED_TWICE_ERROR*/
T0* r578default_message(T578* C);
/*PR_TRANSITION*/
void r210make(T210* C,T0* a1,T0* a2);
/*PR_VARIABLE_DECLARED_TWICE_ERROR*/
T0* r554arguments(void);
/*PR_VARIABLE_DECLARED_TWICE_ERROR*/
void r554make(T554* C,T0* a1,T2 a2,T0* a3);
/*PR_VARIABLE_DECLARED_TWICE_ERROR*/
T0* r554message(T554* C,T0* a1);
/*PR_VARIABLE_DECLARED_TWICE_ERROR*/
T0* r554default_message(T554* C);
/*PR_TOKEN*/
T6 r130is_right_associative(T130* C);
/*PR_TOKEN*/
void r130print_token(T130* C,T0* a1,T0* a2);
/*PR_TOKEN*/
T6 r130is_non_associative(T130* C);
/*PR_TOKEN*/
T6 r130is_equal(T130* C,T0* a1);
/*PR_TOKEN*/
void r130make(T130* C,T2 a1,T0* a2,T0* a3);
/*PR_TOKEN*/
T6 r130has_identifier(T130* C);
/*PR_TOKEN*/
T6 r130is_left_associative(T130* C);
/*PR_TOKEN*/
T0* r130twin(T130* C);
/*PR_FSM*/
void r44make_verbose(T44* C,T0* a1,T0* a2,T0* a3);
/*PR_FSM*/
void r44put_final_state(T44* C);
/*PR_FSM*/
void r44make_default(T44* C,T0* a1);
/*PR_FSM*/
void r44print_machine(T44* C,T0* a1);
/*PR_FSM*/
void r44resolve_conflicts(T44* C,T0* a1);
/*PR_FSM*/
void r44build_nondeterministic(T44* C);
/*PR_FSM*/
void r44make(T44* C,T0* a1,T0* a2);
/*PR_FSM*/
T6 r44equal(T0* a1,T0* a2);
/*PR_FSM*/
void r44set_error_actions_verbose(T44* C,T0* a1,T0* a2);
/*PR_FSM*/
void r44resolve_conflicts_verbose(T44* C,T0* a1,T0* a2);
extern T0*oBC44no_type;
extern int fBC44no_type;
/*PR_FSM*/
T0* r44no_type(void);
/*PR_FSM*/
void r44put_closure_positions(T0* a1,T0* a2);
/*PR_FSM*/
void r44set_error_actions(T44* C,T0* a1);
/*PR_FSM*/
void r44build_transitions(T44* C,T0* a1);
/*PR_FSM*/
void r44build_deterministic(T44* C);
/*PR_FSM*/
void r44put_start_state(T44* C);
/*PR_FSM*/
void r44build_derives(T44* C);
/*PR_FSM*/
T0* r44new_state(T44* C,T0* a1);
/*PR_VARIABLE*/
void r87put_rule(T87* C,T0* a1);
/*PR_VARIABLE*/
T6 r87is_equal(T87* C,T0* a1);
/*PR_VARIABLE*/
T0* r87transition(T87* C,T0* a1);
/*PR_VARIABLE*/
void r87make(T87* C,T2 a1,T0* a2,T0* a3);
/*PR_VARIABLE*/
T0* r87twin(T87* C);
/*PR_VARIABLE*/
void r87print_variable(T87* C,T0* a1,T0* a2);
/*PR_STATE*/
void r78put_position(T78* C,T0* a1);
extern T0*oBC78position_sorter;
extern int fBC78position_sorter;
/*PR_STATE*/
T0* r78position_sorter(void);
/*PR_STATE*/
void r78remove_shift(T78* C,T0* a1);
/*PR_STATE*/
T6 r78has_shift(T78* C,T0* a1);
/*PR_STATE*/
void r78print_state(T78* C,T0* a1);
/*PR_STATE*/
T6 r78se_assigned_from(T0* a1);
/*PR_STATE*/
T0* r78resolve_conflicts(T78* C);
/*PR_STATE*/
T6 r78same_type(T78* C,T0* a1);
/*PR_STATE*/
void r78make(T78* C,T2 a1,T0* a2);
/*PR_STATE*/
void r78set_lookahead_needed(T78* C);
/*PR_STATE*/
void r78put_transition(T78* C,T0* a1,T0* a2);
/*PR_STATE*/
T2 r78reduce_reduce_count(T78* C);
/*PR_STATE*/
T6 r78conforms_to(T78* C,T0* a1);
/*PR_STATE*/
T0* r78shift(T78* C,T0* a1);
/*PR_STATE*/
T6 r78same_state(T78* C,T0* a1);
/*PR_STATE*/
void r78print_reductions(T78* C,T0* a1);
/*PR_STATE*/
T2 r78shift_reduce_count(T78* C);
/*PR_UNKNOWN_START_SYMBOL_ERROR*/
T0* r534arguments(void);
/*PR_UNKNOWN_START_SYMBOL_ERROR*/
void r534make(T534* C,T0* a1,T2 a2,T0* a3);
/*PR_UNKNOWN_START_SYMBOL_ERROR*/
T0* r534message(T534* C,T0* a1);
/*PR_UNKNOWN_START_SYMBOL_ERROR*/
T0* r534default_message(T534* C);
/*YY_BUFFER*/
void r507set_position(T507* C,T2 a1,T2 a2,T2 a3);
/*YY_BUFFER*/
void r507make(T507* C,T0* a1);
/*YY_BUFFER*/
void r507make_from_buffer(T507* C,T0* a1);
/*YY_BUFFER*/
T0* r507new_default_buffer(T2 a1);
/*PR_START_SYMBOL_TOKEN_ERROR*/
T0* r529arguments(void);
/*PR_START_SYMBOL_TOKEN_ERROR*/
void r529make(T529* C,T0* a1,T2 a2,T0* a3);
/*PR_START_SYMBOL_TOKEN_ERROR*/
T0* r529message(T529* C,T0* a1);
/*PR_START_SYMBOL_TOKEN_ERROR*/
T0* r529default_message(T529* C);
/*PR_UNDEFINED_STRING_TOKEN_ERROR*/
T0* r580arguments(void);
/*PR_UNDEFINED_STRING_TOKEN_ERROR*/
void r580make(T580* C,T0* a1,T2 a2,T0* a3);
/*PR_UNDEFINED_STRING_TOKEN_ERROR*/
T0* r580message(T580* C,T0* a1);
/*PR_UNDEFINED_STRING_TOKEN_ERROR*/
T0* r580default_message(T580* C);
/*UT_CANNOT_READ_FILE_ERROR*/
T0* r476arguments(void);
/*UT_CANNOT_READ_FILE_ERROR*/
void r476make(T476* C,T0* a1);
/*UT_CANNOT_READ_FILE_ERROR*/
T0* r476message(T476* C,T0* a1);
/*UT_CANNOT_READ_FILE_ERROR*/
T0* r476default_message(T476* C);
/*PR_ACTION_FACTORY*/
T0* r575new_action(T0* a1);
/*PR_TWO_STRINGS_TOKEN_ERROR*/
T0* r550arguments(void);
/*PR_TWO_STRINGS_TOKEN_ERROR*/
void r550make(T550* C,T0* a1,T2 a2,T0* a3,T0* a4,T0* a5);
/*PR_TWO_STRINGS_TOKEN_ERROR*/
T0* r550message(T550* C,T0* a1);
/*PR_TWO_STRINGS_TOKEN_ERROR*/
T0* r550default_message(T550* C);
/*PR_LHS_SYMBOL_TOKEN_ERROR*/
T0* r577arguments(void);
/*PR_LHS_SYMBOL_TOKEN_ERROR*/
void r577make(T577* C,T0* a1,T2 a2,T0* a3);
/*PR_LHS_SYMBOL_TOKEN_ERROR*/
T0* r577message(T577* C,T0* a1);
/*PR_LHS_SYMBOL_TOKEN_ERROR*/
T0* r577default_message(T577* C);
/*UC_STRING*/
void r152copy(T152* C,T0* a1);
/*UC_STRING*/
T0* r152substring(T152* C,T2 a1,T2 a2);
/*UC_STRING*/
void r152reset_byte_index_cache(T152* C);
/*UC_STRING*/
void r152wipe_out(T152* C);
/*UC_STRING*/
T2 r152item_code(T152* C,T2 a1);
/*UC_STRING*/
T3 r152character_item_at_byte_index(T152* C,T2 a1);
/*UC_STRING*/
void r152put(T152* C,T3 a1,T2 a2);
/*UC_STRING*/
T6 r152is_equal(T152* C,T0* a1);
/*UC_STRING*/
T3 r152item(T152* C,T2 a1);
extern T0*oBC138integer_;
/*UC_STRING*/
void r152resize_byte_storage(T152* C,T2 a1);
/*UC_STRING*/
T6 r152valid_index(T152* C,T2 a1);
/*UC_STRING*/
void r152append(T152* C,T0* a1);
/*UC_STRING*/
T6 r152se_assigned_from(T0* a1);
/*UC_STRING*/
T2 r152byte_index(T152* C,T2 a1);
/*UC_STRING*/
T0* r152clone(T0* a1);
/*UC_STRING*/
void r152move_bytes_right(T152* C,T2 a1,T2 a2);
/*UC_STRING*/
void r152set_count(T152* C,T2 a1);
/*UC_STRING*/
T2 r152next_byte_index(T152* C,T2 a1);
/*UC_STRING*/
T6 r152same_type(T152* C,T0* a1);
/*UC_STRING*/
void r152remove_tail(T152* C,T2 a1);
/*UC_STRING*/
void r152make(T152* C,T2 a1);
/*UC_STRING*/
void r152old_make_filled(T152* C,T3 a1,T2 a2);
/*UC_STRING*/
void r152append_substring(T152* C,T0* a1,T2 a2,T2 a3);
/*UC_STRING*/
T2 r152item_code_at_byte_index(T152* C,T2 a1);
extern T0*oBC151platform;
/*UC_STRING*/
T0* r152string(T152* C);
/*UC_STRING*/
void r152extend(T152* C,T3 a1);
/*UC_STRING*/
T2 r152hash_code(T152* C);
/*UC_STRING*/
T0* r152prefixed_string(T152* C,T0* a1);
/*UC_STRING*/
T6 r152conforms_to(T152* C,T0* a1);
/*UC_STRING*/
void r152keep_head(T152* C,T2 a1);
/*UC_STRING*/
T2 r152to_integer(T152* C);
/*UC_STRING*/
T0* r152new_empty_string(T2 a1);
/*UC_STRING*/
void r152append_character(T152* C,T3 a1);
/*UC_STRING*/
void r152make_from_substring(T152* C,T0* a1,T2 a2,T2 a3);
/*UC_STRING*/
void r152put_code_at_byte_index(T152* C,T2 a1,T2 a2,T2 a3);
/*UC_STRING*/
void r152fill_with(T152* C,T3 a1);
/*UC_STRING*/
void r152put_character_at_byte_index(T152* C,T3 a1,T2 a2,T2 a3);
/*UC_STRING*/
void r152resize(T152* C,T2 a1);
/*UC_STRING*/
void r152put_substring_at_byte_index(T152* C,T0* a1,T2 a2,T2 a3,T2 a4,T2 a5);
/*UC_STRING*/
void r152to_upper(T152* C);
extern T0*oBC154utf8;
/*UC_STRING*/
void r152move_bytes_left(T152* C,T2 a1,T2 a2);
/*UC_STRING*/
void r152old_make(T152* C,T2 a1);
/*UC_STRING*/
T8 r152to_external(T152* C);
/*UC_STRING*/
void r152old_make_from_string(T152* C,T0* a1);
/*UC_STRING*/
void r152to_lower(T152* C);
/*UC_STRING*/
T0* r152twin(T152* C);
/*UC_STRING*/
T0* r152to_utf8(T152* C);
/*UC_STRING*/
T0* r152_ix_43(T152* C,T0* a1);
extern T0*oBC149unicode;
/*UC_STRING*/
T2 r152_7Phash_code(T152* C);
/*UC_STRING*/
void r152swap(T152* C,T2 a1,T2 a2);
/*PR_GRAMMAR*/
void r45put_type(T45* C,T0* a1);
/*PR_GRAMMAR*/
void r45mark_useful_rules(T45* C);
/*PR_GRAMMAR*/
void r45put_rule(T45* C,T0* a1);
/*PR_GRAMMAR*/
void r45put_variable(T45* C,T0* a1);
/*PR_GRAMMAR*/
T2 r45max_rhs(T45* C);
/*PR_GRAMMAR*/
T0* r45clone(T0* a1);
/*PR_GRAMMAR*/
void r45make(T45* C);
/*PR_GRAMMAR*/
void r45reduce_verbose(T45* C,T0* a1,T0* a2);
/*PR_GRAMMAR*/
void r45put_token(T45* C,T0* a1);
/*PR_GRAMMAR*/
void r45print_grammar(T45* C,T0* a1);
/*PR_GRAMMAR*/
void r45mark_useful_variables(T45* C);
/*PR_GRAMMAR*/
void r45set_nullable(T45* C);
/*PR_GRAMMAR*/
void r45reduce(T45* C,T0* a1);
/*PR_GRAMMAR*/
void r45traverse_variable(T0* a1);
/*PR_TWO_TOKEN_IDS_TOKEN_ERROR*/
T0* r549arguments(void);
/*PR_TWO_TOKEN_IDS_TOKEN_ERROR*/
void r549make(T549* C,T0* a1,T2 a2,T0* a3,T2 a4,T2 a5);
/*PR_TWO_TOKEN_IDS_TOKEN_ERROR*/
T0* r549message(T549* C,T0* a1);
/*PR_TWO_TOKEN_IDS_TOKEN_ERROR*/
T0* r549default_message(T549* C);
/*PR_NO_TYPE*/
T6 r106is_equal(T106* C,T0* a1);
/*PR_NO_TYPE*/
void r106make_generic(T106* C,T2 a1,T0* a2,T0* a3);
/*PR_NO_TYPE*/
void r106append_untyped_dollar_n_to_string(T2 a1,T2 a2,T0* a3);
/*PR_NO_TYPE*/
void r106append_untyped_dollar_dollar_to_string(T0* a1);
/*PR_NO_TYPE*/
void r106make(T106* C,T2 a1,T0* a2);
/*PR_NO_TYPE*/
T0* r106twin(T106* C);
/*PR_NO_TYPE*/
void r106print_dollar_dollar_initialization(T0* a1);
/*PR_NO_TYPE*/
void r106make_anchored(T106* C,T2 a1,T0* a2);
/*YY_FILE_BUFFER*/
void r506fill(T506* C);
/*YY_FILE_BUFFER*/
void r506compact_left(T506* C);
/*YY_FILE_BUFFER*/
void r506set_position(T506* C,T2 a1,T2 a2,T2 a3);
/*YY_FILE_BUFFER*/
void r506make_from_string(T506* C,T0* a1);
/*YY_FILE_BUFFER*/
void r506make_from_buffer(T506* C,T0* a1);
/*YY_FILE_BUFFER*/
void r506resize(T506* C);
/*YY_FILE_BUFFER*/
T0* r506new_default_buffer(T2 a1);
/*YY_FILE_BUFFER*/
void r506make_with_size(T506* C,T0* a1,T2 a2);
/*YY_FILE_BUFFER*/
void r506set_file(T506* C,T0* a1);
/*YY_FILE_BUFFER*/
void r506flush(T506* C);
/*KL_STDOUT_FILE*/
void r172make(T172* C);
/*KL_STDOUT_FILE*/
void r172old_put_string(T172* C,T0* a1);
/*KL_STDOUT_FILE*/
void r172old_put_character(T172* C,T3 a1);
/*KL_STDOUT_FILE*/
void r172put_integer(T172* C,T2 a1);
/*KL_STDOUT_FILE*/
void r172put_line(T172* C,T0* a1);
/*KL_STDOUT_FILE*/
void r172old_make(T172* C);
/*KL_STDOUT_FILE*/
void r172write_buffer(T172* C);
/*KL_STDOUT_FILE*/
void r172put_string(T172* C,T0* a1);
/*PR_CONFLICT*/
void r315print_conflict(T315* C,T0* a1);
/*PR_CONFLICT*/
void r315make(T315* C,T0* a1,T0* a2,T0* a3,T0* a4);
/*KL_STDERR_FILE*/
void r510make(T510* C);
/*KL_STDERR_FILE*/
void r510old_put_string(T0* a1);
/*KL_STDERR_FILE*/
void r510put_integer(T2 a1);
/*KL_STDERR_FILE*/
void r510put_line(T0* a1);
/*KL_STDERR_FILE*/
void r510put_string(T0* a1);
/*PR_UNDEFINED_SYMBOL_ERROR*/
T0* r521arguments(void);
/*PR_UNDEFINED_SYMBOL_ERROR*/
void r521make(T521* C,T0* a1,T0* a2);
/*PR_UNDEFINED_SYMBOL_ERROR*/
T0* r521message(T521* C,T0* a1);
/*PR_UNDEFINED_SYMBOL_ERROR*/
T0* r521default_message(T521* C);
/*PR_ERROR_ACTION*/
T6 r77is_equal(T77* C,T0* a1);
/*PR_ERROR_ACTION*/
T6 r77se_assigned_from(T0* a1);
/*PR_ERROR_ACTION*/
T6 r77same_type(T77* C,T0* a1);
/*PR_ERROR_ACTION*/
void r77make(T77* C,T0* a1,T2 a2);
/*PR_ERROR_ACTION*/
T6 r77conforms_to(T77* C,T0* a1);
/*PR_ERROR_ACTION*/
T0* r77twin(T77* C);
/*PR_SYMBOL_DECLARED_TOKEN_ERROR*/
T0* r553arguments(void);
/*PR_SYMBOL_DECLARED_TOKEN_ERROR*/
void r553make(T553* C,T0* a1,T2 a2,T0* a3);
/*PR_SYMBOL_DECLARED_TOKEN_ERROR*/
T0* r553message(T553* C,T0* a1);
/*PR_SYMBOL_DECLARED_TOKEN_ERROR*/
T0* r553default_message(T553* C);
/*PR_POSITION*/
T0* r277next(T277* C);
/*PR_POSITION*/
T6 r277is_equal(T277* C,T0* a1);
/*PR_POSITION*/
T6 r277same_position(T277* C,T0* a1);
/*PR_POSITION*/
T0* r277error_action(T277* C);
/*PR_POSITION*/
T6 r277after(T277* C);
/*PR_POSITION*/
void r277make(T277* C,T0* a1,T2 a2);
/*PR_POSITION*/
T2 r277hash_code(T277* C);
/*PR_POSITION*/
T0* r277symbol(T277* C);
/*PR_POSITION*/
void r277print_position(T277* C,T0* a1);
/*PR_POSITION*/
T6 r277_ix_60(T277* C,T0* a1);
/*STD_OUTPUT*/
void r173make(T173* C);
/*STD_OUTPUT*/
void r173flush(T173* C);
/*STD_OUTPUT*/
void r173write_buffer(T173* C);
/*UT_SYNTAX_ERROR*/
T0* r505arguments(void);
/*UT_SYNTAX_ERROR*/
void r505make(T505* C,T0* a1,T2 a2);
/*UT_SYNTAX_ERROR*/
T0* r505message(T505* C,T0* a1);
/*UT_SYNTAX_ERROR*/
T0* r505default_message(T505* C);
extern T0*oBC20command_arguments;
extern int fBC20command_arguments;
/*KL_ARGUMENTS*/
T0* r167command_arguments(void);
/*KL_ARGUMENTS*/
T0* r167argument(T2 a1);
/*PR_PRECEDENCE_DEFINED_TWICE_ERROR*/
T0* r552arguments(void);
/*PR_PRECEDENCE_DEFINED_TWICE_ERROR*/
void r552make(T552* C,T0* a1,T2 a2,T0* a3);
/*PR_PRECEDENCE_DEFINED_TWICE_ERROR*/
T0* r552message(T552* C,T0* a1);
/*PR_PRECEDENCE_DEFINED_TWICE_ERROR*/
T0* r552default_message(T552* C);
extern T0*oBC171error;
extern int fBC171error;
/*KL_STANDARD_FILES*/
T0* r171error(void);
extern T0*oBC171input;
extern int fBC171input;
/*KL_STANDARD_FILES*/
T0* r171input(void);
extern T0*oBC171output;
extern int fBC171output;
/*KL_STANDARD_FILES*/
T0* r171output(void);
extern T2 oBC169maximum_character_code;
extern int fBC169maximum_character_code;
/*KL_PLATFORM*/
T2 r169maximum_character_code(T169* C);
/*reference INTEGER_8*/
T6 r513is_equal(T513* C,T0* a1);
/*reference INTEGER_8*/
T0* r513twin(T513* C);
extern T0*oBC162lowercase_24;
extern int fBC162lowercase_24;
/*UC_UNICODE_ROUTINES*/
T0* r161lowercase_24(void);
extern T0*oBC162lowercase_21;
extern int fBC162lowercase_21;
/*UC_UNICODE_ROUTINES*/
T0* r161lowercase_21(void);
extern T0*oBC162lowercase_06;
extern int fBC162lowercase_06;
/*UC_UNICODE_ROUTINES*/
T0* r161lowercase_06(void);
extern T0*oBC162lowercase_05;
extern int fBC162lowercase_05;
/*UC_UNICODE_ROUTINES*/
T0* r161lowercase_05(void);
extern T0*oBC162lowercase_04;
extern int fBC162lowercase_04;
/*UC_UNICODE_ROUTINES*/
T0* r161lowercase_04(void);
extern T0*oBC162lowercase_03;
extern int fBC162lowercase_03;
/*UC_UNICODE_ROUTINES*/
T0* r161lowercase_03(void);
extern T0*oBC162lowercase_02;
extern int fBC162lowercase_02;
/*UC_UNICODE_ROUTINES*/
T0* r161lowercase_02(void);
extern T0*oBC162lowercase_01;
extern int fBC162lowercase_01;
/*UC_UNICODE_ROUTINES*/
T0* r161lowercase_01(void);
extern T0*oBC162lowercase_00;
extern int fBC162lowercase_00;
/*UC_UNICODE_ROUTINES*/
T0* r161lowercase_00(void);
extern T0*oBC163uppercase_1f;
extern int fBC163uppercase_1f;
/*UC_UNICODE_ROUTINES*/
T0* r161uppercase_1f(void);
extern T0*oBC163uppercase_1e;
extern int fBC163uppercase_1e;
/*UC_UNICODE_ROUTINES*/
T0* r161uppercase_1e(void);
/*UC_UNICODE_ROUTINES*/
T2 r161upper_code(T2 a1);
extern T0*oBC162lowercase_ff;
extern int fBC162lowercase_ff;
/*UC_UNICODE_ROUTINES*/
T0* r161lowercase_ff(void);
extern T0*oBC163uppercase_24;
extern int fBC163uppercase_24;
/*UC_UNICODE_ROUTINES*/
T0* r161uppercase_24(void);
extern T0*oBC163uppercase_21;
extern int fBC163uppercase_21;
/*UC_UNICODE_ROUTINES*/
T0* r161uppercase_21(void);
extern T0*oBC163uppercase_06;
extern int fBC163uppercase_06;
/*UC_UNICODE_ROUTINES*/
T0* r161uppercase_06(void);
extern T0*oBC163uppercase_05;
extern int fBC163uppercase_05;
/*UC_UNICODE_ROUTINES*/
T0* r161uppercase_05(void);
extern T0*oBC163uppercase_04;
extern int fBC163uppercase_04;
/*UC_UNICODE_ROUTINES*/
T0* r161uppercase_04(void);
extern T0*oBC163uppercase_03;
extern int fBC163uppercase_03;
/*UC_UNICODE_ROUTINES*/
T0* r161uppercase_03(void);
extern T0*oBC163uppercase_02;
extern int fBC163uppercase_02;
/*UC_UNICODE_ROUTINES*/
T0* r161uppercase_02(void);
extern T0*oBC163uppercase_01;
extern int fBC163uppercase_01;
/*UC_UNICODE_ROUTINES*/
T0* r161uppercase_01(void);
extern T0*oBC163uppercase_00;
extern int fBC163uppercase_00;
/*UC_UNICODE_ROUTINES*/
T0* r161uppercase_00(void);
extern T0*oBC163uppercase;
extern int fBC163uppercase;
/*UC_UNICODE_ROUTINES*/
T0* r161uppercase(void);
/*UC_UNICODE_ROUTINES*/
T2 r161lower_code(T2 a1);
/*UC_UNICODE_ROUTINES*/
T6 r161valid_code(T2 a1);
extern T0*oBC162lowercase_1f;
extern int fBC162lowercase_1f;
/*UC_UNICODE_ROUTINES*/
T0* r161lowercase_1f(void);
extern T0*oBC162lowercase_1e;
extern int fBC162lowercase_1e;
/*UC_UNICODE_ROUTINES*/
T0* r161lowercase_1e(void);
extern T0*oBC162lowercase;
extern int fBC162lowercase;
/*UC_UNICODE_ROUTINES*/
T0* r161lowercase(void);
extern T0*oBC163uppercase_ff;
extern int fBC163uppercase_ff;
/*UC_UNICODE_ROUTINES*/
T0* r161uppercase_ff(void);
/*UC_UTF8_ROUTINES*/
T2 r165encoded_next_value(T3 a1);
/*UC_UTF8_ROUTINES*/
T2 r165character_byte_count(T3 a1);
/*UC_UTF8_ROUTINES*/
T2 r165encoded_first_value(T3 a1);
/*UC_UTF8_ROUTINES*/
T2 r165code_byte_count(T2 a1);
/*UC_UTF8_ROUTINES*/
T2 r165encoded_byte_count(T3 a1);
/*UC_UTF8_ROUTINES*/
T2 r165substring_byte_count(T0* a1,T2 a2,T2 a3);
/*UT_ARRAY_FORMATTER*/
void r73put_integer_array(T0* a1,T0* a2,T2 a3,T2 a4);
/*KL_INTEGER_ROUTINES*/
T3 r160to_character(T2 a1);
/*UT_INTEGER_FORMATTER*/
void r137append_decimal_integer(T0* a1,T2 a2);
/*UT_INTEGER_FORMATTER*/
void r137put_decimal_integer(T0* a1,T2 a2);
/*reference INTEGER*/
T6 r515is_equal(T515* C,T0* a1);
/*reference INTEGER*/
T0* r515twin(T515* C);
/*GEYACC*/
void r12read_command_line(T12* C);
/*GEYACC*/
T0* r12arguments(void);
/*GEYACC*/
void r12report_usage_message(T12* C);
extern T0*oBC12usage_message;
extern int fBC12usage_message;
/*GEYACC*/
T0* r12usage_message(void);
/*GEYACC*/
void r12parse_input_file(T12* C);
extern T0*oBC16exceptions;
/*GEYACC*/
void r12execute(T12* C);
/*GEYACC*/
void r12report_version_number(T12* C);
/*GEYACC*/
void r12report_usage_error(T12* C);
/*KL_STRING_ROUTINES*/
T0* r148as_string(T0* a1);
/*KL_STRING_ROUTINES*/
T0* r148clone(T0* a1);
/*KL_STRING_ROUTINES*/
T0* r148appended_string(T0* a1,T0* a2);
/*KL_STRING_ROUTINES*/
T6 r148is_integer(T0* a1);
/*KL_STRING_ROUTINES*/
T0* r148make(T2 a1);
/*KL_STRING_ROUTINES*/
T0* r148string(T0* a1);
/*KL_STRING_ROUTINES*/
T0* r148appended_substring(T0* a1,T0* a2,T2 a3,T2 a4);
/*KL_STRING_ROUTINES*/
T0* r148new_empty_string(T0* a1,T2 a2);
/*KL_STRING_ROUTINES*/
T0* r148concat(T0* a1,T0* a2);
/*KL_STRING_ROUTINES*/
T0* r148to_upper(T0* a1);
/*KL_STRING_ROUTINES*/
T0* r148to_lower(T0* a1);
/*KL_STRING_ROUTINES*/
void r148append_substring_to_string(T0* a1,T0* a2,T2 a3,T2 a4);
/*UT_STRING_FORMATTER*/
void r136put_eiffel_string(T0* a1,T0* a2);
extern T12*eiffel_root_object;
extern int se_argc;
extern char**se_argv;
#define SE_MAXID 636
extern T7* g[];
extern T7* t[];
void std_output_flush(void);
void initialize_eiffel_runtime(int argc,char*argv[]);
extern T7*ms548_1849034395;
extern T7*ms292_229;
extern T7*ms553_1729371669;
extern T7*ms521_272755366;
extern T7*ms529_1291418954;
extern T7*ms17_1554;
extern T7*ms41_279;
extern T7*ms578_2110198733;
extern T7*ms549_1151210642;
extern T7*ms552_751424646;
extern T7*ms476_988446515;
extern T7*ms555_110467006;
extern T7*ms38_1606053737;
extern T7*ms618_1158552108;
extern T7*ms577_1049715130;
extern T7*ms516_1349308461;
extern T7*ms505_1449702436;
extern T7*ms73_4992;
extern T7*ms172_10;
extern T7*ms551_473369027;
extern T7*ms581_220658643;
extern T7*ms582_1956876694;
extern T7*ms517_727416569;
extern T7*ms514_1319944131;
extern T7*ms512_559383313;
extern T7*ms534_1366120531;
extern T7*ms617_1515383187;
extern T7*ms152_0;
extern T7*ms550_88402782;
extern T7*ms148_0;
extern T7*ms165_0;
extern T7*ms579_693578480;
extern T7*ms12_331;
extern T7*ms41_1338085634;
extern T7*ms21_10;
extern T7*ms547_2038502230;
extern T7*ms538_1383509722;
extern T7*ms580_165116404;
extern T7*ms73_192;
extern T7*ms73_279;
extern T7*ms510_10;
extern T7*ms26_250860571;
extern T7*ms519_1454279890;
extern T7*ms73_992;
extern T7*ms522_2088248237;
extern T7*ms518_1821517345;
extern T7*ms554_1822824531;
T7*se_ms(int c,char*e);
T7*se_string(char*e);
/*
-- This file is  free  software, which  comes  along  with  SmartEiffel. This
-- software  is  distributed  in the hope that it will be useful, but WITHOUT
-- ANY  WARRANTY;  without  even  the  implied warranty of MERCHANTABILITY or
-- FITNESS  FOR A PARTICULAR PURPOSE. You can modify it as you want, provided
-- this header is kept unaltered, and a notification of the changes is added.
-- You  are  allowed  to  redistribute  it and sell it, alone or as a part of
-- another product.
--       Copyright (C) 1994-2002 LORIA - INRIA - U.H.P. Nancy 1 - FRANCE
--          Dominique COLNET and Suzanne COLLIN - SmartEiffel@loria.fr
--                       http://SmartEiffel.loria.fr
--
*/
/*
  This file (SmartEiffel/sys/runtime/manifest_string_trace.h) is automatically
  included when the -manifest_string_trace command line flag is used.
*/

EIF_STRING se_ms_trace(int count, char* c_string, int li, int co, char* path);
void se_msi1(void);
void*se_ma610(int argc,...);
void*se_ma614(int argc,...);
void*se_ma628(int argc,...);
void*se_ma75(int argc,...);
T0* X407item(T0*C);
T6 X407after(T0*C);
void X407forth(T0*C);
void X407start(T0*C);
void X407go_after(T0*C);
void X407search_forth(T0*C,T0* a1);
void X75put(T0*C,T2 a1,T2 a2);
T2 X75item(T0*C,T2 a1);
void X75resize(T0*C,T2 a1,T2 a2);
T0* X349item(T0*C);
T6 X349after(T0*C);
void X349forth(T0*C);
void X349start(T0*C);
T0* X270item(T0*C);
T6 X270after(T0*C);
void X270forth(T0*C);
void X270start(T0*C);
void X270go_after(T0*C);
void X270search_forth(T0*C,T0* a1);
void X65append_dollar_n_to_string(T0*C,T2 a1,T2 a2,T0* a3);
T6 X65is_equal(T0*C,T0* a1);
void X65print_dollar_dollar_declaration(T0*C,T0* a1);
void X65print_dollar_dollar_finalization(T0*C,T0* a1);
void X65print_conversion_routine(T0*C,T0* a1);
void X65print_dollar_dollar_initialization(T0*C,T0* a1);
void X65append_dollar_dollar_to_string(T0*C,T0* a1);
T0* X418item(T0*C);
T6 X418after(T0*C);
void X418forth(T0*C);
void X418start(T0*C);
void X418go_after(T0*C);
void X418search_forth(T0*C,T0* a1);
T0* X7substring(T0*C,T2 a1,T2 a2);
void X7wipe_out(T0*C);
T2 X7item_code(T0*C,T2 a1);
void X7put(T0*C,T3 a1,T2 a2);
T6 X7is_equal(T0*C,T0* a1);
T3 X7item(T0*C,T2 a1);
void X7append(T0*C,T0* a1);
void X7set_count(T0*C,T2 a1);
T6 X7same_type(T0*C,T0* a1);
void X7remove_tail(T0*C,T2 a1);
void X7append_string(T0*C,T0* a1);
T0* X7string(T0*C);
void X7extend(T0*C,T3 a1);
T2 X7hash_code(T0*C);
T2 X7to_integer(T0*C);
void X7append_character(T0*C,T3 a1);
void X7resize(T0*C,T2 a1);
void X7to_upper(T0*C);
T8 X7to_external(T0*C);
void X7to_lower(T0*C);
T0* X7twin(T0*C);
T0* X7_ix_43(T0*C,T0* a1);
void X7swap(T0*C,T2 a1,T2 a2);
T11 X298item(T0*C);
T0* X416cursor_item(T0*C,T0* a1);
void X416cursor_go_after(T0*C,T0* a1);
T6 X416cursor_after(T0*C,T0* a1);
void X416cursor_search_forth(T0*C,T0* a1,T0* a2);
void X416cursor_forth(T0*C,T0* a1);
void X416cursor_start(T0*C,T0* a1);
T0* X416new_cursor(T0*C);
T6 X416cursor_off(T0*C,T0* a1);
T0* X89name(T0*C);
T6 X89is_equal(T0*C,T0* a1);
T0* X89type(T0*C);
T2 X89id(T0*C);
T6 X89is_terminal(T0*C);
T6 X89is_useful(T0*C);
void X89set_useful(T0*C,T6 a1);
T6 X18is_equal(T0*C,T0* a1);
T0* X18twin(T0*C);
T2 X266count(T0*C);
T0* X266cursor_item(T0*C,T0* a1);
void X266cursor_go_after(T0*C,T0* a1);
T6 X266cursor_after(T0*C,T0* a1);
T6 X266has(T0*C,T0* a1);
void X266cursor_search_forth(T0*C,T0* a1,T0* a2);
void X266cursor_forth(T0*C,T0* a1);
void X266cursor_start(T0*C,T0* a1);
T0* X266new_cursor(T0*C);
T6 X266cursor_off(T0*C,T0* a1);
T6 X20se_assigned_from(T0*C,T0* a1);
T6 X20conforms_to(T0*C,T0* a1);
void X37put_new_line(T0*C);
void X37put_integer(T0*C,T2 a1);
void X37put_line(T0*C,T0* a1);
void X37put_character(T0*C,T3 a1);
void X37put_string(T0*C,T0* a1);
T0* X116container(T0*C);
T0* X482name(T0*C);
T2 X482read_to_string(T0*C,T0* a1,T2 a2,T2 a3);
void X482read_character(T0*C);
T2 X482read_to_buffer(T0*C,T0* a1,T2 a2,T2 a3);
T6 X482end_of_input(T0*C);
T3 X482last_character(T0*C);
T0* X468container(T0*C);
void X507fill(T0*C);
T0* X353cursor_item(T0*C,T0* a1);
T6 X353is_empty(T0*C);
T6 X353cursor_after(T0*C,T0* a1);
void X353cursor_forth(T0*C,T0* a1);
void X353cursor_start(T0*C,T0* a1);
T0* X353new_cursor(T0*C);
T2 X613count(T0*C);
T2 X613item(T0*C,T2 a1);
T2 X515item(T0*C);
void X34put_character(T0*C,T3 a1);
void X34put_string(T0*C,T0* a1);
T0* X312cursor_item(T0*C,T0* a1);
void X312cursor_go_after(T0*C,T0* a1);
T6 X312is_empty(T0*C);
T6 X312cursor_after(T0*C,T0* a1);
T6 X312has(T0*C,T0* a1);
void X312cursor_search_forth(T0*C,T0* a1,T0* a2);
void X312cursor_forth(T0*C,T0* a1);
void X312cursor_start(T0*C,T0* a1);
T0* X312new_cursor(T0*C);
T6 X312cursor_off(T0*C,T0* a1);
T0* X39default_message(T0*C);
T0* X271container(T0*C);
T0* T2toT515(T2 source);
T0* T1toT513(T1 source);
T0* T11toT298(T11 source);

#ifdef __cplusplus
}
#endif
